    Switch MeshUpdateQueue to better data structure

    Ratelimit MeshUpdateQueue::cleanupCache() runs

    Add `minetest.settings` to CSM API and allow CSMs to provide `settingtypes.txt` (#12131)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Use legacy image implementation (no NNAA filter) when not using 9-slice image (#12608)

    Fix some issues in German translation

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 57.3% (839 of 1462 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Vietnamese)

    

    Currently translated at 41.4% (606 of 1462 strings)

    Currently translated at 41.4% (606 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Occitan)

    

    Currently translated at 5.6% (82 of 1462 strings)

    Currently translated at 5.6% (82 of 1462 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 61.1% (894 of 1462 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1462 of 1462 strings)

    Fix rotation of falling facedir nodes (#12587)

    

    in some cases

    in some cases

    Apply NetBSD string conversion workaround to OpenBSD as well (#12618)

    Fix Android blank screen (#12604)

    

    Hardcode the variables to 0 on Android

    Hardcode the variables to 0 on Android

    HUD: Fix wrong minimum scale since 051181f

    

    Caused by wrong interpretation of the settingtypes.txt format

    Caused by wrong interpretation of the settingtypes.txt format

    Fix some warnings (#12615)

    Update German builtin translation

    Update builtin translation files

    Fix media overriding regression (#12602)

    Allow direction keys with autoforward again

    

    This was unintentionally removed in commit 1d69a23.

    fixes #12048

    This was unintentionally removed in commit 1d69a23.

    fixes #12048

    fixes #12048

    Fix lua_api typo: animated_images

    Check minimum Irrlicht version before build

    Centralize IrrlichtMt version used for builds

    

    maybe a submodule would have really been easier...

    maybe a submodule would have really been easier...

    Bump IrrlichtMt

    Let core.get_mod_storage be called multiple times (#12572)

    Util: Use quotation marks for safe path handling

    Mainmenu: Escape server_favorite_delete path

    

    No similar issues were found inside this file.

    No similar issues were found inside this file.

    Use newer NDK r23c for android build

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example

    Translated using Weblate (Occitan)

    

    Currently translated at 5.6% (82 of 1462 strings)

    Currently translated at 1.3% (19 of 1416 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 88.0% (1247 of 1416 strings)

    Added translation using Weblate (Occitan)

    Translated using Weblate (Norwegian Nynorsk)

    

    Currently translated at 36.7% (520 of 1416 strings)

    Currently translated at 36.7% (520 of 1416 strings)

    Translated using Weblate (Latvian)

    

    Currently translated at 26.2% (372 of 1416 strings)

    Currently translated at 26.2% (372 of 1416 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 30.2% (429 of 1416 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 21.0% (298 of 1416 strings)

    Translated using Weblate (Filipino)

    

    Currently translated at 43.5% (616 of 1416 strings)

    Currently translated at 43.5% (616 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.2% (1122 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 90.2% (1278 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 98.5% (1396 of 1416 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 79.8% (1130 of 1416 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.2% (1122 of 1416 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.2% (1122 of 1416 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 99.5% (1410 of 1416 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 61.7% (874 of 1416 strings)

    Translated using Weblate (Malay (Jawi))

    

    Currently translated at 64.6% (916 of 1416 strings)

    Currently translated at 64.6% (916 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.9% (1330 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 98.2% (1391 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 98.6% (1397 of 1416 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 66.5% (943 of 1416 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 57.8% (819 of 1416 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 24.0% (341 of 1416 strings)

    Translated using Weblate (Galician)

    

    Currently translated at 0.6% (9 of 1416 strings)

    Currently translated at 0.6% (9 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 27.9% (396 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.4% (1323 of 1416 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 26.9% (381 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 98.1% (1390 of 1416 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 39.6% (562 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 97.3% (1379 of 1416 strings)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 99.9% (1415 of 1416 strings)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 99.9% (1415 of 1416 strings)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 69.1% (979 of 1416 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 11.0% (157 of 1416 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 58.1% (823 of 1416 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 69.7% (987 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.3% (1322 of 1416 strings)

    Translated using Weblate (Bulgarian)

    

    Currently translated at 31.2% (442 of 1416 strings)

    Currently translated at 31.2% (442 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.2% (1321 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.2% (1321 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 97.8% (1386 of 1416 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 98.4% (1394 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.2% (1320 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 69.5% (985 of 1416 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 98.2% (1391 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Restore flags texture to fix interlaced stereo mode (#12560)

    Offset cuboid origin after scaling the cuboid. (#12558)

    

    This avoids the problem of offset nodes with visual_scale > 1.

    This avoids the problem of offset nodes with visual_scale > 1.

    Fix automatic rotate for attached entities (#12392)

    Remove workaround for normals not matching winding order (#12460)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Enable the gamebar on Android (#12354)

    Deprecate loading a world with unresolved dependencies (#12541)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    More corrections to lua_api.txt (#12505)

    Add check_mod_configuration to main menu

    Refactor ModConfiguration

    Reduce code duplication between c_converter.cpp and helper.cpp

    Remove unnecessary float limits from script API

    

    Leaves a check for NaN and inf.

    Leaves a check for NaN and inf.

    Move f1000 sanitizing to the places that still use this type

    Fix regression & replace more occurrences of vector.new with vector.copy (#12539)

    GUIFormSpecMenu: Fix label multiline translation (#12527)

    Deserialization: Restore backwards compat (#12519)

    Make BlendMode::alpha the fallback for unknown future blend modes

    Animated particlespawners and more (#11545)

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Dmitry Kostenko <codeforsmile@gmail.com>

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Dmitry Kostenko <codeforsmile@gmail.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: Dmitry Kostenko <codeforsmile@gmail.com>

    GUIFormSpecMenu: Fix parameter order

    

    Fixes a regression caused by e51f47461 because C++ implicitly converts boolean to float. no matter what.

    Fixes a regression caused by e51f47461 because C++ implicitly converts boolean to float. no matter what.

    Make `VoxelArea:position()` return a vector with metatable (#12521)

    Sounds: Various little improvements (#12486)

    

    Use SimpleSoundSpec where reasonable (OpenAL)

    Ensure the sound IDs do not underflow or get overwritten -> loop in u16

    Proper use of an enum.

    Use SimpleSoundSpec where reasonable (OpenAL)

    Ensure the sound IDs do not underflow or get overwritten -> loop in u16

    Proper use of an enum.

    Ensure the sound IDs do not underflow or get overwritten -> loop in u16

    Proper use of an enum.

    Proper use of an enum.

    Enforce limits of settings that could cause buggy behaviour (#12450)

    

    Enforces the setting value bounds that are currently only limited by the GUI (settingtypes.txt).

    Enforces the setting value bounds that are currently only limited by the GUI (settingtypes.txt).

    Release shadow mapping resources when not needed (#12497)

    Replace deprecated use of `vector.new` with `copy`

    Add utility script to stress-test mapgen

    Add missing item alias metatables to async environment (#12458)

    Fixed spelling inconsistency (#12504)

    

    coloured -> colored

    coloured -> colored

    FormSpec: 9-slice images, animated_images, and fgimg_middle (#12453)

    

    * FormSpec: 9-slice images and animated_images

    

    * Add fgimg_middle; clean up code

    

    * Address issues, add tests

    

    * Fix stupid error; bump formspec version

    

    * Re-add image[] elements without a size

    * FormSpec: 9-slice images and animated_images

    

    * Add fgimg_middle; clean up code

    

    * Address issues, add tests

    

    * Fix stupid error; bump formspec version

    

    * Re-add image[] elements without a size

    * Add fgimg_middle; clean up code

    

    * Address issues, add tests

    

    * Fix stupid error; bump formspec version

    

    * Re-add image[] elements without a size

    * Address issues, add tests

    

    * Fix stupid error; bump formspec version

    

    * Re-add image[] elements without a size

    * Fix stupid error; bump formspec version

    

    * Re-add image[] elements without a size

    * Re-add image[] elements without a size

    Serialization spec: Fix number fuzzing (#12496)

    Optimize strict.lua (#12495)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    DevTest: Add item meta editor (#12307)

    Allow to set maximum star opacity at daytime (#11663)

    Fix error when `item` isn't provided to core.hud_replace_builtin (#12484)

    Reorganise settingtypes.txt (#12490)

    

    This organises the settingstype.txt file to use a logical/user-friendly structure. Advanced settings are also demoted to an advanced section at the end.

    

    At most 3 levels of hierarchy are used, as that's the most allowed by the settings redesign

    This organises the settingstype.txt file to use a logical/user-friendly structure. Advanced settings are also demoted to an advanced section at the end.

    

    At most 3 levels of hierarchy are used, as that's the most allowed by the settings redesign

    At most 3 levels of hierarchy are used, as that's the most allowed by the settings redesign

    Add many limits to settingtypes (#11463)

    Lua API: Refer to the update_translations tool (#12419)

    

    Lost the link too often. This is much needed.

    Lost the link too often. This is much needed.

    Improve warnings when no games or only devtest is installed (#11955)

    Remove an unused method and header includes

    Remove tile_images and special_materials obsolete code (#12455)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Increase max FPS on Android to 60 (#12373)

    Fix two memleak reports from Coverity (#12466)

    Docs: remove background9 incorrect example (#12464)

    Re-order sound-related code (#12382)

    

    Dropped ServerSoundParams -> moved to ServerPlayingSound. This gets rid of the duplicated

    'fade' and 'pitch' values on server-side where only one was used anyway.

    SimpleSoundSpec is the basic sound without positional information, hence 'loop' is included.

    

    Recursively added PROTOCOL_VERSION to most functions to reduce the versioning mess in the

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    Dropped ServerSoundParams -> moved to ServerPlayingSound. This gets rid of the duplicated

    'fade' and 'pitch' values on server-side where only one was used anyway.

    SimpleSoundSpec is the basic sound without positional information, hence 'loop' is included.

    

    Recursively added PROTOCOL_VERSION to most functions to reduce the versioning mess in the

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    'fade' and 'pitch' values on server-side where only one was used anyway.

    SimpleSoundSpec is the basic sound without positional information, hence 'loop' is included.

    

    Recursively added PROTOCOL_VERSION to most functions to reduce the versioning mess in the

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    SimpleSoundSpec is the basic sound without positional information, hence 'loop' is included.

    

    Recursively added PROTOCOL_VERSION to most functions to reduce the versioning mess in the

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    Recursively added PROTOCOL_VERSION to most functions to reduce the versioning mess in the

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    future. Per-type version numbers are kept for now as a safety rope in a special case.

    Annotate light spread functions with comments

    Fix CAO light calculation issue

    Fix updating glow on entities

    

    was broken in #10021 more than 2 years ago(!)

    was broken in #10021 more than 2 years ago(!)

    Fix zlib (de)compressor memory leaks

    Update my name

    Add description of privileges (#12021)

    

    * Add description of privileges

    

    * Restructure Privileges section based on feedback

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Add description of privileges

    

    * Restructure Privileges section based on feedback

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Restructure Privileges section based on feedback

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Suggestion by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    * Incorporate comments by sfan5

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Add unittests for entity lifecycle and callbacks

    Fix entity related bugs

    

    * Make minetest.add_entity() binary-safe

    * Fix on_death pushing dummy ObjectRef instead of nil

    * Make minetest.add_entity() binary-safe

    * Fix on_death pushing dummy ObjectRef instead of nil

    * Fix on_death pushing dummy ObjectRef instead of nil

    Fix Android input box crash

    lua_api.txt: add missing backticks

    Improve lua_api.txt a bunch

    Fix permissions on workflow-generated macOS builds (#12422)

    Inline triLinearInterpolationNoEase and triLinearInterpolation (#12421)

    

    Performance profiling on Linux AMD64 showed this to be a significant bottleneck. The non-inlined functions are expensive due to XMM registers spilling onto the stack.

    Performance profiling on Linux AMD64 showed this to be a significant bottleneck. The non-inlined functions are expensive due to XMM registers spilling onto the stack.

    on_deactivate: distinguish removal and unloading (#11931)

    

    Sometimes you need to be able to do removal-related cleanup, such as removing files from disk, or entries from a database. staticdata obviously isn't suitable for large data. The data shouldn't be removed if the entity is unloaded, only if it is removed.

    Sometimes you need to be able to do removal-related cleanup, such as removing files from disk, or entries from a database. staticdata obviously isn't suitable for large data. The data shouldn't be removed if the entity is unloaded, only if it is removed.

    No damage effects on hp_max change (#11846)

    Builtin: Redo serialize.lua (#11427)

    

    Features:

    

    * Support for arbitrary references, including self-referencing

    * Short output, references "long" strings as a bonus

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

    Features:

    

    * Support for arbitrary references, including self-referencing

    * Short output, references "long" strings as a bonus

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

    * Support for arbitrary references, including self-referencing

    * Short output, references "long" strings as a bonus

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

    * Short output, references "long" strings as a bonus

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

    * Properly works with NaN and inf

    Fix LBM docs

    Fix Gitlab-CI pipelines

    Sanitize player position and speed server-side (#12396)

    Mapblock Mesh BspTree: Increase the depth of block-level splits

    

    ... before going node-level triangle search.

    Fixes transparent grass on transparent land

    ... before going node-level triangle search.

    Fixes transparent grass on transparent land

    Fixes transparent grass on transparent land

    core.formspec_escape: Restore backwards compat

    

    Support numbers as arguments by using `string.gsub(text, ...)` instead of `text:gsub(...)` which will coerce `text` to a string

    Support numbers as arguments by using `string.gsub(text, ...)` instead of `text:gsub(...)` which will coerce `text` to a string

    Remove invalid fps_max on Mac

    Bug report template: ask contributors to provide a code snippet (#12405)

    Fix crash in commit a69b7abe00fb818fd88f3cd04e7f9997ffd21072

    Android: Add support for sharing debug.txt (#12370)

    Improve LBMManager::applyLBMs() code

    

    Fixes a possible bug for lbms on content ID zero and removes unsafe casts.

    Fixes a possible bug for lbms on content ID zero and removes unsafe casts.

    Add register dialog to separate login/register (#12185)

    

    New users find Minetest's account system confusing.

    This change moves username/password to a new dialog,

    with login and register buttons added to the Join Game tab.

    

    The old registration confirmation dialog is removed in

    favour of the new dialog.

    

    Fixes #8138

    New users find Minetest's account system confusing.

    This change moves username/password to a new dialog,

    with login and register buttons added to the Join Game tab.

    

    The old registration confirmation dialog is removed in

    favour of the new dialog.

    

    Fixes #8138

    This change moves username/password to a new dialog,

    with login and register buttons added to the Join Game tab.

    

    The old registration confirmation dialog is removed in

    favour of the new dialog.

    

    Fixes #8138

    with login and register buttons added to the Join Game tab.

    

    The old registration confirmation dialog is removed in

    favour of the new dialog.

    

    Fixes #8138

    The old registration confirmation dialog is removed in

    favour of the new dialog.

    

    Fixes #8138

    favour of the new dialog.

    

    Fixes #8138

    Fixes #8138

    Hide "Autosave Screen Size" on Android

    Fix BSD iconv declaration

    Document itemstrings with metadata

    fix integer overflow in mapgen (#11641)

    

    * fix integer overflow in mapgen

    

    Some calculations involving the magic seed had overflow because the result of an intermediate arithmetic step could not fit in an s32. By making the magic seed unsigned, the other operand in the equation will be cast to unsigned, and possibly other operands or intermediate operands. This will result in unexpected behavior if an operand is negative, which is technically possible, but logically should not happen.

    

    * comment noise2d bitshift

    

    While working through the code I was momentarily concerned that the right bitshift in noise2d could fill ones in some cases. It turns out that with signed integers, this is indeed true, but this one is shifting an unsigned integer, so the behavior is as expected. I put a comment here to clarify this, in case someone else wonders the same thing down the line.

    

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    * fix integer overflow in mapgen

    

    Some calculations involving the magic seed had overflow because the result of an intermediate arithmetic step could not fit in an s32. By making the magic seed unsigned, the other operand in the equation will be cast to unsigned, and possibly other operands or intermediate operands. This will result in unexpected behavior if an operand is negative, which is technically possible, but logically should not happen.

    

    * comment noise2d bitshift

    

    While working through the code I was momentarily concerned that the right bitshift in noise2d could fill ones in some cases. It turns out that with signed integers, this is indeed true, but this one is shifting an unsigned integer, so the behavior is as expected. I put a comment here to clarify this, in case someone else wonders the same thing down the line.

    

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    Some calculations involving the magic seed had overflow because the result of an intermediate arithmetic step could not fit in an s32. By making the magic seed unsigned, the other operand in the equation will be cast to unsigned, and possibly other operands or intermediate operands. This will result in unexpected behavior if an operand is negative, which is technically possible, but logically should not happen.

    

    * comment noise2d bitshift

    

    While working through the code I was momentarily concerned that the right bitshift in noise2d could fill ones in some cases. It turns out that with signed integers, this is indeed true, but this one is shifting an unsigned integer, so the behavior is as expected. I put a comment here to clarify this, in case someone else wonders the same thing down the line.

    

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    * comment noise2d bitshift

    

    While working through the code I was momentarily concerned that the right bitshift in noise2d could fill ones in some cases. It turns out that with signed integers, this is indeed true, but this one is shifting an unsigned integer, so the behavior is as expected. I put a comment here to clarify this, in case someone else wonders the same thing down the line.

    

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    While working through the code I was momentarily concerned that the right bitshift in noise2d could fill ones in some cases. It turns out that with signed integers, this is indeed true, but this one is shifting an unsigned integer, so the behavior is as expected. I put a comment here to clarify this, in case someone else wonders the same thing down the line.

    

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    * noise2d and noise3d unittests

    

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    I have added 3 tests each for noise2d and noise3d, testing all zero inputs, a very large seed (case which caused UB in the old implementation) and some fun primes I picked for no particular reason. This should be sufficient to demonstrate that the behavior of the new implementation has not changed. I used uniform initialization because it is a good feature of C++11. Please do not explode.

    

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    * uncomment the noise2d bitshift

    

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    This reverts commit 583b77ee9f1ad6bb77340ebb5ba51eb9a88ff51c. It's a

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    well-defined language semantic; it doesn't need to be commented.

    

    * code cleanliness

    * code cleanliness

    Properly keep noclip state in Game and ClientMap

    Remove obsolete eye_height related workaround

    

    This was added a long time ago in 42bbd5c9ae06a8d8ffb7915599097ead6f848755

    and meant to fix prevent the view becoming black when jumping into a

    ceiling, this no longer happens today.

    This was added a long time ago in 42bbd5c9ae06a8d8ffb7915599097ead6f848755

    and meant to fix prevent the view becoming black when jumping into a

    ceiling, this no longer happens today.

    and meant to fix prevent the view becoming black when jumping into a

    ceiling, this no longer happens today.

    ceiling, this no longer happens today.

    Add helper functions to make tool usable n times (#12047)

    Rework main menu confirmation dialogs (#12356)

    Docs: remove unimplemented `preserve` field in crafting recipes

    Fix use-after-free in node meta cleanup

    

    bug introduced in 8908a9101608d3343023b470743ef63f1c44b0b7

    bug introduced in 8908a9101608d3343023b470743ef63f1c44b0b7

    Reject registering node with empty name

    

    fixes #10769

    fixes #10769

    Minor code improvements around active block keeping

    Immediately activate blocks when a player joins

    

    issue: #10884

    This makes it possible for objects to immediately be activated,

    but doesn't guarantee it since blocks may still need be emerged.

    issue: #10884

    This makes it possible for objects to immediately be activated,

    but doesn't guarantee it since blocks may still need be emerged.

    This makes it possible for objects to immediately be activated,

    but doesn't guarantee it since blocks may still need be emerged.

    but doesn't guarantee it since blocks may still need be emerged.

    Remove debug.get/setmetatable from security whitelist

    

    fixes #12216

    fixes #12216

    Don't allow banning in singleplayer

    

    fixes #11819

    fixes #11819

    Handle lua entity HP changes correctly (like punches)

    

    fixes #11975

    fixes #11975

    Make sure real disconnect reason isn't overwritten

    

    bug introduced in 2f32044273d107e82fb1c35d4a0f616fa480cdf0

    bug introduced in 2f32044273d107e82fb1c35d4a0f616fa480cdf0

    Fix linking with Postgres libs on older cmake versions

    

    closes #12149

    closes #12149

    Remove remains of video mode querying

    Get rid of node metadata when it becomes empty

    

    fixes #8943

    fixes #8943

    Optimize Server::sendMetadataChanged a bit

    

    The distance check also never worked as intended, now fixed.

    The distance check also never worked as intended, now fixed.

    Add API function to invoke player respawn

    

    closes #12272

    closes #12272

    Protect a few more settings from being set from mods

    

    Of those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.

    Of those settings main_menu_script has concrete security impact, the rest are added out of abundance of caution.

    Map opaque waving leaves to allfaces drawtype

    

    fixes #9842

    fixes #9842

    Improve a translation string

    

    fixes #11442

    fixes #11442

    Default settings, presets and configuration for dynamic shadows (#12359)

    Lua workflow: Use Leafo's Luarocks action

    

    instead of installing outdated packages which lead to failing workflows

    instead of installing outdated packages which lead to failing workflows

    Builtin: Optimize misc helpers (#12377)

    

    Also add formspec_escape unit test

    Also add formspec_escape unit test

    DevTest: Add nodes and items for testing overlays (#12304)

    Force-update shadows when the world is changed (#12364)

    Reduce size of ContentFeatures structure

    

    On my system this is a reduction from 4664 to 3704 bytes.

    This is not for the sake of saving RAM but ensuring

    commonly used structures fit into caches better.

    On my system this is a reduction from 4664 to 3704 bytes.

    This is not for the sake of saving RAM but ensuring

    commonly used structures fit into caches better.

    This is not for the sake of saving RAM but ensuring

    commonly used structures fit into caches better.

    commonly used structures fit into caches better.

    Get rid of global buffer that would ruin concurrent MapBlock serialization

    Improve code in mapblock_mesh.cpp a bit

    Quantize light frustum calculations (#12357)

    

    * Quantize light frustum calculations

    

    Reduces shadow flicker

    

    * Fix function name to match conventions

    * Quantize light frustum calculations

    

    Reduces shadow flicker

    

    * Fix function name to match conventions

    Reduces shadow flicker

    

    * Fix function name to match conventions

    * Fix function name to match conventions

    Formally drop support for building with upstream Irrlicht

    

    It stopped working with (at least) the last commit.

    It stopped working with (at least) the last commit.

    Fix hash implementation for SerializedBlockCache

    Use unordered_map instead of map for MapSectors

    Add missing concurrency protection in logger (#12325)

    Fix no_texture.png for unknown nodes with ID < 125 (#12329)

    Docs: clarify spawn_by for decorations

    Add missing comma in example in lua_api.txt (#12339)

    Add relative numbers for commands by prepending ~ (#9588)

    

    * Add relative numbers for commands by prepending ~

    

    * Some builtin code cleanup

    

    * Disallow nan and inf in minetest.string_to_area

    

    * Remove unused local variable teleportee (makes Luacheck happy)

    

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Add relative numbers for commands by prepending ~

    

    * Some builtin code cleanup

    

    * Disallow nan and inf in minetest.string_to_area

    

    * Remove unused local variable teleportee (makes Luacheck happy)

    

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Some builtin code cleanup

    

    * Disallow nan and inf in minetest.string_to_area

    

    * Remove unused local variable teleportee (makes Luacheck happy)

    

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Disallow nan and inf in minetest.string_to_area

    

    * Remove unused local variable teleportee (makes Luacheck happy)

    

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Remove unused local variable teleportee (makes Luacheck happy)

    

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Clean up core.string_to_pos

    

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Make area parsing less permissive

    

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * Rewrite tests as busted tests

    

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    * /time: Fix negative minutes not working

    

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    Co-authored-by: Lars Mueller <appgurulars@gmx.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Dmitry Kostenko <codeforsmile@gmail.com>

    Replace all uses of core::list with std::list (#12313)

    Fixes needed to use irrArray backed by std::vector (#12263)

    Bump IrrlichtMt version in CI

    Don't ignore server disconnects in client code

    

    If the server stops talking to us without saying bye we

    should actually end the in-game session with an error message.

    If the server stops talking to us without saying bye we

    should actually end the in-game session with an error message.

    should actually end the in-game session with an error message.

    Fixes to Android build + option to turn LuaJIT on/off for testing purposes (#12334)

    Make no_screenshot image more clear (#12346)

    Patch built-in Lua to fix miscompile on Android (#12347)

    Optimize JSON string (de)serialization routines

    

    stringstreams were shown to be slow when reading/writing single characters

    and there is lots of potential by having functions perform on existing

    buffers whenever possible.

    stringstreams were shown to be slow when reading/writing single characters

    and there is lots of potential by having functions perform on existing

    buffers whenever possible.

    and there is lots of potential by having functions perform on existing

    buffers whenever possible.

    buffers whenever possible.

    Improve testSerializeJsonString unit tests

    

    this also removes the requirement that / is escaped, there is

    no reason for doing so.

    this also removes the requirement that / is escaped, there is

    no reason for doing so.

    no reason for doing so.

    Deprecate game.conf name, use title instead (#12030)

    Improve shadow filters (#12195)

    

    * Rewrite shadow filtering for the new distortion

    * Calculate penumbra radius using a single sample

    * Avoid peter-panning effect due to filtering of short shadows

    * Add adaptive filter quality for soft shadows

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Rewrite shadow filtering for the new distortion

    * Calculate penumbra radius using a single sample

    * Avoid peter-panning effect due to filtering of short shadows

    * Add adaptive filter quality for soft shadows

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Calculate penumbra radius using a single sample

    * Avoid peter-panning effect due to filtering of short shadows

    * Add adaptive filter quality for soft shadows

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Avoid peter-panning effect due to filtering of short shadows

    * Add adaptive filter quality for soft shadows

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Add adaptive filter quality for soft shadows

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Avoid sharp shadows on surfaces without normals (e.g. plants)

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Increase default and maximum soft shadow radius

    * Make line numbers in shader errors match the code

    * Make line numbers in shader errors match the code

    Fix lighting of upright_sprite entities (#12336)

    

    Use MeshNode materials to set the light since ReadOnlyMaterials is now false

    Use MeshNode materials to set the light since ReadOnlyMaterials is now false

    Fix lighting of the wield mesh (#12341)

    

    * Assign node light to player before final color blend.

      Fixes day/night lightbank ratio for wield meshes

    * Update wield mesh light when changing mesh

    * Assign node light to player before final color blend.

      Fixes day/night lightbank ratio for wield meshes

    * Update wield mesh light when changing mesh

      Fixes day/night lightbank ratio for wield meshes

    * Update wield mesh light when changing mesh

    * Update wield mesh light when changing mesh

    Use std::map instead of core::map (#12301)

    Remove confusing message in keybindings menu

    Add vcs-browser and contribute URLs to Appdata

    DevTest: Fix broken PNG textures

    Initialize wield mesh color when wield_image is set

    

    #12245

    Use native packer to transfer globals into async env(s)

    Support packing arbitrary graphs (#12289)

    Fix cooking and fuel crafts with aliases

    Add doc to list breaking changes for the next major release

    Fix possible unreliable behavior due to uninitialized variables

    Add more Prometheus metrics (#12274)

    HUD: Update selection mesh every frame (#12270)

    

    Fixes outdated selection boxes after entity property changes.

    Fixes outdated selection boxes after entity property changes.

    Fix Minetest blaming the wrong mod for errors (#12241)

    

    Covers the case where mods insert their callbacks manually into "minetest.registered_<callbacks>" (often to achieve a particular order of execution).

    Covers the case where mods insert their callbacks manually into "minetest.registered_<callbacks>" (often to achieve a particular order of execution).

    Docs: Recommend `self.name` (#12239)

    Consolidate some data structures in MapBlockMesh

    Cache serialized mapblocks during sending

    

    This reduces the

    (absolute) time spent in Server::SendBlocks() from 700ms to 300ms

    (relative) share of MapBlock::serialize() from 80% to 60%

    in a test setup with 10 players and many block changes

    This reduces the

    (absolute) time spent in Server::SendBlocks() from 700ms to 300ms

    (relative) share of MapBlock::serialize() from 80% to 60%

    in a test setup with 10 players and many block changes

    (absolute) time spent in Server::SendBlocks() from 700ms to 300ms

    (relative) share of MapBlock::serialize() from 80% to 60%

    in a test setup with 10 players and many block changes

    (relative) share of MapBlock::serialize() from 80% to 60%

    in a test setup with 10 players and many block changes

    in a test setup with 10 players and many block changes

    item_entity: Cache collisionbox for use in on_step

    

    I don't have absolute numbers but if calls to get_properties() take up

    30%+ of on_step() execution time that's bound to matter.

    I don't have absolute numbers but if calls to get_properties() take up

    30%+ of on_step() execution time that's bound to matter.

    30%+ of on_step() execution time that's bound to matter.

    Fix mapblock geometry optimisation not working

    

    Caused by the depth sorting PR marking not only transparent nodes to be ignored but also opaque ones with the TILE_MATERIAL_BASIC material type

    Caused by the depth sorting PR marking not only transparent nodes to be ignored but also opaque ones with the TILE_MATERIAL_BASIC material type

    Remove unused variable WARN_INIT

    Enable dependencies when enabling modpacks (#12202)

    Fix enabling of dependencies with identical names (#12253)

    Fix mods not being recursively enabled

    

    Fixes #12290

    Fixes #12290

    Fix texture packs showing as "Nil (enabled)" in Content tab

    

    Fixes #12285

    Fixes #12285

    Add benchmarks for json string serialize/deserialize (#12258)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Enable chat clickable weblinks by default (#12115)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Bump IrrlichtMt to 1.9.0mt5 in CI

    Declare all bundled libs as static

    

    Otherwise it can happen that these are built as shared depending on the

    options passed to CMake, which obviously isn't intended.

    Otherwise it can happen that these are built as shared depending on the

    options passed to CMake, which obviously isn't intended.

    options passed to CMake, which obviously isn't intended.

    Sort out some issues with our CI setup

    

    * add missing apt-get update where needed

    * move some jobs to run on ubuntu-20.04

    * update actions plugins to latest

    * speed up the job that runs multiplayer tests

    * add missing apt-get update where needed

    * move some jobs to run on ubuntu-20.04

    * update actions plugins to latest

    * speed up the job that runs multiplayer tests

    * move some jobs to run on ubuntu-20.04

    * update actions plugins to latest

    * speed up the job that runs multiplayer tests

    * update actions plugins to latest

    * speed up the job that runs multiplayer tests

    * speed up the job that runs multiplayer tests

    Fix Windows Visual Studio actions (#11176)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Avoid rendering invisible faces of simple nodeboxes (#12262)

    

    * Skip rendering faces adjacent to opaque nodes

    * Cancel out opposite faces of adjacent nodebox nodes of the same type

    

    Fixes #6409

    * Skip rendering faces adjacent to opaque nodes

    * Cancel out opposite faces of adjacent nodebox nodes of the same type

    

    Fixes #6409

    * Cancel out opposite faces of adjacent nodebox nodes of the same type

    

    Fixes #6409

    Fixes #6409

    hud_get: Return precision field for waypoints (#12215)

    guiScalingFilter: Fix most memory leaks (#12256)

    

    Calls to the cache function ended up creating a new texture regardless whether

    the texture is already cached.

    Calls to the cache function ended up creating a new texture regardless whether

    the texture is already cached.

    the texture is already cached.

    Make logging cost free when there is no output target (#12247)

    

    The logging streams now do almost no work when there is no output target for them.

    

    For example, if LL_VERBOSE has no output targets, then `verbosestream << x` will return a StreamProxy with a null target. Any further `<<` operations applied to it will do nothing.

    The logging streams now do almost no work when there is no output target for them.

    

    For example, if LL_VERBOSE has no output targets, then `verbosestream << x` will return a StreamProxy with a null target. Any further `<<` operations applied to it will do nothing.

    For example, if LL_VERBOSE has no output targets, then `verbosestream << x` will return a StreamProxy with a null target. Any further `<<` operations applied to it will do nothing.

    Add vector.combine (#11920)

    ContentDB: Fix ungraceful crash on aliases when list download fails

    

    Fixes #12267 and fixes #12154

    Fixes #12267 and fixes #12154

    Fix broken FPS/dtime counters in debug info

    

    was broken by a89afe1229e327da3c397a3912b2d43d2196ea2b

    was broken by a89afe1229e327da3c397a3912b2d43d2196ea2b

    Async environment for mods to do concurrent tasks (#11131)

    Fix synchronization issue at thread start

    

    If a newly started thread immediately exits then m_running would

    immediately be set to false again and the caller would be stuck

    waiting for m_running to become true forever.

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    If a newly started thread immediately exits then m_running would

    immediately be set to false again and the caller would be stuck

    waiting for m_running to become true forever.

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    immediately be set to false again and the caller would be stuck

    waiting for m_running to become true forever.

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    waiting for m_running to become true forever.

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    see also: #5134 which introduced m_start_finished_mutex

    Refactor some Lua API functions in preparation for async env

    Reorganize some builtin functions in preparation for async env

    Remove some unused variable from Lua class wrappers

    Add German translation to AppData file (#12161)

    Initialize wield mesh colors when changing item. (#12254)

    

    Fixes #12245

    Fixes #12245

    Deal with compiler warnings

    Enable additional warning flags

    

    also make them work with the RelWithDebInfo build type

    also make them work with the RelWithDebInfo build type

    Run automated tests when lua files change (#12184)

    

    * Run automated tests when lua files change

    

    * skip busted on devtest

    

    * use newer build env

    

    * Add .luacheckrc for games/devetest

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Run automated tests when lua files change

    

    * skip busted on devtest

    

    * use newer build env

    

    * Add .luacheckrc for games/devetest

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * skip busted on devtest

    

    * use newer build env

    

    * Add .luacheckrc for games/devetest

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * use newer build env

    

    * Add .luacheckrc for games/devetest

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Add .luacheckrc for games/devetest

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Update mods_here.txt to mention installing mods via CDB (#11876)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Clean up some auth packet handling related code

    Fix password changing getting stuck if wrong password is entered once

    Apply disallow_empty_password to password changes too

    Fix race condition in registration leading to duplicate create_auth calls

    Refactor local time getter functions (#12221)

    

    This commit introduces mt_localtime() in src/gettime.h, a wrapper

    around the OS-specific thread-safe versions of localtime()

    (resp. localtime_s on Windows and localtime_r in other systems).

    

    Per the Open Group recommendation,

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    This commit introduces mt_localtime() in src/gettime.h, a wrapper

    around the OS-specific thread-safe versions of localtime()

    (resp. localtime_s on Windows and localtime_r in other systems).

    

    Per the Open Group recommendation,

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    around the OS-specific thread-safe versions of localtime()

    (resp. localtime_s on Windows and localtime_r in other systems).

    

    Per the Open Group recommendation,

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    (resp. localtime_s on Windows and localtime_r in other systems).

    

    Per the Open Group recommendation,

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    Per the Open Group recommendation,

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    «portable applications should call tzset() explicitly before using

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    ctime_r() or localtime_r() because setting timezone information is

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    optional for those functions», so we also do a one-shot

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    call of tzset() (_tzset() on Windows to avoid warning C4996).

    

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    The function is used to replace the localtime() calls in

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    getTimestamp() and makeScreenshot().

    

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    (The only reminaing call to localtime() in the tree now is the one in

    the local copy of the Lua source code.)

    the local copy of the Lua source code.)

    Remove HW_buffer_counter after IrrlichtMt fix to remove HWBufferMap (#12232)

    

     Keep code and use version check instead, for backwards compatibility

     Keep code and use version check instead, for backwards compatibility

    Show unknown node in debug screen (#12230)

    DevTest: Fix armorball sprite (#12228)

    Support CSS Color Module Level 4 (#12204)

    Fix texture packs not showing as enabled in mainmenu

    

    Fixes #12219

    Fixes #12219

    Fix invalid queued package element and path (#12218)

    DevTest: Add more test weapons and armorball modes (#11870)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Fix worldaligned textures

    

    As reported in #12197, b0b9732359d43325c8bd820abeb8417353365a0c

    introduces a regression in worldalign textures.

    

    The specific change that seems to be responsible for this issue is the

    change in order between the computation of the cuboid texture

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    As reported in #12197, b0b9732359d43325c8bd820abeb8417353365a0c

    introduces a regression in worldalign textures.

    

    The specific change that seems to be responsible for this issue is the

    change in order between the computation of the cuboid texture

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    introduces a regression in worldalign textures.

    

    The specific change that seems to be responsible for this issue is the

    change in order between the computation of the cuboid texture

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    The specific change that seems to be responsible for this issue is the

    change in order between the computation of the cuboid texture

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    change in order between the computation of the cuboid texture

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    coordinates and the box edge correction.

    

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    Fix #12197 by moving the box edge correction back to before the cuboid

    texture coordinates, as it used to be.

    texture coordinates, as it used to be.

    Fix some textures not being sent correctly to older clients

    

    Since b2eb44afc50976dc0954c868977b5829f3ff8a19, a texture defined as

    `[combine:16x512:0,0=some_file.png;etc`

    will not be sent correctly from a 5.5 server to a 5.4 client due to the

    overeager detection of unsupported base modifier `[` introducing a

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    Since b2eb44afc50976dc0954c868977b5829f3ff8a19, a texture defined as

    `[combine:16x512:0,0=some_file.png;etc`

    will not be sent correctly from a 5.5 server to a 5.4 client due to the

    overeager detection of unsupported base modifier `[` introducing a

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    `[combine:16x512:0,0=some_file.png;etc`

    will not be sent correctly from a 5.5 server to a 5.4 client due to the

    overeager detection of unsupported base modifier `[` introducing a

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    will not be sent correctly from a 5.5 server to a 5.4 client due to the

    overeager detection of unsupported base modifier `[` introducing a

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    overeager detection of unsupported base modifier `[` introducing a

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    spurious `blank.png^` before the modifier.

    

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    Fix this by whitelisting which base modifiers can be passed through

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    unchanged to the client, and prefix `blank.png` for the others

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    (which at the moment is just [png:, but the list may grow larger

    as new base modifiers are added.)

    as new base modifiers are added.)

    Fix typo: vector.check() ought to be vector.check(v)

    Use mod names/titles instead of technical names (#12192)

    Builtin: Allow to revoke unknown privileges

    Fix some debug info showing despite being disabled in the UI (#12205)

    Update docs to reference CSS Color Module Level 3

    

    as the named color "rebeccapurple" is unavailable, Level 4 clearly isn't supported; the link should not point to a dev version of the spec either

    as the named color "rebeccapurple" is unavailable, Level 4 clearly isn't supported; the link should not point to a dev version of the spec either

    Fix '[combine' when EVDF_TEXTURE_NPOT is disabled. (#12187)

    

    Stop scaling images to POT immediately when loaded. The 'combine'

    modifier hardcodes X and Y coordinates, and so behaves incorrectly

    if applied to a scaled image. Images emitted by generateImage()

    are already scaled to POT before being used as a texture, so

    nothing should break.

    Stop scaling images to POT immediately when loaded. The 'combine'

    modifier hardcodes X and Y coordinates, and so behaves incorrectly

    if applied to a scaled image. Images emitted by generateImage()

    are already scaled to POT before being used as a texture, so

    nothing should break.

    modifier hardcodes X and Y coordinates, and so behaves incorrectly

    if applied to a scaled image. Images emitted by generateImage()

    are already scaled to POT before being used as a texture, so

    nothing should break.

    if applied to a scaled image. Images emitted by generateImage()

    are already scaled to POT before being used as a texture, so

    nothing should break.

    are already scaled to POT before being used as a texture, so

    nothing should break.

    nothing should break.

    Send chat error when attemping to /set a secure setting (#12193)

    

    Attempting to /set a secure setting will now say that is disallowed.

    Previously this would shut down the server.

    Reading secure settings via /set is still allowed.

    Attempting to /set a secure setting will now say that is disallowed.

    Previously this would shut down the server.

    Reading secure settings via /set is still allowed.

    Previously this would shut down the server.

    Reading secure settings via /set is still allowed.

    Reading secure settings via /set is still allowed.

    upright_sprite: Fix walk animation in first person (#12194)

    Implement shadow offsets for the new SM distortion function (#12191)

    

    * Move shadow position calculation to vertex shaders

    * Animate entire scene before rendering shadows to prevent lagging of shadows

    * Remove unnecessary use of PolygonOffsetFactor

    * Apply normal offset to both nodes and objects

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Move shadow position calculation to vertex shaders

    * Animate entire scene before rendering shadows to prevent lagging of shadows

    * Remove unnecessary use of PolygonOffsetFactor

    * Apply normal offset to both nodes and objects

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Animate entire scene before rendering shadows to prevent lagging of shadows

    * Remove unnecessary use of PolygonOffsetFactor

    * Apply normal offset to both nodes and objects

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Remove unnecessary use of PolygonOffsetFactor

    * Apply normal offset to both nodes and objects

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Apply normal offset to both nodes and objects

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Rename getPerspectiveFactor -> applyPerspectiveDistortion

    * Remove perspective distortion from fragment shaders

    * Remove perspective distortion from fragment shaders

    Fix item entity Z-fighting

    Remove unneeded ObjectRef setter return values (#12179)

    Don't test overflow behavior for VoxelArea extents

    Remove generate-texture-normals.sh

    

    Minetest does not use normal maps any more.

    Minetest does not use normal maps any more.

    Fix typo and update settings files

    Fix spaces generated by settings file generator

    Use CMake's -B, --build, and --install options

    Fix OOB read in trim("")

    Remove duplicate test for trim

    Update directory name sanitization

    

    Only ASCII spaces have to be handles specially, and leading spaces are

    also disallowed.

    Only ASCII spaces have to be handles specially, and leading spaces are

    also disallowed.

    also disallowed.

    Add tests for sanitizeDirName

    Add additional reserved directory names

    Auto-detect level of parallelism

    Remove duplication in config.h

    Spacing fixes

    Treat empty XDG_CACHE_HOME same as unset

    

    This matches the XDG base directory spec.

    This matches the XDG base directory spec.

    Use build directory for builds

    Fix compiler warnings

    Remove reference to a removed file in devtest (followup to #12157)

    Remove obsolete commented code (follow up to #12166)

    Adjust shadowmap distortion to use entire SM texture (#12166)

    Disentangle map implementations (#12148)

    

    Fixes violation of Liskov substitution principle

    Fixes #12144

    Fixes violation of Liskov substitution principle

    Fixes #12144

    Fixes #12144

    Enable shadows by default in devtest (#12157)

    

    * Move all shadow control to util_commands

    * Shadows are now controlled with /set_shadow

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Move all shadow control to util_commands

    * Shadows are now controlled with /set_shadow

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Shadows are now controlled with /set_shadow

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Compile Lua as C++ (#11683)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Fix -mwindows flag not being applied anymore

    

    closes #12165

    closes #12165

    Add depth sorting for node faces (#11696)

    

    Use BSP tree to order transparent triangles

    https://en.wikipedia.org/wiki/Binary_space_partitioning

    Use BSP tree to order transparent triangles

    https://en.wikipedia.org/wiki/Binary_space_partitioning

    https://en.wikipedia.org/wiki/Binary_space_partitioning

    Increase the ratio between shadow range and viewing range

    Avoid negation of comparison operator (luacheck warning)

    Limit shadow map to the viewing range (#12158)

    Tune shadow perspective distortion (#12146)

    

    * Pass perspective distortion parameters as uniforms

    * Set all perspective bias parameters via ShadowRenderer

    * Recalibrate perspective distortion and shadow range to render less shadow geometry with the same quality and observed shadow distance

    * Pass perspective distortion parameters as uniforms

    * Set all perspective bias parameters via ShadowRenderer

    * Recalibrate perspective distortion and shadow range to render less shadow geometry with the same quality and observed shadow distance

    * Set all perspective bias parameters via ShadowRenderer

    * Recalibrate perspective distortion and shadow range to render less shadow geometry with the same quality and observed shadow distance

    * Recalibrate perspective distortion and shadow range to render less shadow geometry with the same quality and observed shadow distance

    Store vector metatable in registry

    Optimize swapping nodes with equivalent lighting

    Fix the documentation of InvRef:get_lists() and clean up code (#12150)

    Add API to control shadow intensity from the game/mod (#11944)

    

    * Also Disable shadows when sun/moon is hidden. Fixes #11972.

    * Also Disable shadows when sun/moon is hidden. Fixes #11972.

    Improve lua vector helper class doumentation (#12090)

    Fix memory leak in EmergeManager

    

    EmergeManager keeps a copy of the BiomeGen that it creates, but

    never deletes it.

    EmergeManager keeps a copy of the BiomeGen that it creates, but

    never deletes it.

    never deletes it.

    Fix footsteps for players whose collision box min y != 0 (#12110)

    Fix undefined behavior in TileLayer (#12125)

    

    Initialize the values properly

    Initialize the values properly

    Remove direct OpenGL(ES) dependency

    

    IrrlichtMt now provides this for us (see last commit)

    fixes #12041

    IrrlichtMt now provides this for us (see last commit)

    fixes #12041

    fixes #12041

    Use Irrlicht bindings for GL call

    Fix memory leak from SpatialAreaStore (#12120)

    Reuse normal offset calculation for nodes

    Correct normal bias for entities

    

    Remove use of magic constants.

    Apply cameraOffset

    Calculate distance projected on SM plane

    Remove use of magic constants.

    Apply cameraOffset

    Calculate distance projected on SM plane

    Apply cameraOffset

    Calculate distance projected on SM plane

    Calculate distance projected on SM plane

    Change normal bias for entities to avoid shadow acne

    Remove debugging code

    Ensure nightRatio is greater than zero in object shader

    Fix shadows for upright sprite nodes

    

    Avoid using read only materials in mesh scene node, as

    it confuses shadow renderer.

    Avoid using read only materials in mesh scene node, as

    it confuses shadow renderer.

    it confuses shadow renderer.

    Apply texture matrix when rendering shadowmap

    

    Fixes shadows of animated sprite entities

    Fixes shadows of animated sprite entities

    Avoid possible buffer overflow when checking face normals

    Use correct indexes when checking mesh normals

    Fix shadow rendering with filtering disabled

    Detect 'insane' normals in checkMeshNormals.

    

    Detect non-zero normals which point in the opposite direction from the

    face plane normal.

    Detect non-zero normals which point in the opposite direction from the

    face plane normal.

    face plane normal.

    Improve lighting of entities.

    

    Pass correct natural & artificial light to the shaders

    Use natural/artificial light ratio for correct rendering of shadows

    Pass correct natural & artificial light to the shaders

    Use natural/artificial light ratio for correct rendering of shadows

    Use natural/artificial light ratio for correct rendering of shadows

    Improve self-shadowing based on light/normal angle

    

    Add compatibility with colored shadows.

    Add compatibility with colored shadows.

    Copy shadow mapping shader from nodes to objects

    Apply shadow texture to wield-based entities

    

    For example, dropped nodes and items.

    For example, dropped nodes and items.

    Render shadows on entities.

    

    Fixes problem with mod 'drawers'.

    Fixes problem with mod 'drawers'.

    Readd basic_debug as a HUD flag (#12020)

    Allow get_sky to return a table (#11963)

    Fix segfault with autoscale_mode (again)

    

    closes #12100

    This time add some asserts so there is no misunderstanding about the NULL-ness of layer->texture.

    closes #12100

    This time add some asserts so there is no misunderstanding about the NULL-ness of layer->texture.

    This time add some asserts so there is no misunderstanding about the NULL-ness of layer->texture.

    Move the codebase to C++14

    Fix broken dependency enabling due to missing `enabled` field (#12093)

    Lua API documentation: Various fixes (#12059)

    

    Change 1: Clarify when on_step collision information is provided

    Change 2: Document PostgreSQL and Redis settings

    Change 3: Overall AreaStore documentation improvements including consistent parameter naming based on community suggestions

    Change 1: Clarify when on_step collision information is provided

    Change 2: Document PostgreSQL and Redis settings

    Change 3: Overall AreaStore documentation improvements including consistent parameter naming based on community suggestions

    Change 2: Document PostgreSQL and Redis settings

    Change 3: Overall AreaStore documentation improvements including consistent parameter naming based on community suggestions

    Change 3: Overall AreaStore documentation improvements including consistent parameter naming based on community suggestions

    FormspecMenu: make drawing of backgrounds less hacky (#9517)

    Add TGA test nodes to devtest (#11978)

    Lua API: Consistently use double vs. single quotes (#12075)

    Clean up ClientReady packet handling

    

    fixes #12073

    fixes #12073

    Use absolute value for bouncy in collision (#11969)

    

    * use abs(bouncy) in collision

    * test case for negative bouncy

    * send abs(bouncy) to old clients

    * use abs(bouncy) in collision

    * test case for negative bouncy

    * send abs(bouncy) to old clients

    * test case for negative bouncy

    * send abs(bouncy) to old clients

    * send abs(bouncy) to old clients

    Apply texture pack main menu textures immediately (#12018)

    Add support for 'seed' in disallow_mapgen_settings (#12023)

    Correct world_format.txt specification (#12061)

    

    The node timers appear at the end of a mapblock for map format version >= 25, not just map format version 25.

    The node timers appear at the end of a mapblock for map format version >= 25, not just map format version 25.

    Allow to set the displayed item count and its alignment via meta (#8448)

    

    * Allow to set the displayed item count and its offset via meta

    

    * fix rect constr call

    

    * devtest: add dump_item chatcommand

    

    * fix rect2 constr call (sdim is a position (typedef for v2s32), not a dimension) and remove background because it would work now

    

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * Allow to set the displayed item count and its offset via meta

    

    * fix rect constr call

    

    * devtest: add dump_item chatcommand

    

    * fix rect2 constr call (sdim is a position (typedef for v2s32), not a dimension) and remove background because it would work now

    

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * fix rect constr call

    

    * devtest: add dump_item chatcommand

    

    * fix rect2 constr call (sdim is a position (typedef for v2s32), not a dimension) and remove background because it would work now

    

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * devtest: add dump_item chatcommand

    

    * fix rect2 constr call (sdim is a position (typedef for v2s32), not a dimension) and remove background because it would work now

    

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * fix rect2 constr call (sdim is a position (typedef for v2s32), not a dimension) and remove background because it would work now

    

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * add missing utf8 to wide conversion

    

    * rename to count_meta

    * rename to count_meta

    Increase max objects per block defaults (#12055)

    Remove awful Mingw32 workarounds

    

    Instead a warning is triggered if an affected compiler is detected.

    closes #12022

    Instead a warning is triggered if an affected compiler is detected.

    closes #12022

    closes #12022

    Update MinGW used by CI

    

    This made a rebuild of 32-bit deps necessary.

    They were updated in the process and this was done for 64-bit too for consistency.

    This made a rebuild of 32-bit deps necessary.

    They were updated in the process and this was done for 64-bit too for consistency.

    They were updated in the process and this was done for 64-bit too for consistency.

    Noise params serialization fixup

    Send HUD flags only if changed

    Update copyright year in README (#12029)

    Fix broken server startup if curl is disabled (#12046)

    Fix types of get_mapgen_setting_noiseparams (#12025)

    Clean up ClientInterface locking

    Add more documentation for the list[] fs element (#11979)

    Fix macOS compile instructions

    Revert "Disable dynamic shadows for the 5.5.0 release" (#12032)

    Fix builtin statbar backgrounds

    

    see #12000

    see #12000

    Document moon orientation relative to sun

    Use virtual paths to specify exact mod to enable (#11784)

    Continue with 5.6.0-dev

    Bump version to 5.5.0

    Add another very awful workaround to prevent a crash on Mingw32

    

    This appears to be the same issue as 70df3d54f37c280f7afe60f6e964b8406577f39f.

    Hopefully the next MinGW update will remove the need for this.

    This appears to be the same issue as 70df3d54f37c280f7afe60f6e964b8406577f39f.

    Hopefully the next MinGW update will remove the need for this.

    Hopefully the next MinGW update will remove the need for this.

    Update credits for 5.5.0 release (#12001)

    Get rid of `basic_debug` last minute

    

    This isn't a revert but rather just disables the codepaths. also see #12011

    This isn't a revert but rather just disables the codepaths. also see #12011

    Abort raycasts that go out-of-bounds (#12006)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.4% (1323 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 97.8% (1386 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 48.7% (691 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 86.0% (1219 of 1416 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 39.9% (566 of 1416 strings)

    Update German builtin translation

    Update builtin translation templates

    Fix Minetest logo when installed system-wide

    Get rid of empty test file

    Raise max mapgen limit constant to align with mapblock size

    Auto-update minetest.conf.example

    Disable dynamic shadows for the 5.5.0 release

    

    The dynamic shadows are yet not in the desired state to justify the

    inclusion into version 5.5.0. A stable release is long overdue, hence

    this allows fixes to continue in 5.6.0-dev to finally release an

    acceptable version of the dynamic shadows feature.

    

    Reverting this commit is highly recommended to proceed in development.

    The dynamic shadows are yet not in the desired state to justify the

    inclusion into version 5.5.0. A stable release is long overdue, hence

    this allows fixes to continue in 5.6.0-dev to finally release an

    acceptable version of the dynamic shadows feature.

    

    Reverting this commit is highly recommended to proceed in development.

    inclusion into version 5.5.0. A stable release is long overdue, hence

    this allows fixes to continue in 5.6.0-dev to finally release an

    acceptable version of the dynamic shadows feature.

    

    Reverting this commit is highly recommended to proceed in development.

    this allows fixes to continue in 5.6.0-dev to finally release an

    acceptable version of the dynamic shadows feature.

    

    Reverting this commit is highly recommended to proceed in development.

    acceptable version of the dynamic shadows feature.

    

    Reverting this commit is highly recommended to proceed in development.

    Reverting this commit is highly recommended to proceed in development.

    Get rid of legacy workaround in SQLite backend

    

    tested on Android 11, fixes #11937

    tested on Android 11, fixes #11937

    Add game name to server status string

    Request execution on dedicated GPU on Windows

    Enable high-res timers on Windows

    

    This should fix issues like #11891, caused by the fps limiting

    code being unable to operate correctly.

    This should fix issues like #11891, caused by the fps limiting

    code being unable to operate correctly.

    code being unable to operate correctly.

    Rework drawtime and related timekeeping code to use microseconds

    Automatically migrate client mod storage (#11960)

    Builtin: Sanity-check /time inputs (#11993)

    

    This enforces the documented bounds for the /time command.

    This enforces the documented bounds for the /time command.

    Define control(bits) as "unset" for entities (#11995)

    Update translations

    Update example config and translation .cpp

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 93.8% (1328 of 1415 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 85.5% (1210 of 1415 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.5% (1125 of 1415 strings)

    Translated using Weblate (Chinese (Literary))

    

    Currently translated at 0.6% (9 of 1415 strings)

    Currently translated at 0.6% (9 of 1415 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.4% (1308 of 1415 strings)

    Added translation using Weblate (Chinese (Literary))

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 98.6% (1396 of 1415 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 79.9% (1131 of 1415 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 79.9% (1131 of 1415 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 79.7% (1129 of 1415 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 69.8% (988 of 1415 strings)

    Translated using Weblate (Malay (Jawi))

    

    Currently translated at 64.6% (916 of 1416 strings)

    Currently translated at 65.3% (925 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 98.5% (1394 of 1415 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 56.5% (800 of 1415 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.6% (1127 of 1415 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Bulgarian)

    

    Currently translated at 31.2% (442 of 1416 strings)

    Currently translated at 30.6% (434 of 1415 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 54.7% (775 of 1415 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.6% (1127 of 1415 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.9% (1414 of 1415 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 98.9% (1400 of 1415 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 69.6% (985 of 1415 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 70.3% (996 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 98.5% (1394 of 1415 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 58.5% (828 of 1415 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 58.5% (828 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 97.6% (1382 of 1415 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Vietnamese)

    

    Currently translated at 41.4% (606 of 1462 strings)

    Currently translated at 20.3% (288 of 1415 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 99.2% (1404 of 1415 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 37.8% (535 of 1415 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 98.6% (1396 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.5% (1366 of 1415 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 97.9% (1386 of 1415 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 99.9% (1414 of 1415 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1415 of 1415 strings)

    Cancel emerge callbacks on shutdown

    Bump formspec version (#11980)

    Make sure nightRatio is always greater than zero.

    

    To avoid underfined behavior of GLSL pow()

    To avoid underfined behavior of GLSL pow()

    Fix consistency of sky sun/moon texture behaviour

    

    Also cleans up related code somewhat.

    Also cleans up related code somewhat.

    Allow resetting celestial vault elements by leaving its arguments empty (#11922)

    Fix local animation not instantly updating after being set

    Free arguments of cancelled minetest.after() jobs

    Main menu: Fix automatic dependency enables on doubleclick

    

    When mods were toggled by double-click, the hard dependencies were no longer enabled automatically.

    However, the 'Enabled' checkbox did still work. This commit restores the behaviour as seen before commit c401a06

    When mods were toggled by double-click, the hard dependencies were no longer enabled automatically.

    However, the 'Enabled' checkbox did still work. This commit restores the behaviour as seen before commit c401a06

    However, the 'Enabled' checkbox did still work. This commit restores the behaviour as seen before commit c401a06

    Optimize folder handling in 'files' mod storage backend

    

    This regressed in bf22569019749e421e8ffe0a73cff988a9a9c846.

    This regressed in bf22569019749e421e8ffe0a73cff988a9a9c846.

    Bump IrrlichtMt to 1.9.0mt4 in CI

    Reset override material in anaglyph

    

    Reset override material properties before applying the color filter.

    Reset override material properties before applying the color filter.

    Give the ASCII console splash a facelift

    Minor improvements to Lua sandbox

    Improve situation around race condition with dynamic_add_media during client join

    Don't call on_dieplayer callback two times (#11874)

    Update compiler versions in CI

    

    downgrade gcc 6 -> 5 to better match our minimum

    upgrade gcc and clang by moving two images to ubuntu 20.04

    downgrade gcc 6 -> 5 to better match our minimum

    upgrade gcc and clang by moving two images to ubuntu 20.04

    upgrade gcc and clang by moving two images to ubuntu 20.04

    Raise minimum compiler versions

    

    Supporting these is not reasonable anymore and effectively we didn't

    do that anyway, brokenness was only noticed by chance and a PR to restore

    support for gcc 5.x is ready now.

    Supporting these is not reasonable anymore and effectively we didn't

    do that anyway, brokenness was only noticed by chance and a PR to restore

    support for gcc 5.x is ready now.

    do that anyway, brokenness was only noticed by chance and a PR to restore

    support for gcc 5.x is ready now.

    support for gcc 5.x is ready now.

    Add client/mod_storage.sqlite to .gitignore

    Fix NodeDef backwards compatibility to 5.3.0 (#11942)

    

    1. Fixes crashes on older clients when [png is used as base image

    2. Fixes liquid type assertion fails on debug builds

    1. Fixes crashes on older clients when [png is used as base image

    2. Fixes liquid type assertion fails on debug builds

    2. Fixes liquid type assertion fails on debug builds

    Mainmenu game-related changes (#11887)

    

    fixes:

    * Switching between games does not immediately hide creative mode / damage buttons if so specified

    * World creation menu has a game selection list even though the menu already provides a gamebar

    * Showing gameid in world list is unnecessary

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    fixes:

    * Switching between games does not immediately hide creative mode / damage buttons if so specified

    * World creation menu has a game selection list even though the menu already provides a gamebar

    * Showing gameid in world list is unnecessary

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    * Switching between games does not immediately hide creative mode / damage buttons if so specified

    * World creation menu has a game selection list even though the menu already provides a gamebar

    * Showing gameid in world list is unnecessary

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    * World creation menu has a game selection list even though the menu already provides a gamebar

    * Showing gameid in world list is unnecessary

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    * Showing gameid in world list is unnecessary

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    * Choice of mapgen parameters in menu persists between games (and was half-broken)

    Copy smoothing note to gui_scaling_filter description

    Formspec: Fix bgcolor and set_focus checks

    Restore pass-through of direction keys (#11924)

    

    This moves relevant code into the PlayerControl class and gets rid of separate keyPressed variable.

    This moves relevant code into the PlayerControl class and gets rid of separate keyPressed variable.

    Fully remove bitmap font support (#11863)

    

    Freetype is now a build requirement.

    Freetype is now a build requirement.

    Use a database for mod storage (#11763)

    Fix damage wraparound if very high damage (#11872)

    Fix incorrect bit positions in paramtype documentation

    Base formspec coordinate size on padded screensize

    Inventory: Add ServerEnv checks for calls during script init

    

    This fixes 'minetest.get_inventory' calls to players or nodes during the load phase.

    This fixes 'minetest.get_inventory' calls to players or nodes during the load phase.

    Fix vector.from_string returning a table without vector metatable

    Cap damage overlay duration to 1 second (#11871)

    Fix shadow mapping when PCF is disabled (#11888)

    Recalculate normals before adding mesh to the scene

    Better document sky_color scope (#11892)

    Print announce error response (#11878)

    

    Fix HTTPFetch caller and request ID to 64 bits

    Check that allocated caller ID is not DISCARD

    Print body if serverlist request returns error

    Don't print control characters from HTTP responses

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Fix HTTPFetch caller and request ID to 64 bits

    Check that allocated caller ID is not DISCARD

    Print body if serverlist request returns error

    Don't print control characters from HTTP responses

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Check that allocated caller ID is not DISCARD

    Print body if serverlist request returns error

    Don't print control characters from HTTP responses

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Print body if serverlist request returns error

    Don't print control characters from HTTP responses

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Don't print control characters from HTTP responses

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Document special HTTPFetch caller IDs

    Allow unicode to be printed

    Allow unicode to be printed

    Add padding[] element to formspecs (#11821)

    Improve TTF support for pixel-style fonts (#11848)

    Formspec: Unify argument checks (#11851)

    Socket-related cleanups

    

    Improve error handling on Windows and reduce the size of the `Address` class

    Improve error handling on Windows and reduce the size of the `Address` class

    Remove unused (de)serializeAttributes() methods

    Add more neighbors on mesh update (#6765)

    Fix segfault in drawItems() due to missing inventory list

    

    This fixes a nullptr dereference when the specified inventory list is not known.

    Happens when HUD elements are sent before the required inventory list is created.

    This fixes a nullptr dereference when the specified inventory list is not known.

    Happens when HUD elements are sent before the required inventory list is created.

    Happens when HUD elements are sent before the required inventory list is created.

    Fix check that denies new clients from a singleplayer session

    Automatically use SSE registers for FP operations on i386 (#11853)

    

    use SSE for floating-point operations to avoid issues with improper fp-rounding and

    loss of precision when moving fp-data to incompatible or less-precise

    registers/storage locations

    

    https://gcc.gnu.org/wiki/FloatingPointMath

    https://gcc.gnu.org/wiki/x87note

    use SSE for floating-point operations to avoid issues with improper fp-rounding and

    loss of precision when moving fp-data to incompatible or less-precise

    registers/storage locations

    

    https://gcc.gnu.org/wiki/FloatingPointMath

    https://gcc.gnu.org/wiki/x87note

    loss of precision when moving fp-data to incompatible or less-precise

    registers/storage locations

    

    https://gcc.gnu.org/wiki/FloatingPointMath

    https://gcc.gnu.org/wiki/x87note

    registers/storage locations

    

    https://gcc.gnu.org/wiki/FloatingPointMath

    https://gcc.gnu.org/wiki/x87note

    https://gcc.gnu.org/wiki/FloatingPointMath

    https://gcc.gnu.org/wiki/x87note

    https://gcc.gnu.org/wiki/x87note

    Restore GCC 5 compatibility (#11778)

    Remove wrong function from lua_api.txt

    Use defined evaluation order in profiler

    

    See https://github.com/LuaJIT/LuaJIT/issues/238

    See https://github.com/LuaJIT/LuaJIT/issues/238

    Protect font initialization with mutex

    

    fixes #4532

    fixes #4532

    Refactor trusted mod checking code

    Remove setlocal and setupvalue from `debug` table whitelist

    

    It's likely that these could be used trick mods into revealing the insecure

    environment even if they do everything right (which is already hard enough).

    It's likely that these could be used trick mods into revealing the insecure

    environment even if they do everything right (which is already hard enough).

    environment even if they do everything right (which is already hard enough).

    Don't let HTTP API pass through untrusted function

    

    This has been a problem since the first day, oops.

    This has been a problem since the first day, oops.

    Restructure devtest's unittests and run them in CI (#11859)

    Fix eat sound not playing if eating last of stack

    Fix some issues with buildbot scripts (#11860)

    Disable inventory if player's inventory formspec is blank (#11827)

    Fix URL escaping in content store

    Remove creative/damage info in Esc/Pause menu

    Update German locale translation

    Update builtin locale

    Add pauloue's ItemStack example to docs (#9853)

    Fix get_bone_position() on unset bones modifying their position

    

    closes #11840

    closes #11840

    Fix various code & correctness issues (#11815)

    Fix wireshark packet dissector wrong coordinates (#11826)

    Improve error message if using "/help --" (#11796)

    Network: Delete copy constructor and use std::move instead (#11642)

    

    This is a follow-up change which disables class copies where possible to avoid unnecessary memory movements.

    This is a follow-up change which disables class copies where possible to avoid unnecessary memory movements.

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example and dummy cpp file

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 46.0% (643 of 1396 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 62.9% (879 of 1396 strings)

    Added translation using Weblate (Yue)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 97.0% (1355 of 1396 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 95.3% (1331 of 1396 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.8% (1142 of 1396 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.8% (1142 of 1396 strings)

    Translated using Weblate (Bulgarian)

    

    Currently translated at 31.2% (442 of 1416 strings)

    Currently translated at 12.6% (177 of 1396 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 97.2% (1357 of 1396 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 20.9% (292 of 1396 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 99.7% (1392 of 1396 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 20.9% (292 of 1396 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 97.0% (1355 of 1396 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 95.9% (1340 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 71.4% (998 of 1396 strings)

    Translated using Weblate (Gaelic)

    

    Currently translated at 17.0% (238 of 1396 strings)

    Currently translated at 17.0% (238 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 95.3% (1331 of 1396 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 94.4% (1319 of 1396 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 95.2% (1329 of 1396 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 95.2% (1329 of 1396 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 56.0% (783 of 1396 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 27.1% (379 of 1396 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1396 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.4% (1319 of 1396 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.2% (1134 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.5% (1292 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.5% (1292 of 1396 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1396 of 1396 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 30.4% (425 of 1396 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.4% (1389 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.3% (1289 of 1396 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 56.0% (783 of 1396 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 55.4% (774 of 1396 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 55.4% (774 of 1396 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1396 of 1396 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 81.9% (1144 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 70.3% (982 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 70.3% (982 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 70.3% (982 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 70.3% (982 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 68.7% (960 of 1396 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.4% (1333 of 1396 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 44.1% (616 of 1396 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1396 of 1396 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 47.6% (665 of 1396 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 80.6% (1126 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 91.2% (1274 of 1396 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 91.2% (1274 of 1396 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 94.9% (1325 of 1396 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1396 of 1396 strings)

    Update to Android target SDK 30 (#11746)

    Implemented disconnect_player (#10492)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Remove unused Direct3D shader error/warning (#11793)

    Fix find_nodes_in_area misbehaving with out-of-map coordinates (#11770)

    

    This ensures that no overflows (side-effects) happen within the find_nodes_in_area function by limiting coordinates like done in the map generation code.

    This ensures that no overflows (side-effects) happen within the find_nodes_in_area function by limiting coordinates like done in the map generation code.

    Add Lua bitop library (#9847)

    Minimap: gamma-correct average texture colour calculation (#9249)

    

    This calculates the average texture colour while heeding the sRGB colourspace.

    This calculates the average texture colour while heeding the sRGB colourspace.

    Add backwards-compatible behaviour if too few CAO textures specified

    

    (#11766)

    Allow for Game-Specific Menu Music (#11241)

    Add macOS build docs (#11757)

    Fix local digging animation (#11772)

    Fix compiler detection in buildbot

    

    it was just half-broken before...

    it was just half-broken before...

    Lua API: Add `rmdir`, `cpdir` and `mvdir` (#9638)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Fix typo in buildbot scripts

    Localize error messages in mainmenu (#11495)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Fix number of tool uses being off by 1..32767 (#11110)

    Add variable to use existing IrrlichtMt build (#11656)

    

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Automatically package MinGW runtime in buildbot

    Replace uses of which(1) with command -v

    Update Android to new dependency repo (#11690)

    Apply shadow only to the naturally lit part of the fragment color (#11722)

    

    Fragment color for nodes is now calculated from:

    

     * Texture color, highlighted by artificial light if present (light color conveyed via vertex color).

     * Texture color highlighted by natural light (conveyed via vertex color) filtered by shadow.

     * Reflected day/moonlight filtered by shadow (color and intensity), assuming some portion of the light is directly reflected from the materials.

    Fragment color for nodes is now calculated from:

    

     * Texture color, highlighted by artificial light if present (light color conveyed via vertex color).

     * Texture color highlighted by natural light (conveyed via vertex color) filtered by shadow.

     * Reflected day/moonlight filtered by shadow (color and intensity), assuming some portion of the light is directly reflected from the materials.

     * Texture color, highlighted by artificial light if present (light color conveyed via vertex color).

     * Texture color highlighted by natural light (conveyed via vertex color) filtered by shadow.

     * Reflected day/moonlight filtered by shadow (color and intensity), assuming some portion of the light is directly reflected from the materials.

     * Texture color highlighted by natural light (conveyed via vertex color) filtered by shadow.

     * Reflected day/moonlight filtered by shadow (color and intensity), assuming some portion of the light is directly reflected from the materials.

     * Reflected day/moonlight filtered by shadow (color and intensity), assuming some portion of the light is directly reflected from the materials.

    Add joystick layout for DragonRise GameCube controller (#11467)

    Fix crash on hypertext[] with not enough parts

    

    The length check used < rather than <=, disabling the check when the formspec version

    matches the client's FORMSPEC_API_VERSION.

    

    Additionally, it was possible to have fewer parts than required if the formspec version

    was greater than the client's FORMSPEC_API_VERSION.

    The length check used < rather than <=, disabling the check when the formspec version

    matches the client's FORMSPEC_API_VERSION.

    

    Additionally, it was possible to have fewer parts than required if the formspec version

    was greater than the client's FORMSPEC_API_VERSION.

    matches the client's FORMSPEC_API_VERSION.

    

    Additionally, it was possible to have fewer parts than required if the formspec version

    was greater than the client's FORMSPEC_API_VERSION.

    Additionally, it was possible to have fewer parts than required if the formspec version

    was greater than the client's FORMSPEC_API_VERSION.

    was greater than the client's FORMSPEC_API_VERSION.

    Fixes around emerge handling

    Limit stepheight smoothing to the stepheight and stop smoothing during jumps (#11705)

    Fix item duplication if player dies during interact callback (alternative) (#11662)

    Fix no_texture.png activation w/ simple leaves

    Fix incorrect error message in core.encode_png

    Fix view bobbing not resetting when resting

    

    partially fixes #11694, also fixes #11692

    partially fixes #11694, also fixes #11692

    Add no_texture.png as fallback for unspecified textures

    Fix compiling on Windows with Visual Studio

    Use scoped app storage on Android (#11466)

    

    From November 2021, the Play Store will no longer be accepting

    apps which use the deprecated getExternalStorageDirectory() API.

    

    Therefore, this commit replaces uses of deprecated API with the new

    scoped API (`getExternalFilesDir()` and `getExternalCacheDir()`).

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    From November 2021, the Play Store will no longer be accepting

    apps which use the deprecated getExternalStorageDirectory() API.

    

    Therefore, this commit replaces uses of deprecated API with the new

    scoped API (`getExternalFilesDir()` and `getExternalCacheDir()`).

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    apps which use the deprecated getExternalStorageDirectory() API.

    

    Therefore, this commit replaces uses of deprecated API with the new

    scoped API (`getExternalFilesDir()` and `getExternalCacheDir()`).

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    Therefore, this commit replaces uses of deprecated API with the new

    scoped API (`getExternalFilesDir()` and `getExternalCacheDir()`).

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    scoped API (`getExternalFilesDir()` and `getExternalCacheDir()`).

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    It also provides a temporary migration to move user data from the

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    shared external directory to new storage.

    

    Fixes #2097,  #11417 and #11118

    Fixes #2097,  #11417 and #11118

    Make /status message easier to read

    Add embedded PNG texture modifier (#11498)

    Remove broken timeout behaviour

    

    Code that relies on `resend_count` was added in 7ea4a03 and 247a1eb, but never worked.

    This was fixed in #11607 which caused the problem to surface.

    Hence undo the first commit entirely and change the logic of the second.

    Code that relies on `resend_count` was added in 7ea4a03 and 247a1eb, but never worked.

    This was fixed in #11607 which caused the problem to surface.

    Hence undo the first commit entirely and change the logic of the second.

    This was fixed in #11607 which caused the problem to surface.

    Hence undo the first commit entirely and change the logic of the second.

    Hence undo the first commit entirely and change the logic of the second.

    Fix player HP desync between client and server

    Remove a few unused functions reported by callcatcher (#11658)

    Move instead of copy during content install if possible

    Move archive extraction in content store to async job

    Make fs::extractZipFile thread-safe

    Add "MINETEST_MOD_PATH" environment variable (#11515)

    

    This adds an environment variable MINETEST_MOD_PATH.

    When it exists, Minetest will look there for mods in addition to ~/.minetest/mods/.

    This adds an environment variable MINETEST_MOD_PATH.

    When it exists, Minetest will look there for mods in addition to ~/.minetest/mods/.

    When it exists, Minetest will look there for mods in addition to ~/.minetest/mods/.

    List only jpg and png as screenshot format options (#11675)

    

    The other formats are no longer supported in Minetest Irrlicht.

    The other formats are no longer supported in Minetest Irrlicht.

    Reduce shadow jitter (#11668)

    Fix crash when calling remove/kick/ban_player on start (#11672)

    Make MetaDataRef:get return nil instead of nothing (#11666)

    Add get_server_max_lag() (#11671)

    Add an option `-t` to force text output in /help

    

    This also improves detection of whether formspecs are available.

    This also improves detection of whether formspecs are available.

    Improvements to colored shadows (#11516)

    Split liquid_viscosity to liquid_viscosity and move_resistance (#10810)

    Order drawlist by distance to the camera when rendering (#11651)

    Various code improvements

    

    * Camera: Fix division by 0 after view bobbing

    * Remove ignored constness

    * Connection: Improve window size range limits

    * Camera: Fix division by 0 after view bobbing

    * Remove ignored constness

    * Connection: Improve window size range limits

    * Remove ignored constness

    * Connection: Improve window size range limits

    * Connection: Improve window size range limits

    Update builtin locale files (#11650)

    Use CMake's GNUInstallDirs for install directories on Unix (#11636)

    

    This makes the installation process honor system-specific

    directories (e.g. ${PREFIX}/man instead of ${PREFIX}/share/man on

    BSD).

    This makes the installation process honor system-specific

    directories (e.g. ${PREFIX}/man instead of ${PREFIX}/share/man on

    BSD).

    directories (e.g. ${PREFIX}/man instead of ${PREFIX}/share/man on

    BSD).

    BSD).

    Fix several typos in settingtypes.txt (#11623)

    Touch UI support for desktop builds (#10729)

    Fix "Could not create ITexture, texture needs to have a non-empty name" warning

    Fix src/util/string.cpp on NetBSD

    

    - iconv() prototype changed from traditional Unix defintion

      to POSIX definition in 9.99.x.

    - wchar_t is not a valid character set for iconv. Share code

      with Android for using UTF-32.

    - iconv() prototype changed from traditional Unix defintion

      to POSIX definition in 9.99.x.

    - wchar_t is not a valid character set for iconv. Share code

      with Android for using UTF-32.

      to POSIX definition in 9.99.x.

    - wchar_t is not a valid character set for iconv. Share code

      with Android for using UTF-32.

    - wchar_t is not a valid character set for iconv. Share code

      with Android for using UTF-32.

      with Android for using UTF-32.

    Fix client-side performance of chat UI (#11612)

    Fix HUD multiline text alignment (#10795)

    Fix trivial typos

    Add feature table entry for new dynamic media API

    Add preprocessor check for weird (incorrect) build configurations

    Shave off buffer copies in networking code (#11607)

    Fix GLES2 discard behaviour (texture transparency)

    Hide Wself-assign-overloaded and Wself-move unittest compilation warnings

    

    The warnings occured with the clang compiler

    The warnings occured with the clang compiler

    Readd TGA to the list of valid texture formats. (#11598)

    Chop game background in mainmenu (#10796)

    Add Windows-specific CreateTempFile() implementation

    

    Once again MSVC is the only compiler not supporting basic POSIX functionality.

    Once again MSVC is the only compiler not supporting basic POSIX functionality.

    Fix broken handling of NodemetaChanged packets

    

    fixes #11610

    fixes #11610

    Make sure relevant std::stringstreams are set to binary

    Clean up/improve some scriptapi error handling code

    Send to clients node metadata that changed to become empty (#11597)

    Split vector.new into 3 constructors

    Dynamic_Add_Media v2 (#11550)

    Add missing zstd-libs to final Docker image

    

    Also add `minetestserver --version` command to verify docker build in CI

    Also add `minetestserver --version` command to verify docker build in CI

    Fix movement in random_input mode (#11592)

    Add hint to error message on how to build with in-tree Irrlicht

    Fix falling mesh nodes being half size (#11389)

    Update README for zstd changes

    Don't look for zlib and zstd manually on Windows

    Drop Ubuntu 16.04 from gitlab-ci, add 20.04 instead

    Check for required libzstd APIs in cmake

    

    It's very unlikely that anyone uses a zstd version this old, but if they do fail early.

    It's very unlikely that anyone uses a zstd version this old, but if they do fail early.

    Switch MapBlock compression to zstd (#10788)

    

    * Add zstd support.

    * Rearrange serialization order

    * Compress entire mapblock

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Add zstd support.

    * Rearrange serialization order

    * Compress entire mapblock

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Rearrange serialization order

    * Compress entire mapblock

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Compress entire mapblock

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    CI: Bump IrrlichtMt to 1.9.0mt3

    Remove closing paren as weblink delimiter

    Async-related script cleanups

    CI: Add macOS workflow (#11454)

    Remove redundant on_dieplayer calls

    Joystick sensitivity for player movement (#11262)

    

    This commit deprecates the forward, backward, left, and right binary

    inputs currently used for player movement in the PlayerControl struct.

    In their place, it adds the movement_speed and movement_direction

    values, which represents the player movement is a polar coordinate

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    This commit deprecates the forward, backward, left, and right binary

    inputs currently used for player movement in the PlayerControl struct.

    In their place, it adds the movement_speed and movement_direction

    values, which represents the player movement is a polar coordinate

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    inputs currently used for player movement in the PlayerControl struct.

    In their place, it adds the movement_speed and movement_direction

    values, which represents the player movement is a polar coordinate

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    In their place, it adds the movement_speed and movement_direction

    values, which represents the player movement is a polar coordinate

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    values, which represents the player movement is a polar coordinate

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    system.

    

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    movement_speed is a scalar from 0.0 to 1.0. movement_direction is

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    an angle from 0 to +-Pi:

    

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

                   FWD

                    0

                    _

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

             LFT   / \   RGT

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

            -Pi/2 |   | +Pi/2

                   \_/

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

                   +-Pi

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

                   BCK

    

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    Boolean movement bits will still be set for server telegrams and

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    Lua script invocations to provide full backward compatibility.

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    When generating these values from an analog input, a direction is

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    considered active when it is 22.5 degrees away from either

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    orthogonal axis.

    

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Markus Koch <markus@notsyncing.net>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Add group-based tool filtering for node drops (#10141)

    

    Supports both AND and OR requirements, e.g.

    

     * "a tool that's in any of these groups"

     * "a tool that's in all of these groups"

    Supports both AND and OR requirements, e.g.

    

     * "a tool that's in any of these groups"

     * "a tool that's in all of these groups"

     * "a tool that's in any of these groups"

     * "a tool that's in all of these groups"

     * "a tool that's in all of these groups"

    Optimize vector length calculations (#11549)

    Add debian 11 to Gitlab-CI (#11571)

    

    * feat(gitlab-ci): add debian 11 support

    * feat(gitlab-ci): add debian 11 support

    fix: update to alpine 3.14 (#11570)

    Set policies through CMake 3.9 to allow enabling IPO (#11560)

    Fix 6th line of infotext being cut off in half (#11456)

    Inventory: Fix rare out-of-bounds access

    

    Co-authored-by: Thomas--S <info@thomas-stangl.de>

    Co-authored-by: Thomas--S <info@thomas-stangl.de>

    Use utf-8 for the Irrlicht clipboard (#11538)

    Fix server-only builds on older CMake versions (#11566)

    

    closes #11564

    closes #11564

    HUD: Reject and warn on invalid stat types (#11548)

    

    This comes into play on older servers which do not know the "stat" type.

    Warnings are only logged once to avoid spam within globalstep callbacks

    This comes into play on older servers which do not know the "stat" type.

    Warnings are only logged once to avoid spam within globalstep callbacks

    Warnings are only logged once to avoid spam within globalstep callbacks

    Allow lib/irrlichtmt to work for server builds (headers-only)

    Show status message when changing block bounds (#11556)

    Validate staticdata and object property length limits (#11511)

    

    Some games provide users with enough freedom to create items

    with metadata longer than 64KB, preventing this from causing

    issues is on them but we'll still do the minimum not to abort

    the server if this happens.

    Some games provide users with enough freedom to create items

    with metadata longer than 64KB, preventing this from causing

    issues is on them but we'll still do the minimum not to abort

    the server if this happens.

    with metadata longer than 64KB, preventing this from causing

    issues is on them but we'll still do the minimum not to abort

    the server if this happens.

    issues is on them but we'll still do the minimum not to abort

    the server if this happens.

    the server if this happens.

    Fix scaled world-aligned textures being aligned inconsistently for non-normal drawtypes

    Add fwgettext util function

    Fix inconsistent integer comparison warnings

    Clarify the meaning of "rightclick"/"use" in documentation (#11471)

    Start sprite animation at the beginning (#11509)

    

    When setting a sprite animation, do not keep the last animation's frame number. Setting a new animation should start the animation at the start of the new animation.

    When setting a sprite animation, do not keep the last animation's frame number. Setting a new animation should start the animation at the start of the new animation.

    Cap iterations of imageCleanTransparent sanely

    

    fixes #11513 performance regression with 256x textures

    fixes #11513 performance regression with 256x textures

    Fix access violation in create_schematic() (#11534)

    

    fixes #11533

    

    Schematics saved from y locations greater than 0 would cause an access violation if layer probabilities were specified

    fixes #11533

    

    Schematics saved from y locations greater than 0 would cause an access violation if layer probabilities were specified

    Schematics saved from y locations greater than 0 would cause an access violation if layer probabilities were specified

    Fix segfault caused by shadow map on exit

    Add disable_settings to game.conf to get rid of "Enable Damage"/"Creative Mode"/"Host Server" checkboxes (#11524)

    

    This adds support for disable_settings to game.conf. In this you can specify a list of settings that should not be visible in the "local game" (or however it is called nowadays) tab. Enable Damage, Creative Mode and Host Server are supported.

    

    Co-authored-by: Wuzzy <Wuzzy2@mail.ru>

    Co-authored-by: Aaron Suen <warr1024@gmail.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    This adds support for disable_settings to game.conf. In this you can specify a list of settings that should not be visible in the "local game" (or however it is called nowadays) tab. Enable Damage, Creative Mode and Host Server are supported.

    

    Co-authored-by: Wuzzy <Wuzzy2@mail.ru>

    Co-authored-by: Aaron Suen <warr1024@gmail.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: Wuzzy <Wuzzy2@mail.ru>

    Co-authored-by: Aaron Suen <warr1024@gmail.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: Aaron Suen <warr1024@gmail.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Move updating shadows outside of RenderingCore::drawAll. (#11491)

    

    Fixes indirect rendering modes such as some 3D modes mentioned in #11437 and undersampled rendering.

    Does not fully fix anaglyph 3d mode.

    Fixes indirect rendering modes such as some 3D modes mentioned in #11437 and undersampled rendering.

    Does not fully fix anaglyph 3d mode.

    Does not fully fix anaglyph 3d mode.

    Fix a segfault caused by wrong textdomain lines in translation files (#11530)

    

    * The problem were lines like these:

      "# textdomain:"

    * str_split does not add an empty last part if there is a delimiter

      at the end, but this was probably assumed here.

    * The problem were lines like these:

      "# textdomain:"

    * str_split does not add an empty last part if there is a delimiter

      at the end, but this was probably assumed here.

      "# textdomain:"

    * str_split does not add an empty last part if there is a delimiter

      at the end, but this was probably assumed here.

    * str_split does not add an empty last part if there is a delimiter

      at the end, but this was probably assumed here.

      at the end, but this was probably assumed here.

    Remove statement semicolons from a lua script

    Fix GUIEditBoxWithScrollBar using a smaller steps than intlGUIEditBox (#11519)

    Gettext support on Android (#11435)

    

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: =?UTF-8?q?Olivier=20Samyn=20=F0=9F=8E=BB?= <code@oleastre.be>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: =?UTF-8?q?Olivier=20Samyn=20=F0=9F=8E=BB?= <code@oleastre.be>

    OpenAL: Free buffers on quit

    ContentDB: Add support for package aliases / renaming (#11484)

    Mods: Combine mod loading checks and deprection logging (#11503)

    

    This limits the logged deprecation messages to the mods that are loaded

    Unifies the mod naming convention check for CSM & SSM

    This limits the logged deprecation messages to the mods that are loaded

    Unifies the mod naming convention check for CSM & SSM

    Unifies the mod naming convention check for CSM & SSM

    Fix /emergeblocks crashing in debug builds (#11461)

    

    The reason for the bug was an u16 overflow, thus failing the assert. This only happened in Debug build but not in Release builds.

    The reason for the bug was an u16 overflow, thus failing the assert. This only happened in Debug build but not in Release builds.

    Update IrrlichtMt-related stuff in README

    Remove unsupported formats from the media enumerator

    Remove unsupported extensions from list in tile.cpp

    Add a simple PNG image encoder with Lua API (#11485)

    

    * Add a simple PNG image encoder with Lua API

    Add ColorSpec to RGBA converter

    Make a safety wrapper for the encoder

    Create devtest examples

    

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    * Add a simple PNG image encoder with Lua API

    Add ColorSpec to RGBA converter

    Make a safety wrapper for the encoder

    Create devtest examples

    

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Add ColorSpec to RGBA converter

    Make a safety wrapper for the encoder

    Create devtest examples

    

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Make a safety wrapper for the encoder

    Create devtest examples

    

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Create devtest examples

    

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    buildbot: Readd missing IrrlichtMt DLLs

    Add bold, italic and monospace font styling for HUD text elements (#11478)

    

    Co-authored-by: Elias Fleckenstein <eliasfleckenstein@web.de>

    Co-authored-by: Elias Fleckenstein <eliasfleckenstein@web.de>

    Take advantage of IrrlichtMt CMake target (#11287)

    

    With the CMake changes to IrrlichtMt, it's now possible to use a target for IrrlichtMt.

    Besides greatly improving the ease of setting up IrrlichtMt for users building the client, it removes the need for Minetest's CMake to include transitive dependencies such as image libraries, cleaning it up a tiny bit. The PR works by finding the IrrlichtMt package and linking to the target it provides. If the package isn't found and it isn't building the client, it will still fall back to using just the headers of old Irrlicht or IrrlichtMt.

    With the CMake changes to IrrlichtMt, it's now possible to use a target for IrrlichtMt.

    Besides greatly improving the ease of setting up IrrlichtMt for users building the client, it removes the need for Minetest's CMake to include transitive dependencies such as image libraries, cleaning it up a tiny bit. The PR works by finding the IrrlichtMt package and linking to the target it provides. If the package isn't found and it isn't building the client, it will still fall back to using just the headers of old Irrlicht or IrrlichtMt.

    Besides greatly improving the ease of setting up IrrlichtMt for users building the client, it removes the need for Minetest's CMake to include transitive dependencies such as image libraries, cleaning it up a tiny bit. The PR works by finding the IrrlichtMt package and linking to the target it provides. If the package isn't found and it isn't building the client, it will still fall back to using just the headers of old Irrlicht or IrrlichtMt.

    Improve documentation of tools (#11128)

    ContentDB: Add reason to downloads (#10876)

    Distribute shadow map update over multiple frames to reduce stutter (#11422)

    

    Reduces stutter and freezes when playing.

    

     * Maintains double SM and SM Color textures

     * Light frustum update triggers incremental generation of shadow map into secondary 'future' textures.

     * Every incremental update renders a portion of the shadow draw list (split equally).

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Reduces stutter and freezes when playing.

    

     * Maintains double SM and SM Color textures

     * Light frustum update triggers incremental generation of shadow map into secondary 'future' textures.

     * Every incremental update renders a portion of the shadow draw list (split equally).

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

     * Maintains double SM and SM Color textures

     * Light frustum update triggers incremental generation of shadow map into secondary 'future' textures.

     * Every incremental update renders a portion of the shadow draw list (split equally).

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

     * Light frustum update triggers incremental generation of shadow map into secondary 'future' textures.

     * Every incremental update renders a portion of the shadow draw list (split equally).

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

     * Every incremental update renders a portion of the shadow draw list (split equally).

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

     * After defined number of frames (currently, 4), 'future' and 'current' textures are swapped, and DirectionalLight 'commits' the new frustum to use when rendering shadows on screen.

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Add smooth light-shadow transition at noon (#11430)

    

    Node faces with normals pointing East/West (+X/-X) will transition between light

    and shadow at noon. This code makes the transition smooth.

    Node faces with normals pointing East/West (+X/-X) will transition between light

    and shadow at noon. This code makes the transition smooth.

    and shadow at noon. This code makes the transition smooth.

    Document glasslikeliquidlevel merge bits (#11479)

    Remove unused ITextSceneNode header (#11476)

    

    Co-authored-by: hecktest <>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Remove unused header includes

    Fix no locales being generated when APPLY_LOCALE_BLACKLIST=0

    

    Also enable `ky` which appears to work fine.

    Also enable `ky` which appears to work fine.

    CSM: Do not index files within hidden directories

    

    CSM would previously scan for files within .git or .svn directories, and also special files such as .gitignore

    CSM would previously scan for files within .git or .svn directories, and also special files such as .gitignore

    Add wallmounted support for plantlike and plantlike_rooted nodes (#11379)

    Fix documented default colors for set_sky

    Remove hardcoded "You died." message in chat (#11443)

    Fix revoke debug privs not reliably turn off stuff (#11409)

    Fix build on Ubuntu 16.04 and macOS

    

    Apparently the C++ standard library is supposed to provide

    specializations of std::hash for enums (even in C++11)

    but those don't always work for whatever reason.

    Apparently the C++ standard library is supposed to provide

    specializations of std::hash for enums (even in C++11)

    but those don't always work for whatever reason.

    specializations of std::hash for enums (even in C++11)

    but those don't always work for whatever reason.

    but those don't always work for whatever reason.

    Avoid draw list and shadow map update in the same frame to reduce dtime jitter (#11393)

    

    * Separate draw list and shadows update to reduce jitter

    

    * Avoid draw list update and shadow update in the same frame

    

    * Force-update shadows when camera offset changes

    * Separate draw list and shadows update to reduce jitter

    

    * Avoid draw list update and shadow update in the same frame

    

    * Force-update shadows when camera offset changes

    * Avoid draw list update and shadow update in the same frame

    

    * Force-update shadows when camera offset changes

    * Force-update shadows when camera offset changes

    Improve shadow rendering with non-default camera FOV (#11385)

    

    * Adjust minimum filter radius for perspective

    

    * Expand shadow frustum when camera FOV changes, reuse FOV distance adjustment from numeric.cpp

    

    * Read shadow_soft_radius setting as float

    

    * Use adaptive filter radius to accomodate for PSM distortion

    

    * Adjust filter radius for texture resolution

    * Adjust minimum filter radius for perspective

    

    * Expand shadow frustum when camera FOV changes, reuse FOV distance adjustment from numeric.cpp

    

    * Read shadow_soft_radius setting as float

    

    * Use adaptive filter radius to accomodate for PSM distortion

    

    * Adjust filter radius for texture resolution

    * Expand shadow frustum when camera FOV changes, reuse FOV distance adjustment from numeric.cpp

    

    * Read shadow_soft_radius setting as float

    

    * Use adaptive filter radius to accomodate for PSM distortion

    

    * Adjust filter radius for texture resolution

    * Read shadow_soft_radius setting as float

    

    * Use adaptive filter radius to accomodate for PSM distortion

    

    * Adjust filter radius for texture resolution

    * Use adaptive filter radius to accomodate for PSM distortion

    

    * Adjust filter radius for texture resolution

    * Adjust filter radius for texture resolution

    Refactor video driver name retrieval (#11413)

    

    Co-authored-by: hecktest <>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Fix typo in lua_api.txt

    Script API: Fix segfault in remove_detached_inventory

    

    when minetest.remove_detached_inventory is called on script init, the environment is yet not set up,

    hence m_env is still nullptr until all scripts are loaded

    when minetest.remove_detached_inventory is called on script init, the environment is yet not set up,

    hence m_env is still nullptr until all scripts are loaded

    hence m_env is still nullptr until all scripts are loaded

    Use `persistence` instead of `persist` in NoiseParams examples

    Add API for mods to hook liquid transformation events (#11405)

    

    Add API for mods to hook liquid transformation events

    

    Without this API, there is no reliable way for mods to be

    notified when liquid transform modifies nodes and mods are

    forced to poll for changes.  This allows mods to detect

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    Add API for mods to hook liquid transformation events

    

    Without this API, there is no reliable way for mods to be

    notified when liquid transform modifies nodes and mods are

    forced to poll for changes.  This allows mods to detect

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    Without this API, there is no reliable way for mods to be

    notified when liquid transform modifies nodes and mods are

    forced to poll for changes.  This allows mods to detect

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    notified when liquid transform modifies nodes and mods are

    forced to poll for changes.  This allows mods to detect

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    forced to poll for changes.  This allows mods to detect

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    changes to flowing liquid nodes and liquid renewal using

    event-driven logic.

    event-driven logic.

    Add .editorconfig (#11412)

    

    * Add an .editorconfig to the repo root folder, providing code style hints for some text editors and making the code render properly in github.

    

    Co-authored-by: hecktest <>

    * Add an .editorconfig to the repo root folder, providing code style hints for some text editors and making the code render properly in github.

    

    Co-authored-by: hecktest <>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Auth API: Error when accessed prior to ServerEnv init (#11398)

    Remove unsupported video drivers (#11395)

    

    This completely removes any mention of the software and D3D drivers from MT, preventing the user from accidentally attempting to use them. Users who need a software renderer should be asked to install Mesa drivers which offer superior fidelity and performance over the 'burningsvideo' driver.

    This completely removes any mention of the software and D3D drivers from MT, preventing the user from accidentally attempting to use them. Users who need a software renderer should be asked to install Mesa drivers which offer superior fidelity and performance over the 'burningsvideo' driver.

    Run on_grant and on_revoke callbacks after privs change (#11387)

    

    Callbacks were run too early. This changes the order to call after the privs are updated.

    Callbacks were run too early. This changes the order to call after the privs are updated.

    Inventory: Make addList() consistent (#11382)

    

    Fixes list clearing for inv:set_list() using same size, since 2db6b07.

    addList() now clears the list in all cases. Use setSize() to resize without clearing.

    Fixes list clearing for inv:set_list() using same size, since 2db6b07.

    addList() now clears the list in all cases. Use setSize() to resize without clearing.

    addList() now clears the list in all cases. Use setSize() to resize without clearing.

    Fix spurious shadow enablement in mainmenu

    

    fixes #11394

    fixes #11394

    Use user provided lib/irrlichtmt if available (#11276)

    

    Use user provided lib/irrlichtmt if available

    

    Make it possible for a user to provide the IrrlichtMt dependency as

    subdirectory at `lib/irrlichtmt`.

    The subdirectory is added with the `EXCLUDE_FROM_ALL` flag to prevent

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    Use user provided lib/irrlichtmt if available

    

    Make it possible for a user to provide the IrrlichtMt dependency as

    subdirectory at `lib/irrlichtmt`.

    The subdirectory is added with the `EXCLUDE_FROM_ALL` flag to prevent

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    Make it possible for a user to provide the IrrlichtMt dependency as

    subdirectory at `lib/irrlichtmt`.

    The subdirectory is added with the `EXCLUDE_FROM_ALL` flag to prevent

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    subdirectory at `lib/irrlichtmt`.

    The subdirectory is added with the `EXCLUDE_FROM_ALL` flag to prevent

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    The subdirectory is added with the `EXCLUDE_FROM_ALL` flag to prevent

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    `libirrlichtmt.a` or other header files to be installed.

    

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    This enables the user to do the following to satisfy the IrrlichtMt

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    dependency:

    

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    git clone --depth 1 https://github.com/minetest/irrlicht.git lib/irrlichtmt

    cmake . -DRUN_IN_PLACE=TRUE

    cmake . -DRUN_IN_PLACE=TRUE

    Require 'basic_debug' priv to view gameplay-relevant debug info, require 'debug' priv to view wireframe (#9315)

    

    Fixes #7245.

    Fixes #7245.

    Perform some quality assurance for translation strings (#11375)

    Rework Settings to support arbitrary hierarchies (#11352)

    Buildbot: Use posix on Win64 builds if available (#11355)

    

    Use posix mingw-w64 toolchain on Win64 builds where applicable, avoids

    many build errors when using buildwin64.sh to build 64 bit builds on

    Ubuntu based Linux distributions

    Use posix mingw-w64 toolchain on Win64 builds where applicable, avoids

    many build errors when using buildwin64.sh to build 64 bit builds on

    Ubuntu based Linux distributions

    many build errors when using buildwin64.sh to build 64 bit builds on

    Ubuntu based Linux distributions

    Ubuntu based Linux distributions

    Server: Ignore whitespace-only chat messages

    Document hypertext escaping (#11374)

    Move build/android directory to root of project (#11283)

    Update builtin locale (#11371)

    Strip carriage returns from lines in settingtypes.txt (#11338)

    

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Update Dockerfile and improve build speed (#11313)

    

    Use ninja to build image, rename docker build steps: builder and runtime, add argument for docker image version

    

    Signed-off-by: Bensuperpc <bensuperpc@gmail.com>

    Use ninja to build image, rename docker build steps: builder and runtime, add argument for docker image version

    

    Signed-off-by: Bensuperpc <bensuperpc@gmail.com>

    Signed-off-by: Bensuperpc <bensuperpc@gmail.com>

    Fix some typos in builtin (#11370)

    Inventory: show error on invalid list names (#11368)

    Add min_y and max_y checks for Active Block Modifiers (ABM) (#11333)

    

    This check can be used by ABM to reduce CPU usage.

    This check can be used by ABM to reduce CPU usage.

    Make chat web links clickable (#11092)

    

    If enabled in minetest.conf, provides colored, clickable (middle-mouse or ctrl-left-mouse) weblinks in chat output, to open the OS' default web browser.

    If enabled in minetest.conf, provides colored, clickable (middle-mouse or ctrl-left-mouse) weblinks in chat output, to open the OS' default web browser.

    Add roadmap (#10536)

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example and dummy translation file

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 95.1% (1290 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.5% (1106 of 1356 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 75.6% (1026 of 1356 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 58.1% (789 of 1356 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Marathi)

    

    Currently translated at 8.6% (117 of 1356 strings)

    Currently translated at 8.6% (117 of 1356 strings)

    Added translation using Weblate (Marathi)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 44.6% (606 of 1356 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 48.7% (661 of 1356 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 12.0% (164 of 1356 strings)

    Added translation using Weblate (Filipino)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 44.3% (601 of 1356 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 98.7% (1339 of 1356 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.8% (1286 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.4% (1104 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.4% (1104 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 81.0% (1099 of 1356 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 16.5% (224 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 3.2% (44 of 1356 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 3.2% (44 of 1356 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 93.2% (1264 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.7% (1081 of 1356 strings)

    Translated using Weblate (Tatar)

    

    Currently translated at 0.4% (6 of 1356 strings)

    Currently translated at 0.4% (6 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Added translation using Weblate (Tatar)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.8% (1354 of 1356 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.7% (1353 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.0% (1330 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.6% (1311 of 1356 strings)

    Translated using Weblate (Latvian)

    

    Currently translated at 26.2% (372 of 1416 strings)

    Currently translated at 28.6% (388 of 1356 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 72.4% (982 of 1356 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 72.4% (982 of 1356 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 71.6% (972 of 1356 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 75.8% (1028 of 1356 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.5% (1309 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.5% (1079 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.5% (1079 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.5% (1079 of 1356 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 8.8% (120 of 1356 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.7% (1285 of 1356 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.7% (1285 of 1356 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.5% (1255 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 79.0% (1072 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 78.0% (1059 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 78.0% (1059 of 1356 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 78.0% (1059 of 1356 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 25.7% (349 of 1356 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 94.6% (1283 of 1356 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 8.8% (120 of 1356 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.4% (1254 of 1356 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 39.5% (536 of 1356 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1356 of 1356 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.3% (1347 of 1356 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 71.2% (966 of 1356 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 99.7% (1352 of 1356 strings)

    Drop --videomodes, fullscreen_bpp and high_precision_fpu settings

    

    These have been pointless for a while.

    These have been pointless for a while.

    Message for empty list output in /haspriv & /mods (#11149)

    falling.lua - Fix Meshnodes Being Too Big (#11307)

    Shadow mapping render pass (#11244)

    

    

    

    Co-authored-by: x2048 <codeforsmile@gmail.com>

    Co-authored-by: x2048 <codeforsmile@gmail.com>

    Fix check that given IRRLICHT_LIBRARY exists

    Android: Do not submit text after pressing Enter key for multi-line text (#11298)

    

    Regular EditText is used for multi-line text to not close the dialog after pressing back button.

    New button is added for submitting multi-line text.

    Regular EditText is used for multi-line text to not close the dialog after pressing back button.

    New button is added for submitting multi-line text.

    New button is added for submitting multi-line text.

    Add metatables to lua vectors (#11039)

    

    Add backwards-compatible metatable functions for vectors.

    Add backwards-compatible metatable functions for vectors.

    fontengine: Fix crash loading PNG/XML fonts from paths without dot

    

    fixes #11096

    fixes #11096

    Add core.compare_block_status function (#11247)

    

    Makes it possible to check the status of the mapblock in a future-extensible way.

    Makes it possible to check the status of the mapblock in a future-extensible way.

    Fix base64 validation and add unittests (#10515)

    

    Implement proper padding character checks

    Implement proper padding character checks

    Use safe_file_write to save forceloaded blocks

    Fix procession ordering issue in content_cao

    Remove unused version detection from FindLuaJIT.cmake

    Fix background color of formspec text fields

    script: Replace calls to depreated luaL_openlib

    Provide exact error message if postgres connection string missing

    Fix misleading /shutdown command syntax

    UnitSAO: Prevent circular attachments

    Fix cloud fog being broken for high clouds

    Fix client crash on when con::PeerNotFoundException is thrown (#11286)

    GUIEditBox: Allow selecting and copying read-only texts

    CI: add workaround to fix clang builds

    

    see https://github.com/actions/virtual-environments/issues/3376

    see https://github.com/actions/virtual-environments/issues/3376

    Fix curl_timeout being ignored for Lua HTTP fetches

    Fix list of libraries included in AppImage

    Use --image-base instead of -Ttext-segment for lld linker on FreeBSD (#9367) (#11263)

    Fix swapped vertex colors on GLES2

    Fix overlays for 2D-drawn items

    

    fixes #11248

    fixes #11248

    Fix build for newer versions of GCC (#11246)

    Improve liquid documentation (#11158)

    fix: extractZipFile is not part of Client but more generic.

    

    This solve a crash from mainmenu while extracting the zip

    This solve a crash from mainmenu while extracting the zip

    Add basic client-server test to CI

    Use Irrlicht functions to query npot texture support

    fix: some code tidy about includes & irr namespaces

    refacto: remove get_gui_env & draw_load_screen from RenderingEngine singleton

    fix: don't use RenderingEngine singleton when it's possible

    refacto: RenderingEngine::get_scene_manager() is now not callable from singleton

    

    This permits to make evidence that we have some bad object passing on various code parts. I fixed majority of them to reduce the scope of passed objects

    

    Unfortunately, for some edge cases i should have to expose ISceneManager from client, this should be fixed in the future when our POO will be cleaner client side (we have a mix of rendering and processing in majority of the client objects, it works but it's not clean)

    This permits to make evidence that we have some bad object passing on various code parts. I fixed majority of them to reduce the scope of passed objects

    

    Unfortunately, for some edge cases i should have to expose ISceneManager from client, this should be fixed in the future when our POO will be cleaner client side (we have a mix of rendering and processing in majority of the client objects, it works but it's not clean)

    Unfortunately, for some edge cases i should have to expose ISceneManager from client, this should be fixed in the future when our POO will be cleaner client side (we have a mix of rendering and processing in majority of the client objects, it works but it's not clean)

    refacto: Hud: make driver, client, player, inventory, tsrc private & drop unused guienv

    

    also fix c_content.h, on client it includes the src/client/hud.h instead of src/hud.h, which leads to wrong file dependency on the lua stack

    also fix c_content.h, on client it includes the src/client/hud.h instead of src/hud.h, which leads to wrong file dependency on the lua stack

    refacto: drop unused Hud::smgr

    refacto: don't use RenderingEngine singleton on CAO

    

    * we don't need on CAO side more than SceneManager, and temporary. Pass only required SceneManager as a parameter to build CAO and add them to the current scene

    * Use temporary the RenderingEngine singleton from ClientEnvironment, waitfor for better solution

    * Make ClientActiveObject::addToScene virtual function mandatory to be defined by children to ensure we don't forget to properly define it

    * we don't need on CAO side more than SceneManager, and temporary. Pass only required SceneManager as a parameter to build CAO and add them to the current scene

    * Use temporary the RenderingEngine singleton from ClientEnvironment, waitfor for better solution

    * Make ClientActiveObject::addToScene virtual function mandatory to be defined by children to ensure we don't forget to properly define it

    * Use temporary the RenderingEngine singleton from ClientEnvironment, waitfor for better solution

    * Make ClientActiveObject::addToScene virtual function mandatory to be defined by children to ensure we don't forget to properly define it

    * Make ClientActiveObject::addToScene virtual function mandatory to be defined by children to ensure we don't forget to properly define it

    refacto: protect some RenderingEngine::get_scene_manager

    

    * protect it from Camera, Sky, ClientMap object calls

    * rename Game::sky to Game::m_sky

    * protect it from Camera, Sky, ClientMap object calls

    * rename Game::sky to Game::m_sky

    * rename Game::sky to Game::m_sky

    refacto: RenderingEngine is now better hidden

    

    * No more access to the singleton instance from everywhere (RenderingEngine::get_instance dropped)

    * RenderingEngine::get_timer_time is now non static

    * RenderingEngine::draw_menu_scene is now non static

    * RenderingEngine::draw_scene is now non static

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * No more access to the singleton instance from everywhere (RenderingEngine::get_instance dropped)

    * RenderingEngine::get_timer_time is now non static

    * RenderingEngine::draw_menu_scene is now non static

    * RenderingEngine::draw_scene is now non static

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::get_timer_time is now non static

    * RenderingEngine::draw_menu_scene is now non static

    * RenderingEngine::draw_scene is now non static

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::draw_menu_scene is now non static

    * RenderingEngine::draw_scene is now non static

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::draw_scene is now non static

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::{initialize,finalize} are now non static

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::run is now non static

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    * RenderingEngine::getWindowSize now have a static helper. It was mandatory to hide the global get_instance access

    refacto: hide mesh_cache inside the rendering engine

    

    This permit cleaner access to meshCache and ensure we don't access to it from all the code

    This permit cleaner access to meshCache and ensure we don't access to it from all the code

    refacto: add RenderingEngine::cleanupMeshCache

    

    This permits to prevent client to own the mesh cache cleanup logic. It's better in RenderingEngine

    This permits to prevent client to own the mesh cache cleanup logic. It's better in RenderingEngine

    refacto: rendering engine singleton removal step 1 (filesystem)

    

    Make the RenderingEngine filesystem member non accessible from everywhere

    

    This permits also to determine that some lua code has directly a logic to extract zip file. Move this logic inside client, it's not the lua stack role to perform a such complex operation

    

    Found also another irrlicht <1.8 compat code to remove

    Make the RenderingEngine filesystem member non accessible from everywhere

    

    This permits also to determine that some lua code has directly a logic to extract zip file. Move this logic inside client, it's not the lua stack role to perform a such complex operation

    

    Found also another irrlicht <1.8 compat code to remove

    This permits also to determine that some lua code has directly a logic to extract zip file. Move this logic inside client, it's not the lua stack role to perform a such complex operation

    

    Found also another irrlicht <1.8 compat code to remove

    Found also another irrlicht <1.8 compat code to remove

    fix: drop old irrlicht <1.8 compat on Client::loadMedia

    Fix Windows pipelines on Gitlab-CI

    Fix rotation for falling mesh degrotate nodes (#11159)

    Add helpful error messages if Irrlicht library / include dir are set incorrectly (#11232)

    Update library versions in buildbot (#11229)

    Rename “Irrlicht” to “IrrlichtMt” in documentation

    Add `minetest.colorspec_to_colorstring` (#10425)

    Fix two CMake build issues

    

    * PostgreSQL fallback code missed the includes (closes #11219)

    * build failed when Freetype enabled but not found

    * PostgreSQL fallback code missed the includes (closes #11219)

    * build failed when Freetype enabled but not found

    * build failed when Freetype enabled but not found

    Fix devtest Lua error

    

    fallback_image() was removed in 3e1904fa8c4aae3448d58b7e60545a4fdd8234f3,

    which was written after this PR but merged before it.

    fallback_image() was removed in 3e1904fa8c4aae3448d58b7e60545a4fdd8234f3,

    which was written after this PR but merged before it.

    which was written after this PR but merged before it.

    Look for PostgreSQL library properly and fix CI

    Enable cleanTransparent filter for mipmapping and improve its' algorithm (#11145)

    Put torch/signlike node on floor if no paramtype2 (#11074)

    Add a key to toggle map block bounds (#11172)

    

    It's often useful to know where the map block boundaries are for doing server admin work and the like.

    Adds three modes: single mapblock, range of 5, and disabled.

    It's often useful to know where the map block boundaries are for doing server admin work and the like.

    Adds three modes: single mapblock, range of 5, and disabled.

    Adds three modes: single mapblock, range of 5, and disabled.

    GLES fixes (#11205)

    

    * Consistently set float precision for GLES

    

    * Enable DPI scaling on Windows+GLES

    * Consistently set float precision for GLES

    

    * Enable DPI scaling on Windows+GLES

    * Enable DPI scaling on Windows+GLES

    Isolate library tables between sandbox and insecure env

    Fix ignored OpenGLES2 include path and cmake warning

    Also return the ObjectRef from minetest.spawn_falling_node() (#11184)

    Attachments: Avoid data loss caused by set_attach() in callbacks (#11181)

    Buildbot changes to allow out-of-tree builds (#11180)

    

    * Do proper out-of-tree builds with buildbot

    * Don't write to bin/ for cross builds

         * This allows safely building multiple builds from the same source dir, e.g. with the buildbot.

    * Disable Gettext (by default) and Freetype (entirely) for server builds

    * Do proper out-of-tree builds with buildbot

    * Don't write to bin/ for cross builds

         * This allows safely building multiple builds from the same source dir, e.g. with the buildbot.

    * Disable Gettext (by default) and Freetype (entirely) for server builds

    * Don't write to bin/ for cross builds

         * This allows safely building multiple builds from the same source dir, e.g. with the buildbot.

    * Disable Gettext (by default) and Freetype (entirely) for server builds

         * This allows safely building multiple builds from the same source dir, e.g. with the buildbot.

    * Disable Gettext (by default) and Freetype (entirely) for server builds

    * Disable Gettext (by default) and Freetype (entirely) for server builds

    Modifying fall damage via armor group (#11080)

    

    Adds a new fall_damage_add_percent armor group which influences the fall damage in addition to the existing node group.

    Adds a new fall_damage_add_percent armor group which influences the fall damage in addition to the existing node group.

    Fix server favorites not saving when client/serverlist/ doesn't exist already (#11152)

    Update German builtin translation

    Update builtin locale files

    Don't reseed stars when changing star count

    Update Android build config

    Make edit boxes respond to string input (IME) (#11156)

    

    Make edit boxes respond to string input events (introduced in minetest/irrlicht#23) that are usually triggered by entering text with an IME.

    Make edit boxes respond to string input events (introduced in minetest/irrlicht#23) that are usually triggered by entering text with an IME.

    Add vector.to_string and vector.from_string (#10323)

    

    Writing vectors as strings is very common and should belong to `vector.*`. `minetest.pos_to_string` is also too long to write, implies that one should only use it for positions and leaves no spaces after the commas.

    Writing vectors as strings is very common and should belong to `vector.*`. `minetest.pos_to_string` is also too long to write, implies that one should only use it for positions and leaves no spaces after the commas.

    Don't apply connection timeout limit to locally hosted servers

    

    fixes #11085

    fixes #11085

    Game: Scale damage flash to max HP

    

    The flash intensity is calculated proportionally to the maximal HP.

    The flash intensity is calculated proportionally to the maximal HP.

    Reserve vectors before pushing and other code quality changes (#11161)

    Devtest: Remove testnodes_show_fallback_image

    fix(ci): ensure we build on docker only modifications

    fix(docker): reduce the number of required libraries on build

    fix: use irrlicht fork instead of the standard library

    fix: don't send the whole local context to the docker image

    CGUITTFont optimizations (#11136)

    Sort out cURL timeouts and increase default

    Add `math.round` and fix `vector.round` (#10803)

    Irrlicht support code maintenance

    Draw items as 2D images (instead of meshes) when possible

    Block & report player self-interaction (#11137)

    Consistent title bar + render information in mainmenu (#10764)

    Add entry in features table for degrotate changes

    Fix wield image of plantlike_rooted (#11067)

    Degrotate support for mesh nodes (#7840)

    Update language choices in settingtypes.txt (#11124)

    Clean up various misleading and/or confusing messages and texts related to priv changes (#11126)

    Update CONTRIBUTING info on translating builtin

    Replace fallback font nonsense with automatic per-glyph fallback (#11084)

    Fix broken include check and correct Gitlab-CI script

    Translate chatcommand delay message and replace minetest with core (#11113)

    Adjust build config for Irrlicht changes (again)

    Drop irrUString from MT, it's owned by irrlicht now

    Fix attached-to-object sounds having a higher reference distance

    Fix broken `BiomeGen` abstraction (#11107)

    Fix segfault for model[] without animation speed

    lua_api.txt: Fix style selector examples

    Restore minimal normal texture support (for minimap shading)

    Serialize tool capabilities JSON without whitespace

    

    fixes #11087

    fixes #11087

    Mainmenu: Improve "Join Game" tab (#11078)

    Schematic: Properly deal with before/after node resolving and document (#11011)

    

    This fixes an out-of-bounds index access when the node resolver was already applied to the schematic (i.e. biome decoration).

    Also improves the handling of the two cases: prior node resolving (m_nodenames), and after node resolving (manual lookup)

    This fixes an out-of-bounds index access when the node resolver was already applied to the schematic (i.e. biome decoration).

    Also improves the handling of the two cases: prior node resolving (m_nodenames), and after node resolving (manual lookup)

    Also improves the handling of the two cases: prior node resolving (m_nodenames), and after node resolving (manual lookup)

    Builtin: Translatable join, leave, profiler msgs (#11064)

    Builtin: Italian translation (#11038)

    Check for duplicate login in TOSERVER_INIT handler (#11017)

    

    i.e. checks for duplicate logins before sending all media data to the client.

    i.e. checks for duplicate logins before sending all media data to the client.

    Scale mouse/joystick sensitivity depending on FOV (#11007)

    Drop old text input workarounds (#11089)

    

    * Drop unused intlGUIEditBox

    

    * Drop unnecessary Linux text input workarounds

    * Drop unused intlGUIEditBox

    

    * Drop unnecessary Linux text input workarounds

    * Drop unnecessary Linux text input workarounds

    GUIScene: Clear depth buffer + replace deprecated clearZBuffer calls

    Fix deprecated calls with Irrlicht 1.9

    Tweak duration_to_string formatting

    DevTest: Formspec tests, children getter, better lighttool (#10918)

    Devtest: Fix missing log level in minetest.log (#11068)

    Chatcommands: Show the execution time if the command takes a long time (#10472)

    Enable Irrlicht debug logging with --trace

    Avoid unnecessary copies during media/mesh loading

    Handle mesh load failure without crashing

    Update Gitlab-CI configuration too

    Clean up cmake DLL installation and other minor things

    CI: update configurations for Irrlicht fork

    Switch Irrlicht dependency to our own fork

    

    -> https://github.com/minetest/irrlicht

    -> https://github.com/minetest/irrlicht

    Restore Irrlicht 1.9 support

    Fix missing jsoncpp in the Docker image

    Use place_param2 client-side for item appearance & prediction (#11024)

    Translate builtin into German (server-side) (#11032)

    Fix misleading chat messages of /clearobjects (#10690)

    Protect dropping from far node inventories

    

    Also changes if/if to switch/case

    Also changes if/if to switch/case

    Protect per-player detached inventory actions

    Predict failing placement of ignore nodes

    Set ENABLE_SYSTEM_JSONCPP to TRUE by default

    Clean up ClientEvent hudadd/hudchange internals

    buildbot: Drop i586-mingw32msvc, add i686-w64-mingw32-posix detection

    Fix function override warnings in mg_ore.h

    Pause animations while game is paused (#10658)

    

    Pauses all mesh animations while game is paused.

    Pauses all mesh animations while game is paused.

    Translate builtin (#10693)

    

    This PR is the second attempt to translate builtin.

    Server-sent translation files can be added to `builtin/locale/`, whereas client-side translations depend on gettext.

    This PR is the second attempt to translate builtin.

    Server-sent translation files can be added to `builtin/locale/`, whereas client-side translations depend on gettext.

    Server-sent translation files can be added to `builtin/locale/`, whereas client-side translations depend on gettext.

    Protect mg_name and mg_flags from being set by Lua (#11010)

    Add mod.conf to preview clientmod (#11020)

    Use vec4 for varTexCoord in interlaced shader (#11004)

    

    Somewhen in the past, inTexCoord0 was a vec2. Now, it is a vec4.

    Somewhen in the past, inTexCoord0 was a vec2. Now, it is a vec4.

    Settings: Push groups in to_table as well

    Make pkgmgr handle modpacks containing modpacks properly

    

    fixes #10550

    fixes #10550

    Disable clang-format, clean up scripts

    pkgmgr: Fix crash when .conf release field is invalid

    

    Fixes #10942

    Fixes #10942

    Keep mapblocks in memory if they're in range (#10714)

    

    Some other minor parts of clientmap.cpp have been cleaned up along the way

    Some other minor parts of clientmap.cpp have been cleaned up along the way

    Fix hud_change and hud_remove after hud_add (#10997)

    Slap u64 on everything time-y (#10984)

    Allow toggling of texture pack by double clicking

    Deprecate not providing mod.conf

    Restructure teleport command code (#9706)

    Use "Aux1" key name consistently everywhere

    Continue with 5.5.0-dev

    Bump version to 5.4.0

    Fix keyWasDown in input handler

    

    This was changed 291a6b70d674d9003f522b5875a60f7e2753e32b but should have never been done.

    This was changed 291a6b70d674d9003f522b5875a60f7e2753e32b but should have never been done.

    Update credits tab and mailmap

    Add script that sorts contributions for use in credits

    Allow overwriting media files of dependencies (#10752)

    Fix wrong number of items in allow_metadata_inventory_put/take callbacks (#10990)

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example and dummy translation file

    Reset Chinese translations to previous state

    

    due to vandalism

    due to vandalism

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 21.7% (294 of 1353 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 93.0% (1259 of 1353 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 16.0% (217 of 1353 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Norwegian Nynorsk)

    

    Currently translated at 36.7% (520 of 1416 strings)

    Currently translated at 32.8% (445 of 1353 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.6% (22 of 1353 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 24.3% (330 of 1353 strings)

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 13.9% (189 of 1353 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.4% (1345 of 1353 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 75.7% (1025 of 1353 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 18.4% (250 of 1353 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 13.7% (186 of 1353 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.0% (1340 of 1353 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 74.3% (1006 of 1353 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.3% (1303 of 1353 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 93.7% (1269 of 1353 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 53.5% (724 of 1353 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 0.5% (8 of 1353 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 21.2% (288 of 1353 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1353 of 1353 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.7% (1309 of 1353 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 73.6% (996 of 1353 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.6% (1348 of 1353 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.6% (1348 of 1353 strings)

    Minimap: Fix default label translations

    Fix wrong reported item counts for inventory actions using Shift-Move (#10930)

    Fail gracefully if main_menu_script has bad value (#10938)

    

    Builtin: Move :close() before dofile

    Builtin: Move :close() before dofile

    Fix world-aligned node rendering at bottom (#10742)

    Replace deprecated call to add_player_velocity in builtin (#10968)

    Add nametag background setting and object property (#10937)

    Fix short_description fallback order (#10943)

    Server-side authority for attached players (#10952)

    

    The server must have authority about attachments. This commit ignores any player movement packets as long they're attached.

    The server must have authority about attachments. This commit ignores any player movement packets as long they're attached.

    Fix segfault with invalid texture strings and minimap enabled

    

    closes #10949

    closes #10949

    Send attachments instantly before set_pos (#10235)

    Replace 'minetest.' with 'core.' in builtin

    Update URLs to HTTPS (#10923)

    Fix crash in tab_online when cURL is disabled

    Pause menu: Fix segfault on u/down key input

    Fix animation_image support in scroll containers

    Reduce empty translation error to infostream

    

    Fixes #10905

    Fixes #10905

    Use consistent temp folder path (#10892)

    Rewrite touch event conversion (#10636)

    Fall back to default when rendering mode (3d_mode) is set invalid (#10922)

    Reduce ore noise_parms error to deprecation warning (#10921)

    

    Fixes #10914

    Fixes #10914

    Fix double free caused by CGUITTFont code

    

    This partially reverts commit 2072afb72b4b3e9c5dcbcec71d824aeae1b35d19.

    fixes #10920

    This partially reverts commit 2072afb72b4b3e9c5dcbcec71d824aeae1b35d19.

    fixes #10920

    fixes #10920

    Server: properly delete ServerMap on interrupted startups

    

    A static mod error (e.g. typo) would abort the initialization but never free ServerMap

    A static mod error (e.g. typo) would abort the initialization but never free ServerMap

    Devtest: Remove bumpmap/parallax occl. test nodes (#10902)

    Fix documentation of formspec sound style (#10913)

    Fix memory leak detected by address sanitizer (#10896)

    Fix list spacing and size (again) (#10869)

    Handle UTF-16 correctly in Wireshark dissector

    Encode high codepoints as surrogates to safely transport wchar_t over network

    

    fixes #7643

    fixes #7643

    Drop wide/narrow conversion functions

    

    The only valid usecase for these is interfacing with OS APIs

    that want a locale/OS-specific multibyte encoding.

    But they weren't used for that anywhere, instead UTF-8 is pretty

    much assumed when it comes to that.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    The only valid usecase for these is interfacing with OS APIs

    that want a locale/OS-specific multibyte encoding.

    But they weren't used for that anywhere, instead UTF-8 is pretty

    much assumed when it comes to that.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    that want a locale/OS-specific multibyte encoding.

    But they weren't used for that anywhere, instead UTF-8 is pretty

    much assumed when it comes to that.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    But they weren't used for that anywhere, instead UTF-8 is pretty

    much assumed when it comes to that.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    much assumed when it comes to that.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    Since these are only a potential source of bugs and do not fulfil

    their purpose at all, drop them entirely.

    their purpose at all, drop them entirely.

    Refactor utf8_to_wide/wide_to_utf8 functions

    Server GotBlocks(): Lock clients to avoid multithreading issues

    Revise dynamic_add_media API to better accomodate future changes

    Preserve immortal group for players when damage is disabled

    Readd Client::sendPlayerPos optimization (was part of 81c7f0a)

    

    This reverts commit b49dfa92ce3ef37b1b73698906c64191fb47e226.

    This reverts commit b49dfa92ce3ef37b1b73698906c64191fb47e226.

    Cache client IP in RemoteClient so it can always be retrieved (#10887)

    

    specifically: after the peer has already disappeared

    specifically: after the peer has already disappeared

    Fix minetest.dig_node returning true when node isn't diggable (#10890)

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example and dummy translation file

    Deleted translation using Weblate (Lao)

    Deleted translation using Weblate (Burmese)

    Deleted translation using Weblate (Japanese (Kansai))

    Deleted translation using Weblate (Filipino)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 85.1% (1150 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 85.1% (1150 of 1350 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 77.1% (1041 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 92.5% (1250 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 98.0% (1323 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 98.0% (1323 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 98.0% (1323 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 97.2% (1313 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 97.2% (1313 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 96.7% (1306 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 96.7% (1306 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 96.7% (1306 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 79.7% (1076 of 1350 strings)

    Translated using Weblate (Norwegian Nynorsk)

    

    Currently translated at 36.7% (520 of 1416 strings)

    Currently translated at 29.1% (394 of 1350 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 11.1% (150 of 1350 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 99.6% (1345 of 1350 strings)

    Translated using Weblate (Kannada)

    

    Currently translated at 4.9% (67 of 1350 strings)

    Currently translated at 4.9% (67 of 1350 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 74.2% (1002 of 1350 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 76.7% (1036 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 79.0% (1067 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 74.5% (1007 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 95.1% (1284 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 95.1% (1284 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.2% (1273 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 94.2% (1273 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 75.2% (1016 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 75.1% (1015 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 75.1% (1015 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 73.9% (998 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.0% (1243 of 1350 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 39.3% (531 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 91.2% (1232 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 91.2% (1232 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.9% (1228 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.9% (1228 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.8% (1227 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 58.5% (790 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 47.3% (639 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 92.1% (1244 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 39.4% (533 of 1350 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 39.4% (532 of 1350 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.6% (22 of 1350 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 46.4% (627 of 1350 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 35.7% (482 of 1350 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 55.8% (754 of 1350 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 73.3% (990 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 58.5% (790 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 58.3% (788 of 1350 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 45.7% (617 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 18.7% (253 of 1350 strings)

    Translated using Weblate (Hindi)

    

    Currently translated at 34.5% (467 of 1350 strings)

    Currently translated at 34.5% (467 of 1350 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.6% (22 of 1350 strings)

    Translated using Weblate (Slovenian)

    

    Currently translated at 46.6% (630 of 1350 strings)

    Currently translated at 46.6% (630 of 1350 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 94.5% (1277 of 1350 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 16.2% (220 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 72.7% (982 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 71.8% (970 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 71.7% (969 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 71.7% (969 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 71.7% (968 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 94.5% (1277 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 89.9% (1214 of 1350 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.9% (580 of 1350 strings)

    Translated using Weblate (Kazakh)

    

    Currently translated at 4.0% (54 of 1350 strings)

    Currently translated at 4.0% (54 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 92.0% (1243 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 91.8% (1240 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 57.3% (774 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 57.1% (771 of 1350 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 6.2% (85 of 1350 strings)

    Translated using Weblate (Serbian (latin))

    

    Currently translated at 6.3% (86 of 1350 strings)

    Currently translated at 6.3% (86 of 1350 strings)

    Added translation using Weblate (Serbian (latin))

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.9% (1349 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 91.9% (1241 of 1350 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 88.8% (1200 of 1350 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 46.3% (626 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 90.5% (1222 of 1350 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 90.5% (1222 of 1350 strings)

    Translated using Weblate (Bulgarian)

    

    Currently translated at 31.2% (442 of 1416 strings)

    Currently translated at 8.0% (108 of 1350 strings)

    Added translation using Weblate (Bulgarian)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.0% (1337 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 77.8% (1051 of 1350 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 13.5% (183 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.6% (1345 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 99.6% (1345 of 1350 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 90.2% (1218 of 1350 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 98.5% (1331 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 70.0% (946 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 70.0% (946 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (1336 of 1350 strings)

    Translated using Weblate (Latvian)

    

    Currently translated at 26.2% (372 of 1416 strings)

    Currently translated at 30.1% (407 of 1350 strings)

    Translated using Weblate (Finnish)

    

    Currently translated at 21.0% (298 of 1416 strings)

    Currently translated at 0.5% (7 of 1350 strings)

    Translated using Weblate (Malay (Jawi))

    

    Currently translated at 64.6% (916 of 1416 strings)

    Currently translated at 63.7% (860 of 1350 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Added translation using Weblate (Finnish)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 22.3% (302 of 1350 strings)

    Set UTF-8 codepage in Windows manifest (#10881)

    PlayerDatabaseFiles: Fix segfault while saving a player

    

    Corrects a typo introduced in 5e9dd166

    Corrects a typo introduced in 5e9dd166

    Handle changes caused by CMake minimum version bump (#10859)

    

    fixes #10806

    fixes #10806

    devtest: Fix deprecated alpha usage

    Rework use_texture_alpha to provide three opaque/clip/blend modes

    

    The change that turns nodeboxes and meshes opaque when possible is kept,

    as is the compatibility code that warns modders to adjust their nodedefs.

    The change that turns nodeboxes and meshes opaque when possible is kept,

    as is the compatibility code that warns modders to adjust their nodedefs.

    as is the compatibility code that warns modders to adjust their nodedefs.

    Drop never documented 'alpha' property from nodedef

    

    Includes minimal support code for practical reasons.

    We'll need it for a slightly different purpose next commit.

    Includes minimal support code for practical reasons.

    We'll need it for a slightly different purpose next commit.

    We'll need it for a slightly different purpose next commit.

    Clarify key_value_swap's edge case (#10799)

    

    In compiler design especially, leaving behavior as "undefined" is a _strong_ condition that basically states that all possible integrity is violated; it's the kind of thing that happens when, say, dereferencing a pointer with unknown provenance, and most typically leads to a crash, but can result in all sorts of spectacular errors--thus, "it is undefined" how your program will melt down.

    

    The pure-Lua implementation of `key_value_swap` does not permit UB _per se_ (assuming the implementation of Lua itself is sound), but does deterministically choose the value to which a key is mapped (the last in visitation order wins--since visitation order is arbitrary, _some_ value _will_ be chosen). Most importantly, the program won't do something wildly unexpected.

    In compiler design especially, leaving behavior as "undefined" is a _strong_ condition that basically states that all possible integrity is violated; it's the kind of thing that happens when, say, dereferencing a pointer with unknown provenance, and most typically leads to a crash, but can result in all sorts of spectacular errors--thus, "it is undefined" how your program will melt down.

    

    The pure-Lua implementation of `key_value_swap` does not permit UB _per se_ (assuming the implementation of Lua itself is sound), but does deterministically choose the value to which a key is mapped (the last in visitation order wins--since visitation order is arbitrary, _some_ value _will_ be chosen). Most importantly, the program won't do something wildly unexpected.

    The pure-Lua implementation of `key_value_swap` does not permit UB _per se_ (assuming the implementation of Lua itself is sound), but does deterministically choose the value to which a key is mapped (the last in visitation order wins--since visitation order is arbitrary, _some_ value _will_ be chosen). Most importantly, the program won't do something wildly unexpected.

    Settings: Purge getDefault, clean FontEngine

    Settings: Proper priority hierarchy

    

    Remove old defaults system

    Introduce priority-based fallback list

    Use new functions for map_meta special functions

    Change groups to use end tags

    

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

    Remove old defaults system

    Introduce priority-based fallback list

    Use new functions for map_meta special functions

    Change groups to use end tags

    

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

    Introduce priority-based fallback list

    Use new functions for map_meta special functions

    Change groups to use end tags

    

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

    Use new functions for map_meta special functions

    Change groups to use end tags

    

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

    Change groups to use end tags

    

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

    Unittest changes:

     * Adapt unittest to the new code

     * Compare Settings objects

     * Adapt unittest to the new code

     * Compare Settings objects

     * Compare Settings objects

    RemotePlayer: Remove Settings writer to Files database

    Sanitize ItemStack meta text

    Include irrlichttypes.h first to work around Irrlicht#433 (#10872)

    

    Fixes the PcgRandom::PcgRandom linker issue, caused by inconsistent data type definition.

    Fixes the PcgRandom::PcgRandom linker issue, caused by inconsistent data type definition.

    ContentDB: Order installed content first (#10864)

    Consistently use "health points" (#10868)

    Improve irr_ptr (#10808)

    Fix formspec list spacing (#10861)

    Make hypertext and textarea have proper scroll event propagation. (#10860)

    Fix ESC in error dialog from closing Minetest (#10838)

    FormSpec: Add list spacing, slot size, and noclip (#10083)

    

    * Add list spacing, slot size, and noclip

    

    * Simplify StyleSpec

    

    * Add test cases

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Add list spacing, slot size, and noclip

    

    * Simplify StyleSpec

    

    * Add test cases

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Simplify StyleSpec

    

    * Add test cases

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Add test cases

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Remove dead code (#10845)

    Use JSON for favorites, move server list code to Lua (#10085)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    MgOre: Fix invalid field polymorphism (#10846)

    Load system-wide texture packs too (#10791)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Removed some obsolete code (#10562)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    ObjectRef: fix some v3f checks (#10602)

    Improve --version output to include Lua(JIT) version

    Allow "liquid" and "flowingliquid" drawtypes even if liquidtype=none (#10737)

    Local tab: rename 'Configure' to 'Select Mods' (#10779)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Android: Update Gradle, NDK, Build Tools, and SQLite version (#10833)

    Fix Android support in bump_version.sh (#10836)

    Fix double word "true" in minetest.is_nan explanation (#10820)

    ContentDB: Ignore content not installed from ContentDB

    Factorize more guiEditBoxes code (#10789)

    

    * Factorize more guiEditBoxes code

    * Factorize more guiEditBoxes code

    Document how to make nametags background disappear on players' head (#10783)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Implement on_rightclickplayer callback (#10775)

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Sanitize server IP field in mainmenu (#10793)

    Refactor/gui editbox (#10787)

    refacto: factorize multiple code parts from guiEditbox childs (#10782)

    Update Gitlab-CI pipeline

    ContentDB: Add overwrite dialog when content is already installed (#10768)

    Add on_deactivate callback for luaentities (#10723)

    Clarify documentation of minetest.get_modpath and minetest.get_modnames (#10771)

    "Browse online content" formspec improvement (#10756)

    Formspecs: Fix broken texture escaping with model[]

    Add minetest.get_objects_in_area (#10668)

    Fix item tooltip background color not working

    Display Minetest header when menu_last_game value isn't available anymore (#10751)

    Fix minetest.is_nan

    Fix some minor code issues all over the place

    Minor profiler fixes.

    Fix unsafe cast in l_object

    CI: fix build

    Add dependency resolution to ContentDB (#9997)

    Fix fallnode rotation of wallmounted nodebox/mesh (#10643)

    Fix GLES shader support after #9247 (#10727)

    Fix some more joystick issues (#10624)

    MainMenu: Add clear button and icon for search input (#10363)

    Cleanup shader generation code (#10663)

    

    Shader generation is a mess. This commit cleans some parts up, including dropping remains of HLSL support which was never actually implemented.

    Shader generation is a mess. This commit cleans some parts up, including dropping remains of HLSL support which was never actually implemented.

    Add open user data button to main menu (#10579)

    DevTest: Add food item to test food replacement (#10642)

    Make installer create its own Minetest folder (#10445)

    

    This changes the installer to create its own Minetest folder instead of having the user create it themselves. This prevents spewing the contents of Minetest everywhere when users change the install directory and expect the installer to create a folder to put it in

    This changes the installer to create its own Minetest folder instead of having the user create it themselves. This prevents spewing the contents of Minetest everywhere when users change the install directory and expect the installer to create a folder to put it in

    Documentation for highest formspec_version[] and changelog (#10592)

    Allow configuring block disk and net compression. Change default disk level.

    Formspec: Allow to specify frame loop for model[] (#10679)

    

    Add the ability to specify an animation frame loop range for the model[] formspec element.

    Add the ability to specify an animation frame loop range for the model[] formspec element.

    lua_api.txt: Add mod_orgin to node def (#10697)

    Semi-transparent background for nametags (#10152)

    Revert "GUIFormSpecMenu: Shift+Click listring workaround for MacOS"

    

    The commit caused Shift-Clicking issues on Linux due to another Irrlicht bug where

    KeyInput.Shift released keys do not trigger OnEvent()

    

    MacOS users should build using a recent Irrlicht 1.8 development version.

    See also: https://sourceforge.net/p/irrlicht/patches/321/

    The commit caused Shift-Clicking issues on Linux due to another Irrlicht bug where

    KeyInput.Shift released keys do not trigger OnEvent()

    

    MacOS users should build using a recent Irrlicht 1.8 development version.

    See also: https://sourceforge.net/p/irrlicht/patches/321/

    KeyInput.Shift released keys do not trigger OnEvent()

    

    MacOS users should build using a recent Irrlicht 1.8 development version.

    See also: https://sourceforge.net/p/irrlicht/patches/321/

    MacOS users should build using a recent Irrlicht 1.8 development version.

    See also: https://sourceforge.net/p/irrlicht/patches/321/

    See also: https://sourceforge.net/p/irrlicht/patches/321/

    GUIFormSpecMenu: Shift+Click listring workaround for MacOS

    

    event.MouseInput.Shift is not implemented for MacOS

    event.MouseInput.Shift is not implemented for MacOS

    Various documentation fixes (#10692)

    

    set_sky: New feature, keep note about the old syntax

    get_us_time: Document overflow

    localplayer: Document "nil" behaviour before initialization

    collision_box: Safe limit of "1.45"

    set_sky: New feature, keep note about the old syntax

    get_us_time: Document overflow

    localplayer: Document "nil" behaviour before initialization

    collision_box: Safe limit of "1.45"

    get_us_time: Document overflow

    localplayer: Document "nil" behaviour before initialization

    collision_box: Safe limit of "1.45"

    localplayer: Document "nil" behaviour before initialization

    collision_box: Safe limit of "1.45"

    collision_box: Safe limit of "1.45"

    Implement mapblock camera offset correctly (#10702)

    

    Implement mapblock camera offset correctly - reduce client jitter

    

    Co-authored-by: hecktest <>

    Implement mapblock camera offset correctly - reduce client jitter

    

    Co-authored-by: hecktest <>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Revert "Increase limit for simultaneous blocks sent per client and the meshgen cache."

    

    This reverts commit 2f6393f49d5ebf21abfaa7bff876b8c0cf4ca191.

    This reverts commit 2f6393f49d5ebf21abfaa7bff876b8c0cf4ca191.

    Cross-reference the node level manipulation functions (#10633)

    

    This can help developers find the correct functions to access and manipulate the fluid level.

    This can help developers find the correct functions to access and manipulate the fluid level.

    Fix MSAA stripes (#9247)

    

    This only works when shaders are enabled.

    The centroid varying avoids that the textures (which repeat themselves out of bounds) are sampled out of bounds in MSAA.

    If MSAA (called FSAA in minetest) is disabled, the centroid keyword does nothing.

    This only works when shaders are enabled.

    The centroid varying avoids that the textures (which repeat themselves out of bounds) are sampled out of bounds in MSAA.

    If MSAA (called FSAA in minetest) is disabled, the centroid keyword does nothing.

    The centroid varying avoids that the textures (which repeat themselves out of bounds) are sampled out of bounds in MSAA.

    If MSAA (called FSAA in minetest) is disabled, the centroid keyword does nothing.

    If MSAA (called FSAA in minetest) is disabled, the centroid keyword does nothing.

    Fix certain connected nodeboxes crashing when falling

    

    fixes #10695

    fixes #10695

    Input: Fix on_rightclick called when placing into air

    Avoid generating the same chunk more than once with multiple emerge threads.

    Change typedef to normal definitions in GUI code

    Return star color calculation to what it previously was

    Fix style

    Provide fallback star color for GLES 2 with MT shaders disabled

    Sky: support GLES2

    

    IrrLicht built-in shader is broken, have to write my own

    IrrLicht built-in shader is broken, have to write my own

    Allow missing shaders

    Replace TriangleFan as poorly supported

    Reuse seed when updating stars

    

    The only currently relevant parameter is scale which can now be changed

    without resetting stars position

    The only currently relevant parameter is scale which can now be changed

    without resetting stars position

    without resetting stars position

    Store stars in a single static mesh buffer

    Don't evaluate things many times

    Batch cloud drawing

    Avoid marking map blocks dirty upon deserialization.

    Fix camera panning glitches (partially revert 10489.)

    Add sound to press event of some formspecs elements (#10402)

    Fix Visual Studio build in Actions

    Move Mapgen V7 river generation into the main generation loop (#10639)

    

    All terrain generation now occurs in one loop, instead of rivers being

    carved afterwards in a separate loop.

    Fixes the removal of nodes added by mods in 'register on generated'.

    Avoids other problems and reduces the chance of future bugs.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    All terrain generation now occurs in one loop, instead of rivers being

    carved afterwards in a separate loop.

    Fixes the removal of nodes added by mods in 'register on generated'.

    Avoids other problems and reduces the chance of future bugs.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    carved afterwards in a separate loop.

    Fixes the removal of nodes added by mods in 'register on generated'.

    Avoids other problems and reduces the chance of future bugs.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    Fixes the removal of nodes added by mods in 'register on generated'.

    Avoids other problems and reduces the chance of future bugs.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    Avoids other problems and reduces the chance of future bugs.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    Mapchunk generation time is reduced.

    

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    Also fixes a code mistake which resulted in river channel generation

    being disabled at floatland altitudes even when floatlands were disabled.

    being disabled at floatland altitudes even when floatlands were disabled.

    Increase limit for simultaneous blocks sent per client and the meshgen cache.

    Auto build client appimage (#10561)

    

    * Replace ubuntu:14.04 with ubuntu 18:04

    * Auto build client appimage

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Replace ubuntu:14.04 with ubuntu 18:04

    * Auto build client appimage

    

    Co-authored-by: sfan5 <sfan5@live.de>

    * Auto build client appimage

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Fix falling image of torchlike if paramtype2="none" (#10612)

    serverpackethandler: Minor log message fixes

    

    closes #10434

    closes #10434

    Copy position for can_dig

    

    fixes #10514

    fixes #10514

    Fix player sprite visibility in first person

    

    closes #10525

    closes #10525

    Fix overloaded virtual warnings with get/setAttachment()

    Fix warnings about an unused variables and implicit conversion (#10586)

    Revert "Replace MyEventReceiver KeyList with std::unordered_set" (#10622)

    

    This reverts commit 787561b29afdbc78769f68c2f5c4f2cff1b32340.

    This reverts commit 787561b29afdbc78769f68c2f5c4f2cff1b32340.

    PlayerSAO: Run on_player_hpchange raw change values (#10478)

    

    The callback is only run when a change in HP is to be expected.

    Following cases will not trigger the callback:

     * Dead player damaged further

     * Healing full-health player

     * Change of 0 HP

    The callback is only run when a change in HP is to be expected.

    Following cases will not trigger the callback:

     * Dead player damaged further

     * Healing full-health player

     * Change of 0 HP

    Following cases will not trigger the callback:

     * Dead player damaged further

     * Healing full-health player

     * Change of 0 HP

     * Dead player damaged further

     * Healing full-health player

     * Change of 0 HP

     * Healing full-health player

     * Change of 0 HP

     * Change of 0 HP

    Increase default emerge queue limits and limit enqueue requests for active blocks.

    Do not set a default for description in itemdef table (#10559)

    

    * Do not set a default for description in itemdef table

    

    * improve documentation

    * Do not set a default for description in itemdef table

    

    * improve documentation

    * improve documentation

    ObjectRef: Re-add legacy code for set_physics_override (#10585)

    

    These arguments are used at least by MTG beds and homedecor_common. A deprecation warning is shown to safely remove it in a future release.

    These arguments are used at least by MTG beds and homedecor_common. A deprecation warning is shown to safely remove it in a future release.

    Mark additional locales as broken

    Update fallback font to newer version

    Joystick: Remap joystick-specific KeyTypes to generic ones

    

    According to the following table:

            * MOUSE_L     -> DIG

            * MOUSE_R     -> PLACE

            * SCROLL_UP   -> HOTBAR_NEXT

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

    According to the following table:

            * MOUSE_L     -> DIG

            * MOUSE_R     -> PLACE

            * SCROLL_UP   -> HOTBAR_NEXT

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

            * MOUSE_L     -> DIG

            * MOUSE_R     -> PLACE

            * SCROLL_UP   -> HOTBAR_NEXT

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

            * MOUSE_R     -> PLACE

            * SCROLL_UP   -> HOTBAR_NEXT

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

            * SCROLL_UP   -> HOTBAR_NEXT

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

            * SCROLL_DOWN -> HOTBAR_PREV

    

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

    This commit entirely removes the special KeyTypes used for joysticks.

    

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

    Support for the MOUSE KeyTypes had already been removed in the main

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

    game code without adapting the joystick code, breaking joystick

    input. This commit restores joystick functionality.

    input. This commit restores joystick functionality.

    Fix object interaction distance not being checked (#10547)

    ContentCAO: Fix segfault when minimap is disabled

    Revert #10495 and simplify.

    Fix integer-string conversion for shaders

    

    closes #10605

    closes #10605

    Add model[] formspec element (#10320)

    

    Formspec element to display models, written by @kilbith, rebased and tweaked.

    

    Co-authored-by: Jean-Patrick Guerrero <jeanpatrick.guerrero@gmail.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Formspec element to display models, written by @kilbith, rebased and tweaked.

    

    Co-authored-by: Jean-Patrick Guerrero <jeanpatrick.guerrero@gmail.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Jean-Patrick Guerrero <jeanpatrick.guerrero@gmail.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Revert "Fix short 180 degree rotation when using set_bone_position (#10405)" (#10534)

    

    This reverts commit 0f98b54aa4b2361575002d92b29fe222703ba557.

    This reverts commit 0f98b54aa4b2361575002d92b29fe222703ba557.

    Fix ObjectRef errors due to lua_isnil() (#10564)

    

    Treat 'none' values as 'nil'

    Treat 'none' values as 'nil'

    Slight simplification and optimization of RemoteClient.

    Increase defaults for viewing_range, active_object_range and related settings #10597

    Block attempts to connect to the client (#10589)

    

    A Minetest peer initiates a connection by sending a packet with an invalid peer_id, for whatever reason the code for doing this ran on both the client and the server meaning you could connect to a client if you knew what the address:port tuple it was listening on.

    A Minetest peer initiates a connection by sending a packet with an invalid peer_id, for whatever reason the code for doing this ran on both the client and the server meaning you could connect to a client if you knew what the address:port tuple it was listening on.

    Fix incorrect deprecation hints

    

    "good" and "bad" were swapped in the process, resulting in wrong deprecation messages

    "good" and "bad" were swapped in the process, resulting in wrong deprecation messages

    Fix segfault in deprecation logging due to tail call, log by default (#10174)

    Player physics: Ensure larger dtime simulation steps (#10563)

    Show RTT in ms with 2 digits of precision (#10573)

    

    If your ping is in seconds, you probably have other problems.

    If your ping is in seconds, you probably have other problems.

    Avoid resending near blocks unnecessarily.

    Fix CSMs on arm64 (#10553)

    Shaders for Android (GLES 2) (#10506)

    

    Shader support for OpenGL ES 2 devices (Android)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Shader support for OpenGL ES 2 devices (Android)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Clean up l_object.cpp (#10512)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Add documentation to builtin core.run_callbacks (#10494)

    Fix Media... 0% on loading screen (#9478)

    Update jsoncpp to 1.9.4 (#10477)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Devtest: Automatically enable zoom capability (#10493)

    

    Make minor improvements to the zoom testing chat command.

    Delete incorrect line about creative mode from README.md.

    Make minor improvements to the zoom testing chat command.

    Delete incorrect line about creative mode from README.md.

    Delete incorrect line about creative mode from README.md.

    Fix show_on_minimap default value for local player

    

    fixes #10526

    fixes #10526

    Implement unloading of static_save=false objects according to existing docs (#10485)

    Decouple entity minimap markers from nametags replacing with show_on_minimap property (#10443)

    Minor clientmap improvements.

    

    - Avoid calculating isBlockInSight for blocks without meshes.

    - Add metric for how many blocks the client has currently loaded.

    - Make some variables constant.

    - Avoid calculating isBlockInSight for blocks without meshes.

    - Add metric for how many blocks the client has currently loaded.

    - Make some variables constant.

    - Add metric for how many blocks the client has currently loaded.

    - Make some variables constant.

    - Make some variables constant.

    Contributing doc: Minor improvements and a clarification (#10520)

    Periodically release all mesh HW buffers to avoid an Irrlicht bottleneck.

    Remove all bump mapping and parallax occlusion related code.

    Rely on max_simultaneous_block_sends_per_client to limit blocks sent to the client.

    Devtest hand tool: Update capabilities, add creative mode capabilities (#10484)

    Document how to work with ClangFormat (#10468)

    

    To avoid the common misunderstanding where a contributor thinks they

    must apply the unsuitable formatting requests ClangFormat makes.

    To avoid the common misunderstanding where a contributor thinks they

    must apply the unsuitable formatting requests ClangFormat makes.

    must apply the unsuitable formatting requests ClangFormat makes.

    Fix float argument check in minetest.set_timeofday() (#10483)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Android: update gradle, NDK and built tools version

    Android: add ci with saving artifacts

    Android: get deps as a zip archive and sqlite3 from official source

    Add ObjectRef:get_children() (#10480)

    

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Zughy <4279489-marco_a@users.noreply.gitlab.com>

    Avoid drawing invisible blocks on the client.

    Pass ContentFeatures as reference to read_content_features (#10464)

    Give unnamed world names incrementing numbers. Format 'world<number>' (#10247)

    

    Code created with help from GitHub users sirrobzeroone and pauloue, thank you.

    Code created with help from GitHub users sirrobzeroone and pauloue, thank you.

    Add missing type check to InvRef:set_lists() (#10476)

    Add bumpmapping and parallax occlusion testing nodes to devtest (#9242)

    Add a short_description to be used by mods (#8980)

    Fix box[]es not being clipped (#10473)

    

    Fixes a regression of #8676.

    Fixes a regression of #8676.

    Mention texture modifier colorspace (#10112)

    -Wmem-access only called when GCC > 7 (#10453)

    Improve the `fsaa` setting description (#10279)

    

    See https://github.com/minetest/minetest/issues/8459.

    See https://github.com/minetest/minetest/issues/8459.

    Add minetest.get_artificial_light and minetest.get_natural_light (#5680)

    

    Add more detailed light detection functions, a function to get the artificial light (torches) and a function to get the sunlight as seen by the player (you can specify timeofday).

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Add more detailed light detection functions, a function to get the artificial light (torches) and a function to get the sunlight as seen by the player (you can specify timeofday).

    

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Prevent games from setting secure settings (#10460)

    Remove unused functions reported by cppcheck (#10463)

    

    Run unused functions reported by cppcheck

    

    This change removes a few (but not all) unused functions.

    Some unused helper functions were not removed due to their complexity and potential of future use.

    Run unused functions reported by cppcheck

    

    This change removes a few (but not all) unused functions.

    Some unused helper functions were not removed due to their complexity and potential of future use.

    This change removes a few (but not all) unused functions.

    Some unused helper functions were not removed due to their complexity and potential of future use.

    Some unused helper functions were not removed due to their complexity and potential of future use.

    Minimap as HUD element with API control

    

    Features:

     * Define Minimap available modes (surface/radar, scale) from Lua, using player:set_minimap_modes()

     * New HUD elements for displaying minimap with custom size and placing

     * New minimap mode for displaying a texture instead of the map

    Features:

    

    * Support for arbitrary references, including self-referencing

    * Short output, references "long" strings as a bonus

    * Around the same speed, potentially slower if long, short keys are present

    * Properly works with NaN and inf

     * Define Minimap available modes (surface/radar, scale) from Lua, using player:set_minimap_modes()

     * New HUD elements for displaying minimap with custom size and placing

     * New minimap mode for displaying a texture instead of the map

     * New HUD elements for displaying minimap with custom size and placing

     * New minimap mode for displaying a texture instead of the map

     * New minimap mode for displaying a texture instead of the map

    Add First Person Attachments (#10360)

    

    Fixes some other third person camera specific attachments.

    Implements a single new flag for entities to be forced visible in first person mode.

    Old mods do not need to be updated to use the new flag and are fully backwards compatible.

    Fixes some other third person camera specific attachments.

    Implements a single new flag for entities to be forced visible in first person mode.

    Old mods do not need to be updated to use the new flag and are fully backwards compatible.

    Implements a single new flag for entities to be forced visible in first person mode.

    Old mods do not need to be updated to use the new flag and are fully backwards compatible.

    Old mods do not need to be updated to use the new flag and are fully backwards compatible.

    Fix short 180 degree rotation when using set_bone_position (#10405)

    Deprecate get_player_velocity and add_player_velocity (#10173)

    Document builtin entities (#9453)

    

    This PR adds a new text file doc/builtin_entities.txt which explains how the two builtin entities __builtin:item and __builtin:falling_node work.

    This PR adds a new text file doc/builtin_entities.txt which explains how the two builtin entities __builtin:item and __builtin:falling_node work.

    Add note to docs on how to override privileges (#9792)

    Lua API: Add register_on_chatcommand to SSM and CSM (#7862)

    

    Allows catching a chatcommand call just after the command and the

    parameters are parsed but before its existence is checked and before the

    corresponding function is run. Returning `true` from a callback function

    will prevent default handling of the command leaving mods to handle the

    command manually.

    Allows catching a chatcommand call just after the command and the

    parameters are parsed but before its existence is checked and before the

    corresponding function is run. Returning `true` from a callback function

    will prevent default handling of the command leaving mods to handle the

    command manually.

    parameters are parsed but before its existence is checked and before the

    corresponding function is run. Returning `true` from a callback function

    will prevent default handling of the command leaving mods to handle the

    command manually.

    corresponding function is run. Returning `true` from a callback function

    will prevent default handling of the command leaving mods to handle the

    command manually.

    will prevent default handling of the command leaving mods to handle the

    command manually.

    command manually.

    Fix scroll bar overlapping text (again) (#9058)

    Reduce the FPS when the window is unfocused (#8837)

    Chatcommand: Show help message if func returns false without message

    

    #9440

    (se)SerializeString: Include max length in the name

    

    This commit clarifies the maximal length of the serialized strings.

    It will avoid accidental use of serializeString() when a larger string can be expected.

    

    Removes unused Wide String serialization functions

    This commit clarifies the maximal length of the serialized strings.

    It will avoid accidental use of serializeString() when a larger string can be expected.

    

    Removes unused Wide String serialization functions

    It will avoid accidental use of serializeString() when a larger string can be expected.

    

    Removes unused Wide String serialization functions

    Removes unused Wide String serialization functions

    Clean up serialization

    

    This reverts 1a5b4b3 and further functions in serialize.cpp that are unused

    

    The intend for a sane NetworkPacket/stream replacement was good, but a wrapper

    class around i/ostream might be more versatile than introducing a new

    vector-based serialization class.

    This reverts 1a5b4b3 and further functions in serialize.cpp that are unused

    

    The intend for a sane NetworkPacket/stream replacement was good, but a wrapper

    class around i/ostream might be more versatile than introducing a new

    vector-based serialization class.

    The intend for a sane NetworkPacket/stream replacement was good, but a wrapper

    class around i/ostream might be more versatile than introducing a new

    vector-based serialization class.

    class around i/ostream might be more versatile than introducing a new

    vector-based serialization class.

    vector-based serialization class.

    Settings: Remove unused functions

    

    Make Settings-internal functions private

    Make Settings-internal functions private

    Improve layout of main menu 'local' tab (#10366)

    Improve MSVC cmake and update vcpkg instruction (#10407)

    

    Remove unnecessary compiler flag for clang-cl

    Update vcpkg instruction in README.md

    Remove unnecessary compiler flag for clang-cl

    Update vcpkg instruction in README.md

    Update vcpkg instruction in README.md

    Update wording of game descriptions in installer (#10441)

    Android: replace InputDialogActivity on simple dialog window (#10034)

    Patch fast/teleport vulnerability when attached to an entity (#10340)

    Log server announce on updates and deletes too (#10177)

    Enable LuaJIT on the Docker image (#10414)

    Remove null bytes from TOCLIENT_BLOCKDATA (#10433)

    Correct erroneous reported max lag with prometheus (#10427)

    

    Co-authored-by: BuckarooBanzay <BuckarooBanzay@users.noreply.github.com>

    Co-authored-by: BuckarooBanzay <BuckarooBanzay@users.noreply.github.com>

    Fix horizontal/vertical merging bug of hardware-colored framed glass (#10417)

    

    Previously, the param2-controlled horizontal/vertical merge feature

    (which was undocumented and forgotten) was always active, causing

    uses of param2 other than "glasslikeliquidlevel" to affect H/V

    merging.

    

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    Previously, the param2-controlled horizontal/vertical merge feature

    (which was undocumented and forgotten) was always active, causing

    uses of param2 other than "glasslikeliquidlevel" to affect H/V

    merging.

    

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    (which was undocumented and forgotten) was always active, causing

    uses of param2 other than "glasslikeliquidlevel" to affect H/V

    merging.

    

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    uses of param2 other than "glasslikeliquidlevel" to affect H/V

    merging.

    

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    merging.

    

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    Only respect H/V merge bits when paramtype2 = "glasslikeliquidlevel".

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    H/V merge bits and liquid level bits are designed to be used

    simultaneously.

    simultaneously.

    Replace MyEventReceiver KeyList with std::unordered_set (#10419)

    Ability to remove minetest.after once set (#10103)

    Settings: Fix unittest memory leak, change input types

    Fix chat/infotext overlap if many chat lines (#10399)

    

    Moves the infotext depending on the value of the recent_chat_messages value + 2 additional lines to account for the 2 debug mode lines + 1 additional line as "buffer" for better readability if chat is full.

    Moves the infotext depending on the value of the recent_chat_messages value + 2 additional lines to account for the 2 debug mode lines + 1 additional line as "buffer" for better readability if chat is full.

    Settings: Fix crash on exit due to group double-free

    Record player existence in dymmy database.

    Clean up server-side translations, remove global variable (#10075)

    lua_api.txt: author, release and title fields when downloading from ContentDB (#10129)

    

    Co-authored-by: Marco <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: Marco <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Remove "generate normal maps" feature (#10313)

    

    Erase all traces of normal "generation" from fragment shaders

    Remove the "feature" from the engine and default config

    Remove any leftover documentation of it

    Erase all traces of normal "generation" from fragment shaders

    Remove the "feature" from the engine and default config

    Remove any leftover documentation of it

    Remove the "feature" from the engine and default config

    Remove any leftover documentation of it

    Remove any leftover documentation of it

    Remove Thread::kill() and related unittest (#10317)

    

    Closes: #6065

    Closes: #6065

    Add NetBSD cpu affinity support code (#10378)

    Darwin platform build fix (#10376)

    

    the event header seemingly being generic with libevent thus renaming it.

    openal and opengl are deprecated on newer mac os releases thus suppressing the build warnings.

    the event header seemingly being generic with libevent thus renaming it.

    openal and opengl are deprecated on newer mac os releases thus suppressing the build warnings.

    openal and opengl are deprecated on newer mac os releases thus suppressing the build warnings.

    Inventory: Protect Craft and Drop actions (#10353)

    

    Change dangerous pointer to unique_ptr for automated deletion.

    Change dangerous pointer to unique_ptr for automated deletion.

    Prevent interacting with items out of the hotbar (#10359)

    Devtest: Extend tooltips of many items and tools (#10312)

    

    Also show error message when using tools wrong

    Also show error message when using tools wrong

    Scale inventory image for scaled allfaces nodes (#10225)

    

    The inventory image size of the inventory image of nodes with drawtype allfaces (and related) is scaled as well if visual_scale is set (previously, the inventory image size was always the same)

    The inventory image size of the inventory image of nodes with drawtype allfaces (and related) is scaled as well if visual_scale is set (previously, the inventory image size was always the same)

    Fix inventory swapping not calling all callbacks (#9923)

    

    "Predicts" whether something will be swapped for allow callbacks, then calls callbacks a second time with swapped properties.

    

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    "Predicts" whether something will be swapped for allow callbacks, then calls callbacks a second time with swapped properties.

    

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Add 'ores' global mapgen flag (#10276)

    Change default ambient occlusion gamma to 1.8 (#10185)

    Mark multiply and divide with two vectors as deprecated (Schur product and quotient) (#10329)

    [2] Code cleanup in serverpackethandler (#9349)

    

    * Code cleanup in serverpackethandler

    

    * do not define p_under unless a node is pointed

    * use switch-case and reduce indentation

    * Code cleanup in serverpackethandler

    

    * do not define p_under unless a node is pointed

    * use switch-case and reduce indentation

    * do not define p_under unless a node is pointed

    * use switch-case and reduce indentation

    * use switch-case and reduce indentation

    Fix #10349 game crashing if dropped an item with undefined light_source (#10351)

    Fix dropped craftitems/tools not using light_source values (#9438)

    Add compass HUD element (#9312)

    

    Co-authored-by: Jean-Patrick Guerrero <jeanpatrick.guerrero@gmail.com>

    Co-authored-by: Pierre-Yves Rollo <dev@pyrollo.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: Jean-Patrick Guerrero <jeanpatrick.guerrero@gmail.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: Pierre-Yves Rollo <dev@pyrollo.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Document normalmap textures (#10096)

    Add vector.offset (#10321)

    Make bgcolor tint button background images (#9818)

    Prevent players accessing inventories of other players (#10341)

    Mapgen: Fix on-by-default flags broken since eca6ee9 (#10318)

    Fix luacheck warnings in builtin/common/tests (#10322)

    Improve set_texture_mod documentation (#10339)

    

    Properly documents the select_x_by_camera values

    Properly documents the select_x_by_camera values

    Lua API: Register missing get_texture_mod function (#10338)

    Android: drop simple MainMenu (#10227)

    

    The default (PC-style) MainMenu works great on Android. Provides access to ContentDB and allows players to create many worlds in a few clicks.

    Makes the interface consistent and eliminates player confusion.

    The default (PC-style) MainMenu works great on Android. Provides access to ContentDB and allows players to create many worlds in a few clicks.

    Makes the interface consistent and eliminates player confusion.

    Makes the interface consistent and eliminates player confusion.

    NetBSD build fix proposal. (#10308)

    

    Fixing thread naming call and let the class setting RANDOM_MIN/RANDOM_MAX.

    Fixing thread naming call and let the class setting RANDOM_MIN/RANDOM_MAX.

    shaders: Fix transparency on GC7000L (#10036)

    

    Workaround for the missing GL_ALPHA_TEST implementation in Mesa (etnaviv driver).

    Workaround for the missing GL_ALPHA_TEST implementation in Mesa (etnaviv driver).

    Properly handle mod-errors in on_shutdown

    darken tabheader background color (#10299)

    Avoid drawing clipped out formspec elements (#10095)

    Fix MSVC compiler warnings (#10197)

    Auto focus on OK button in main menu error messages (#10300)

    Fix light overflow of u8 if light is saturated at 255 (#10305)

    Complete Haiku platform support. (#10311)

    

    Fixing linkage/libraries missing issue.

    Implements missing platform specifics.

    Fixing linkage/libraries missing issue.

    Implements missing platform specifics.

    Implements missing platform specifics.

    Load media from subfolders (#9065)

    Define environ variable on OpenBSD (#10302)

    Fix missing translation call in hypertext (#10296)

    Add gradients and borders to FormSpec boxes (#8676)

    Optimize formspec form size (#10144)

    Clean up sound_fade (#10119)

    

    Add proper documentation and correct gain reduction calculations.

    

    Co-authored-by: hecktest <>

    Add proper documentation and correct gain reduction calculations.

    

    Co-authored-by: hecktest <>

    Co-authored-by: hecktest <>

    Co-authored-by: sfan5 <sfan5@live.de>

    Allow the ABM time budget to be configurable.

    ContentDB: Add Update All and download queuing (#9995)

    Allow binding dig, place actions to keys; remove LMB/RMB hardcoding

    

    Co-authored-by: Sam Caulfield <sam@samcaulfield.com>

    Co-authored-by: Sam Caulfield <sam@samcaulfield.com>

    Render nodeboxes with opaque material if possible (#10122)

    Fix precision not working in hud_change (#10186)

    Add font styling options to tables and textlists (#10203)

    Change `last-login` command to show player name in output (#10263)

    Mapgen Flat: Add caverns, disabled by default (#9913)

    

    Add the caverns used in V5, V7, Valleys, Carpathian.

    Disabled by default to not be force-enabled in existing worlds.

    Add the caverns used in V5, V7, Valleys, Carpathian.

    Disabled by default to not be force-enabled in existing worlds.

    Disabled by default to not be force-enabled in existing worlds.

    Implement override.txt support for special tiles (#10140)

    

    Add override targets for all special_tiles entries in node definitions, allowing texture packs to replace these textures. This makes overrides work properly with a variety of drawtypes.

    

    The targets are named special1 through special6, covering the the current length of the special_tiles array.

    Add override targets for all special_tiles entries in node definitions, allowing texture packs to replace these textures. This makes overrides work properly with a variety of drawtypes.

    

    The targets are named special1 through special6, covering the the current length of the special_tiles array.

    The targets are named special1 through special6, covering the the current length of the special_tiles array.

    Fix build for Visual Studio (explicitly cast pointers) (#10256)

    Fix GCC class-memaccess warnings (#10239)

    Falling: Fix error caused by missing param2

    

    Falling nodes that were spawned prior the recent falling node changes did not require param2.

    Default to param2 = 0 when none is found in the node data.

    Falling nodes that were spawned prior the recent falling node changes did not require param2.

    Default to param2 = 0 when none is found in the node data.

    Default to param2 = 0 when none is found in the node data.

    content_cao: Support texture animation for upright_sprite (#10020)

    Allow starting local server using --go again (#10229)

    Revert "Get rid of non-ascii characters in the debug display code (#8821)" (#9828)

    

    This reverts commit 4f9ccd89b347dad3db5ce63d3405a8d60c163af5.

    This reverts commit 4f9ccd89b347dad3db5ce63d3405a8d60c163af5.

    Add PUT and DELETE request + specific method value to HTTP API (#9909)

    decode_base64: Allow '=' padding character

    

    '=' is a valid character, but minetest.decode_base64 returned nil when it was used for padding.

    '=' is a valid character, but minetest.decode_base64 returned nil when it was used for padding.

    Sanitize world directory names on create. Keep original name separate (#9432)

    

    Blacklisted characters are replaced by '_' in the path. The display name is stored in world.mt, and duplicate file names are resolved by adding an incrementing suffix (_1, _2, _3, etc).

    Blacklisted characters are replaced by '_' in the path. The display name is stored in world.mt, and duplicate file names are resolved by adding an incrementing suffix (_1, _2, _3, etc).

    Fix incorrect view URL for games

    

    package.id is a sanitised combination of author and basename, used to

    compare remote and local content. Minetest ignores `_game` when comparing

    game names, so package.id has `_game` removed. This meant that the wrong

    URL was being generated for View.

    package.id is a sanitised combination of author and basename, used to

    compare remote and local content. Minetest ignores `_game` when comparing

    game names, so package.id has `_game` removed. This meant that the wrong

    URL was being generated for View.

    compare remote and local content. Minetest ignores `_game` when comparing

    game names, so package.id has `_game` removed. This meant that the wrong

    URL was being generated for View.

    game names, so package.id has `_game` removed. This meant that the wrong

    URL was being generated for View.

    URL was being generated for View.

    Play place_failed sound if occupied or cannot attach (#9486)

    Improve default inventory+wield images of node drawtypes (#9299)

    Replace std::list<session_t> in networking code (#10215)

    Android: Fix ConfirmRegistration and PasswordChange input and scale size (#10182)

    Revert "Auto delete MetaData when = 0 (#8770)" (#10183)

    

    This reverts commit 808eb4c5714da5ac36f4a70653d6b3805060828c.

    This reverts commit 808eb4c5714da5ac36f4a70653d6b3805060828c.

    Formspecs: volume and key settings windows can now be closed by doubleclicking/tapping (#10128)

    

    

    Co-authored-by: Xx_Crazyminer_xX <carlo.digioia@hotmail.it>

    Co-authored-by: Marco <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Xx_Crazyminer_xX <carlo.digioia@hotmail.it>

    Co-authored-by: Marco <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: Marco <4279489-marco_a@users.noreply.gitlab.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Implement grouped mode for find_nodes_in_area (#9888)

    

    plus general improvements to find_node_* functions

    plus general improvements to find_node_* functions

    Add object crosshair, disable entity selectionboxes by default (#9523)

    

    Adds new object crosshair base pack texture

    Adds new object crosshair base pack texture

    Cleanup ClientLauncher structure (#10160)

    

    Remove duplicated variables and unify the startup data into a new (inherited) struct.

    Remove duplicated variables and unify the startup data into a new (inherited) struct.

    Add FormSpec font styling options (#9763)

    

    * Add FormSpec font styling options

    

    * Change multiplication to stof

    

    * Remove extraneous check

    * Add FormSpec font styling options

    

    * Change multiplication to stof

    

    * Remove extraneous check

    * Change multiplication to stof

    

    * Remove extraneous check

    * Remove extraneous check

    Add reconnect button on error: Too many players (#9405)

    Allow FormSpec elements to be focused with `set_focus` (#9353)

    

    This allows you to specify a FormSpec element to set the focus of with "set_focus[<name>;<always set>]".

    This allows you to specify a FormSpec element to set the focus of with "set_focus[<name>;<always set>]".

    Bump animation frame count from u8 to u16 (#10054)

    Remove std::shared_ptr use in TileLayer (#10090)

    Formspec: Make dropdowns optionally return event based on index, not value (#9496)

    Continue with 5.4.0-dev

    Bump version to 5.3.0

    Quick workaround for crashing destructor on Mingw32

    

    closes #10137

    closes #10137

    Fix ContentDB menu icons not appearing on Windows

    Make util/bump_version.sh work again

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 12.8% (174 of 1350 strings)

    Translated using Weblate (Slovak)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 12.8% (174 of 1350 strings)

    Translated using Weblate (Galician)

    

    Currently translated at 0.6% (9 of 1416 strings)

    Currently translated at 0.5% (8 of 1350 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 17.5% (237 of 1350 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 26.2% (354 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 78.9% (1066 of 1350 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 55.7% (753 of 1350 strings)

    Added translation using Weblate (Slovak)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 60.8% (822 of 1350 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 96.5% (1304 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 78.8% (1065 of 1350 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (1336 of 1350 strings)

    Translated using Weblate (Malay (Jawi))

    

    Currently translated at 64.6% (916 of 1416 strings)

    Currently translated at 7.4% (100 of 1350 strings)

    Translated using Weblate (Hindi)

    

    Currently translated at 34.5% (467 of 1350 strings)

    Currently translated at 33.1% (448 of 1350 strings)

    Translated using Weblate (Galician)

    

    Currently translated at 0.6% (9 of 1416 strings)

    Currently translated at 0.5% (7 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 78.3% (1058 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 69.9% (944 of 1350 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 55.7% (752 of 1350 strings)

    Added translation using Weblate (Malay (Jawi))

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.6% (576 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 99.6% (1345 of 1350 strings)

    Translated using Weblate (Gaelic)

    

    Currently translated at 17.0% (238 of 1396 strings)

    Currently translated at 18.1% (245 of 1350 strings)

    Translated using Weblate (Galician)

    

    Currently translated at 0.6% (9 of 1416 strings)

    Currently translated at 0.4% (6 of 1350 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 12.8% (173 of 1350 strings)

    Translated using Weblate (Kazakh)

    

    Currently translated at 4.0% (54 of 1350 strings)

    Currently translated at 2.5% (34 of 1350 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.0% (568 of 1350 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.0% (568 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 77.1% (1042 of 1350 strings)

    Added translation using Weblate (Gaelic)

    Added translation using Weblate (Galician)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 93.7% (1266 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 93.7% (1266 of 1350 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 93.7% (1266 of 1350 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 41.4% (560 of 1350 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 92.0% (1243 of 1350 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 78.4% (1059 of 1350 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 56.8% (768 of 1350 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.8% (916 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.8% (916 of 1350 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.8% (916 of 1350 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1350 of 1350 strings)

    Fix build due to revert error

    Fix player controls only being applied for the first move

    Revert "Verify database connection on interval (#9665)"

    

    Fixes #10113

    

    This reverts commit 5c588f89e79e02cba392abe3d00688772321f88b.

    Fixes #10113

    

    This reverts commit 5c588f89e79e02cba392abe3d00688772321f88b.

    This reverts commit 5c588f89e79e02cba392abe3d00688772321f88b.

    Apply camera smoothing to 'air stepheight' (#10025)

    

    Recent changes to collision code have changed the behaviour of the 'touching_ground'

    bool in movement code. This had the effect of disabling camera smoothing when

    'air stepheight' occurred when jumping onto a node while pressing forwards against

    the node, causing an unpleasant sharp camera movement.

    

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    Recent changes to collision code have changed the behaviour of the 'touching_ground'

    bool in movement code. This had the effect of disabling camera smoothing when

    'air stepheight' occurred when jumping onto a node while pressing forwards against

    the node, causing an unpleasant sharp camera movement.

    

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    bool in movement code. This had the effect of disabling camera smoothing when

    'air stepheight' occurred when jumping onto a node while pressing forwards against

    the node, causing an unpleasant sharp camera movement.

    

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    'air stepheight' occurred when jumping onto a node while pressing forwards against

    the node, causing an unpleasant sharp camera movement.

    

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    the node, causing an unpleasant sharp camera movement.

    

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    Rewrite the conditions for camera smoothing such that it is applied when jumping.

    Don't stop style parsing on unknown property (#10143)

    Fix undeclared global in devtest (#10133)

    Fix bone-attached entities (#10015)

    Release test build to Android beta program

    Fix wrong use of guiScalingImageButton in formspecs buttons (#10094)

    Android: fix maxAspectRatio (should be float) (#10080)

    Document deprecation of *_hovered and *_pressed styles (#10092)

    Disable pgsql in VS 2019 workflow

    Fix HTTP API not being available in async mainmenu (#10086)

    Android: Fix asset upgrade by renaming license file (#10073)

    Add warning when disabling secure.enable_security (#9943)

    Android: fix TMPFolder path (#10052)

    ParticleSpawner: Fix crash when attaching to invisible entity

    content_cao: Fix behavior of legacy "textures" field for wielditems

    Add .nomedia file to Android assets (#10047)

    Android: Fix only right strafe working (#10046)

    Fix typo (#10043)

    Make shading of CAOs optional (#10033)

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example, settings_translation_file.cpp

    Translated using Weblate (Vietnamese)

    

    Currently translated at 41.4% (606 of 1462 strings)

    Currently translated at 2.5% (33 of 1288 strings)

    Translated using Weblate (Kazakh)

    

    Currently translated at 4.0% (54 of 1350 strings)

    Currently translated at 1.8% (24 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 92.9% (1197 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.1% (1161 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.1% (1161 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.1% (1161 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 90.1% (1161 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.6% (1000 of 1288 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 97.5% (1256 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 70.8% (912 of 1288 strings)

    Translated using Weblate (Latvian)

    

    Currently translated at 26.2% (372 of 1416 strings)

    Currently translated at 31.8% (410 of 1288 strings)

    Added translation using Weblate (Latvian)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.0% (541 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.4% (997 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.4% (997 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.4% (997 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 83.1% (1071 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 69.4% (894 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 69.4% (894 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 69.4% (894 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 69.4% (894 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.7% (1246 of 1288 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.9% (875 of 1288 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 18.6% (240 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 89.1% (1148 of 1288 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 42.7% (551 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 70.7% (911 of 1288 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 15.3% (198 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.1% (994 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.0% (1237 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.0% (1237 of 1288 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 30.4% (392 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.4% (1230 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.4% (1230 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.3% (1228 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.3% (1228 of 1288 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 95.4% (1229 of 1288 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 58.9% (759 of 1288 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 58.9% (759 of 1288 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 58.9% (759 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.6% (1245 of 1288 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 87.8% (1132 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 94.8% (1222 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.0% (993 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.6% (1245 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.9% (901 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 61.1% (788 of 1288 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 61.1% (788 of 1288 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 18.7% (242 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.8% (900 of 1288 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.6% (897 of 1288 strings)

    Translated using Weblate (Hindi)

    

    Currently translated at 34.5% (467 of 1350 strings)

    Currently translated at 6.5% (85 of 1288 strings)

    Added translation using Weblate (Hindi)

    Exposing the zoom key to Lua API (#9903)

    

    

    Co-authored-by: Raul Ferriz <raul.ferriz@gmail.com>

    Co-authored-by: Raul Ferriz <raul.ferriz@gmail.com>

    Server pushing media at runtime (#9961)

    Add LevelDB player database (#9982)

    Use multiple light positions for CAO lighting

    content_cao: Do not expire visuals for texture updates

    Fix build error on Ubuntu 16.04 (again)

    Fix build error on Ubuntu 16.04

    Fix broken coloring of wielditems (#9969)

    

    Fixes a regression that appeared in 5.3.0-dev.

    Fixes a regression that appeared in 5.3.0-dev.

    Some vector functions useful for working with rotations (#9572)

    

    * added vector.rotate

    

    * added vector.forward_from_rotation and vector.up_from_rotation

    

    * added vector.forward_up_to_rotatiton

    

    * fixed some bugs and formatting with vector functions

    

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added vector.rotate

    

    * added vector.forward_from_rotation and vector.up_from_rotation

    

    * added vector.forward_up_to_rotatiton

    

    * fixed some bugs and formatting with vector functions

    

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added vector.forward_from_rotation and vector.up_from_rotation

    

    * added vector.forward_up_to_rotatiton

    

    * fixed some bugs and formatting with vector functions

    

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added vector.forward_up_to_rotatiton

    

    * fixed some bugs and formatting with vector functions

    

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * fixed some bugs and formatting with vector functions

    

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * shortened name of some new vector functions and added documentation

    

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * made vector.rotate not require a unit vector as axis

    

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * fixed crash with vector.forward_up_to_rot

    

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * renamed new vector functions, made vector.rotate apply a rotation matrix, old vector.rotate is now called vector.rotate_around_axis

    

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * documented vector function changes

    

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * removed some whitespace to appease luacheck

    

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * implemented and fixed optimization of vector.rotate_around_axis by SmallJoker

    

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added some unit tests for rotation vector functions

    

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * clarified that rotation vectors are in radians and according to the left hand rule

    

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * hopefully appeased luacheck

    

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * renamed rotation_to_horizontal to forward_at_rotation, rotation_to_vertical to up_at_rotation

    

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * handled cases where sin or cos are 0 in rotation vector functions

    

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added more comments

    

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * clarified documentation of rotation vector functions

    

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * added more unit tests

    

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * changed way in which vector.rotate_around_axis is adjusted for left handed coordinate systems

    

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * made vector.rotate_around_axis actually left handed

    

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * unrolled matrix multiplication

    

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * removed vector.forward_at_rotation and vector.up_at_rotation

    

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * prettified vector.rotate_around_axis, made previous commits not break anything

    

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * removed references to removed vector.forward_at_rotation and vector.up_at_rotation

    

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * removed documentation of removed vector functions

    

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * clarified documentation and fixed styling of rotation vector functions

    

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * restyled comments minorly

    

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * spelling fixes and some hopefully better comments

    

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * allowed 'up' to be missing from vector.directions_to_rotation and removed requirement for unit vectors as arguments

    

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * made vector.rotate_around_axis() right handed again for consistency

    

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * documented previous changes

    

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * made matrix multiplication actually multiply

    

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * renamed vector.directions_to_rotation() to vector.dir_to_rotation()

    

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * optimized a distance comparison

    

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    * Fixed potential false positive in unit tests.

    

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    Co-authored-by: NetherEran <nethereran@hotmail.com>

    LuaItemStack: Add __tostring metamethod (#8785)

    

    * LuaItemStack: Add __tostring metamethod

    

    * Clean up LuaItemStack::checkobject

    * LuaItemStack: Add __tostring metamethod

    

    * Clean up LuaItemStack::checkobject

    * Clean up LuaItemStack::checkobject

    Fix player-to-object attachment teleport bug (#10008)

    

    Fixes two bugs:

    

     * The camera offset was not applied to an object while detaching, briefly placing the irrlicht matrixnode in world space.

     *  When attaching, the matrixnode's absolute position was evaluated without evaluating the parent first, resulting in zeroed positions.

    Fixes two bugs:

    

     * The camera offset was not applied to an object while detaching, briefly placing the irrlicht matrixnode in world space.

     *  When attaching, the matrixnode's absolute position was evaluated without evaluating the parent first, resulting in zeroed positions.

     * The camera offset was not applied to an object while detaching, briefly placing the irrlicht matrixnode in world space.

     *  When attaching, the matrixnode's absolute position was evaluated without evaluating the parent first, resulting in zeroed positions.

     *  When attaching, the matrixnode's absolute position was evaluated without evaluating the parent first, resulting in zeroed positions.

    TouchScreenGUI: fix some bugs, cleanup

    TouchScreen Control: fix some bugs, cleanup

    Fix real keyboard movements on touchscreen devices

    Hide tooltip after ETIE_LEFT_UP (for touch control)

    devtest: Improve tool and formspec usability

    

    also fix the yawsprite test entity

    also fix the yawsprite test entity

    Reset touching_ground when in free_move

    

    This corrects local player animation after enabling fly while standing on ground.

    This corrects local player animation after enabling fly while standing on ground.

    Fix Lua panic when error() message is not a string

    Recalculate mesh normals for CAOs (#10000)

    GenericCAO: Fix glow not working since a08d18a

    Restore visual_scale support for nodeboxes (and allfaces) (#9906)

    Fix incorrect extension used for ContentDB thumbnails

    Add HTTP API to main menu (#9998)

    Fix HUD scaling (#9721)

    

    This resolves HUD scaling issues on Android and desktops with custom DPI settings.

    This resolves HUD scaling issues on Android and desktops with custom DPI settings.

    TestBan: Clean up properly after completing test (#9994)

    Show Toast in UI thread and fix unpacking on Android 10 (#9900)

    Add buttons to ContentDB in game bar and configure world (#9944)

    Move shared parameters sending to UnitSAO (#9968)

    

    Better header sorting by topic

    Make UnitSAO-specific parameters private

    Skip redundant recursive entity sending code (since ~5.2.0)

    Better header sorting by topic

    Make UnitSAO-specific parameters private

    Skip redundant recursive entity sending code (since ~5.2.0)

    Make UnitSAO-specific parameters private

    Skip redundant recursive entity sending code (since ~5.2.0)

    Skip redundant recursive entity sending code (since ~5.2.0)

    Fix autoscale_mode segfault if tile doesn't have texture

    

    closes #9965

    closes #9965

    Lua API: Log incorrect parameter types as error (#9954)

    

    Incorrect parameter types are logged as errors, taking coercion into account.

    This is a workaround to ensure mod compatibility.

    Duplicate warnings are ignored per server instance.

    Incorrect parameter types are logged as errors, taking coercion into account.

    This is a workaround to ensure mod compatibility.

    Duplicate warnings are ignored per server instance.

    This is a workaround to ensure mod compatibility.

    Duplicate warnings are ignored per server instance.

    Duplicate warnings are ignored per server instance.

    ContentCAO: Update light of all attached entities (#9975)

    imageScaleNNAA: Fix image clipping on rect- instead of image dimensions (#9896)

    

    Fixes GUI scaling filters applied on animated images and 9slice backgrounds.

    Fixes GUI scaling filters applied on animated images and 9slice backgrounds.

    Devtest: Fix missing/incorrect liquid properties (#9955)

    Clean up CAO nametag handling and remove deprecated AO_CMD

    

    AO_CMD_UPDATE_NAMETAG_ATTRIBUTES was deprecated in

    9eee3c3f465c071bb9908749cf48be3c131a1bdf (0.4.14)

    AO_CMD_UPDATE_NAMETAG_ATTRIBUTES was deprecated in

    9eee3c3f465c071bb9908749cf48be3c131a1bdf (0.4.14)

    9eee3c3f465c071bb9908749cf48be3c131a1bdf (0.4.14)

    content_cao: Do not expire visuals when not necessary

    

    fixes #6572

    fixes #6572

    Add disable_jump check for the player's feet

    Add minetest.is_creative_enabled

    Update ContentDB dialog (#9949)

    Value copy / allocation optimizations mostly in server, SAO and serialize code

    Change item entity collisionbox so that they don't sink into the ground

    Fix falling entity not falling through players

    Make ContentDB downloads not block the UI (#9948)

    Fix liquids refusing to flow in X+ or Z+ in some cases (#9874)

    

    Applies when a different:

    - falling liquid is neighboring

    - liquid is below

    Applies when a different:

    - falling liquid is neighboring

    - liquid is below

    - falling liquid is neighboring

    - liquid is below

    - liquid is below

    Devtest game: Update biome registrations (#9936)

    Fix devtest being ignored by .gitignore

    Devtest: Fix crash in player unittest (#9937)

    

    Happened if player unittests run when player has exactly 3 HP

    Happened if player unittests run when player has exactly 3 HP

    Rename “Minimal development test” to “Development Test” (#9928)

    L-System trees: Remove hardcoded use of 'mapgen_dirt' alias (#9931)

    

    Games often and increasingly do not use this mapgen alias, as it

    is only required for Mapgen V6. Such games were triggering the

    recently added error message.

    

    Even if this mapgen alias was defined, dirt nodes placed under a

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    Games often and increasingly do not use this mapgen alias, as it

    is only required for Mapgen V6. Such games were triggering the

    recently added error message.

    

    Even if this mapgen alias was defined, dirt nodes placed under a

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    is only required for Mapgen V6. Such games were triggering the

    recently added error message.

    

    Even if this mapgen alias was defined, dirt nodes placed under a

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    recently added error message.

    

    Even if this mapgen alias was defined, dirt nodes placed under a

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    Even if this mapgen alias was defined, dirt nodes placed under a

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    wide trunk were inconsistent with biomes that do not use dirt

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    surface nodes.

    

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    Place trunk nodes below a wide trunk instead of 'mapgen_dirt'.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    On sloping ground, the trunk then extends down to the surface,

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    instead of the surface rising up to meet the trunk. This looks

    more natural and does not alter the terrain.

    more natural and does not alter the terrain.

    Silence GCC warning in mapblock_mesh

    

    Fixes following warning:

      warning: ‘waving’ may be used uninitialized in this function [-Wmaybe-uninitialized]

    Fixes following warning:

      warning: ‘waving’ may be used uninitialized in this function [-Wmaybe-uninitialized]

      warning: ‘waving’ may be used uninitialized in this function [-Wmaybe-uninitialized]

    Fix build on FreeBSD, broken since open_url

    Add engine version string to ContentDB API request (#9890)

    Replacement for Minimal Development Test (PR) (#9450)

    Add chat_font_size setting (#9736)

    

    Default font sizes are used when the setting value is 0 or below (clamped by Settings).

    Default font sizes are used when the setting value is 0 or below (clamped by Settings).

    Fix two bugs in content_cao

    

    fixes #9889 (backface_culling with visual = "cube")

    fixes #9916 (crash with visual = "upright_sprite")

    fixes #9889 (backface_culling with visual = "cube")

    fixes #9916 (crash with visual = "upright_sprite")

    fixes #9916 (crash with visual = "upright_sprite")

    Fix constant re-queueing of emerges that will always be unsuccessful

    Fix documentation of emergequeue_limit settings

    lua_api.txt: Fix minor typo (#9917)

    Optimize particlespawner sending by not sending to distant players

    Implement spawning particles with node texture appearance

    Add on_authplayer callback and 'last_login' to on_joinplayer (#9574)

    

        Replace on_auth_fail callback with more versatile on_authplayer

        Better clarify account login process in Lua API documentation

        Change initial timestamp for newly registered accounts to -1

        Replace on_auth_fail callback with more versatile on_authplayer

        Better clarify account login process in Lua API documentation

        Change initial timestamp for newly registered accounts to -1

        Better clarify account login process in Lua API documentation

        Change initial timestamp for newly registered accounts to -1

        Change initial timestamp for newly registered accounts to -1

    Modernize include guards and add missing ones (#9898)

    Check for valid base64 before decoding (#9904)

    MacOS: Fix environ not being found

    Cleanup of particle & particlespawner structures and code (#9893)

    Various documentation fixes in settingtypes.txt (#9910)

    

    Fix incorrect value of 'mgv7_floatland_density'.

    Use correct spelling of 'persistence'.

    Move '3d_paralax_strength' into correct section (3D mode).

    Refer to 'active_object_send_range_blocks' instead of non-existent 'active_object_range'.

    Fix incorrect value of 'mgv7_floatland_density'.

    Use correct spelling of 'persistence'.

    Move '3d_paralax_strength' into correct section (3D mode).

    Refer to 'active_object_send_range_blocks' instead of non-existent 'active_object_range'.

    Use correct spelling of 'persistence'.

    Move '3d_paralax_strength' into correct section (3D mode).

    Refer to 'active_object_send_range_blocks' instead of non-existent 'active_object_range'.

    Move '3d_paralax_strength' into correct section (3D mode).

    Refer to 'active_object_send_range_blocks' instead of non-existent 'active_object_range'.

    Refer to 'active_object_send_range_blocks' instead of non-existent 'active_object_range'.

    Cache liquid alternative IDs (#8053)

    Allow more than 255 biomes, document new maximum (#9855)

    

    Change biomemap data type from u8 to u16.

    New technical (not practical) maximum is 65535 biomes.

    Change biomemap data type from u8 to u16.

    New technical (not practical) maximum is 65535 biomes.

    New technical (not practical) maximum is 65535 biomes.

    Stop wasting memory on identical textures when texture filtering is disabled

    CSM: Fix crashing minetest.get_item_def()

    

    fixes #9884

    fixes #9884

    Rework functionality of leveled nodes (#9852)

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Add ability to scale HUD text (#9814)

    

    Add 'size' property to HUD text elements that is used for relative font size calculations.

    Add 'size' property to HUD text elements that is used for relative font size calculations.

    Add missing sao->isGone() checks

    

    fixes #9883

    fixes #9883

    builtin: Move common/async_event.lua to mainmenu/async_event.lua

    

    It only works in the context of the mainmenu.

    It only works in the context of the mainmenu.

    content_mapblock: Move static initialization out of functions

    Client: Add sum and average to packetcounter

    Add core.open_url() to main menu API (#8592)

    Make automatic_rotate relative, allow setting rotation (#8468)

    

    automatic_rotate does not make sense if it is absolute. Make it relative.

    

    To avoid bouncing, set_rotation did not update the client when automatic_rotate was set. That's no longer necessary because the new spinning method applies the rotation on top of the current one, and the updates are necessary for set_rotation to actually transform the object.

    

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    automatic_rotate does not make sense if it is absolute. Make it relative.

    

    To avoid bouncing, set_rotation did not update the client when automatic_rotate was set. That's no longer necessary because the new spinning method applies the rotation on top of the current one, and the updates are necessary for set_rotation to actually transform the object.

    

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    To avoid bouncing, set_rotation did not update the client when automatic_rotate was set. That's no longer necessary because the new spinning method applies the rotation on top of the current one, and the updates are necessary for set_rotation to actually transform the object.

    

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    Error msg if trying to teleport attached player (#9824)

    Log protocol ver on mismatched client connect too

    Add new Mapgen V7 floatland implementation (#9296)

    

    Floatland structure is vertically-compressed 3D noise.

    Uses a lacunarity of 1.618 (the golden ratio) for high quality

    noise.

    Floatlands appear between user-settable Y limits, with smooth

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Floatland structure is vertically-compressed 3D noise.

    Uses a lacunarity of 1.618 (the golden ratio) for high quality

    noise.

    Floatlands appear between user-settable Y limits, with smooth

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Uses a lacunarity of 1.618 (the golden ratio) for high quality

    noise.

    Floatlands appear between user-settable Y limits, with smooth

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    noise.

    Floatlands appear between user-settable Y limits, with smooth

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Floatlands appear between user-settable Y limits, with smooth

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    tapering at each limit.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Simple user-settable density adjustment.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Shadow propagation is disabled in and just below floatlands, no

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    shadows are cast on the world surface.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    Can be reconfigured to create a solid upper world layer between

    the Y limits, lakes/seas can be optionally added to this.

    the Y limits, lakes/seas can be optionally added to this.

    network: Replace a fatal_error with just error logging

    CSM: Bugfixes to camera:get_pos() and camera:get_fov()

    

    closes #9857

    closes #9857

    Collision detection - #9343 follow-up (#9764)

    

    * truncate speed to prevent inf result

    

    * code styling

    

    * change truncate() input parameters

    * truncate speed to prevent inf result

    

    * code styling

    

    * change truncate() input parameters

    * code styling

    

    * change truncate() input parameters

    * change truncate() input parameters

    Add chat_log_level setting (#9223)

    

    Log all higher levels in LogOutputBuffer

    Move StreamLogOutput::logRaw to source file like LogOutputBuffer::logRaw for compiling speed

    Log all higher levels in LogOutputBuffer

    Move StreamLogOutput::logRaw to source file like LogOutputBuffer::logRaw for compiling speed

    Move StreamLogOutput::logRaw to source file like LogOutputBuffer::logRaw for compiling speed

    Item Entity: Add message to moveresult assertion (#9797)

    Allow placing auto-rotating nodes on other nodes in on_rightclick (#9859)

    Document inf value in rollback commands (#9789)

    Add mapgen settings to world creation dialog (#9254)

    Damage texture modifier (#9833)

    

    Adds a new object property "damage_texture_modifier"

    Adds a new object property "damage_texture_modifier"

    Add support for statbar “off state” icons (#9462)

    

    This adds support for optional “off state” icons for statbars. “off state icons” can be used to denote the lack of something, like missing hearts or bubbles.

    

    Add "off state" textures to the builtin statbars.

    

    Co-authored-by: SmallJoker <mk939@ymail.com>

    This adds support for optional “off state” icons for statbars. “off state icons” can be used to denote the lack of something, like missing hearts or bubbles.

    

    Add "off state" textures to the builtin statbars.

    

    Co-authored-by: SmallJoker <mk939@ymail.com>

    Add "off state" textures to the builtin statbars.

    

    Co-authored-by: SmallJoker <mk939@ymail.com>

    Co-authored-by: SmallJoker <mk939@ymail.com>

    Request the dedicated GPU when starting Minetest from the `.desktop` file (#9827)

    

    See <https://www.hadess.net/2020/05/dual-gpu-support-launch-on-discrete-gpu.html>

    for more information about this newly added `.desktop` entry property.

    See <https://www.hadess.net/2020/05/dual-gpu-support-launch-on-discrete-gpu.html>

    for more information about this newly added `.desktop` entry property.

    for more information about this newly added `.desktop` entry property.

    Color gradient for default and 'regular' type sky (#9502)

    

    * add regular sky gradient

    

    * add regular sky gradient

    

    * Update sky.cpp

    

    * change default day sky colors

    * add regular sky gradient

    

    * add regular sky gradient

    

    * Update sky.cpp

    

    * change default day sky colors

    * add regular sky gradient

    

    * add regular sky gradient

    

    * Update sky.cpp

    

    * change default day sky colors

    * Update sky.cpp

    

    * change default day sky colors

    * change default day sky colors

    Always use same default tabheader height (#9319)

    

    Previously the default tabheader height was different when using

    real coordinates. This resulted in the height of tabs changing when

    switching tabs in sfinv if some tabs used real coordinates.

    Previously the default tabheader height was different when using

    real coordinates. This resulted in the height of tabs changing when

    switching tabs in sfinv if some tabs used real coordinates.

    real coordinates. This resulted in the height of tabs changing when

    switching tabs in sfinv if some tabs used real coordinates.

    switching tabs in sfinv if some tabs used real coordinates.

    Server class code cleanups (#9769)

    

    * Server::overrideDayNightRatio doesn't require to return bool

    There is no sense to sending null player, the caller should send a valid object

    

    * Server::init: make private & cleanup

    This function is always called before start() and loads some variables which can be loaded in constructor directly.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * Server::overrideDayNightRatio doesn't require to return bool

    There is no sense to sending null player, the caller should send a valid object

    

    * Server::init: make private & cleanup

    This function is always called before start() and loads some variables which can be loaded in constructor directly.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    There is no sense to sending null player, the caller should send a valid object

    

    * Server::init: make private & cleanup

    This function is always called before start() and loads some variables which can be loaded in constructor directly.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * Server::init: make private & cleanup

    This function is always called before start() and loads some variables which can be loaded in constructor directly.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    This function is always called before start() and loads some variables which can be loaded in constructor directly.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    Make it private and call it directly in start

    

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * Split Server inventory responsibility to a dedicated object

    

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    This splits permit to found various historical issues:

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * duplicate lookups on player connection

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * sending inventory to non related player when a player connects

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    * non friendly lookups on detached inventories ownership

    

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    This reduce the detached inventory complexity and also increased the

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    lookup performance in a quite interesting way for servers with thousands

    of inventories.

    of inventories.

    Fix Server triggering wrong errors if environment init fails

    Get rid of non-ascii characters in the debug display code (#8821)

    FormSpec: Add universal style selector `*` (#9718)

    Android: porting_android.cpp refactoring (#9687)

    

    * Android: porting_android.cpp refactoring

    

    * Replace assert to FATAL_ERROR_IF

    * Android: porting_android.cpp refactoring

    

    * Replace assert to FATAL_ERROR_IF

    * Replace assert to FATAL_ERROR_IF

    Enable collide_with_objects for falling entities

    

    falling nodes intentionally still fall through players

    fixes #5313

    falling nodes intentionally still fall through players

    fixes #5313

    fixes #5313

    Rewrite falling entity to make use of collision info

    

    fixes #4781, fixes #9293

    fixes #4781, fixes #9293

    Expose collided objects in moveresult

    

    closes #9787

    closes #9787

    Fix crash when exiting server during running mapgen

    

    easily reproducible with a high num_emerge_threads and /emergeblocks

    easily reproducible with a high num_emerge_threads and /emergeblocks

    Fix thread safety of PcgRandom use in BiomeGen

    Update num_emerge_threads description

    Fix remaining issues with mapgen scriptapi

    Give the Mapgen on each EmergeThread its own Biome/Ore/Deco/SchemManager copy

    Allow ObjDefManager instances to be cloned

    Server: Improve some log messages (#9820)

    Add MSVC build (#9740)

    

    * Add MSVC build

    * Add MSVC build

    Fix broken client if openal cannot be opened (#9804)

    Sky API: Rename *_tint to fog_*_tint for consistency

    Rename moveresult speed to velocity

    Fix small typo (#9813)

    Android: some java-part improvements (#9760)

    

    Replace Log to Toast.

    Start Native only after successful unpacking.

    Light refactoring in CopyZipTask.

    Update NDK version.

    

    Co-authored-by: ubulem <berkut87@gmail.com>

    Replace Log to Toast.

    Start Native only after successful unpacking.

    Light refactoring in CopyZipTask.

    Update NDK version.

    

    Co-authored-by: ubulem <berkut87@gmail.com>

    Start Native only after successful unpacking.

    Light refactoring in CopyZipTask.

    Update NDK version.

    

    Co-authored-by: ubulem <berkut87@gmail.com>

    Light refactoring in CopyZipTask.

    Update NDK version.

    

    Co-authored-by: ubulem <berkut87@gmail.com>

    Update NDK version.

    

    Co-authored-by: ubulem <berkut87@gmail.com>

    Co-authored-by: ubulem <berkut87@gmail.com>

    Change default keys for cam/minimap to C/V (#9779)

    Add 'content_offset' and 'padding' style properties for buttons (#9661)

    

    * Add padding and content_offset style properties to buttons

    * Add padding and content_offset style properties to buttons

    Add a convention about z_index (#9701)

    Auto delete MetaData when = 0 (#8770)

    

    * Auto delete MetaData when = 0

    * Auto delete MetaData when = 0

    ci: Update Github Actions workflows (#9774)

    set_fov: Add support for time-based transitions (#9705)

    Allow connection info to be missing from minetest.get_player_information() (#9739)

    

    fixes #9352

    This reverts commit 23c907befea02005e2c0c87fca0131b60aace18a.

    fixes #9352

    This reverts commit 23c907befea02005e2c0c87fca0131b60aace18a.

    This reverts commit 23c907befea02005e2c0c87fca0131b60aace18a.

    Give the online lua mainmenu also the client_list and mods (#8691)

    Fix gettext detection and locale building (#9772)

    

    broken since a368e7e

    broken since a368e7e

    Add docker build stage on Github actions

    Add MetricsBackend with prometheus counter support

    Fix breath_bar scaling; delay breath_bar hiding by one second (#8271)

    

    PLAYER_MAX_BREATH_DEFAULT was earlier set to 11, so that 10 bubbles are shown before the breath bar disappears.

    

    Now, PLAYER_MAX_BREATH_DEFAULT is set to 10, and the breath_bar scaling code in builtin has been tweaked to show all 10 bubbles before hiding the breath_bar

    PLAYER_MAX_BREATH_DEFAULT was earlier set to 11, so that 10 bubbles are shown before the breath bar disappears.

    

    Now, PLAYER_MAX_BREATH_DEFAULT is set to 10, and the breath_bar scaling code in builtin has been tweaked to show all 10 bubbles before hiding the breath_bar

    Now, PLAYER_MAX_BREATH_DEFAULT is set to 10, and the breath_bar scaling code in builtin has been tweaked to show all 10 bubbles before hiding the breath_bar

    cmake: Silence warnings. (#9750)

    

    Fixes https://github.com/minetest/minetest/issues/9734

    Fixes https://github.com/minetest/minetest/issues/9734

    Rewrite builtin item entity to use collision info

    

    fixes #8967

    fixes #8967

    Expose collision information to LuaEntity on_step

    Remove /LTCG from when compiling with clang-cl (#9765)

    

    Remove /LTCG from CMAKE_EXE_LINKER_FLAGS_RELEASE when compiling with clang on Windows

    Remove /LTCG from CMAKE_EXE_LINKER_FLAGS_RELEASE when compiling with clang on Windows

    Fix detection of in-place path_locale when RUN_IN_PLACE=0

    

    broken by 2349d31bae1bfc4d58fd88efbc88261e69b11dad (side effect)

    fixes #9745

    broken by 2349d31bae1bfc4d58fd88efbc88261e69b11dad (side effect)

    fixes #9745

    fixes #9745

    Add STATIC_LOCALEDIR to BUILD_INFO and move it to version.cpp

    Forbid object:attach(obj, ...) (#9762)

    

    Fixes #9761

    Fixes #9761

    Script: Enforce type checks if not nil (#9748)

    

    * Script: Enforce type checks if not nil

    * Script: Enforce type checks if not nil

    Fix truncation warning for F1000_MIN, F1000_MAX

    script: Put getGuiEngine() inside a client-only #ifdef

    builtin: Correctly indicate failure in /spawnentity

    script: Fix add_entity returning unusable ref if object deleted in on_activate

    Add PostgreSQL authentication backend (#9756)

    

    * Add PostgreSQL authentication backend

    * Add PostgreSQL authentication backend

    Add new command /revokeme <priv> (#9584)

    Remove unused lookup table from noise.cpp

    

    closes #9757

    closes #9757

    Fix mapgen settings in minetest.conf being ignored (#9737)

    

    broken since e8a8185d24897ccf964327017effae81aa1c9d40

    broken since e8a8185d24897ccf964327017effae81aa1c9d40

    Fix UpdateBonePosition() breaking animations (#9577)

    Add `animated_image` to clickthrough elements (#9724)

    Fix DPI scaling on Windows

    

    the manifest appears to be very sensitive to changes

    closes #9744

    the manifest appears to be very sensitive to changes

    closes #9744

    closes #9744

    mapblock_mesh: Optimize a few things (#9713)

    Ensure game is shutdown if server throws exception (#9742)

    Simplify how parseElement splits element string (#9726)

    Add server side translations capability (#9733)

    

    * Add server side translations capability

    * Add server side translations capability

    Add LevelDB auth database. (#9476)

    

    * Add leveldb auth database.

    * Add leveldb auth database.

    Camera: Fix shootline line offsets II (#9730)

    Android: add OpenGL ES 2 support (#9715)

    

    .. and bump gradle to 3.6.3

    .. and bump gradle to 3.6.3

    minetest.serialize: Reversible number serialization (#9722)

    

    * minetest.serialize: Reversible number to string conversion

    

    The %a format is not supported in Lua 5.1.

    This commit also adds two tests for number serialization.

    * minetest.serialize: Reversible number to string conversion

    

    The %a format is not supported in Lua 5.1.

    This commit also adds two tests for number serialization.

    The %a format is not supported in Lua 5.1.

    This commit also adds two tests for number serialization.

    This commit also adds two tests for number serialization.

    Fix configuration caching in log_deprecated (#9697)

    

    * Fix configuration caching in log_deprecated

    

    The configured variable was never set to true.

    I've set the variables to thread_local because the configuration should be reloaded after reentering the world from mainmenu.

    * Fix configuration caching in log_deprecated

    

    The configured variable was never set to true.

    I've set the variables to thread_local because the configuration should be reloaded after reentering the world from mainmenu.

    The configured variable was never set to true.

    I've set the variables to thread_local because the configuration should be reloaded after reentering the world from mainmenu.

    I've set the variables to thread_local because the configuration should be reloaded after reentering the world from mainmenu.

    Improve protocol-level receiving code (#9617)

    Fix build badge since switching to github actions

    Replace travis with github actions (#9641)

    

    * Move outside of travis to Github actions

    

    This will permit to have better integrated CI workflow than the previous

    travis one.

    * Move outside of travis to Github actions

    

    This will permit to have better integrated CI workflow than the previous

    travis one.

    This will permit to have better integrated CI workflow than the previous

    travis one.

    travis one.

    Fix alias handling of get_content_id (#9712)

    

    fixes #9632

    fixes #9632

    Reuse object_shader for "wielditem" and "item" entity drawtypes (#9537)

    Shaders: Complete 478e753. OpenGL 4.3 compatiblity

    script: Move SAO usability check so that it covers all functions (#9698)

    

    see also 91eef646a59575bd9ae792e257bb6ad12fafc0b1

    see also 91eef646a59575bd9ae792e257bb6ad12fafc0b1

    Formspec: allow lists to change size and existence while the formspec is open (#9700)

    

    Fixes #9640.

    Fixes #9640.

    Apply a scrollbar's default value to scroll containers (#9699)

    

    Fixes #9691.

    Fixes #9691.

    serverpackethandler: Reduce pkt->getPeerId() invocations and more (#9689)

    Android: fix handling non-latin characters on older Android devices (#9309)

    Document which noise APIs add world seed to noiseparams seed (#9693)

    Rename "subgame" to "game" in 2 error messages (#9680)

    Add an option to disable unittest build, & disable them on Docker build (#9677)

    Drop -Wabi useless flag (#9676)

    Android: fix formspec input for AArch64 devices (#9685)

    Camera: Fix shooting line offsets (#9681)

    

    Removes duplicated offset calculations from Game and use whatever the Camera class returns.

    This keeps the eye position nicely in sync, and gets rid of duplicated code.

    Removes duplicated offset calculations from Game and use whatever the Camera class returns.

    This keeps the eye position nicely in sync, and gets rid of duplicated code.

    This keeps the eye position nicely in sync, and gets rid of duplicated code.

    Swap out -ffast-math for a safe subset of optimization flags (#9682)

    

    It caused more trouble than its worth.

    fixes #3943, fixes #5330

    It caused more trouble than its worth.

    fixes #3943, fixes #5330

    fixes #3943, fixes #5330

    Optimize get_objects_inside_radius calls (#9671)

    

    * Optimize getObjectsInsideRadius calls

    

    our previous implementation calls the ActiveObjectMgr to return ids and then lookup those ids in the same map and test each object

    Instead now we call the global map to return the pointers directly and we ask filtering when building the list using lamba.

    

    This drop double looping over ranges of active objects (and then filtered one) and drop x lookups on the map regarding the first call results

    * Optimize getObjectsInsideRadius calls

    

    our previous implementation calls the ActiveObjectMgr to return ids and then lookup those ids in the same map and test each object

    Instead now we call the global map to return the pointers directly and we ask filtering when building the list using lamba.

    

    This drop double looping over ranges of active objects (and then filtered one) and drop x lookups on the map regarding the first call results

    our previous implementation calls the ActiveObjectMgr to return ids and then lookup those ids in the same map and test each object

    Instead now we call the global map to return the pointers directly and we ask filtering when building the list using lamba.

    

    This drop double looping over ranges of active objects (and then filtered one) and drop x lookups on the map regarding the first call results

    Instead now we call the global map to return the pointers directly and we ask filtering when building the list using lamba.

    

    This drop double looping over ranges of active objects (and then filtered one) and drop x lookups on the map regarding the first call results

    This drop double looping over ranges of active objects (and then filtered one) and drop x lookups on the map regarding the first call results

    Android: add Android Studio support, completely redone java part (#9066)

    Fix parsing JSON with large integers (#9674)

    Verify database connection on interval (#9665)

    Add all src folders to doxygen (#9603)

    Update wireshark dissector (#9621)

    scriptapi: Some small optimizations to value pushing (#9669)

    PostgreSQL: Fix listAllLoadableBlocks returning the same block

    

    Suggested change from https://github.com/minetest/minetest/issues/9670#issuecomment-613563738

    Suggested change from https://github.com/minetest/minetest/issues/9670#issuecomment-613563738

    Refactor texture overrides and add new features (#9600)

    

    * Refactor texture overrides, and add new features:

    

    - Texture overrides can support multiple targets in one line

    - Texture override files can have comment lines

    - Item images/wield images can be overridden

    

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Refactor texture overrides, and add new features:

    

    - Texture overrides can support multiple targets in one line

    - Texture override files can have comment lines

    - Item images/wield images can be overridden

    

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Texture overrides can support multiple targets in one line

    - Texture override files can have comment lines

    - Item images/wield images can be overridden

    

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Texture override files can have comment lines

    - Item images/wield images can be overridden

    

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Item images/wield images can be overridden

    

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Formatting changes

    

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Address soime feedback

    

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Pass vectors by const reference

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Log syntax errors as warnings

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    - Remove 'C' prefix from TextureOverrideSource

    

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Simplify override target checks with an inline helper function

    

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * make linter happy

    

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Apply feedback suggestions

    

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-Authored-By: rubenwardy <rw@rubenwardy.com>

    

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Remove remaining != 0 checks

    

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    * Update copyright notice

    

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Co-authored-by: sfan5 <sfan5@live.de>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Co-authored-by: rubenwardy <rw@rubenwardy.com>

    Remove sound menu and show proper msgs if sound is off (#9069)

    Add default stack size setting (#8873)

    

    New setting "default_stack_max" to alter the default stack sizes of all items when desired.

    

    Co-authored-by: Pascal Abresch <nep@packageloss.eu>

    New setting "default_stack_max" to alter the default stack sizes of all items when desired.

    

    Co-authored-by: Pascal Abresch <nep@packageloss.eu>

    Co-authored-by: Pascal Abresch <nep@packageloss.eu>

    Add scroll_container formspec element (redo) (#9101)

    

    New formspec elements:

    

     - `scroll_container[<X>,<Y>;<W>,<H>;<scrollbar name>;<orientation>;<scroll factor>]`

     - `scroll_container_end[]`

    

    Other elements can be embedded in this element. Scrollbar must be placed manually.

    New formspec elements:

    

     - `scroll_container[<X>,<Y>;<W>,<H>;<scrollbar name>;<orientation>;<scroll factor>]`

     - `scroll_container_end[]`

    

    Other elements can be embedded in this element. Scrollbar must be placed manually.

     - `scroll_container[<X>,<Y>;<W>,<H>;<scrollbar name>;<orientation>;<scroll factor>]`

     - `scroll_container_end[]`

    

    Other elements can be embedded in this element. Scrollbar must be placed manually.

     - `scroll_container_end[]`

    

    Other elements can be embedded in this element. Scrollbar must be placed manually.

    Other elements can be embedded in this element. Scrollbar must be placed manually.

    GUIFormSpecMenu: Add basic element highlighing debug feature (#9423)

    

    Activated using F5

    Activated using F5

    Dockerfile: use alpine to reduce size (#9226)

    

    * Dockerfile: use alpine to reduce size

    

    * Fix the UID & GID + alpine version + rights

    

    * Reduce the junk when we copy, only copy needed files

    

    * Build in the right cmake place & permit customize mtg version

    

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    * Dockerfile: use alpine to reduce size

    

    * Fix the UID & GID + alpine version + rights

    

    * Reduce the junk when we copy, only copy needed files

    

    * Build in the right cmake place & permit customize mtg version

    

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    * Fix the UID & GID + alpine version + rights

    

    * Reduce the junk when we copy, only copy needed files

    

    * Build in the right cmake place & permit customize mtg version

    

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    * Reduce the junk when we copy, only copy needed files

    

    * Build in the right cmake place & permit customize mtg version

    

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    * Build in the right cmake place & permit customize mtg version

    

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    * Latest build fixes

    

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    Co-authored-by: Loïc Blot <nerzhul@users.noreply.github.com>

    Update README copyright to current year (#9566)

    Play 'player_jump' when player jumps (#9373)

    Fix delayed error message in start game tab

    Improve waypoints and add image variant (#9480)

    Formspecs: Add state-selection to style elements (#9378)

    Fix broken config check in 659245a

    Update API site build (#9622)

    Implement DPI scaling for Windows (#9586)

    Reduce ServerEnvironment propagation (#9642)

    

    ServerEnvironment is a huge class with many accessors. In various places it's not needed

    

    Remove it to reduce the ServerEnvironment view.

    

    Idea here is to reduce size of some of our objects to transport lightweight managers and permit easier testing

    

    Pathfinder is now tied to a generic map, not a ServerMap, it can be

    ported to client

    ServerEnvironment is a huge class with many accessors. In various places it's not needed

    

    Remove it to reduce the ServerEnvironment view.

    

    Idea here is to reduce size of some of our objects to transport lightweight managers and permit easier testing

    

    Pathfinder is now tied to a generic map, not a ServerMap, it can be

    ported to client

    Remove it to reduce the ServerEnvironment view.

    

    Idea here is to reduce size of some of our objects to transport lightweight managers and permit easier testing

    

    Pathfinder is now tied to a generic map, not a ServerMap, it can be

    ported to client

    Idea here is to reduce size of some of our objects to transport lightweight managers and permit easier testing

    

    Pathfinder is now tied to a generic map, not a ServerMap, it can be

    ported to client

    Pathfinder is now tied to a generic map, not a ServerMap, it can be

    ported to client

    ported to client

    Drop content_sao.{cpp,h}

    

    Move LuaEntitySAO to a new dedicated file

    Drop TestSAO (useless object)

    Drop the old static startup initialized SAO factory, which was pretty useless.

    This factory was using a std::map for 2 elements, now just use a simple condition owned by ServerEnvironment, which will be lightweight, that will also drop a one time useful test on each LuaEntitySAO creation. This should reduce server load on massive SAO creation

    Move LuaEntitySAO to a new dedicated file

    Drop TestSAO (useless object)

    Drop the old static startup initialized SAO factory, which was pretty useless.

    This factory was using a std::map for 2 elements, now just use a simple condition owned by ServerEnvironment, which will be lightweight, that will also drop a one time useful test on each LuaEntitySAO creation. This should reduce server load on massive SAO creation

    Drop TestSAO (useless object)

    Drop the old static startup initialized SAO factory, which was pretty useless.

    This factory was using a std::map for 2 elements, now just use a simple condition owned by ServerEnvironment, which will be lightweight, that will also drop a one time useful test on each LuaEntitySAO creation. This should reduce server load on massive SAO creation

    Drop the old static startup initialized SAO factory, which was pretty useless.

    This factory was using a std::map for 2 elements, now just use a simple condition owned by ServerEnvironment, which will be lightweight, that will also drop a one time useful test on each LuaEntitySAO creation. This should reduce server load on massive SAO creation

    This factory was using a std::map for 2 elements, now just use a simple condition owned by ServerEnvironment, which will be lightweight, that will also drop a one time useful test on each LuaEntitySAO creation. This should reduce server load on massive SAO creation

    Move PlayerSAO to dedicated files

    pass clang-format

    Add vscode cmake plugin files to gitignore

    Move serveractiveobject & unitsao

    

    Move serverobject.{cpp,h} to server/serveractiveobject.{cpp,h}

    Move UnitSAO class to dedicated files

    Move serverobject.{cpp,h} to server/serveractiveobject.{cpp,h}

    Move UnitSAO class to dedicated files

    Move UnitSAO class to dedicated files

    Formspec: No spec ID for static text labels

    

    Fixes #9634

    Fixes #9634

    Use TILE_MATERIAL_ALPHA for use_texture_alpha entity flag (#9639)

    

    Fixes #9637.

    Fixes #9637.

    Various features and fixes

    Implement minetest.sound_fade()

    scriptapi: Sort out ServerEnvironment / Environment distinction properly

    

    The API implementation is shared between CSM and SSM.

    Functions should retrieve a plain env when they do not

    need any server-specific functions.

    The API implementation is shared between CSM and SSM.

    Functions should retrieve a plain env when they do not

    need any server-specific functions.

    Functions should retrieve a plain env when they do not

    need any server-specific functions.

    need any server-specific functions.

    A few initialization cleanups

    Print error if invalid mapgen alias was detected (#9579)

    Move clientsimpleobject.h to client folder (#9630)

    

    This file is only called from client folder, retrieve its friends :)

    This file is only called from client folder, retrieve its friends :)

    Drop genericobject.{cpp,h} (#9629)

    

    * Drop genericobject.{cpp,h}

    

    This file is not for generic object but for ActiveObject message passing.

    Put ownership of the various commands to the right objects and cleanup the related code.

    

    * Protect ServerActiveObject::m_messages_out

    

    * typo fix

    * Drop genericobject.{cpp,h}

    

    This file is not for generic object but for ActiveObject message passing.

    Put ownership of the various commands to the right objects and cleanup the related code.

    

    * Protect ServerActiveObject::m_messages_out

    

    * typo fix

    This file is not for generic object but for ActiveObject message passing.

    Put ownership of the various commands to the right objects and cleanup the related code.

    

    * Protect ServerActiveObject::m_messages_out

    

    * typo fix

    Put ownership of the various commands to the right objects and cleanup the related code.

    

    * Protect ServerActiveObject::m_messages_out

    

    * typo fix

    * Protect ServerActiveObject::m_messages_out

    

    * typo fix

    * typo fix

    Install the `locale` directory in a standard location without subfolder (#9618)

    

    Other established FOSS projects don't seem to be doing this.

    Other established FOSS projects don't seem to be doing this.

    Automated build changes (#9619)

    

    * Automated build changes

    * drop a useless ubuntu non lts version

    * update gitlab ci syntax to modern one

    * add debian 10 step on the gitlab ci pipeline

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * Automated build changes

    * drop a useless ubuntu non lts version

    * update gitlab ci syntax to modern one

    * add debian 10 step on the gitlab ci pipeline

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * drop a useless ubuntu non lts version

    * update gitlab ci syntax to modern one

    * add debian 10 step on the gitlab ci pipeline

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * update gitlab ci syntax to modern one

    * add debian 10 step on the gitlab ci pipeline

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * add debian 10 step on the gitlab ci pipeline

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * switch docker build to Debian 10

    * add .gradle folder to gitignore

    * add .gradle folder to gitignore

    Collision various fixes (#9343)

    Allow to select en as language in settings menu (#9604)

    

    fixes #9599

    fixes #9599

    Travis: Build clang jobs with LuaJIT enabled for better coverage

    Work around LuaJIT issues on aarch64 (#9614)

    

    - Move the text segment below the 47-bit limit, needed for script_exception_wrapper which must be lightuserdata

    - Replace CUSTOM_RIDX_SCRIPTAPI with full userdata

    - Move the text segment below the 47-bit limit, needed for script_exception_wrapper which must be lightuserdata

    - Replace CUSTOM_RIDX_SCRIPTAPI with full userdata

    - Replace CUSTOM_RIDX_SCRIPTAPI with full userdata

    Overall improvements to log messages (#9598)

    

    Hide some unnecessarily verbose ones behind --trace or disable them entirely.

    Remove duplicate ones. Improve their contents in some places.

    Hide some unnecessarily verbose ones behind --trace or disable them entirely.

    Remove duplicate ones. Improve their contents in some places.

    Remove duplicate ones. Improve their contents in some places.

    Miscellaneous networking improvements (#9611)

    

    fixes #2862

    fixes #2862

    Clarify use of minetest.request_insecure_environment() (#9597)

    Allow relative directories for `screenshot_path`, tweak default path (#9122)

    

    This will likely be more intuitive for users and should play better

    with sandboxed distributions such as Flatpak.

    

    In addition, the screenshot directory will now be created if it doesn't

    exist already.

    This will likely be more intuitive for users and should play better

    with sandboxed distributions such as Flatpak.

    

    In addition, the screenshot directory will now be created if it doesn't

    exist already.

    with sandboxed distributions such as Flatpak.

    

    In addition, the screenshot directory will now be created if it doesn't

    exist already.

    In addition, the screenshot directory will now be created if it doesn't

    exist already.

    exist already.

    Add tone mapping for entities (#9521)

    

    fixes #9301

    fixes #9301

    Add allowed_mapgens option in game.conf. (#9263)

    

    The game.conf has a disallowed_mapgens option. However, some games

    require a certain mapgen to be used, like the CTF plugin. This change

    adds an option to specify allowed mapgens so that the setting can be

    specified in a way that needn't be updated as map generators are added

    to Minetest.

    The game.conf has a disallowed_mapgens option. However, some games

    require a certain mapgen to be used, like the CTF plugin. This change

    adds an option to specify allowed mapgens so that the setting can be

    specified in a way that needn't be updated as map generators are added

    to Minetest.

    require a certain mapgen to be used, like the CTF plugin. This change

    adds an option to specify allowed mapgens so that the setting can be

    specified in a way that needn't be updated as map generators are added

    to Minetest.

    adds an option to specify allowed mapgens so that the setting can be

    specified in a way that needn't be updated as map generators are added

    to Minetest.

    specified in a way that needn't be updated as map generators are added

    to Minetest.

    to Minetest.

    Some minor Lua API documentation clarifications (#9461)

    

    See #5854

    See #5854

    Continue with 5.3.0-dev

    Bump version to 5.2.0

    Update credits for 5.2.0 (#9593)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Hypertext: Fix hovercolor not working in global tag (#9582)

    Builtin: Make item entities glow less (#9594)

    

    minor adjustment to #9200

    minor adjustment to #9200

    Revert collision tweaks #9365 and #9327 (#9591)

    

    This reverts commit df74d369a395f0b99bd23fa3e7fb4c628c3df336.

    This reverts commit 908e76247922d4adf879b3996c4f75bdbb4e536d.

    

    Restores the original collision detection bugs to release 5.2.0 prior the large collision detection fix.

    This reverts commit df74d369a395f0b99bd23fa3e7fb4c628c3df336.

    This reverts commit 908e76247922d4adf879b3996c4f75bdbb4e536d.

    

    Restores the original collision detection bugs to release 5.2.0 prior the large collision detection fix.

    This reverts commit 908e76247922d4adf879b3996c4f75bdbb4e536d.

    

    Restores the original collision detection bugs to release 5.2.0 prior the large collision detection fix.

    Restores the original collision detection bugs to release 5.2.0 prior the large collision detection fix.

    Fix cursor still visible after closing formspec while on HyperText (#9583)

    Fix 'the the' typos in comments (#9554)

    Fix failing build due to translation file error

    Utility script to help with Weblate commit import

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Update minetest.conf.example, settings_translation_file.cpp

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 92.0% (1185 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 59.6% (768 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.0% (1237 of 1288 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.7% (22 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 94.4% (1217 of 1288 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 94.6% (1219 of 1288 strings)

    Translated using Weblate (Norwegian Nynorsk)

    

    Currently translated at 36.7% (520 of 1416 strings)

    Currently translated at 30.9% (398 of 1288 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 32.1% (414 of 1288 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 99.3% (1279 of 1288 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 41.3% (533 of 1288 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 95.8% (1234 of 1288 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 77.0% (992 of 1288 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 60.0% (774 of 1288 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 60.0% (774 of 1288 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 47.8% (616 of 1288 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 54.0% (696 of 1288 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 42.7% (551 of 1288 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 42.7% (551 of 1288 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 99.3% (1279 of 1288 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 18.6% (240 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 88.0% (1134 of 1288 strings)

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 12.7% (164 of 1288 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 86.8% (1118 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 93.5% (1205 of 1288 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 6.9% (89 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 59.5% (767 of 1288 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 92.5% (1192 of 1288 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 48.3% (623 of 1288 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 6.1% (79 of 1288 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 15.2% (196 of 1288 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 92.3% (1189 of 1288 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.9% (875 of 1288 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 59.7% (769 of 1288 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 67.7% (872 of 1288 strings)

    Translated using Weblate (Chinese (Traditional))

    

    Currently translated at 79.8% (1130 of 1416 strings)

    Currently translated at 68.9% (888 of 1288 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1288 of 1288 strings)

    Add warning to set_sky() docs about unstable dawn and night sky colours (#9578)

    

    Also clean up confusing double meaning usage of the word 'skybox'.

    Also clean up confusing double meaning usage of the word 'skybox'.

    Fix texture distortion for flowing liquids (#9561)

    

    Previously textures of the side faces on flowing liquid nodes would

    become distorted on different axis depending on the liquid level.  This

    is because the nodes always had the same texture coordinates, even when

    the generated face could have different sizes.  This solves that problem

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    Previously textures of the side faces on flowing liquid nodes would

    become distorted on different axis depending on the liquid level.  This

    is because the nodes always had the same texture coordinates, even when

    the generated face could have different sizes.  This solves that problem

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    become distorted on different axis depending on the liquid level.  This

    is because the nodes always had the same texture coordinates, even when

    the generated face could have different sizes.  This solves that problem

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    is because the nodes always had the same texture coordinates, even when

    the generated face could have different sizes.  This solves that problem

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    the generated face could have different sizes.  This solves that problem

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    by adjusting the texture coordinates for the vertices making up the top

    of the faces, so the textures will not look compressed for smaller

    faces.

    of the faces, so the textures will not look compressed for smaller

    faces.

    faces.

    Fix GUI element click-through by changing visibility (#9534)

    

    This adds a vector that holds pointers to elements that should only be visible while being drawn.

    

    In the guifsmenu's draw func, all elements in this vector are made visible and invisible again. Apart from there, they are always invisible. (Well they are still visible before the first drawn, does this matter? If yes, it could be fixed easily with some lines of code everywhere.)

    This adds a vector that holds pointers to elements that should only be visible while being drawn.

    

    In the guifsmenu's draw func, all elements in this vector are made visible and invisible again. Apart from there, they are always invisible. (Well they are still visible before the first drawn, does this matter? If yes, it could be fixed easily with some lines of code everywhere.)

    In the guifsmenu's draw func, all elements in this vector are made visible and invisible again. Apart from there, they are always invisible. (Well they are still visible before the first drawn, does this matter? If yes, it could be fixed easily with some lines of code everywhere.)

    Formspec: Mark `hypertext` and markup language as unstable

    Ignore near_plane setting on non-Android platforms (#8749)

    

    Camera's near-plane will be hard-coded to 0.1 on all non-Android platforms. The upper-bound of this setting has been reduced to 0.25, as 0.5 is just way too high.

    Camera's near-plane will be hard-coded to 0.1 on all non-Android platforms. The upper-bound of this setting has been reduced to 0.25, as 0.5 is just way too high.

    Travis: Correct Linux dependencies so that PostgreSQL is found by CMake

    Fix crash on wielditem/item entities

    

    bug was introduced in f3032a637c53f3c98fbbed1d3b691898aabe1687

    bug was introduced in f3032a637c53f3c98fbbed1d3b691898aabe1687

    Improve documentation of minetest.get_node_drops()

    

    Also remove the comment saying it could be removed or modified.

    Also remove the comment saying it could be removed or modified.

    Hypertext: Fix alignment tags adding unwanted newlines (#9548)

    Connection: Fix deadlock in debug mode (#9550)

    Fix small typos in lua_api.txt (#9546)

    Fix incorrect light updates for wielditem and item visuals (#9540)

    

    An alternative to #9537

    An alternative to #9537

    Add comments for translators (#9510)

    

    * Add translator comments for "special" strings

    

    * Add translator comments for some "tricky" strings

    * Add translator comments for "special" strings

    

    * Add translator comments for some "tricky" strings

    * Add translator comments for some "tricky" strings

    Fix entity lighting (#9514)

    

    fixes #9482

    fixes #9482

    Transform texture UVs with provided tex. matrix (#9515)

    

    fixes #9481

    fixes #9481

    Fix mouse events sent to wrong GUI elements when dragging

    Formspecs: Add starting frame to `animated_image` (#9411)

    Fix some chatcommands not returning a value (#9503)

    Update clang-tidy configuration and scripts

    buildbot: Update to newer MinGW gcc 9.2

    Update travis build infrastructure

    

    Ubuntu 14.04 -> 18.04

    clang-format, clang-tidy 7 -> 8

    clang 3.6 -> 3.9

    clang 7 -> 9

    Ubuntu 14.04 -> 18.04

    clang-format, clang-tidy 7 -> 8

    clang 3.6 -> 3.9

    clang 7 -> 9

    clang-format, clang-tidy 7 -> 8

    clang 3.6 -> 3.9

    clang 7 -> 9

    clang 3.6 -> 3.9

    clang 7 -> 9

    clang 7 -> 9

    guiHyperText: Fix blinky cursor on link hover (#9392)

    

    Change legacy size/position calculations to 'textarea'

    Change legacy size/position calculations to 'textarea'

    minetest.get_content_id: error if the node does not exist (#9458)

    

    If a mod creator makes a typing mistake, this function now causes an error instead of returning the id of "ignore".

    If a mod creator makes a typing mistake, this function now causes an error instead of returning the id of "ignore".

    Fix memory leak in GUIHyperText (#9489)

    minetest,get_connected_players: Return empty table at load time (#9493)

    GUIFormSpecMenu: Remove field_close_on_enter warning (#9501)

    Remove unnecessary checks before delete (#9500)

    

    Co-authored-by: Nicolas Abril <nicolasabril@alunos.utfpr.edu.br>

    Co-authored-by: Nicolas Abril <nicolasabril@alunos.utfpr.edu.br>

    Fix 2 log messages when player joined to game (#9477)

    Improve arm physics (#9485)

    Fix star visilibity and documentation (since 946c03c6)

    

    Fix memory leak (unused allocation)

    Fix star rendering

    Rename sky color struct

    Fix stars on android

    Remove extraneous .data() from android star draw

    Fix memory leak (unused allocation)

    Fix star rendering

    Rename sky color struct

    Fix stars on android

    Remove extraneous .data() from android star draw

    Fix star rendering

    Rename sky color struct

    Fix stars on android

    Remove extraneous .data() from android star draw

    Rename sky color struct

    Fix stars on android

    Remove extraneous .data() from android star draw

    Fix stars on android

    Remove extraneous .data() from android star draw

    Remove extraneous .data() from android star draw

    Workaround for get_player_information

    

    '-1' as value is handled as an error. If there are no RTT updates upon fast connect, set_player_information returned nil.

    '-1' as value is handled as an error. If there are no RTT updates upon fast connect, set_player_information returned nil.

    GUIHyperText: Fix bug with UTF8 chars in action name + simplify UTF8 stringw conversion (#9437)

    

    Co-authored-by: Pierre-Yves Rollo <dev@pyrollo.com>

    Co-authored-by: Pierre-Yves Rollo <dev@pyrollo.com>

    Co-authored-by: SmallJoker <SmallJoker@users.noreply.github.com>

    Cleanup global namespace pollution in builtin (#9451)

    Fix memory leak in protocol 38 set_sky

    Fix linking failures when compiled with Clang 9

    Fixes around ServerActiveObject on_punch handling

    Fix potential security issue(s), documentation on minetest.deserialize() (#9369)

    

    Also adds an unittest

    Also adds an unittest

    Fix code style to make clang-format happy

    set_sky improvements, set_sun, set_moon and set_stars

    Fix pathfinder bugs: returning nil frequently, broken A*, jump through solid nodes (#9339)

    

    * Fix pathfinder fail when startpos is over air

    * Note down pathfinder restrictions

    * Implement real A* search

    * Pathfinder: Implement buildPath non-recursively

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Fix pathfinder fail when startpos is over air

    * Note down pathfinder restrictions

    * Implement real A* search

    * Pathfinder: Implement buildPath non-recursively

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Note down pathfinder restrictions

    * Implement real A* search

    * Pathfinder: Implement buildPath non-recursively

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Implement real A* search

    * Pathfinder: Implement buildPath non-recursively

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Pathfinder: Implement buildPath non-recursively

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Update find_path documentation

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Pathfinder: Check if jump path is unobstructed

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Pathfinder: Fix drop check first checking upwards

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Pathfinder: Return nil if source or dest are solid

    * Pathfinder: Use priority queue for open list

    * Pathfinder: Use priority queue for open list

    Fix core.get_player_by_name() returning unusable ObjectRef

    

    Followup to the previous commit.

    Followup to the previous commit.

    Fix core.get_connected_players() returning unusable ObjectRefs

    

    This bug is only exposed by 91eef646a59575bd9ae792e257bb6ad12fafc0b1

    independent of the move of get_connected_players from Lua to C++.

    Previously, there would be a small time window where the SAO had

    its peer ID set to PEER_ID_INEXISTENT but the RemotePlayer was

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    This bug is only exposed by 91eef646a59575bd9ae792e257bb6ad12fafc0b1

    independent of the move of get_connected_players from Lua to C++.

    Previously, there would be a small time window where the SAO had

    its peer ID set to PEER_ID_INEXISTENT but the RemotePlayer was

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    independent of the move of get_connected_players from Lua to C++.

    Previously, there would be a small time window where the SAO had

    its peer ID set to PEER_ID_INEXISTENT but the RemotePlayer was

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    Previously, there would be a small time window where the SAO had

    its peer ID set to PEER_ID_INEXISTENT but the RemotePlayer was

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    its peer ID set to PEER_ID_INEXISTENT but the RemotePlayer was

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    still linked to the SAO, resulting in an ObjectRef that crashed

    on certain function calls (#9387).

    on certain function calls (#9387).

    Add multiple element selection to `style` and `style_type` (#9380)

    GUIInventoryList: fix dropping items when clicking outside of formspec window (#9422)

    Allow texture modifiers in hotbar textures. (#9271)

    Fix incorrect spelling in lua_api.txt (#9431)

    Fix potential problem with core.get_connected_players()

    Documementation: Add advice on lifetime of ObjectRefs

    Documentation: More precise description of ObjectRef:remove()

    Profiler: Fix wrong function name for entities

    Move core.get_connected_players() implementation to C++

    

    Keeping the ObjectRefs around in a table isn't ideal and this allows

    removing the somewhat nonsensical is_player_connected() added in 86ef7147.

    Keeping the ObjectRefs around in a table isn't ideal and this allows

    removing the somewhat nonsensical is_player_connected() added in 86ef7147.

    removing the somewhat nonsensical is_player_connected() added in 86ef7147.

    Refactor Script API's log_deprecated

    Script API: Document ObjectRef handling in a comment

    Lua_api.txt: Add documentation of VoxelArea 'ystride', 'zstride' (#9415)

    Falling nodes: Add support for facedir, colorfacedir, wallmounted, colorwallmounted, color, airlike, signlike, torchlike and glow (#9205)

    Settings: Fix game minetest.conf flags overriding defaults (#9404)

    

    The game minetest.conf flags directly overwrote the global minetest.conf default values, resulting in unwanted erased mapgen flags.

    

    * Fix set_mapgen_setting

    The game minetest.conf flags directly overwrote the global minetest.conf default values, resulting in unwanted erased mapgen flags.

    

    * Fix set_mapgen_setting

    * Fix set_mapgen_setting

    Basic model shading (#9374)

    Shaders: Fix OpenGL < 4.3 compatibility

    Builtin: Fix error by digging unknown nodes

    Add animated_image[] formspec element  (#9258)

    Key settings: Clear with escape (#8282)

    

    Key ESCAPE -> Cancel change

    Key DELETE -> Remove entry

    Key ESCAPE -> Cancel change

    Key DELETE -> Remove entry

    Key DELETE -> Remove entry

    Update embedded mini-gmp to version 6.2.0 (#9396)

    Add missing paramtype2 documentation (#9397)

    Fix param2 set to 240 if liquid source was renewed

    Collision detection tweak #2 (#9365)

    Display an error when a noise parameter has too many octaves (#9394)

    

    Display an error and throw exception when one or more octaves of

    a noise has spread < 1, causing random looking broken noise.

    Display an error and throw exception when one or more octaves of

    a noise has spread < 1, causing random looking broken noise.

    a noise has spread < 1, causing random looking broken noise.

    Update some libraries for buildbot

    Script API: Check that SAOs are still usable before attempting to use them

    Warn of biome ID re-allocation when unregistering or clearing biomes (#9359)

    StaticText: Reset background on EnrichedString change (#9340)

    

    This also fixes the F6 profiler background color -> now controlled by EnrichedString

    This also fixes the F6 profiler background color -> now controlled by EnrichedString

    Convert sound_play uses in builtin to ephemeral

    Let node 'place' and 'dug' sounds be heard by other players

    Improve core.sound_play with ephemeral sounds and player exclusion

    Add table.shuffle (#8299)

    Add limit parameter to decompressZlib

    

    This can prevent untrusted data, such as sent over the network,

    from consuming all memory with a specially crafted payload.

    This can prevent untrusted data, such as sent over the network,

    from consuming all memory with a specially crafted payload.

    from consuming all memory with a specially crafted payload.

    Formspec: Create a new class for inventorylists (#9287)

    Collision temporary fix for issue #6886

    Add 9-slice background support to button formspec elements (#9290)

    Settings: Add get_flags API for mapgen flags (mg_flags, mgv6_spflags, ...) (#9284)

    

    Unified flags handling in C++ and Lua Settings API

         -> Reading only, for now. Writing can be implemented later, if needed.

    API function to read the currently active flags

         -> was impossible from Lua

    

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

    Unified flags handling in C++ and Lua Settings API

         -> Reading only, for now. Writing can be implemented later, if needed.

    API function to read the currently active flags

         -> was impossible from Lua

    

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

         -> Reading only, for now. Writing can be implemented later, if needed.

    API function to read the currently active flags

         -> was impossible from Lua

    

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

    API function to read the currently active flags

         -> was impossible from Lua

    

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

         -> was impossible from Lua

    

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

    Co-authored-by: Wuzzy <wuzzy2@mail.ru>

    EnrichedString: Fix substr segfault caused by non-formatted text

    Update translation sources

    Update settingtypes.txt for new languages

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 65.1% (830 of 1274 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 30.0% (382 of 1274 strings)

    Translated using Weblate (Japanese (Kansai))

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.2% (2 of 1274 strings)

    Translated using Weblate (Burmese)

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.2% (2 of 1274 strings)

    Translated using Weblate (Kazakh)

    

    Currently translated at 4.0% (54 of 1350 strings)

    Currently translated at 0.2% (2 of 1274 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 6.1% (78 of 1274 strings)

    Translated using Weblate (Vietnamese)

    

    Currently translated at 41.4% (606 of 1462 strings)

    Currently translated at 2.5% (32 of 1274 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 15.1% (193 of 1274 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.4% (18 of 1274 strings)

    Translated using Weblate (Filipino)

    

    Currently translated at 43.5% (616 of 1416 strings)

    Currently translated at 0.2% (2 of 1274 strings)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 66.9% (852 of 1274 strings)

    Translated using Weblate (Lao)

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.2% (2 of 1274 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 15.1% (192 of 1274 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 96.9% (1234 of 1274 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.3% (17 of 1274 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 61.9% (789 of 1274 strings)

    Translated using Weblate (Basque)

    

    Currently translated at 24.0% (341 of 1416 strings)

    Currently translated at 9.7% (123 of 1274 strings)

    Added translation using Weblate (Basque)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 65.1% (830 of 1274 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 6.0% (77 of 1274 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 65.1% (830 of 1274 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 63.2% (805 of 1274 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 61.9% (789 of 1274 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 97.2% (1238 of 1274 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 43.3% (552 of 1274 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 48.8% (622 of 1274 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 94.9% (1209 of 1274 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 96.9% (1235 of 1274 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 96.9% (1235 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Slovenian)

    

    Currently translated at 46.6% (630 of 1350 strings)

    Currently translated at 43.9% (559 of 1274 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 5.7% (73 of 1274 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 42.1% (536 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 81.9% (1044 of 1274 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 5.6% (71 of 1274 strings)

    Translated using Weblate (Arabic)

    

    Currently translated at 39.6% (562 of 1416 strings)

    Currently translated at 4.2% (53 of 1274 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 81.7% (1041 of 1274 strings)

    Added translation using Weblate (Arabic)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 97.0% (1236 of 1274 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Japanese (Kansai))

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.1% (1 of 1274 strings)

    Translated using Weblate (Dhivehi)

    

    Currently translated at 8.2% (105 of 1274 strings)

    Currently translated at 8.2% (105 of 1274 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 63.0% (803 of 1274 strings)

    Translated using Weblate (Burmese)

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.1% (1 of 1274 strings)

    Translated using Weblate (Kyrgyz)

    

    Currently translated at 8.6% (110 of 1274 strings)

    Currently translated at 8.6% (110 of 1274 strings)

    Translated using Weblate (Slovenian)

    

    Currently translated at 46.6% (630 of 1350 strings)

    Currently translated at 42.0% (535 of 1274 strings)

    Translated using Weblate (Kannada)

    

    Currently translated at 4.9% (67 of 1350 strings)

    Currently translated at 3.0% (38 of 1274 strings)

    Translated using Weblate (Kazakh)

    

    Currently translated at 4.0% (54 of 1350 strings)

    Currently translated at 0.1% (1 of 1274 strings)

    Translated using Weblate (Norwegian Nynorsk)

    

    Currently translated at 36.7% (520 of 1416 strings)

    Currently translated at 31.2% (398 of 1274 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 96.9% (1234 of 1274 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 4.3% (55 of 1274 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 61.9% (788 of 1274 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 14.4% (183 of 1274 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 79.6% (1014 of 1274 strings)

    Translated using Weblate (Greek)

    

    Currently translated at 27.9% (396 of 1416 strings)

    Currently translated at 1.1% (14 of 1274 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 49.5% (631 of 1274 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 96.4% (1228 of 1274 strings)

    Translated using Weblate (Filipino)

    

    Currently translated at 43.5% (616 of 1416 strings)

    Currently translated at 0.1% (1 of 1274 strings)

    Translated using Weblate (Thai)

    

    Currently translated at 99.9% (1415 of 1416 strings)

    Currently translated at 66.8% (851 of 1274 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 15.4% (196 of 1274 strings)

    Translated using Weblate (Lao)

    

    Currently translated at 0.2% (2 of 1274 strings)

    Currently translated at 0.1% (1 of 1274 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 96.9% (1234 of 1274 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 81.1% (1033 of 1274 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 61.5% (783 of 1274 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 81.1% (1033 of 1274 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 32.7% (417 of 1274 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 96.9% (1234 of 1274 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 61.9% (788 of 1274 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1274 of 1274 strings)

    CMakeLists: Remove some redundant declarations and flags

    Organize and sort out some library dependency issues

    EnrichedString: Fix uninitialized variable m_default_length

    StaticText/EnrichedString: Styling support (#9187)

    

    * StaticText/EnrichedString: Styling support

    

    * Fix tooltip fg/bgcolor

    

    * Fix default color for substr(), add unittests

    * StaticText/EnrichedString: Styling support

    

    * Fix tooltip fg/bgcolor

    

    * Fix default color for substr(), add unittests

    * Fix tooltip fg/bgcolor

    

    * Fix default color for substr(), add unittests

    * Fix default color for substr(), add unittests

    Remove zh_* from GETTEXT_BLACKLISTED_LOCALES (#9229)

    Remove unused weight property from objects (#9320)

    Formspec: Don't start a button click when the pointer isn't on top (#9332)

    Resized torchlike sprite now attaches to surface (#9303)

    lua_api.txt: Improve privs_to_string and string_to_privs documentation (#9228)

    Replace stray tab with whitespace in guiFormSpecMenu.cpp (#9317)

    Add Lua unit tests to builtin using busted (#9184)

    Fix syntax error in Dockerfile

    Make clipping of formspec elements more consistent (#9262)

    Increase star count to 1000 and decrease radius slightly (#9307)

    

    * Increase star count to 1000 and decrease radius slightly.

    * Adjust star width.

    * Increase star count to 1000 and decrease radius slightly.

    * Adjust star width.

    * Adjust star width.

    Android: fix cyrillic characters, update iconv lib (#9117)

    Map download: Escape ':' to '_' (#9235)

    

    This is necessary under Windows systems, and direct IPv6 connections.

    Windows universally disallows ':' from occuring in filenames.

    

    Other disallowed characters on Windows:

    

            \ / * ? " < > |

    

    are not relevant to hostnames, IPv4 or IPv6 addresses.

    

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    This is necessary under Windows systems, and direct IPv6 connections.

    Windows universally disallows ':' from occuring in filenames.

    

    Other disallowed characters on Windows:

    

            \ / * ? " < > |

    

    are not relevant to hostnames, IPv4 or IPv6 addresses.

    

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    Windows universally disallows ':' from occuring in filenames.

    

    Other disallowed characters on Windows:

    

            \ / * ? " < > |

    

    are not relevant to hostnames, IPv4 or IPv6 addresses.

    

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    Other disallowed characters on Windows:

    

            \ / * ? " < > |

    

    are not relevant to hostnames, IPv4 or IPv6 addresses.

    

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    are not relevant to hostnames, IPv4 or IPv6 addresses.

    

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    Anyone who has got an existing server map saved on Linux with ':' in

    the world save will want to keep that save.

    the world save will want to keep that save.

    Formspec: change the appeareance of the cursor on fields and co. (#8665)

    Add missing entity documentation (#9297)

    Improve Lua API documentation on sounds (#9265)

    Formspec: Fix clicking on tooltip-obstructed elements (#9266)

    Add table.key_value_swap (#9248)

    Tweak default textures (#9237)

    Remove Mapgen V7 floatlands in preparation for new implementation (#9238)

    

    Preserve the floatland flag of existing worlds, to be used again

    when the new implementation is added.

    Preserve the floatland flag of existing worlds, to be used again

    when the new implementation is added.

    when the new implementation is added.

    Use appropriate LC_ locale macro for Windows (#9230)

    

    * Wrap LC_ macro in ifdef

    

    Windows does not have LC_MESSAGES in locale.h, so use LC_ALL on that platform

    * Wrap LC_ macro in ifdef

    

    Windows does not have LC_MESSAGES in locale.h, so use LC_ALL on that platform

    Windows does not have LC_MESSAGES in locale.h, so use LC_ALL on that platform

    Fix item eat sound not played if last item (#9239)

    Document permissible group ratings (#9236)

    Allow wave_heights up to two nodes. #9220

    Fix the player information version_string return value (#8616)

    

    * Give more player information

    

    * Correct lua_api.txt

    

    * Correct keys in lua_api.txt

    

    * Improve Code

    

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Give more player information

    

    * Correct lua_api.txt

    

    * Correct keys in lua_api.txt

    

    * Improve Code

    

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Correct lua_api.txt

    

    * Correct keys in lua_api.txt

    

    * Improve Code

    

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Correct keys in lua_api.txt

    

    * Improve Code

    

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Improve Code

    

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Only Bugfix+ser_vers

    

    * Correct doc

    

    * Fix double

    * Correct doc

    

    * Fix double

    * Fix double

    /privs: Delimit output list of privs with commas (#9224)

    Builtin: Make dropped light_source nodes glow (#9200)

    Make core.item_place_node return position of placed node. (#7713)

    Dockerfile: correct `apt clean` + git clone --depth 1 + remove .git (#8697)

    Correct documentation around minetest.item_place

    

    The code that calls minetest.item_place_object was removed

    in 2013 in commit fc61c8809b9a1d47d9f117446764107a56cec956.

    The code that calls minetest.item_place_object was removed

    in 2013 in commit fc61c8809b9a1d47d9f117446764107a56cec956.

    in 2013 in commit fc61c8809b9a1d47d9f117446764107a56cec956.

    Don't override the FGIMG style property if the image parameter is null

    Remove the dependency on FGIMG/BGIMG from the hovered/pressed variants

    

    - Make guiButtonImage support null images properly

    - Make guiButtonImage support null images properly

    StyleSpec: 0-initialize the property_set array

    Lua API: Document HP, breath and damage limits (#9080)

    Add Alpine build dependencies in README (#9206)

    GUIFormSpecMenu: Fix legacy sorting using std::stable_sort

    Fix spaces breaking formspec_version[] tag

    Refactor to centralize GUIButton styling/rendering code (#9090)

    guiConfirmRegistration: Fix hidden error message

    Formspec: make bgcolor element less confusing and allow setting fullscreen color (#8996)

    Fix luacheck errors

    Run luacheck in travis

    Clean up craft replacements docs

    Renaming the function wasn't enough

    Attachments: Fix interpolation from (0,0,0) after detach

    

    GenericCAO::getPosition() did not take the camera offset into account

    LocalPlayer attachment cleanup: Use sane getParent() function

    Make that getPosition() (GenericCAO and LocalPlayer) always return the absolute position

    GenericCAO::getPosition() did not take the camera offset into account

    LocalPlayer attachment cleanup: Use sane getParent() function

    Make that getPosition() (GenericCAO and LocalPlayer) always return the absolute position

    LocalPlayer attachment cleanup: Use sane getParent() function

    Make that getPosition() (GenericCAO and LocalPlayer) always return the absolute position

    Make that getPosition() (GenericCAO and LocalPlayer) always return the absolute position

    Fix failing build due to code style error

    Add scrollbaroptions FormSpec element (#8530)

    Fix android build due to omitted file in src files

    Add z-index management to HUD

    Fix LocalPlayer-bound sound playback broken by 81c2370

    Fix Debian build dependencies in README

    

    This patch replaces the statement in the README about a build dependency of the

    minetest binary on the package “build-essential” with a corresponding statement

    about build dependencies on the three packages “g++”, “make”, and “libc6-dev”.

    

    Though often used as a shorthand, “build-essential” is not a package used to

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    This patch replaces the statement in the README about a build dependency of the

    minetest binary on the package “build-essential” with a corresponding statement

    about build dependencies on the three packages “g++”, “make”, and “libc6-dev”.

    

    Though often used as a shorthand, “build-essential” is not a package used to

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    minetest binary on the package “build-essential” with a corresponding statement

    about build dependencies on the three packages “g++”, “make”, and “libc6-dev”.

    

    Though often used as a shorthand, “build-essential” is not a package used to

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    about build dependencies on the three packages “g++”, “make”, and “libc6-dev”.

    

    Though often used as a shorthand, “build-essential” is not a package used to

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    Though often used as a shorthand, “build-essential” is not a package used to

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    install packages that are essential for building software – “build-essential”

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    depends on packages that are essential for building Debian packages. Therefore,

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    the dependency on “build-essential” implies a dependency on a lot of packages that

    are not actually necessary to build minetest (e.g. the Perl programming language).

    are not actually necessary to build minetest (e.g. the Perl programming language).

    Use a safer implementation of gsub in core.chat_format_message (#9133)

    

    This search-and-replace implementation does not use Lua pattern-matching

    This search-and-replace implementation does not use Lua pattern-matching

    Improve client-side packet receiving

    Caves: Fix shadowing of 'large_cave_depth' to avoid confusion

    Dungeons: Move duplicated y limit checks to generation function

    Formspec: Fix priorities for version < 3 (#9121)

    

    * Formspec: Fix priorities for version < 3

    

    1) Introduce 'priority' to 'FieldSpec'

    2) Sort elements based on 'priority'

    3) Assign 'name' to the Item Image Button's image to show tooltips again

    * Formspec: Fix priorities for version < 3

    

    1) Introduce 'priority' to 'FieldSpec'

    2) Sort elements based on 'priority'

    3) Assign 'name' to the Item Image Button's image to show tooltips again

    1) Introduce 'priority' to 'FieldSpec'

    2) Sort elements based on 'priority'

    3) Assign 'name' to the Item Image Button's image to show tooltips again

    2) Sort elements based on 'priority'

    3) Assign 'name' to the Item Image Button's image to show tooltips again

    3) Assign 'name' to the Item Image Button's image to show tooltips again

    Waves generated with Perlin-type noise #8994

    Move duplicated mapgen parameters to class MapgenBasic (#9134)

    

    'large_cave_depth', 'dungeon_ymin' and 'dungeon_ymax' are duplicated across many mapgens so should have been in class MapgenBasic from the start.

    'large_cave_depth', 'dungeon_ymin' and 'dungeon_ymax' are duplicated across many mapgens so should have been in class MapgenBasic from the start.

    Rework packet receiving in ServerThread

    

    Notably it tries to receive all queued packets

    between server steps, not just one.

    Notably it tries to receive all queued packets

    between server steps, not just one.

    between server steps, not just one.

    Randomwalk cave liquids: Remove deprecated 'lava depth' parameter (#9105)

    

    Low-disruption first step towards removing the hardcoded cave liquid

    code. Since MT 5.0.0 cave liquids can be defined and located by

    biome definitions instead.

    In games that do not yet use biome definitions to define and locate

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    Low-disruption first step towards removing the hardcoded cave liquid

    code. Since MT 5.0.0 cave liquids can be defined and located by

    biome definitions instead.

    In games that do not yet use biome definitions to define and locate

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    code. Since MT 5.0.0 cave liquids can be defined and located by

    biome definitions instead.

    In games that do not yet use biome definitions to define and locate

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    biome definitions instead.

    In games that do not yet use biome definitions to define and locate

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    In games that do not yet use biome definitions to define and locate

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    cave liquids (MTGame does), lava will now appear below

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    y = water_level - 256 instead of below 'lava depth' (usually y = -256).

    Therefore no change in most mapgens if using the default 'lava depth'.

    Therefore no change in most mapgens if using the default 'lava depth'.

    Fix find_path for newer jsoncpp installations

    

    The upstream JsonCpp project has renamed the `json/features.h` file to

    `json/json_features.h`. This patch fixes the JsonCpp installation search

    by looking for `json/allocator.h` which has not been renamed on newer

    versions of JsonCpp.

    

    Fixes: https://github.com/minetest/minetest/issues/9119

    The upstream JsonCpp project has renamed the `json/features.h` file to

    `json/json_features.h`. This patch fixes the JsonCpp installation search

    by looking for `json/allocator.h` which has not been renamed on newer

    versions of JsonCpp.

    

    Fixes: https://github.com/minetest/minetest/issues/9119

    `json/json_features.h`. This patch fixes the JsonCpp installation search

    by looking for `json/allocator.h` which has not been renamed on newer

    versions of JsonCpp.

    

    Fixes: https://github.com/minetest/minetest/issues/9119

    by looking for `json/allocator.h` which has not been renamed on newer

    versions of JsonCpp.

    

    Fixes: https://github.com/minetest/minetest/issues/9119

    versions of JsonCpp.

    

    Fixes: https://github.com/minetest/minetest/issues/9119

    Fixes: https://github.com/minetest/minetest/issues/9119

    Optimize semaphore wait with zero timeout on POSIX

    Install client_lua_api.txt documentation too

    

    fixes #9104

    fixes #9104

    Fix clang-tidy and lint travis checks

    [CSM] Fix and improve minetest.get_language()

    

    Previously this method would accidentally reset the locale

    and break everything.

    Previously this method would accidentally reset the locale

    and break everything.

    and break everything.

    [CSM] Implement minetest.get_csm_restrictions()

    

    fixes #8068

    fixes #8068

    Run on_item_use CSM callback even if item is not marked usable

    

    Mods may want to to handle item interaction even if the item

    is not marked usable (= server-side callback exists).

    Mods may want to to handle item interaction even if the item

    is not marked usable (= server-side callback exists).

    is not marked usable (= server-side callback exists).

    Fix camera:get_offset() in CSM

    [CSM] Expose more env functions

    Refactor CSM restriction code a bit

    

    This also fixes find_node_near restrictions being ineffective.

    This also fixes find_node_near restrictions being ineffective.

    Call on_secondary_use when object is right-clicked

    Randomwalk caves: Extend beyond mapchunk vertically also (#9094)

    

    Previously, randomwalk caves only extended beyond the mapchunk

    borders horizontally, preventing vertical overlap and

    interconnection.

    Previously, randomwalk caves only extended beyond the mapchunk

    borders horizontally, preventing vertical overlap and

    interconnection.

    borders horizontally, preventing vertical overlap and

    interconnection.

    interconnection.

    Be lenient with extra slashes for CSM paths

    [CSM] Remove non-functional minetest.get_day_count()

    Corrections to client_lua_api.txt

    Introduce get_modpath() for CSM

    Load client mods into memory before execution.

    

    Preperation for server-sent CSM which will eventually need this.

    Preperation for server-sent CSM which will eventually need this.

    Refactor loading of Lua code with mod security

    Add arm64-v8a but it's not sufficient for 64bit build

    Bump to version code 25

    Android: build fixes & compat fixes

    Silence invalid Clang Format report (#9095)

    Tunnels: Completely disable generation when 'cave width' >= 10.0 (#9093)

    

    Previously, the only way to disable the 3D noise tunnels was to set

    'cave width' > 1.0, however doing so did not disable the very intensive

    noise calculations or the generation loop.

    All the other types of cave generation (randomwalk caves, caverns)

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    Previously, the only way to disable the 3D noise tunnels was to set

    'cave width' > 1.0, however doing so did not disable the very intensive

    noise calculations or the generation loop.

    All the other types of cave generation (randomwalk caves, caverns)

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    'cave width' > 1.0, however doing so did not disable the very intensive

    noise calculations or the generation loop.

    All the other types of cave generation (randomwalk caves, caverns)

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    noise calculations or the generation loop.

    All the other types of cave generation (randomwalk caves, caverns)

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    All the other types of cave generation (randomwalk caves, caverns)

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    can already be independently and completely disabled.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    This feature is now needed more because the small randomwalk caves are

    now available for use as an alternative to the 3D noise tunnels.

    now available for use as an alternative to the 3D noise tunnels.

    Make core.get_favorites("local") ignore duplicates (#7926)

    Randomwalk caves: Add parameters for number, proportion flooded. Allow small caves (#8928)

    

    Add mapgen parameters to set the range of the random number of

    randomwalk caves per mapchunk, and to set the proportion that are

    flooded with liquids.

    Default values are, for now, unchanged from the previous hardcoded

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    Add mapgen parameters to set the range of the random number of

    randomwalk caves per mapchunk, and to set the proportion that are

    flooded with liquids.

    Default values are, for now, unchanged from the previous hardcoded

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    randomwalk caves per mapchunk, and to set the proportion that are

    flooded with liquids.

    Default values are, for now, unchanged from the previous hardcoded

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    flooded with liquids.

    Default values are, for now, unchanged from the previous hardcoded

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    Default values are, for now, unchanged from the previous hardcoded

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    values.

    

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    Add parameters to allow small randomwalk caves

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    Disabled by default for now as they have never been present in the

    non-mgv6 mapgens.

    non-mgv6 mapgens.

    Formspec: draw order and clipping for all elements (#8740)

    Improve documentation around banning (#9088)

    

    * Fix ban chatcommand description

    * Correct ban API documentation

    * Fix ban chatcommand description

    * Correct ban API documentation

    * Correct ban API documentation

    Android: Fix broken double-tap after 49 days uptime

    Clean up font caching, fix bitmap fonts

    Formspec: add hypertext element

    Add debug.txt.1 to .gitignore (#9081)

    

    This should have been done in #8904.

    This should have been done in #8904.

    Builtin: Improve /clearobjects message (#9084)

    Change some usages of "deprecated" to "obsolete" (#9062)

    

    "Deprecated" means that something is still in use, but is unsupported and needs to be removed.

    "Obsolete" means it is already out of use.

    "Deprecated" means that something is still in use, but is unsupported and needs to be removed.

    "Obsolete" means it is already out of use.

    "Obsolete" means it is already out of use.

    Add help texts for settings that lack one (#9007)

    Change some rough/inappropriate language in comments (#9061)

    Improve light curve parameter limits and documentation (#9054)

    

    Revert gamma upper limit to 3.0 because that was raised based on

    a misunderstanding and had no benefit. A sane upper limit is

    needed as players on a competitive server tend to use the maximum.

    Set gamma lower limit to 0.33 for consistency with 3.0.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    Revert gamma upper limit to 3.0 because that was raised based on

    a misunderstanding and had no benefit. A sane upper limit is

    needed as players on a competitive server tend to use the maximum.

    Set gamma lower limit to 0.33 for consistency with 3.0.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    a misunderstanding and had no benefit. A sane upper limit is

    needed as players on a competitive server tend to use the maximum.

    Set gamma lower limit to 0.33 for consistency with 3.0.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    needed as players on a competitive server tend to use the maximum.

    Set gamma lower limit to 0.33 for consistency with 3.0.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    Set gamma lower limit to 0.33 for consistency with 3.0.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    Set sane limits on alpha, beta, boost and enforce these in code

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    to limit values entered in minetest.conf and to avoid easy cheating

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    by editing settingtypes.txt.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    Improve documentation and 'readable' setting names.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    Clarify that gamma does not significantly affect natural night light.

    light.cpp: Various codestyle and comment improvements.

    light.cpp: Various codestyle and comment improvements.

    Remove legacy file format documentation

    Remove legacy flat-file map code

    Fix build issue due to conflicting s64 type definitions (#9064)

    

    See comment in irrlichttypes.h and https://sourceforge.net/p/irrlicht/bugs/433/

    See comment in irrlichttypes.h and https://sourceforge.net/p/irrlicht/bugs/433/

    Allow calling ItemStack with no arguments (#8783)

    Add 4 missing fallback/default textures (#8845)

    

    Processed using 'optipng -o7 -strip all '

    Processed using 'optipng -o7 -strip all '

    Formspecs: Reset version number on rebuild

    Make natural night light as bright as MT 0.4.16 (#9053)

    Correction for alpha blending issues in texture mod compositing (#9029)

    Don't install fonts on ENABLE_CLIENT=0 configurations

    Settingtypes.txt: Various improvements (#9047)

    Fix rotate_node to return the correct itemstack.

    

    All on_* hooks that return an itemstack are NOT guaranteed to

    modify and return the original stack.  We cannot count on the

    behavior of the existing builtin definitions not to be overridden

    by game/mod logic.

    All on_* hooks that return an itemstack are NOT guaranteed to

    modify and return the original stack.  We cannot count on the

    behavior of the existing builtin definitions not to be overridden

    by game/mod logic.

    modify and return the original stack.  We cannot count on the

    behavior of the existing builtin definitions not to be overridden

    by game/mod logic.

    behavior of the existing builtin definitions not to be overridden

    by game/mod logic.

    by game/mod logic.

    Randomwalk caves: Reduce 'insure' value from 10 to 2 (#9035)

    

    This value reduces how far randomwalk caves can extend into the

    mapchunk padding, to avoid 'out of voxelmanip' cave nodes which cause

    flattened cave walls.

    Testing shows that a value of 2 (instead of 10) is enough to make

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    This value reduces how far randomwalk caves can extend into the

    mapchunk padding, to avoid 'out of voxelmanip' cave nodes which cause

    flattened cave walls.

    Testing shows that a value of 2 (instead of 10) is enough to make

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    mapchunk padding, to avoid 'out of voxelmanip' cave nodes which cause

    flattened cave walls.

    Testing shows that a value of 2 (instead of 10) is enough to make

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    flattened cave walls.

    Testing shows that a value of 2 (instead of 10) is enough to make

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    Testing shows that a value of 2 (instead of 10) is enough to make

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    'out of area' nodes extremely rare.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    Reducing this value results in a higher chance of overlap and

    connection with caves of neighbour mapchunks.

    connection with caves of neighbour mapchunks.

    Add more visual feedback for button states (#8916)

    

    - Add style properties for overriding the the hovered/pressed state

      - By default, hovered buttons are a lighter version of the base color

      - By default, pressed buttons are a darker version of the base color

    - Add hovered bg image support for image buttons (style property)

    - Add style properties for overriding the the hovered/pressed state

      - By default, hovered buttons are a lighter version of the base color

      - By default, pressed buttons are a darker version of the base color

    - Add hovered bg image support for image buttons (style property)

      - By default, hovered buttons are a lighter version of the base color

      - By default, pressed buttons are a darker version of the base color

    - Add hovered bg image support for image buttons (style property)

      - By default, pressed buttons are a darker version of the base color

    - Add hovered bg image support for image buttons (style property)

    - Add hovered bg image support for image buttons (style property)

    Continue with 5.2.0-dev

    Bump version to 5.1.0

    Update minetest.conf.example

    Update translation strings

    Update from Weblate (hacky)

    Fix isDead()/autoforward crash (#9031)

    

    Crash occurred in singleplayer when leaving a world with

    autoforward enabled then re-entering a world.

    Crash occurred in singleplayer when leaving a world with

    autoforward enabled then re-entering a world.

    autoforward enabled then re-entering a world.

    ContentCAO: Fix segfault on quit (attached)

    Revert Client::sendPlayerPos optimization (part of 81c7f0a) (#9025)

    

    Comment out the if statement that prevents sending TOSERVER_PLAYERPOS if the player is dead.

    Comment out the if statement that prevents sending TOSERVER_PLAYERPOS if the player is dead.

    Fix upright_sprite lighting when colors are set

    

    fixes #9020

    fixes #9020

    Revert "Fix the bgcolor formspec element (#8716)" (#9018)

    

    This reverts commit 1db3d252cff9e8d61fecf1052d7497813851da51.

    Temporary solution until a compatible solution is found to define both - formspec and fullscreen backgrounds.

    This reverts commit 1db3d252cff9e8d61fecf1052d7497813851da51.

    Temporary solution until a compatible solution is found to define both - formspec and fullscreen backgrounds.

    Temporary solution until a compatible solution is found to define both - formspec and fullscreen backgrounds.

    Fix warnings in guiButton.h

    Merge pull request #8166 from Warr1024/fix7020

    

    Fix (or workaround?) for 'Falling nodes with node inventory cause crash when unloaded'

    Fix (or workaround?) for 'Falling nodes with node inventory cause crash when unloaded'

    Fix unwanted detaching when damage = 0

    Attachments: Fix attachments to temporary removed objects (#8989)

    

    Does not clear the parent's attachment information when the child is deleted locally.

    Either it was removed permanently, or just temporary - we don't know, but it's up to the server to send a *detach from child" packet for the parent.

    Does not clear the parent's attachment information when the child is deleted locally.

    Either it was removed permanently, or just temporary - we don't know, but it's up to the server to send a *detach from child" packet for the parent.

    Either it was removed permanently, or just temporary - we don't know, but it's up to the server to send a *detach from child" packet for the parent.

    README: Add dependencies for Arch Linux (#8998)

    

    Added Arch Linux dependency list (including base-devel which covers many of them)

    Added Arch Linux dependency list (including base-devel which covers many of them)

    All Settings: Set min limit for crtitical settings (#9000)

    Document node drop tool filtering by string matching as deprecated (#9009)

    Textures: Load base pack only as last fallback (#8974)

    label[]: Fix broken colors since 2c9edef

    Move Quicktune code to util/ (#8871)

    Fix error message caused by adding new parameter to background (#8922)

    

    Adds background9[] element to keep backwards compatibility in formspec prepends.

    Adds background9[] element to keep backwards compatibility in formspec prepends.

    Allow grep-ing for on_grant and on_revoke (#8958)

    

    Just two code comments are added.

    Just two code comments are added.

    All settings: Fix missing flags checkbox caused by 'possible flags' order (#8997)

    

    Previously, the 'rivers' checkbox was missing for mgcarpathian, caused by the 'possible flags' order: 'caverns,nocaverns,rivers,norivers'.

    Also reorder mgcarpathian 'possible flags', but only for consistency.

    Previously, the 'rivers' checkbox was missing for mgcarpathian, caused by the 'possible flags' order: 'caverns,nocaverns,rivers,norivers'.

    Also reorder mgcarpathian 'possible flags', but only for consistency.

    Also reorder mgcarpathian 'possible flags', but only for consistency.

    Simple shader fixes. (#8991)

    

    1. Pass current camera offset to shader, so shader have access to the global coordinates

    2. Pass animation timer to fragment shader. C++ code is already there, just wasn't declared in the shader

    3. Delay animation timer wrap-around (from 100s to about 16 minutes)

    1. Pass current camera offset to shader, so shader have access to the global coordinates

    2. Pass animation timer to fragment shader. C++ code is already there, just wasn't declared in the shader

    3. Delay animation timer wrap-around (from 100s to about 16 minutes)

    2. Pass animation timer to fragment shader. C++ code is already there, just wasn't declared in the shader

    3. Delay animation timer wrap-around (from 100s to about 16 minutes)

    3. Delay animation timer wrap-around (from 100s to about 16 minutes)

    Automatically enable depends of mods when enabling the mods in the world config menu (#3473)

    Fix some reference counters (memleak) (#8981)

    

    Fix some reference counters (memleak)

    Map::dispatchEvent: Allocation safety using references

    Fix some reference counters (memleak)

    Map::dispatchEvent: Allocation safety using references

    Map::dispatchEvent: Allocation safety using references

    Fix broken build

    

    The variable name changed but this didn't cause merge conflicts, so it wasn't caught before.

    The variable name changed but this didn't cause merge conflicts, so it wasn't caught before.

    Rename "private messages" to "direct messages" (#8971)

    

    These messages can be read by server administrators, which makes them

    not actually private.

    These messages can be read by server administrators, which makes them

    not actually private.

    not actually private.

    Move the code for meta formspec into bool Game::nodePlacement(const ItemDefinition &selected_def,

    Punchwear (improved) (#8959)

    Fix AreaStore's IDs persistence (#8888)

    

    Improve documentation

    Read old formats

    Fix free ID function. Return first gap in map

    Improve documentation

    Read old formats

    Fix free ID function. Return first gap in map

    Read old formats

    Fix free ID function. Return first gap in map

    Fix free ID function. Return first gap in map

    Wieldhand: Specify which ItemStack to use (#8961)

    

    Makes 'get_wield_item' to return the "main" ItemStack

    Makes 'get_wield_item' to return the "main" ItemStack

    Add support for per-player FOV overrides and multipliers

    Remove incorrect MutexAutoLock

    

    The line declared a variable "m_con" instead of locking m_con.

    getClient() doesn't need this anyway, so remove it.

    The line declared a variable "m_con" instead of locking m_con.

    getClient() doesn't need this anyway, so remove it.

    getClient() doesn't need this anyway, so remove it.

    Trigger on_place in many situations even if prediction failed

    Also print help commands to chat for server terminal (#8869)

    Fix misuse of AsyncTask (#8799)

    Settings: Prevent mutex deadlock in remove() (#7803)

    Inventory: Properly revert client predictions (#8945)

    

    Caused by incremental inventory sending

    Previously everything was overwritten by serializing the entire inventory

    Caused by incremental inventory sending

    Previously everything was overwritten by serializing the entire inventory

    Previously everything was overwritten by serializing the entire inventory

    Improve undersampling settings

    

    The setting now accepts values between 1 and 8 in the

    Advanced Settings menu.

    Values 0 and 1 now behave the same way (setting it to 1 won't

    disable MSAA anymore), so there's no need to expose 0 as a value.

    

    This closes #8939.

    The setting now accepts values between 1 and 8 in the

    Advanced Settings menu.

    Values 0 and 1 now behave the same way (setting it to 1 won't

    disable MSAA anymore), so there's no need to expose 0 as a value.

    

    This closes #8939.

    Advanced Settings menu.

    Values 0 and 1 now behave the same way (setting it to 1 won't

    disable MSAA anymore), so there's no need to expose 0 as a value.

    

    This closes #8939.

    Values 0 and 1 now behave the same way (setting it to 1 won't

    disable MSAA anymore), so there's no need to expose 0 as a value.

    

    This closes #8939.

    disable MSAA anymore), so there's no need to expose 0 as a value.

    

    This closes #8939.

    This closes #8939.

    Inventory: Undo prediction on drop

    Fix the bgcolor formspec element (#8716)

    Fix formspec version backup in prepends losing data

    Dungeons: Clean up parameters, improve structure variety (#8918)

    

    While preserving the general character of dungeon structure.

    Slightly increase the range of standard room horizontal size, while

    preserving the average horizontal size.

    Return to classic maximum large room size of 16x16x16.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    While preserving the general character of dungeon structure.

    Slightly increase the range of standard room horizontal size, while

    preserving the average horizontal size.

    Return to classic maximum large room size of 16x16x16.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    Slightly increase the range of standard room horizontal size, while

    preserving the average horizontal size.

    Return to classic maximum large room size of 16x16x16.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    preserving the average horizontal size.

    Return to classic maximum large room size of 16x16x16.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    Return to classic maximum large room size of 16x16x16.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    Make 1 in 4 dungeons have a 1 in 8 chance for each room being 'large',

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    making multiple large rooms possible for the first time.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    Make 1 in 8 dungeons allow diagonal corridors, to make these a little

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    more common.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    Make corridor width vary from 1 to 2, but forced to 2 if diagonal

    corridors are allowed, to make them passable.

    Add some comments.

    corridors are allowed, to make them passable.

    Add some comments.

    Add some comments.

    Built-in formspecs: Force version 1

    client.h: Add missing const's

    LocalPlayer: Fix code-style

    client.cpp: Fix code-style in Client::sendPlayerPos

    Fix LocalPlayer::isDead always returning false if player is immortal

    Send ActiveObjects once right after Init2

    Formspecs: Introduce formspec_version to mods

    CSM: Fix itemstack:get_meta() 'metadata' indexing error

    Load CSM environment after the restrictions are known

    

    Safety-guards for CSM callbacks to abort on a bad implementation

    Only run callbacks when the mods are loaded (and with it: builtin)

    

    Duplication checks inside constructors

    Safety-guards for CSM callbacks to abort on a bad implementation

    Only run callbacks when the mods are loaded (and with it: builtin)

    

    Duplication checks inside constructors

    Only run callbacks when the mods are loaded (and with it: builtin)

    

    Duplication checks inside constructors

    Duplication checks inside constructors

    InventoryManager: Fix virtual function overload warning

    Send cumulated inventory changes only each step (#8856)

    

    Applies to player and detached inventories

    Applies to player and detached inventories

    Update minetest.conf.example

    Update translation strings

    Update from Weblate

    Dungeons: Remove non-functional 'projecting dungeons' setting (#8897)

    Lua API documentation: Various fixes (#8914)

    

    Remove unusable 'minetest.setting_*' from client_lua_api.txt

    lua_api.txt:

    - Define the 'mod.conf' format

    - More precise 'settingtypes.txt' format reference

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    Remove unusable 'minetest.setting_*' from client_lua_api.txt

    lua_api.txt:

    - Define the 'mod.conf' format

    - More precise 'settingtypes.txt' format reference

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    lua_api.txt:

    - Define the 'mod.conf' format

    - More precise 'settingtypes.txt' format reference

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Define the 'mod.conf' format

    - More precise 'settingtypes.txt' format reference

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - More precise 'settingtypes.txt' format reference

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Document special sound files 'player_*damage'

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Group, sort and add 'not_in_creative_inventory' special group

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Define the 'Settings' format

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Warning about incorrect byte saving in 'StorageRef'

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Note about non-persistent player definitions fields

    - Better 'leveldiff' and 'level' group description

    - Better 'leveldiff' and 'level' group description

    lua_api.txt: Improve privilege definition (#8912)

    Move debug.txt after it grows too big (#8904)

    

    Before opening the file for writing, its file size is tested. If it exceeds 50 MB, it is moved to debut.txt.1, otherwise the log is appended to the old messages. An old debut.txt.1 is removed if it already exists.

    Before opening the file for writing, its file size is tested. If it exceeds 50 MB, it is moved to debut.txt.1, otherwise the log is appended to the old messages. An old debut.txt.1 is removed if it already exists.

    label[]: Fix cut-off translated text

    Fix Irrlicht 1.9 support

    doc/client_lua_api: Clarify how client side api and mods start (#8822)

    Force item entities out of solid nodes (simpler) (#8885)

    Fix Inventory::moveItemSomewhere()

    Inventory: Handle removeItem leftovers (#8884)

    'All Settings': Don't use checkboxes for 'no...' mapgen flags (#7847)

    Various fixes to lua_api.txt (#8878)

    particles.cpp: Fix code-style

    

    Mainly spacing and pointer placement

    Mainly spacing and pointer placement

    clientobject.h: Fix code-style

    Fix rotation of attached particlespawner

    

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    Co-authored-by: ANAND <ClobberXD@gmail.com>

    

    Co-authored-by: Pedro Gimeno <pgimeno@users.noreply.notabug.org>

    Document world format version 28 (private nodemeta) (#8857)

    Document luaentity pitch and roll in world format (#8864)

    Clarify docs regarding pointed_thing and get_pointed_thing_position (#8766)

    Various settingtypes.txt improvements (#8867)

    

    Improve 'readable' setting names for waving water settings.

    Change 'near plane' to 'near clipping plane'.

    Document physics settings.

    

    mgv6_spflags:

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    Improve 'readable' setting names for waving water settings.

    Change 'near plane' to 'near clipping plane'.

    Document physics settings.

    

    mgv6_spflags:

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    Change 'near plane' to 'near clipping plane'.

    Document physics settings.

    

    mgv6_spflags:

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    Document physics settings.

    

    mgv6_spflags:

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    mgv6_spflags:

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    Change 'new biome system' to 'snowbiomes flag' for clarity.

    Add missing 'noflat' flag to default flags.

    Add missing 'noflat' flag to default flags.

    Inventory: Fix missing setModified calls

    

    Previously inv:remove_item and inv:set_list did not trigger an inventory update

    Previously inv:remove_item and inv:set_list did not trigger an inventory update

    Mapgen v6: Various mudflow code improvements and bugfixes  (#8805)

    

    Calculate 'i' inside 'y' loop to avoid 'i' and 'y' becoming

    out of step due to the uses of 'continue'.

    Simplify calculation of 'p2d' when coordinates are inverted.

    Remove some unnecessary and unreliable 'index out of

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Calculate 'i' inside 'y' loop to avoid 'i' and 'y' becoming

    out of step due to the uses of 'continue'.

    Simplify calculation of 'p2d' when coordinates are inverted.

    Remove some unnecessary and unreliable 'index out of

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    out of step due to the uses of 'continue'.

    Simplify calculation of 'p2d' when coordinates are inverted.

    Remove some unnecessary and unreliable 'index out of

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Simplify calculation of 'p2d' when coordinates are inverted.

    Remove some unnecessary and unreliable 'index out of

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Remove some unnecessary and unreliable 'index out of

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    voxelmanip' checks.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Move calculation of '&em' out of loops.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    For 'Loop further down until not air' code, use y coordinate

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    to detect being out of voxelmanip, instead of checking index

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    which did not detect that.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Add and improve comments.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Indent the 'for (;; y--) {' loop.

    Improve format and fix codestyle issues.

    Improve format and fix codestyle issues.

    fontengine: Fix non-gettext builds

    Inventory: Send dirty lists where appropriate (#8742)

    

    This change reduces the amount of sent data towards clients. Inventory lists that are already known to the player are skipped, saving quite some data over time.

    

    Raises protocol version to 38 to ensure correct backwards-compatible code.

    This change reduces the amount of sent data towards clients. Inventory lists that are already known to the player are skipped, saving quite some data over time.

    

    Raises protocol version to 38 to ensure correct backwards-compatible code.

    Raises protocol version to 38 to ensure correct backwards-compatible code.

    Add ItemStack:get_description() to get tooltip (#8847)

    Improve occlusion culling in corridors with additional check

    Restore approximate occlusion check

    

    While less precise, it worked better which is what matters in the end.

    While less precise, it worked better which is what matters in the end.

    Make Mapgen::spreadLight use a queue (#8838)

    Fix default hand definition not using wieldhand.png

    Occlusion: Check for light_propagates and do mapblock bounds checks

    Occlusion: Begin cleanup

    Revert "Don't send position update packet if player is dead"

    

    This reverts commit fb6f1fdcbe3ee2321cc33eb00f2c6da86744d00a.

    This reverts commit fb6f1fdcbe3ee2321cc33eb00f2c6da86744d00a.

    Add player sprite textures back into the engine as a fallback (#8823)

    

    'player.png' and 'player_back.png' are hardcoded into the engine as

    the default appearence of the player object, so the textures should

    be present in the engine.

    This results in a functional fallback sprite player for when a game

    has no player appearence related code.

    'player.png' and 'player_back.png' are hardcoded into the engine as

    the default appearence of the player object, so the textures should

    be present in the engine.

    This results in a functional fallback sprite player for when a game

    has no player appearence related code.

    the default appearence of the player object, so the textures should

    be present in the engine.

    This results in a functional fallback sprite player for when a game

    has no player appearence related code.

    be present in the engine.

    This results in a functional fallback sprite player for when a game

    has no player appearence related code.

    This results in a functional fallback sprite player for when a game

    has no player appearence related code.

    has no player appearence related code.

    lua_api.txt: Add link to Minetest Modding Book (#8826)

    remove_detached_inventory: Fix segfault during mod load

    Don't send position update packet if player is dead

    Disable autoforward if player is dead

    Restore intended functionality to minimap markers (#8819)

    Find LuaJIT headers on vcpkg

    

    luajit headers were moved into a subdirectory to avoid conflicts with plain lua

    luajit headers were moved into a subdirectory to avoid conflicts with plain lua

    ClientInterface: Use recursive mutex to prevent freeze in on_newplayer() (#8808)

    Remove unused function in ReliablePacketBuffer

    Minor refactor of IncomingSplitBuffer

    Drop m_list_size from ReliablePacketBuffer

    

    It's not required and, worse, can lead to bugs.

    It's not required and, worse, can lead to bugs.

    Mapgen v6: Fix mudflow iteration and iterate twice (#8795)

    

    In MapgenV6::flowMud(), the previous implementation of coordinate

    inversion caused the 2 inverted mudflow iterations (out of the 3

    iterations) to not loop over the area, so only 1 non-inverted

    iteration occurred.

    

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    In MapgenV6::flowMud(), the previous implementation of coordinate

    inversion caused the 2 inverted mudflow iterations (out of the 3

    iterations) to not loop over the area, so only 1 non-inverted

    iteration occurred.

    

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    inversion caused the 2 inverted mudflow iterations (out of the 3

    iterations) to not loop over the area, so only 1 non-inverted

    iteration occurred.

    

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    iterations) to not loop over the area, so only 1 non-inverted

    iteration occurred.

    

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    iteration occurred.

    

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    Fix this bug but only iterate mudflow twice, as mapgen v6 has only

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    had 1 iteration for many years. There is now a good balance of 1

    non-inverted iteration and 1 inverted iteration.

    non-inverted iteration and 1 inverted iteration.

    network: Stricter handling of split packets

    network: Fix crash in ReliablePacketBuffer on mismatching packets

    

    In the error condition the exception would be thrown before m_list_size

    is decremented, causing a nullptr dereference in e.g. popFirst().

    In the error condition the exception would be thrown before m_list_size

    is decremented, causing a nullptr dereference in e.g. popFirst().

    is decremented, causing a nullptr dereference in e.g. popFirst().

    Fix undeclared global warning because of _ (#8798)

    Add function `minetest.read_schematic`

    Fix unnecessary exception use in 3 more methods (#8791)

    

    * Fix unnecessary exception use in Server::SendBlocks

    

    The code in this method calls getBlockNoCreate and then

    messes around with try...catch to skip blocks which are not

    in the memory. Additionally, it repeatedly calls

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    * Fix unnecessary exception use in Server::SendBlocks

    

    The code in this method calls getBlockNoCreate and then

    messes around with try...catch to skip blocks which are not

    in the memory. Additionally, it repeatedly calls

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    The code in this method calls getBlockNoCreate and then

    messes around with try...catch to skip blocks which are not

    in the memory. Additionally, it repeatedly calls

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    messes around with try...catch to skip blocks which are not

    in the memory. Additionally, it repeatedly calls

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    in the memory. Additionally, it repeatedly calls

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    m_env.getMap() inside this loop. Speed the code up by

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    extracting the m_env.getMap() out of the loop and getting

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    rid of the try...catch.

    

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    * Fix unnecessary exception use in Server::SendBlock

    

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    Another unnecessary try...catch is slowing down

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    Server::SendBlock. Remove that to speed it up and get a nice

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    side effect of simplifying the code in question.

    

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    * Fix unnecessary exception use in MMVManip::initialEmerge

    

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    Remove another unneeded exception usage from

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    MMVManip::initialEmerge to speed that code up and simplify

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    it but be careful to not remove the braces as there is a

    TimeTaker in use there.

    TimeTaker in use there.

    Fix unnecessary exception use in Map::getSectorXXX (#8792)

    

    The Map::getSectorNoGenerate throws an exception but no other

    code is really dependent on that. Fix the odd instance of

    misuse in ClientMap::emergeSector and remove the exception

    throwing version of the method along with the "NoEx" suffixes

    in the names of these methods.

    The Map::getSectorNoGenerate throws an exception but no other

    code is really dependent on that. Fix the odd instance of

    misuse in ClientMap::emergeSector and remove the exception

    throwing version of the method along with the "NoEx" suffixes

    in the names of these methods.

    code is really dependent on that. Fix the odd instance of

    misuse in ClientMap::emergeSector and remove the exception

    throwing version of the method along with the "NoEx" suffixes

    in the names of these methods.

    misuse in ClientMap::emergeSector and remove the exception

    throwing version of the method along with the "NoEx" suffixes

    in the names of these methods.

    throwing version of the method along with the "NoEx" suffixes

    in the names of these methods.

    in the names of these methods.

    Better F6 profiler (#8750)

    

    Update the profiler names to make more sense of what they actually represent

    Move the profiler code from header to its source file

    Use monospace font to align lines

    Format the statistics line to align better with surrounding values

    Refresh the profiler each 3 seconds (roughly)

    Update the profiler names to make more sense of what they actually represent

    Move the profiler code from header to its source file

    Use monospace font to align lines

    Format the statistics line to align better with surrounding values

    Refresh the profiler each 3 seconds (roughly)

    Move the profiler code from header to its source file

    Use monospace font to align lines

    Format the statistics line to align better with surrounding values

    Refresh the profiler each 3 seconds (roughly)

    Use monospace font to align lines

    Format the statistics line to align better with surrounding values

    Refresh the profiler each 3 seconds (roughly)

    Format the statistics line to align better with surrounding values

    Refresh the profiler each 3 seconds (roughly)

    Refresh the profiler each 3 seconds (roughly)

    Fix unnecessary exception use in Map::isNodeUnderground

    

    The isNodeUnderground calls getBlockNoCreate which calls

    getBlockNoCreateNoEx and throws InvalidPositionException

    if the returned value is nullptr, which isNodeUnderground

    then catches to return "false". Remove the try..catch in

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    The isNodeUnderground calls getBlockNoCreate which calls

    getBlockNoCreateNoEx and throws InvalidPositionException

    if the returned value is nullptr, which isNodeUnderground

    then catches to return "false". Remove the try..catch in

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    getBlockNoCreateNoEx and throws InvalidPositionException

    if the returned value is nullptr, which isNodeUnderground

    then catches to return "false". Remove the try..catch in

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    if the returned value is nullptr, which isNodeUnderground

    then catches to return "false". Remove the try..catch in

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    then catches to return "false". Remove the try..catch in

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    isNodeUnderground by calling getBlockNoCreateNoEx instead

    of getBlockNoCreate and checking the returned value for

    nullptr.

    of getBlockNoCreate and checking the returned value for

    nullptr.

    nullptr.

    Fix compare between pointer and 0 in unittests

    

    Pointers shall be set to nullptr, not 0, according to the

    coding standards. By implication they shall be compared with

    nullptr, not 0, too. Fix this code to match that.

    Pointers shall be set to nullptr, not 0, according to the

    coding standards. By implication they shall be compared with

    nullptr, not 0, too. Fix this code to match that.

    coding standards. By implication they shall be compared with

    nullptr, not 0, too. Fix this code to match that.

    nullptr, not 0, too. Fix this code to match that.

    Clear old item groups when they are overridden. (#8753)

    

    This fixes overridden items keeping their old groups in the group to

    items mapping even after their groups have been changed in lua.

    It also prevents a more widespread issue where overriding an item

    will add its content ID *twice* to the mapping, resulting in odd

    behaviour in features such as ABMs.

    This fixes overridden items keeping their old groups in the group to

    items mapping even after their groups have been changed in lua.

    It also prevents a more widespread issue where overriding an item

    will add its content ID *twice* to the mapping, resulting in odd

    behaviour in features such as ABMs.

    items mapping even after their groups have been changed in lua.

    It also prevents a more widespread issue where overriding an item

    will add its content ID *twice* to the mapping, resulting in odd

    behaviour in features such as ABMs.

    It also prevents a more widespread issue where overriding an item

    will add its content ID *twice* to the mapping, resulting in odd

    behaviour in features such as ABMs.

    will add its content ID *twice* to the mapping, resulting in odd

    behaviour in features such as ABMs.

    behaviour in features such as ABMs.

    Add support for set_formspec_prepend in main menu (#8611)

    Handle multiple deserialization of a block's entities

    

    This fix consists of two parts:

    - Clear the list of stored entities. This has no side-effects.

    - Catch the case where active entities exist and print a message.

      Clearing the active entitiy list has side-effects that should

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    This fix consists of two parts:

    - Clear the list of stored entities. This has no side-effects.

    - Catch the case where active entities exist and print a message.

      Clearing the active entitiy list has side-effects that should

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    - Clear the list of stored entities. This has no side-effects.

    - Catch the case where active entities exist and print a message.

      Clearing the active entitiy list has side-effects that should

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    - Catch the case where active entities exist and print a message.

      Clearing the active entitiy list has side-effects that should

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      Clearing the active entitiy list has side-effects that should

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      be handled. (those entities are known to the environment and

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      to clients).

    

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      As avoiding those side-effects is more complex, and as this

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      problem is not expected to occur (with PR #4847 merged), there

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

      is no real incentive to implement this ATM.

    

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    This issue was a contributing factor to bug #4217. With the other

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    contributing factor removed (PR #4847), this commit makes sure this

    factor does not go unnoticed if it ever happens again.

    factor does not go unnoticed if it ever happens again.

    Update Gradle to 5.5.1 (#8771)

    Fix breakage of non-GLES2 setups (#8774)

    

    The commit 526a9e4b66abaf83eb6b1aaa3e93375acd87b830 breaks

    the non-GLES2 setups because the code that is intended to

    handle that is behind "elseif()" which is interpreted as

    "elseif(false)" and thus the code never gets executed. Fix

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    The commit 526a9e4b66abaf83eb6b1aaa3e93375acd87b830 breaks

    the non-GLES2 setups because the code that is intended to

    handle that is behind "elseif()" which is interpreted as

    "elseif(false)" and thus the code never gets executed. Fix

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    the non-GLES2 setups because the code that is intended to

    handle that is behind "elseif()" which is interpreted as

    "elseif(false)" and thus the code never gets executed. Fix

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    handle that is behind "elseif()" which is interpreted as

    "elseif(false)" and thus the code never gets executed. Fix

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    "elseif(false)" and thus the code never gets executed. Fix

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    that by changing the offending line to else().

    

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    Additionally, to avoid breaking the server only build

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    (which shall not have a dependency on GL/GLU/GLES at all),

    enclose the entire block code in if(BUILD_CLIENT).

    enclose the entire block code in if(BUILD_CLIENT).

    Fix some issues with minetest.clear_craft (#8712)

    

    * Fix some issues with minetest.clear_craft

    

    - Fix memory leak

    - Fix crafts with an output count not being cleared when clearing by

      input.

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

    * Fix some issues with minetest.clear_craft

    

    - Fix memory leak

    - Fix crafts with an output count not being cleared when clearing by

      input.

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

    - Fix memory leak

    - Fix crafts with an output count not being cleared when clearing by

      input.

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

    - Fix crafts with an output count not being cleared when clearing by

      input.

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

      input.

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

    - Fix recipe list being reversed when clearing by input.

    

    * Add CraftInput::empty()

    * Add CraftInput::empty()

    Merge pull request #8776 from osjc/FixGetNode

    

    Finish getNode cleanup

    Finish getNode cleanup

    Add player knockback on punch to builtin

    Implement adding velocity to player from Lua

    

    The intended usecase is knockback, but there's potential for more.

    The intended usecase is knockback, but there's potential for more.

    Builtin UI: Move box element to ensure correct draw order

    Allow customizing chat message format (#8529)

    guiVolumeChange: Fix child not being removed

    Avoid crash caused by, and improve, 'findSpawnPos()'  (#8728)

    

    Avoid an unsuitable spawn position (which if outside mapgen limits can

    cause a crash) if the main 0-3999 loop reaches its end. Fallback to a

    spawn at 0,0,0.

    Check the mapgen-returned 'spawn_level' value for being outside limits.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    Avoid an unsuitable spawn position (which if outside mapgen limits can

    cause a crash) if the main 0-3999 loop reaches its end. Fallback to a

    spawn at 0,0,0.

    Check the mapgen-returned 'spawn_level' value for being outside limits.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    cause a crash) if the main 0-3999 loop reaches its end. Fallback to a

    spawn at 0,0,0.

    Check the mapgen-returned 'spawn_level' value for being outside limits.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    spawn at 0,0,0.

    Check the mapgen-returned 'spawn_level' value for being outside limits.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    Check the mapgen-returned 'spawn_level' value for being outside limits.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    When 'air_count' reaches 2, move back down 1 to spawn in the lower

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    empty node.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    If the spawn position is disallowed by 'objectpos_over_limit()', 'break'

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    from loop instead of 'continue' because positions above are probably

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    also over limit.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    Reset 'air_count' to 0 if an obstruction is found, to make 'air_count'

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    consecutive empty nodes.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    Allow spawn in 'airlike' drawtype nodes such as mod-added vacuum,

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    alien atmospheres, fog etc.

    Add clarifying comments and improve codestyle.

    Add clarifying comments and improve codestyle.

    Game: Fix double BS multiplication

    Fix usage of wrong variable in builtin chat command handling (#8762)

    

    This was introduced in commit 8e75785 and resulted in chat commands not

    returning their output text.

    This was introduced in commit 8e75785 and resulted in chat commands not

    returning their output text.

    returning their output text.

    Client::Interact: Use InteractAction enum instead of numeric constants

    

    This replaces the magic numbers used as interaction modes both client-side and server-side, primarily for the sake of ease-of-readability.

    This replaces the magic numbers used as interaction modes both client-side and server-side, primarily for the sake of ease-of-readability.

    Unify wield item handling (#8677)

    

    This moves the wield item functions to Player and the tool utils for range calculation

    Also 'local_inventory' was removed due to redundancy in Client

    This moves the wield item functions to Player and the tool utils for range calculation

    Also 'local_inventory' was removed due to redundancy in Client

    Also 'local_inventory' was removed due to redundancy in Client

    guiConfirmRegistration: Set focus to text field (#8761)

    Hide chat when console is open (#8656)

    Fix inventory_overlay for nodes without inventory_image (#8433)

    Optimize usage of TOSERVER_GOTBLOCKS packet

    Do not add group values of zero to group lists. (#8751)

    

    This fixes an issue where when the engine looked up groups (for example,

    in ABM node names), NodeDefManager's m_group_to_items would contain nodes

    with a group value of zero, resulting in nodes with flammable = 0 being

    burned by a fire mod with a group:flammable checking ABM.

    

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    This fixes an issue where when the engine looked up groups (for example,

    in ABM node names), NodeDefManager's m_group_to_items would contain nodes

    with a group value of zero, resulting in nodes with flammable = 0 being

    burned by a fire mod with a group:flammable checking ABM.

    

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    in ABM node names), NodeDefManager's m_group_to_items would contain nodes

    with a group value of zero, resulting in nodes with flammable = 0 being

    burned by a fire mod with a group:flammable checking ABM.

    

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    with a group value of zero, resulting in nodes with flammable = 0 being

    burned by a fire mod with a group:flammable checking ABM.

    

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    burned by a fire mod with a group:flammable checking ABM.

    

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    It brings consistency to the behaviour described in the api

    documentation, where zero and nil groups should be the same.

    documentation, where zero and nil groups should be the same.

    Clean up and fix freetype=false crashes (#8641)

    

    A IGUIFont of type bitmap/vector cannot be converted to CGUITTFont

    Fixes various segfaults in gameplay

    Shorter font cache code, cleaned up (?)

    A IGUIFont of type bitmap/vector cannot be converted to CGUITTFont

    Fixes various segfaults in gameplay

    Shorter font cache code, cleaned up (?)

    Fixes various segfaults in gameplay

    Shorter font cache code, cleaned up (?)

    Shorter font cache code, cleaned up (?)

    Add luacheck to check builtin (#7895)

    Mapgen Flat: Fix and improve getSpawnLevelAtPoint() (#8756)

    

    Previously, this wrongly returned ground level (a position containing

    a solid node) as spawn level.

    Return ground level + 2 (+ 2 to spawn above biome 'dust' nodes).

    Improve codestyle and make more consistent with generateTerrain().

    Previously, this wrongly returned ground level (a position containing

    a solid node) as spawn level.

    Return ground level + 2 (+ 2 to spawn above biome 'dust' nodes).

    Improve codestyle and make more consistent with generateTerrain().

    a solid node) as spawn level.

    Return ground level + 2 (+ 2 to spawn above biome 'dust' nodes).

    Improve codestyle and make more consistent with generateTerrain().

    Return ground level + 2 (+ 2 to spawn above biome 'dust' nodes).

    Improve codestyle and make more consistent with generateTerrain().

    Improve codestyle and make more consistent with generateTerrain().

    Update curl dependency in buildbot

    Fix binary-string confusion in client network code

    Clean up FindOpenGLES2.cmake

    Unify GLES support in gui scaling filter

    Unify OpenGL ES support

    Let ENABLE_GLES appear in cmake_config.h and change its functionality

    Add formspec testing to test mod in minimal

    Add styles to most elements

    Add style[] tag with button support

    Add custom colorable GUIButton implementation

    Fix negative offsets not being supported by container[]

    Builtin: Forward old return values

    

    Was forgotten in 69bf964.

    Was forgotten in 69bf964.

    Correct ServerActiveObject's virtual getArmorGroups() to be const.

    

    Due to commit ec3142a , UnitSAO's getArmorGroups() did not match

    ServerActiveObject's, notably resulting in the lua get_armor_groups() call

    returning nothing.

    Due to commit ec3142a , UnitSAO's getArmorGroups() did not match

    ServerActiveObject's, notably resulting in the lua get_armor_groups() call

    returning nothing.

    ServerActiveObject's, notably resulting in the lua get_armor_groups() call

    returning nothing.

    returning nothing.

    Mainmenu: Use textarea in error formspecs

    Group "immortal" also protects players from damage

    

    Document new meaning of immortal=1 for players

    

    Disable breathing if player is immortal

    

    Hide builtin statbars if player immortal (delayed)

    

    Co-authored-by: ClobberXD <ClobberXD@gmail.com>

    Document new meaning of immortal=1 for players

    

    Disable breathing if player is immortal

    

    Hide builtin statbars if player immortal (delayed)

    

    Co-authored-by: ClobberXD <ClobberXD@gmail.com>

    Disable breathing if player is immortal

    

    Hide builtin statbars if player immortal (delayed)

    

    Co-authored-by: ClobberXD <ClobberXD@gmail.com>

    Hide builtin statbars if player immortal (delayed)

    

    Co-authored-by: ClobberXD <ClobberXD@gmail.com>

    Co-authored-by: ClobberXD <ClobberXD@gmail.com>

    Allow toolcaps to override the built-in times for dig_immediate

    Silence invalid clang format warnings in guiScrollBar.cpp (#8724)

    Sky: Refactor of moon and sun drawing (#8683)

    

    Split sun and moon render parts from the main render function.

    Split sun and moon render parts from the main render function.

    Move the clamping of hp/breath when their maximums change to read_object_properties(). (#8689)

    

    This prevents set_properties() calls that have nothing to do with hp_max or breath_max overriding the saved hp before another mod has the chance to set a player's intended hp_max (such as in on_joinplayer).

    This prevents set_properties() calls that have nothing to do with hp_max or breath_max overriding the saved hp before another mod has the chance to set a player's intended hp_max (such as in on_joinplayer).

    README: make -j$(nproc) (#8699)

    Rename guiScrollBar to GUIScrollBar

    ContentCAO: Fix broken attachments on join (#8701)

    

    What happened:

    1) Object data is received. Client begins to read the data

    2) Client initializes all its children (gob_cmd_update_infant)

    3) Children try to attach to parent (yet not added)

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    What happened:

    1) Object data is received. Client begins to read the data

    2) Client initializes all its children (gob_cmd_update_infant)

    3) Children try to attach to parent (yet not added)

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    1) Object data is received. Client begins to read the data

    2) Client initializes all its children (gob_cmd_update_infant)

    3) Children try to attach to parent (yet not added)

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    2) Client initializes all its children (gob_cmd_update_infant)

    3) Children try to attach to parent (yet not added)

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    3) Children try to attach to parent (yet not added)

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    4) Parent initializes, is added to the environment

    

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    And somewhere in between, Irrlicht wrecks up the attachments due to the missing matrix node.

    

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    The solution here is to:

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    1) Use the same structure as ServerActiveObject

    2) Attach all children after the parent is really initialized

    2) Attach all children after the parent is really initialized

    lua_api.txt clarifications regarding mapgen object index IDs and handles. (#8713)

    guiScrollBar: move directly to clicked pos if clicked into tray

    Check for 'action' field in ABMs & LBMs

    Prefix RecipePriority elements with PRIORITY_

    Initialize priority in CraftDefinition constructors

    

    The priority is used by getCraftResult, which may be used before

    initHash is called.

    The priority is used by getCraftResult, which may be used before

    initHash is called.

    initHash is called.

    minimal: Move get_craft_result tests to test mod

    Fix missing item images clipping in formspecs (#8652)

    

    * Fix clipping of itemimage

    

    * Code style

    

    * More code styling

    * Fix clipping of itemimage

    

    * Code style

    

    * More code styling

    * Code style

    

    * More code styling

    * More code styling

    Document 'wield_item' entity property (#8694)

    Make FindCURL ready for vcpkg (#8295)

    

    This allows to find and use curl with the vcpkg toolchain file.

    This allows to find and use curl with the vcpkg toolchain file.

    Initialise 'seabed_height' to avoid compilation warning (#8715)

    Re-order mapgens in mainmenu and 'all settings' mapgen selection (#8705)

    

    v6 always last to discourage selection.

    Special mapgens flat, fractal, singlenode, next to last. Of these, singlenode

    last to discourage selection.

    Of the remaining, v5 last due to age, v7 first due to being the default.

    v6 always last to discourage selection.

    Special mapgens flat, fractal, singlenode, next to last. Of these, singlenode

    last to discourage selection.

    Of the remaining, v5 last due to age, v7 first due to being the default.

    Special mapgens flat, fractal, singlenode, next to last. Of these, singlenode

    last to discourage selection.

    Of the remaining, v5 last due to age, v7 first due to being the default.

    last to discourage selection.

    Of the remaining, v5 last due to age, v7 first due to being the default.

    Of the remaining, v5 last due to age, v7 first due to being the default.

    Mgfractal: Make non-fractal terrain optional (#8702)

    

    Enabled by default.

    Only allow spawn on fractal, not on seabed terrain.

    Various codestyle and comment improvements.

    Enabled by default.

    Only allow spawn on fractal, not on seabed terrain.

    Various codestyle and comment improvements.

    Only allow spawn on fractal, not on seabed terrain.

    Various codestyle and comment improvements.

    Various codestyle and comment improvements.

    Removed debug.upvaluejoin to prevent leak of insecure environment

    Update README.md (#8700)

    Add /help formspec for commands and privileges (#8385)

    

    * Trigger for 'all' as well

    * Add description textarea, double-click to copy

    * Trigger for 'all' as well

    * Add description textarea, double-click to copy

    * Add description textarea, double-click to copy

    Improve documentation of mapgen aliases (#8693)

    Document the deprecation of hardcoded cave liquids (#8692)

    travis: Disable macOS build

    

    The build often hits the 50m time limit or fails with spurious errors.

    It can be re-enabled when/if we figure out how to solve this.

    The build often hits the 50m time limit or fails with spurious errors.

    It can be re-enabled when/if we figure out how to solve this.

    It can be re-enabled when/if we figure out how to solve this.

    Optimize getting active objects a bit. #8674

    Use vector.dot and vector.cross in vector.angle

    Add vector.dot and vector.cross

    

    Mostly copied from MarkuBu's code

    Mostly copied from MarkuBu's code

    Dungeons: Make multiple large rooms possible (#8678)

    

    Re-add the random size range for large rooms.

    Remove 'first_room_large' bool.

    Add 'large_room_chance' parameter that can disable large rooms,

    specify 1 large room, or specify a chance for large rooms.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    Re-add the random size range for large rooms.

    Remove 'first_room_large' bool.

    Add 'large_room_chance' parameter that can disable large rooms,

    specify 1 large room, or specify a chance for large rooms.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    Remove 'first_room_large' bool.

    Add 'large_room_chance' parameter that can disable large rooms,

    specify 1 large room, or specify a chance for large rooms.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    Add 'large_room_chance' parameter that can disable large rooms,

    specify 1 large room, or specify a chance for large rooms.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    specify 1 large room, or specify a chance for large rooms.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    If 1 or a chance is specified, the first generated room is large,

    to take advantage of the intersection checks that are done for the

    1st room only.

    to take advantage of the intersection checks that are done for the

    1st room only.

    1st room only.

    Docs: Clarify where to check for 'protection_bypass' (#8675)

    Move more dungeon parameter selection to mapgens (#8653)

    

    Move 'num_dungeons' to 'DungeonParams'.

    Add new parameter 'num_rooms' to replace 'rooms_min' and 'rooms_max',

    so that the mapgen has complete control over the number of rooms.

    Add new bool 'first_room_large' so that the mapgen chooses this

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    Move 'num_dungeons' to 'DungeonParams'.

    Add new parameter 'num_rooms' to replace 'rooms_min' and 'rooms_max',

    so that the mapgen has complete control over the number of rooms.

    Add new bool 'first_room_large' so that the mapgen chooses this

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    Add new parameter 'num_rooms' to replace 'rooms_min' and 'rooms_max',

    so that the mapgen has complete control over the number of rooms.

    Add new bool 'first_room_large' so that the mapgen chooses this

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    so that the mapgen has complete control over the number of rooms.

    Add new bool 'first_room_large' so that the mapgen chooses this

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    Add new bool 'first_room_large' so that the mapgen chooses this

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    instead of a hardcoded 1 in 4 chance.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    Add new parameter 'room_size_large' to replace 'room_size_large_min'

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    and 'room_size_large_max', so that the mapgen has complete control

    over this.

    over this.

    Do predict when sneak-place to node with on_rightclick

    Improve ABM time budget handling. #8645

    Document ObjectRef:remove under Lua entity (#8659)

    

    This was previously documented under the general ObjectRef section with a note that this won't work on players. So I think this would fit better with Lua entity-only methods.

    

    This PR also changes the title of the Lua entity-only section from `LuaEntitySAO-only` to `Lua entity only`.

    This was previously documented under the general ObjectRef section with a note that this won't work on players. So I think this would fit better with Lua entity-only methods.

    

    This PR also changes the title of the Lua entity-only section from `LuaEntitySAO-only` to `Lua entity only`.

    This PR also changes the title of the Lua entity-only section from `LuaEntitySAO-only` to `Lua entity only`.

    Improve grammar and formatting in the README

    

    This also clarifies the fact that Minetest saves `minetest.conf`

    when closing Minetest for the first time, rather than when starting it

    for the first time.

    

    This also fixes the default key for the pitch move mode which is now P.

    This also clarifies the fact that Minetest saves `minetest.conf`

    when closing Minetest for the first time, rather than when starting it

    for the first time.

    

    This also fixes the default key for the pitch move mode which is now P.

    when closing Minetest for the first time, rather than when starting it

    for the first time.

    

    This also fixes the default key for the pitch move mode which is now P.

    for the first time.

    

    This also fixes the default key for the pitch move mode which is now P.

    This also fixes the default key for the pitch move mode which is now P.

    Update biome definition dungeon node documentation (#8650)

    Dungeongen: Remove most hardcoded dungeon nodes (#8594)

    

    Biome-defined dungeon nodes was added as a feature to MT 5.0.0.

    So now remove most of the hardcoded dungeon node code that assumes a

    game has stone, sandstone, desert stone, and no other stone types.

    If biome-defined dungeon nodes are not found, dungeon nodes fall back

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    Biome-defined dungeon nodes was added as a feature to MT 5.0.0.

    So now remove most of the hardcoded dungeon node code that assumes a

    game has stone, sandstone, desert stone, and no other stone types.

    If biome-defined dungeon nodes are not found, dungeon nodes fall back

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    So now remove most of the hardcoded dungeon node code that assumes a

    game has stone, sandstone, desert stone, and no other stone types.

    If biome-defined dungeon nodes are not found, dungeon nodes fall back

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    game has stone, sandstone, desert stone, and no other stone types.

    If biome-defined dungeon nodes are not found, dungeon nodes fall back

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    If biome-defined dungeon nodes are not found, dungeon nodes fall back

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    to the 'cobble' mapgen alias if present, if not present they fall back

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    to biome-defined 'stone'.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    Remove now-unnecessary mapgen aliases from MapgenBasic. Non-mgv6 games

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    now only need to define 3 to 5 mapgen aliases.

    

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    Document dungeon parameters.

    

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    Make c_lava_source fallback to c_water_source as both are used as cave

    liquids.

    liquids.

    Optimize and unify mesh processing (#7851)

    Add compatible, consistent coordinate system to FormSpecs. (#8524)

    Increase upper limit of display_gamma to 10 (#8618)

    Add support for 9-sliced backgrounds (#8600)

    

    9-slice textures are commonly used in GUIs to allow scaling them to match any resolution without distortion.

    

    https://en.wikipedia.org/wiki/9-slice_scaling

    9-slice textures are commonly used in GUIs to allow scaling them to match any resolution without distortion.

    

    https://en.wikipedia.org/wiki/9-slice_scaling

    https://en.wikipedia.org/wiki/9-slice_scaling

    Fix segfault on quitting with open node formspec (#8608)

    Improve buildbot script

    

    PR created under the employment of EvidenceBKidscode

    

    * Variables to set git repositories urls (allows to build from another repo)

    * Variables to set git branch to build from (allows to build from non-master branch)

    * Variables to change built name

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    PR created under the employment of EvidenceBKidscode

    

    * Variables to set git repositories urls (allows to build from another repo)

    * Variables to set git branch to build from (allows to build from non-master branch)

    * Variables to change built name

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    * Variables to set git repositories urls (allows to build from another repo)

    * Variables to set git branch to build from (allows to build from non-master branch)

    * Variables to change built name

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    * Variables to set git branch to build from (allows to build from non-master branch)

    * Variables to change built name

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    * Variables to change built name

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    * Make -j uses the proper number of processors (autodetect)

    * Changed toolchain from win32 to adpat it to non-debian distros

    * Changed toolchain from win32 to adpat it to non-debian distros

    Fix handling of --color and --worldlist command line arguments

    

    They verify the provided value and error if a wrong value got provided

    command line description for color was differnt on win32 but  code did not handle any differenc

    extended the command line description for world and worldname that it is clear that they only start a local game if used with --go

    

    Fixes #7875

    They verify the provided value and error if a wrong value got provided

    command line description for color was differnt on win32 but  code did not handle any differenc

    extended the command line description for world and worldname that it is clear that they only start a local game if used with --go

    

    Fixes #7875

    command line description for color was differnt on win32 but  code did not handle any differenc

    extended the command line description for world and worldname that it is clear that they only start a local game if used with --go

    

    Fixes #7875

    extended the command line description for world and worldname that it is clear that they only start a local game if used with --go

    

    Fixes #7875

    Fixes #7875

    Exclude vscode editor files from source

    Update README copyright notice to 2019 (#8606)

    Mapgen Carpathian: Add optional rivers (#7977)

    

    Rivers are disabled by default and will not be added to existing worlds.

    Rewrite getSpawnLevelAtPoint() to be simpler and more consistent with

    generateTerrain().

    Rivers are disabled by default and will not be added to existing worlds.

    Rewrite getSpawnLevelAtPoint() to be simpler and more consistent with

    generateTerrain().

    Rewrite getSpawnLevelAtPoint() to be simpler and more consistent with

    generateTerrain().

    generateTerrain().

    Android: Use system provided path for default TMPFolder setting (#8505)

    Update Github templates (#8593)

    Use CDB author and name in installed package's config (#8550)

    

    They are used for tracking the package, so should match ContentDB.

    They are used for tracking the package, so should match ContentDB.

    Settings: Disallow space characters entirely

    

    Lua API:

    > Setting names can't contain whitespace or any of ="{}#

    Lua API:

    > Setting names can't contain whitespace or any of ="{}#

    > Setting names can't contain whitespace or any of ="{}#

    Formspecs: Close on metadata removal (#8348)

    

    Formspecs will now close as soon the formspec string in the node metadata turns invalid.

    Formspecs will now close as soon the formspec string in the node metadata turns invalid.

    Add disable_jump to liquids and ladders (#7688)

    

    Remove second nodedef check by improving the colliding node detection

    Also remove the 2nd check in old_move, correct standing node a bit

    Remove second nodedef check by improving the colliding node detection

    Also remove the 2nd check in old_move, correct standing node a bit

    Also remove the 2nd check in old_move, correct standing node a bit

    Add compatibility to vcpkg buildsystem (#8317)

    Save forceloaded blocks file periodically (#8535)

    

    saves the forceloaded blocks periodically.

    checks every 10 seconds if the forceloaded blocks got changed in-game

    and persists them on-disk if that's the case

    saves the forceloaded blocks periodically.

    checks every 10 seconds if the forceloaded blocks got changed in-game

    and persists them on-disk if that's the case

    checks every 10 seconds if the forceloaded blocks got changed in-game

    and persists them on-disk if that's the case

    and persists them on-disk if that's the case

    Damage: Play no damage sound when immortal (#8350)

    

    Add isImmortal server-side for proper enable_damage handling

    Rework log messages

    Add isImmortal server-side for proper enable_damage handling

    Rework log messages

    Rework log messages

    Remove modstore leftovers. Fix core.show_path_select_dialog documentation (#8572)

    

    This was forgotten in #5852.

    This was forgotten in #5852.

    HTTP API: Allow binary downloads and headers (#8573)

    

    Add minetest.features.httpfetch_binary_data

    Add minetest.features.httpfetch_binary_data

    Dungeons: Settable density noise, move number calculation to mapgens (#8473)

    

    Add user-settable noise parameters for dungeon density to each mapgen,

    except V6 which hardcodes this noise parameter.

    

    Move the calculation of number of dungeons generated in a mapchunk out

    of dungeongen.cpp and into mapgen code, to allow mapgens to generate

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    Add user-settable noise parameters for dungeon density to each mapgen,

    except V6 which hardcodes this noise parameter.

    

    Move the calculation of number of dungeons generated in a mapchunk out

    of dungeongen.cpp and into mapgen code, to allow mapgens to generate

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    except V6 which hardcodes this noise parameter.

    

    Move the calculation of number of dungeons generated in a mapchunk out

    of dungeongen.cpp and into mapgen code, to allow mapgens to generate

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    Move the calculation of number of dungeons generated in a mapchunk out

    of dungeongen.cpp and into mapgen code, to allow mapgens to generate

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    of dungeongen.cpp and into mapgen code, to allow mapgens to generate

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    any desired number of dungeons in a mapchunk, instead of being forced

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    to have number of dungeons determined by a density noise.

    

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    This is more flexible and allows mapgens to use dungeon generation to

    create custom structures, such as occasional mega-dungeons.

    create custom structures, such as occasional mega-dungeons.

    Fix persistent ^[brighten after damage again (#5739)

    

    The old texture modifier is restored by passing `m_previous_texture_modifier`.

    Either copy it manually or let the function parameter do that.

    

    Victims so far:

    8e0b80a Apr 2018

    eb2bda7 May 2019

    The old texture modifier is restored by passing `m_previous_texture_modifier`.

    Either copy it manually or let the function parameter do that.

    

    Victims so far:

    8e0b80a Apr 2018

    eb2bda7 May 2019

    Either copy it manually or let the function parameter do that.

    

    Victims so far:

    8e0b80a Apr 2018

    eb2bda7 May 2019

    Victims so far:

    8e0b80a Apr 2018

    eb2bda7 May 2019

    8e0b80a Apr 2018

    eb2bda7 May 2019

    eb2bda7 May 2019

    override.txt: Fix crash due to CRLF endings (#8439)

    Do not drag-place stack into 'craftpreview' slot (#8514)

    Add IGUIScrollbar implementation with variable bar sizes (#8507)

    Fix forgotten PlayerSAO cast in a90f2ef

    Make autoforward simulate the 'up' key (#8249)

    Check for out-of-bounds breath when setting breath_max (#8493)

    Fix API site build (#8551)

    l_mapgen.cpp: Fix LINT broken since b1b40fe

    Prioritise craft recipes

    

    When multiple recipes are applicable, the recipes are prioritised in this order:

    toolrepair < shapeless with groups < shapeless < shaped with groups < shaped

    For cooking and fuel, items are prioritised over item groups

    When multiple recipes are applicable, the recipes are prioritised in this order:

    toolrepair < shapeless with groups < shapeless < shaped with groups < shaped

    For cooking and fuel, items are prioritised over item groups

    toolrepair < shapeless with groups < shapeless < shaped with groups < shaped

    For cooking and fuel, items are prioritised over item groups

    For cooking and fuel, items are prioritised over item groups

    Test crafting hash type only once for a recipe

    Allow multiple cave liquids in a biome definition (#8481)

    

    This allows games to specify biome cave liquids and avoid the old

    hardcoded behaviour, but preserves the ability to have multiple

    cave liquids in one biome, such as lava and water.

    

    When multiple cave liquids are defined by the biome definition,

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    This allows games to specify biome cave liquids and avoid the old

    hardcoded behaviour, but preserves the ability to have multiple

    cave liquids in one biome, such as lava and water.

    

    When multiple cave liquids are defined by the biome definition,

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    hardcoded behaviour, but preserves the ability to have multiple

    cave liquids in one biome, such as lava and water.

    

    When multiple cave liquids are defined by the biome definition,

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    cave liquids in one biome, such as lava and water.

    

    When multiple cave liquids are defined by the biome definition,

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    When multiple cave liquids are defined by the biome definition,

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    make each entire cave use a randomly chosen liquid, instead of

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    every small cave segment using a randomly chosen liquid.

    

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    Plus an optimisation:

    Don't place nodes if cave liquid is defined as 'air'

    Don't place nodes if cave liquid is defined as 'air'

    Add content_rating tag to appdata (#8538)

    

    This tag allows software stores (KDE discover, etc) to filter and know whether applications are suitable for young users.

    This tag allows software stores (KDE discover, etc) to filter and know whether applications are suitable for young users.

    Optimize string (mis)handling (#8128)

    

    * Optimize statbar drawing

    

    The texture name of the statbar is a string passed by value.

    That slows down the client and creates litter in the heap

    as the content of the string is allocated there. Convert the

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize statbar drawing

    

    The texture name of the statbar is a string passed by value.

    That slows down the client and creates litter in the heap

    as the content of the string is allocated there. Convert the

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The texture name of the statbar is a string passed by value.

    That slows down the client and creates litter in the heap

    as the content of the string is allocated there. Convert the

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    That slows down the client and creates litter in the heap

    as the content of the string is allocated there. Convert the

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    as the content of the string is allocated there. Convert the

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    offending parameter to a const reference to avoid the

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    performance hit.

    

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize texture cache

    

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    There is an unnecessary temporary created when the texture

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    path is being generated. This slows down the cache each time

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    a new texture is encountered and it needs to be loaded into

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the cache. Additionally, the heap litter created by this

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    unnecessary temporary is particularly troublesome here as

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the following code then piles another string (the resulting

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    full path of the texture) on top of it, followed by the

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    texture itself, which both are quite long term objects as

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    they are subsequently inserted into the cache where they can

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    remain for quite a while (especially if the texture turns

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    out to be a common one like dirt, grass or stone).

    

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Use std::string.append to get rid of the temporary which

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    solves both issues (speed and heap fragmentation).

    

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize animations in client

    

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Each time an animated node is updated, an unnecessary copy of

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the texture name is created, littering the heap with lots of

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    fragments. This can be specifically troublesome when looking

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    at oceans or large lava lakes as both of these nodes are

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    usually animated (the lava animation is pretty visible).

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Convert the parameter of GenericCAO::updateTextures to a

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    const reference to get rid of the unnecessary copy.

    

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    There is a comment stating "std::string copy is mandatory as

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    mod can be a class member and there is a swap on those class

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    members ... do NOT pass by reference", reinforcing the

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    belief that the unnecessary copy is in fact necessary.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    However one of the first things the code of the method does

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    is to assign the parameter to its class member, creating

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    another copy. By rearranging the code a little bit this

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    "another copy" can then be used by the subsequent code,

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    getting rid of the need to pass the parameter by value and

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    thus saving that copying effort.

    

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize chat console history handling

    

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The GUIChatConsole::replaceAndAddToHistory was getting the

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    line to work on by value which turns out to be unnecessary.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Get rid of that unnecessary copy by converting the parameter

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    to a const reference.

    

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize gui texture setting

    

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The code used to set the texture for GUI components was

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    getting the name of the texture by value, creating

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    unnecessary performance bottleneck for mods/games with

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    heavily textured GUIs. Get rid of the bottleneck by passing

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the texture name as a const reference.

    

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize sound playing code in GUIEngine

    

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The GUIEngine's code receives the specification of the sound

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    to be played by value, which turns out to be most likely a

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    mistake as the underlying sound manager interface receives

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the same thing by reference. Convert the offending parameter

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    to a const reference to get rid of the rather bulky copying

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    effort and the associated performance hit.

    

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Silence CLANG TIDY warnings for unit tests

    

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Change "std::string" to "const std::string &" to avoid an

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    unnecessary local value copy, silencing the CLANG TIDY

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    process.

    

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize formspec handling

    

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The "formspec prepend" parameter was passed to the formspec

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    handling code by value, creating unnecessary copy of

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    std::string and slowing down the game if mods add things like

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    textured backgrounds for the player inventory and/or other

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    forms. Get rid of that performance bottleneck by converting

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the parameter to a const reference.

    

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize hotbar image handling

    

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The code that sets the background images for the hotbar is

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    getting the name of the image by value, creating an

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    unnecessary std::string copying effort. Fix that by

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    converting the relevant parameters to const references.

    

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize inventory deserialization

    

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    The inventory manager deserialization code gets the

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    serialized version of the inventory by value, slowing the

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    server and the client down when there are inventory updates.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    This can get particularly troublesome with pipeworks which

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    adds nodes that can mess around with inventories

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    automatically or with mods that have mobs with inventories

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    that actively use them.

    

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize texture scaling cache

    

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    There is an io::path parameter passed by value in the

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    procedure used to add images converted from textures,

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    leading to slowdown when the image is not yet created and

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the conversion is thus needed. The performance hit is

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    quite significant as io::path is similar to std::string

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    so convert the parameter to a const reference to get rid of

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    it.

    

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize translation file loader

    

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    Use "std::string::append" when calculating the final index

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    for the translation table to avoid unnecessary temporary

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    strings. This speeds the translation file loader up

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    significantly as std::string uses heap allocation which

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    tends to be rather slow. Additionally, the heap is no

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    longer being littered by these unnecessary string

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    temporaries, increasing performance of code that gets

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    executed after the translation file loader finishes.

    

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    * Optimize server map saving

    

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    When the directory structure for the world data is created

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    during server map saving, an unnecessary value passing of

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    the directory name slows things down. Remove that overhead

    by converting the offending parameter to a const reference.

    by converting the offending parameter to a const reference.

    Revert "Inventory: Make addItem for empty ItemStacks respect max stack size" (#8519)

    

    Revert commit e6a9e60

    Revert commit e6a9e60

    Move HTTP request logging to infostream (#8526)

    Define operators == and != for ItemStack

    builtin/../register.lua: Abort make_wrap_deregistration if param is invalid

    minimal: Fix crash due to assertion fail

    Better document behavior of on_punchplayer

    

    Esp. the fact that it's invoked even if the punched player is dead

    Esp. the fact that it's invoked even if the punched player is dead

    PlayerSAO::setHP - Don't call on_hpchange callbacks if HP hasn't changed

    Remove unnecessary CSM warning (#8485)

    Force send a mapblock to a player (#8140)

    

    * Force send a mapblock to a player.

    

    Send a single mapblock to a specific remote player.

    

    This is badly needed for mods and games where players are teleported

    into terrain which may be not generated, loaded, or modified

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    * Force send a mapblock to a player.

    

    Send a single mapblock to a specific remote player.

    

    This is badly needed for mods and games where players are teleported

    into terrain which may be not generated, loaded, or modified

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    Send a single mapblock to a specific remote player.

    

    This is badly needed for mods and games where players are teleported

    into terrain which may be not generated, loaded, or modified

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    This is badly needed for mods and games where players are teleported

    into terrain which may be not generated, loaded, or modified

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    into terrain which may be not generated, loaded, or modified

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    significantly since the last player visit.

    

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    In all these cases, the player currently ends up in void, air, or

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    inside blocks which not only looks bad, but has the effect that the

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    player might end up falling and then the server needs to correct for

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    the player position again later, which is a hack.

    

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    The best solution is to send at least the single mapblock that the

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    player will be teleported to. I've tested this with ITB which does this

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    all the time, and I can see it functioning as expected (it even shows

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    a half loaded entry hallway, as the further blocks aren't loaded yet).

    

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    The parameter is a blockpos (table of x, y, z), not a regular pos.

    

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    The function may return false if the call failed. This is most likely

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    due to the target position not being generated or emerged yet, or

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    another internal failure, such as the player not being initialized.

    

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    * Always send mapblock on teleport or respawn.

    

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    This avoids the need for mods to send a mapblock on teleport or

    respawn, since any call to `player:set_pos()` will pass this code.

    respawn, since any call to `player:set_pos()` will pass this code.

    Improve readability of debug menu by using '|' (#8488)

    

    * Improve readability of debug menu by using '|'

    

    * Restore whitespace to separate yaw and cardinal direction

    

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    * Improve readability of debug menu by using '|'

    

    * Restore whitespace to separate yaw and cardinal direction

    

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    * Restore whitespace to separate yaw and cardinal direction

    

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    Range-limit value passed to PlayerSAO::set{HP|Breath} (#8264)

    Use player as starting point instead of camera when pointing node (#8261)

    

    Same pointing area on both camera modes.

    This fix is inapplicable for non-crosshair input.

    Same pointing area on both camera modes.

    This fix is inapplicable for non-crosshair input.

    This fix is inapplicable for non-crosshair input.

    Correct the checkbox selection box position (#8246)

    

    Remove m_btn_height dependency, replace with the text and checkbox size.

    Remove m_btn_height dependency, replace with the text and checkbox size.

    CMakeLists.txt: Remove references to Minecraft and Infiniminer (#8487)

    Android: Clear chat open flag on cancel or completion (#8478)

    Attend to review, re-arrange blank lines, update lua_api.txt

    Fix regression in automatic_face_movement_max_rotation_per_sec

    

    Values <= 0 should make the yaw change instant. This worked in 0.4.16 but was broken in 089f59458286.

    

    Per bug report by oil_boi_minetest on IRC.

    Values <= 0 should make the yaw change instant. This worked in 0.4.16 but was broken in 089f59458286.

    

    Per bug report by oil_boi_minetest on IRC.

    Per bug report by oil_boi_minetest on IRC.

    Various network performance improvements (#8125)

    

    * Optimize packet construction functions

    

    Some of the functions that construct packets in

    connection.cpp are using a const reference to get the raw

    packet data to package and others use a value passed

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    * Optimize packet construction functions

    

    Some of the functions that construct packets in

    connection.cpp are using a const reference to get the raw

    packet data to package and others use a value passed

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    Some of the functions that construct packets in

    connection.cpp are using a const reference to get the raw

    packet data to package and others use a value passed

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    connection.cpp are using a const reference to get the raw

    packet data to package and others use a value passed

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    packet data to package and others use a value passed

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    parameter to do that. The ones that use the value passed

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    parameter suffer from performance hit as the rather bulky

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    packet data gets a temporary copy when the parameter is

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    passed before it lands at its final destination inside the

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    newly constructed packet. The unnecessary temporary copy

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    hurts quite badly as the underlying class (SharedBuffer)

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    actually allocates the space for the data in the heap.

    

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    Fix the performance hit by converting all of these value

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    passed parameters to const references. I believe that this

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    is what the author of the relevant code actually intended

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    to do as there is a couple of packet construction helper

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    functions that already use a const reference to get the

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    raw data.

    

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    * Optimize packet sender thread class

    

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    Most of the data sending methods of the packet sender thread

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    class use a value passed parameter for the packet data to be

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    sent. This causes the rather bulky data to be allocated on

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    the heap and copied, slowing the packet sending down. Convert

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    these parameters to const references to avoid the performance

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    hit.

    

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    * Optimize packet receiver thread class

    

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    The packet receiver and processor thread class has many

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    methods (mostly packet handlers) that receive the packed data

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    by value. This causes a performance hit that is actually

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    worse than the one caused by the packet sender methods

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    because the packet is first handed to the processPacket

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    method which looks at the packet type stored in the header

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    and then delegates the actual handling to one of the

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    handlers. Both, processPacket and all the handlers get the

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    packet data by value, leading to at least two unnecessary

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    copies of the data (with malloc and all the slow bells and

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    whistles of bulky classes).

    

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    As there already is a few methods that use a const reference

    parameter for the packet data, convert all this value passed

    packets to const references.

    parameter for the packet data, convert all this value passed

    packets to const references.

    packets to const references.

    World start time: Move to first full light (day night ratio = 1000) (#8410)

    

    6125 is the time of first full light according to 'get_node_light()',

    and the time of first full light visually when basic shaders are on.

    This is the optimum default new world start time, taking all possible

    games into account.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    6125 is the time of first full light according to 'get_node_light()',

    and the time of first full light visually when basic shaders are on.

    This is the optimum default new world start time, taking all possible

    games into account.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    and the time of first full light visually when basic shaders are on.

    This is the optimum default new world start time, taking all possible

    games into account.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    This is the optimum default new world start time, taking all possible

    games into account.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    games into account.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    The previous time assumed a game similar to Minetest Game. Games

    should set this setting themselves according to their needs.

    should set this setting themselves according to their needs.

    Add Irrlicht-specific smart pointer (#6814)

    Add Mkdocs API site (#8133)

    

    * Add MkDocs API site

    * Add MkDocs API site

    Add node field to PlayerHPChangeReason table (#8368)

    Nodedef 'drop' documentation: Improve, add tool filtering (#8458)

    util/hex.h: Remove whitespace-only line (#8460)

    daynightratio.h: Improve codestyle, minor optimisations (#8453)

    Android settings: Use 'simple' leaves instead of 'fancy' (#8440)

    

    'Fancy' leaves are intensive to render.

    Also remove the unnecessary duplicated setting of 'chunksize'.

    'Fancy' leaves are intensive to render.

    Also remove the unnecessary duplicated setting of 'chunksize'.

    Also remove the unnecessary duplicated setting of 'chunksize'.

    Optimize random turns in dungeongen (#8129)

    

    It turns out there is no need to return the new value and

    preserve the old one in random_turn, the procedure can be

    made to modify the value in-place. This saves quite a bunch

    of parameter and return value copying.

    It turns out there is no need to return the new value and

    preserve the old one in random_turn, the procedure can be

    made to modify the value in-place. This saves quite a bunch

    of parameter and return value copying.

    preserve the old one in random_turn, the procedure can be

    made to modify the value in-place. This saves quite a bunch

    of parameter and return value copying.

    made to modify the value in-place. This saves quite a bunch

    of parameter and return value copying.

    of parameter and return value copying.

    Find PostgreSQL correctly (#8435)

    util/hex.h: Reserve result space in hex_encode()

    

    Reserve enough space for the result of hex_encode() to eliminate reallocations

    Reserve enough space for the result of hex_encode() to eliminate reallocations

    Add deprecation warnings for ObjectRef:get/set_attribute (#8443)

    Stabilise 'day night ratio' to fix object brightness flicker (#8417)

    

    Previously, when basic shaders were enabled, the function

    time_to_daynight_ratio() returned values jumping between 149 and 150

    between times 4375 and 4625, and values jumping between 999 and 1000

    between times 6125 and 6375, (and the corresponding times at sunset)

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    Previously, when basic shaders were enabled, the function

    time_to_daynight_ratio() returned values jumping between 149 and 150

    between times 4375 and 4625, and values jumping between 999 and 1000

    between times 6125 and 6375, (and the corresponding times at sunset)

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    time_to_daynight_ratio() returned values jumping between 149 and 150

    between times 4375 and 4625, and values jumping between 999 and 1000

    between times 6125 and 6375, (and the corresponding times at sunset)

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    between times 4375 and 4625, and values jumping between 999 and 1000

    between times 6125 and 6375, (and the corresponding times at sunset)

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    between times 6125 and 6375, (and the corresponding times at sunset)

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    due to tiny float errors in the interpolation code.

    

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    This caused the light level returned by blend_light() to jump between

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    14 and 15, which became noticeable recently as those light levels were

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    given different visual brightnesses.

    

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    Add early returns to avoid the problematic interpolation, and to

    avoid unnecessary running of the loop.

    avoid unnecessary running of the loop.

    Change sign of pitch angle in debug menu (#8438)

    

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    Co-Authored-By: ClobberXD <ClobberXD@gmail.com>

    Change pitch fly binding to 'P', add to change keys menu (#8314)

    Fix comments

    Create ServerThread earlier in the startup process

    mapgen: drop mapgen id from child mapgens.

    

    This id must be owned by the child mapgen and never be set to a misc value by a developer

    

    Also use nullptr in some places

    This id must be owned by the child mapgen and never be set to a misc value by a developer

    

    Also use nullptr in some places

    Also use nullptr in some places

    EmergeManager::initMapgens use FATAL_ERROR if and drop boolean return

    

    We never handle the boolean return, also init twice is a coding error, not a runtime error

    We never handle the boolean return, also init twice is a coding error, not a runtime error

    Use unordered_map instead of map for craft definitions (#8432)

    Optimize core.after in a simple way (#8351)

    Require 'waving = 3' in a nodedef to apply the liquid waving shader (#8418)

    

    Makes the liquid waving shader per-nodedef like waving leaves/plants,

    instead of being applied to all liquids.

    Like the waving leaves/plants shaders, the liquid waving shader can

    also be applied to meshes and nodeboxes.

    

    Derived from a PR by t0ny2.

    Makes the liquid waving shader per-nodedef like waving leaves/plants,

    instead of being applied to all liquids.

    Like the waving leaves/plants shaders, the liquid waving shader can

    also be applied to meshes and nodeboxes.

    

    Derived from a PR by t0ny2.

    instead of being applied to all liquids.

    Like the waving leaves/plants shaders, the liquid waving shader can

    also be applied to meshes and nodeboxes.

    

    Derived from a PR by t0ny2.

    Like the waving leaves/plants shaders, the liquid waving shader can

    also be applied to meshes and nodeboxes.

    

    Derived from a PR by t0ny2.

    also be applied to meshes and nodeboxes.

    

    Derived from a PR by t0ny2.

    Derived from a PR by t0ny2.

    Dungeons: Do not remove nodes that have 'is_ground_content = false' (#8423)

    

    Like randomwalk caves, preserve nodes that have 'is_ground_content = false',

    to avoid dungeons that generate out beyond the edge of a mapchunk destroying

    nodes added by mods in 'register_on_generated()'.

    

    Issue discovered by, and original PR by, argyle77.

    Like randomwalk caves, preserve nodes that have 'is_ground_content = false',

    to avoid dungeons that generate out beyond the edge of a mapchunk destroying

    nodes added by mods in 'register_on_generated()'.

    

    Issue discovered by, and original PR by, argyle77.

    to avoid dungeons that generate out beyond the edge of a mapchunk destroying

    nodes added by mods in 'register_on_generated()'.

    

    Issue discovered by, and original PR by, argyle77.

    nodes added by mods in 'register_on_generated()'.

    

    Issue discovered by, and original PR by, argyle77.

    Issue discovered by, and original PR by, argyle77.

    Prevent multi-line chat messages server-side (#8420)

    Document 'highly unstable' mapgens instead of 'stable' mapgens (#8404)

    Fix texture rotation for wallmounted nodeboxes

    

    fixes #8358

    fixes #8358

    httpfetch: Disable IPv6 here too if requested by settings (#8399)

    num_emerge_threads: Initialise value to cope with setting syntax error (#8396)

    num_emerge_threads: Fix documentation of automatic selection

    Add newline before itemstring in item tooltip (#8213)

    core.after: Improve assertion message (#8388)

    Builtin: Add vector.angle(). Returns the angle between 2 vectors (#7738)

    Lua_api.txt: Document blockpos, coordinate conversion, map terminology (#8376)

    

    Also fix and improve LVM 'calc_lighting()' warning.

    Also fix and improve LVM 'calc_lighting()' warning.

    num_emerge_threads: Warn of crashes when > 1 (#8357)

    LINT fixes since recent tooling update

    Update our tooling (Clang 5 -> 7, GCC 7 -> 8)

    

    This change permits to use up-to-date compilers, clang-tidy and

    clang-format

    

    It also refactor the tidy/format step to drop the binary selection from

    scripts and perform it directly in travis

    This change permits to use up-to-date compilers, clang-tidy and

    clang-format

    

    It also refactor the tidy/format step to drop the binary selection from

    scripts and perform it directly in travis

    clang-format

    

    It also refactor the tidy/format step to drop the binary selection from

    scripts and perform it directly in travis

    It also refactor the tidy/format step to drop the binary selection from

    scripts and perform it directly in travis

    scripts and perform it directly in travis

    Valleys mapgen code rewrite (#8101)

    

    Shorter, simpler, clearer and more consistent with other mapgens,

    while preserving functionality.

    Base terrain shape is unchanged.

    With the 'vary river depth' option disabled, river surface level

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    Shorter, simpler, clearer and more consistent with other mapgens,

    while preserving functionality.

    Base terrain shape is unchanged.

    With the 'vary river depth' option disabled, river surface level

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    while preserving functionality.

    Base terrain shape is unchanged.

    With the 'vary river depth' option disabled, river surface level

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    Base terrain shape is unchanged.

    With the 'vary river depth' option disabled, river surface level

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    With the 'vary river depth' option disabled, river surface level

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    is unchanged.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    Behaviour of the 4 heat/humidity/river depth options is very

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    slightly changed due to bugfixes and code cleanup (the mapgen is

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    'unstable').

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    Apply heat and humidity gradients above water_level instead of

    above y = 0.

    above y = 0.

    Drop GUIConfirmRegistration::m_address unused field

    Fix cast from const by accessing string data directly (#8354)

    

    Fixes #8327

    Fixes #8327

    HPChange Reason: Fix push after free, and type being overwritten (#8359)

    

    * HPChange Reason: Fix push after free, and type being overwritten

    

    Fixes #8227 and #8344

    * HPChange Reason: Fix push after free, and type being overwritten

    

    Fixes #8227 and #8344

    Fixes #8227 and #8344

    Fix serialization of std::time_t by casting to u64 first (#8353)

    

    Fixes #8332

    Fixes #8332

    Document the `float` special group (#8306)

    Display pitch angle in debug menu (#8321)

    Confirm registration GUI: Remove positional strings to fix Windows bug (#8258)

    

    Positional strings don't work on some Windows builds.

    Remove server address string, leave player name string present.

    Positional strings don't work on some Windows builds.

    Remove server address string, leave player name string present.

    Remove server address string, leave player name string present.

    Abort when trying to set a not registered node (#7011)

    

    I removed the MapNode constructor which takes a nodename and gives the node's id or CONTENT_IGNORE

    The code which used this constructor (two places) now handles the situation of not registered nodes correctly:

    * minetest.set_node and similar functions make minetest crash when a not registered node is passed

    * reverting a node with rollback aborts if the node is not registered

    I removed the MapNode constructor which takes a nodename and gives the node's id or CONTENT_IGNORE

    The code which used this constructor (two places) now handles the situation of not registered nodes correctly:

    * minetest.set_node and similar functions make minetest crash when a not registered node is passed

    * reverting a node with rollback aborts if the node is not registered

    The code which used this constructor (two places) now handles the situation of not registered nodes correctly:

    * minetest.set_node and similar functions make minetest crash when a not registered node is passed

    * reverting a node with rollback aborts if the node is not registered

    * minetest.set_node and similar functions make minetest crash when a not registered node is passed

    * reverting a node with rollback aborts if the node is not registered

    * reverting a node with rollback aborts if the node is not registered

    World config: Make depends easier to read (#7396)

    

    * Do not always show every depends textfieds

    

    When there are no dependencies, it does not longer show an empty list.

    

    * Adjust the list height to avoid a scrollbar when possible

    

    * change minimum height and no dependencies message

    

    * Do not get depends for modpacks

    * Do not always show every depends textfieds

    

    When there are no dependencies, it does not longer show an empty list.

    

    * Adjust the list height to avoid a scrollbar when possible

    

    * change minimum height and no dependencies message

    

    * Do not get depends for modpacks

    When there are no dependencies, it does not longer show an empty list.

    

    * Adjust the list height to avoid a scrollbar when possible

    

    * change minimum height and no dependencies message

    

    * Do not get depends for modpacks

    * Adjust the list height to avoid a scrollbar when possible

    

    * change minimum height and no dependencies message

    

    * Do not get depends for modpacks

    * change minimum height and no dependencies message

    

    * Do not get depends for modpacks

    * Do not get depends for modpacks

    Optimize string handling in path search (#8098)

    

    Use "append" method to construct the various game paths

    instead of wasteful string concatenation. Additionally, use a

    temporary to extract and reuse a result of a few common

    subexpressions to further reduce the overhead.

    Use "append" method to construct the various game paths

    instead of wasteful string concatenation. Additionally, use a

    temporary to extract and reuse a result of a few common

    subexpressions to further reduce the overhead.

    instead of wasteful string concatenation. Additionally, use a

    temporary to extract and reuse a result of a few common

    subexpressions to further reduce the overhead.

    temporary to extract and reuse a result of a few common

    subexpressions to further reduce the overhead.

    subexpressions to further reduce the overhead.

    Optimize interaction distance checker (#8193)

    

    The "what" parameter is being passed by value, most likely by

    accident as the type is "const std::string". Convert it to a

    reference by adding the missing "&".

    The "what" parameter is being passed by value, most likely by

    accident as the type is "const std::string". Convert it to a

    reference by adding the missing "&".

    accident as the type is "const std::string". Convert it to a

    reference by adding the missing "&".

    reference by adding the missing "&".

    Update a few dependency versions for buildbot (#8319)

    Fix detach inventory serialisation (#8331)

    Fix incorrect string length check after cast

    Fix clang tidy error due to incorrect use of quotes for character

    Change 'num_emerge_threads' default to 1 (#8303)

    Add math.factorial (#8298)

    Add Android keystore to the repository

    

    Password is not included :)

    Password is not included :)

    Add sounds for falling and attached nodes (#7719)

    

    * Add sounds for falling and attached nodes

    

    The sound specified in `node_definition.sounds.fall` is used.

    When a falling node is spawned at a position or an attached node drops, the sound is played at this position.

    

    * allow all sorts of soundspecs

    * Add sounds for falling and attached nodes

    

    The sound specified in `node_definition.sounds.fall` is used.

    When a falling node is spawned at a position or an attached node drops, the sound is played at this position.

    

    * allow all sorts of soundspecs

    The sound specified in `node_definition.sounds.fall` is used.

    When a falling node is spawned at a position or an attached node drops, the sound is played at this position.

    

    * allow all sorts of soundspecs

    When a falling node is spawned at a position or an attached node drops, the sound is played at this position.

    

    * allow all sorts of soundspecs

    * allow all sorts of soundspecs

    Fix --color command line parameter ignorance (#7173)

    

    * Fix color command line parameter ignorance

    

    * coloured log: Support detecting the tty on windows

    

    * Print an error message when setting something invalid as color mode instead of silently using mode never

    

    * Revert "coloured log: Support detecting the tty on windows"

    

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * Fix color command line parameter ignorance

    

    * coloured log: Support detecting the tty on windows

    

    * Print an error message when setting something invalid as color mode instead of silently using mode never

    

    * Revert "coloured log: Support detecting the tty on windows"

    

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * coloured log: Support detecting the tty on windows

    

    * Print an error message when setting something invalid as color mode instead of silently using mode never

    

    * Revert "coloured log: Support detecting the tty on windows"

    

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * Print an error message when setting something invalid as color mode instead of silently using mode never

    

    * Revert "coloured log: Support detecting the tty on windows"

    

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * Revert "coloured log: Support detecting the tty on windows"

    

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    This reverts commit 4c9fc6366487ac0e6799e181796ca594797bb6f8.

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    It didn't work for travis and belongs to a separate PR

    

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * Allow adjusting the log color with an environment variable

    

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    If --color is not passed to minetest,  is used to decide on the log colorization.

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    Minetest settings can not be used instead of an environment variable because logs may appear before loading them.

    

    * fix empty if body

    * fix empty if body

    Replace for loop with call to standard library function (#8194)

    

    This loop makes multiple passes over m_stack (type std::list) in order to remove all elements with a specified value. Replacing the loop with a call to std::list::remove does the same job, but in only one pass.

    This loop makes multiple passes over m_stack (type std::list) in order to remove all elements with a specified value. Replacing the loop with a call to std::list::remove does the same job, but in only one pass.

    Hide uninstall package button on unmodifiable paths (#8255)

    Add referer to remote media requests. (#8135)

    

    This sends the following header to a remote media server:

    

        Referer: minetest://<server_name>:port

    

    This was verified with CTF and the Minetest Public Remove Media

    server. If the servername was a plain IPv6 address it will

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

    This sends the following header to a remote media server:

    

        Referer: minetest://<server_name>:port

    

    This was verified with CTF and the Minetest Public Remove Media

    server. If the servername was a plain IPv6 address it will

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

        Referer: minetest://<server_name>:port

    

    This was verified with CTF and the Minetest Public Remove Media

    server. If the servername was a plain IPv6 address it will

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

    This was verified with CTF and the Minetest Public Remove Media

    server. If the servername was a plain IPv6 address it will

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

    server. If the servername was a plain IPv6 address it will

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

    contain `:` characters and will be encapsulated in `[]` to

    be a valid URI.

    be a valid URI.

    getS16NoEx() returns true unless syntactical error in conf. (#8304)

    

    The getS16NoEx() handler will return true unless there is a

    `[num_emerge_threads]` line in the `minetest.conf` at which

    point the excption handler part is reached. Due to the fact that

    `defaultsettings.cpp` has a default value set for this setting,

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    The getS16NoEx() handler will return true unless there is a

    `[num_emerge_threads]` line in the `minetest.conf` at which

    point the excption handler part is reached. Due to the fact that

    `defaultsettings.cpp` has a default value set for this setting,

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    `[num_emerge_threads]` line in the `minetest.conf` at which

    point the excption handler part is reached. Due to the fact that

    `defaultsettings.cpp` has a default value set for this setting,

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    point the excption handler part is reached. Due to the fact that

    `defaultsettings.cpp` has a default value set for this setting,

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    `defaultsettings.cpp` has a default value set for this setting,

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    that never will happen.

    

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    Because of this, the code will never check the number of threads on

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    the system, and keep `nthreads = 0`. If that happens, the value is

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    changed to `1` and only 1 emerge thread will be used.

    

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    The default should be set to `1` instead, due to the potential unsafe

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    consequences for the standard sqlite map files, but that should be a

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    separate commit that also adds documentation for that setting. This

    commit focuses on removing this `hiding` bug instead.

    commit focuses on removing this `hiding` bug instead.

    Continue with 5.1.0-dev

    Bump version to 5.0.0

    Bump android version code

    Don't include and link to gettext if gettext is not found (#8305)

    README: Remove references to Minecraft and InfiniMiner (#8260)

    Fix particle spawners not visible since CSM spawner implementation (#8289)

    

    * Drop the ID mapper, use a big u64 instead. This will permit to resync server ids properly with the manager code

    * Modernize some code parts (std::unordered_map, auto)

    * generate id on client part on U32_MAX + 1 ids, lower are for server ids

    * Drop the ID mapper, use a big u64 instead. This will permit to resync server ids properly with the manager code

    * Modernize some code parts (std::unordered_map, auto)

    * generate id on client part on U32_MAX + 1 ids, lower are for server ids

    * Modernize some code parts (std::unordered_map, auto)

    * generate id on client part on U32_MAX + 1 ids, lower are for server ids

    * generate id on client part on U32_MAX + 1 ids, lower are for server ids

    Revert "Revert CSM particles commit to fix particle spawner bug for 5.0.0 (#8288)"

    

    This reverts commit 01cd63bd3bca0192dab2834faf414b022706a77e.

    This reverts commit 01cd63bd3bca0192dab2834faf414b022706a77e.

    Fix build since translation updates

    Revert CSM particles commit to fix particle spawner bug for 5.0.0 (#8288)

    

    Reverts 5dab7426451842793b183fbd961ad2ae83c8acbd

    "[CSM] Add functions to create particles and particlespawners."

    Reverts 5dab7426451842793b183fbd961ad2ae83c8acbd

    "[CSM] Add functions to create particles and particlespawners."

    "[CSM] Add functions to create particles and particlespawners."

    Run updatepo.sh

    Update translations

    Update minetest.conf.example and settings_translation_file.cpp (#8278)

    Fix files with CRLF line endings in translations (#8280)

    Minimap: Fix radar restriction broken by 9649e47

    

    Server-side radar restriction is now possible again

    Thanks to @pgimeno for this nice catch.

    Server-side radar restriction is now possible again

    Thanks to @pgimeno for this nice catch.

    Thanks to @pgimeno for this nice catch.

    Settingtypes.txt: Remove 2 lines missed in a recent commit (#8277)

    Attend to LINT sillyness (#8276)

    Remove 's' from 'automatic forwards' (#8272)

    Content store: Ignore '_game' in game names in ID generation (#8270)

    

    Fixes 'install' button continuing to be displayed after installing a game whose

    name ends with '_game'.

    Fixes 'install' button continuing to be displayed after installing a game whose

    name ends with '_game'.

    name ends with '_game'.

    Update gamebar on tab enter (#8192)

    Fix games not updating on deletion

    

    As reported by @random-geek

    As reported by @random-geek

    Fix content store crash (#8244)

    lua_api.txt, settingtypes.txt: Various improvements (#8252)

    Update many things in Lua API docs (#8236)

    

    - minetest.get_hit_params

    - minetest.get_dig_params

    - table.indexof

    - Scope of minetest.register_alias

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - minetest.get_hit_params

    - minetest.get_dig_params

    - table.indexof

    - Scope of minetest.register_alias

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - minetest.get_dig_params

    - table.indexof

    - Scope of minetest.register_alias

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - table.indexof

    - Scope of minetest.register_alias

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - Scope of minetest.register_alias

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - Vector function parameters

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - More explanation of when `minetest.on_player_receive_fields` is called

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    - Syntax/semantics of the fields in `minetest.on_player_receive_fields`

    lua_api.txt: Various additions and improvements (#8245)

    Fix profiler crash by builtin since eea1fda (#8239)

    

    Default to '??' (common Minetest notation) for unknown mods.

    Default to '??' (common Minetest notation) for unknown mods.

    Update credits (#8162)

    Revert RTT fixes (#8187)

    

    The reverted commit 968ce9af598024ec71e9ffb2d15c3997a13ad754

    is suspected (through the use of bisection) of causing network slowdowns.

    Revert for now as we are close to release.

    The reverted commit 968ce9af598024ec71e9ffb2d15c3997a13ad754

    is suspected (through the use of bisection) of causing network slowdowns.

    Revert for now as we are close to release.

    is suspected (through the use of bisection) of causing network slowdowns.

    Revert for now as we are close to release.

    Revert for now as we are close to release.

    Fix coloured fog in main menu (#8181)

    

    Fixes #4727. The issue was due to the video driver fog colour never getting reset after closing the game.

    Fixes #4727. The issue was due to the video driver fog colour never getting reset after closing the game.

    LINT fix

    Don't regain breath while in ignore node (#8218)

    

    * Don't regain breath while in ignore node

    

    Fixes #8217

    * Don't regain breath while in ignore node

    

    Fixes #8217

    Fixes #8217

     Update minetest.conf.example, settings strings and locale files (#8230)

    Fix extract zip writing lowercase files (#8221)

    Run updatepo.sh

    Update translations

    Statbars: Reduce initial update interval

    

    Centralize HUD updating in update_builtin_statbars.

    Fixes race condition in 'on joinplayer' that causes stat bar bugs.

    Correctly scales stat bars to custom max values set by mods.

    Centralize HUD updating in update_builtin_statbars.

    Fixes race condition in 'on joinplayer' that causes stat bar bugs.

    Correctly scales stat bars to custom max values set by mods.

    Fixes race condition in 'on joinplayer' that causes stat bar bugs.

    Correctly scales stat bars to custom max values set by mods.

    Correctly scales stat bars to custom max values set by mods.

    Consistent HP and damage types (#8167)

    

    Remove deprecated HUDs and chat message handling.

    Remove unused m_damage variable (compat break).

    HP: s32 for setter/calculations, u16 for getter.

    Remove deprecated HUDs and chat message handling.

    Remove unused m_damage variable (compat break).

    HP: s32 for setter/calculations, u16 for getter.

    Remove unused m_damage variable (compat break).

    HP: s32 for setter/calculations, u16 for getter.

    HP: s32 for setter/calculations, u16 for getter.

    Slippery: Do not apply when swimming (#8198)

    Builtin: Fix grayed-out but enabled modpacks

    Autojump: Disable in fly mode, support continuous forward (#8200)

    

    Correctly disable in fly mode (issue #8199)

    Also autojump in continuous forward mode (issue #8201)

    Correctly disable in fly mode (issue #8199)

    Also autojump in continuous forward mode (issue #8201)

    Also autojump in continuous forward mode (issue #8201)

    Remove fgettext("") in builtin

    

    This call is useless and wrong, the empty string has a special meaning in Gettext.

    This call is useless and wrong, the empty string has a special meaning in Gettext.

    Fix Address::isLocalhost algorithm

    Disable confirmation dialog on localhost

    numeric: Fix clang, broken since d5456da

    Don't append itemname to itemname in tooltip (#8176)

    Use true pitch/yaw/roll rotations without loss of precision by pgimeno (#8019)

    

    Store the rotation in the node as a 4x4 transformation matrix internally (through IDummyTransformationSceneNode), which allows more manipulations without losing precision or having gimbal lock issues.

    

    Network rotation is still transmitted as Eulers, though, not as matrix. But it will stay this way in 5.0.

    Store the rotation in the node as a 4x4 transformation matrix internally (through IDummyTransformationSceneNode), which allows more manipulations without losing precision or having gimbal lock issues.

    

    Network rotation is still transmitted as Eulers, though, not as matrix. But it will stay this way in 5.0.

    Network rotation is still transmitted as Eulers, though, not as matrix. But it will stay this way in 5.0.

    Fix cloud color in loading screen and main menu (#8174)

    Update color of main menu clouds (#8172)

    Update manpage (#8169)

    Content store: Fix assertion failed on unsuccessful package list fetch

    

    Fixes #8168

    Fixes #8168

    Rename 'Content Store' to 'Online Content Repository' in Advanced Settings

    Add setting to hide mature content from ContentDB

    Fix core.download_file() creating empty files on HTTP error

    Fix rename modpack dialog not appearing to take affect

    Fix modpack rename dialog selecting the wrong mod

    DragonFly BSD is somewhat identical to FreeBSD (#8159)

    Force player save before kicking on player shutdown (#8157)

    Protocol Docs: Python check bump to Python 3

    Content store: Fix overlapping labels

    Update translations

    Move missing translations warnings to verbosestream (#8156)

    

    They should not spam the console and logs.

    They should not spam the console and logs.

    Settings: Slightly increase block generate, block send, object send distances (#8147)

    Content store: Fix storage leak by storing screenshots in cache (#8137)

    Content store: Use composite key to track installations (#8054)

    

    Fixes #7967 'Package manager doesn't track content reliably'.

    Fixes #7967 'Package manager doesn't track content reliably'.

    Cleanup translation files

    

    These were broken on the previous commits

    These were broken on the previous commits

    Fix wrong it minetest.po file

    Run updatepo.sh

    Update translations

    Add setting to disable confirmation on new player registration (#8102)

    Rename 'Advanced Settings' button to 'All Settings' (#8131)

    Fix pkgmgr game install with RUN_IN_PLACE=0 (#8113)

    blitToVManip: Check out-of-bounds using node position not index (#8127)

    

    Previously, when using 'place on vmanip' to add a schematic to a

    lua voxelmanip, if part of the schematic was outside the voxelmanip

    volume, the outside part would often appear in a strange place

    elsewhere inside the voxelmanip instead of being trimmed off.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    Previously, when using 'place on vmanip' to add a schematic to a

    lua voxelmanip, if part of the schematic was outside the voxelmanip

    volume, the outside part would often appear in a strange place

    elsewhere inside the voxelmanip instead of being trimmed off.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    lua voxelmanip, if part of the schematic was outside the voxelmanip

    volume, the outside part would often appear in a strange place

    elsewhere inside the voxelmanip instead of being trimmed off.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    volume, the outside part would often appear in a strange place

    elsewhere inside the voxelmanip instead of being trimmed off.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    elsewhere inside the voxelmanip instead of being trimmed off.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    This was due to the out-of-bounds check checking the index.

    

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    A position outside the voxelmanip can have an index that satisfies

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    '0 <= index <= voxelmanip volume', causing the node to be placed

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    at a strange position inside the voxelmanip.

    

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    Use 'vm->m_area.contains(pos)' instead.

    Move index calculation to later in the code to optimise.

    Move index calculation to later in the code to optimise.

    Fix warnings about dungeongen.cpp memcpy() and unused variable in MapBlock::deSerializeNetworkSpecific() (#8122)

    

    * Fix warning about dungeongen.cpp memcpy()

    

    * Fix unused variable in MapBlock::deSerializeNetworkSpecific()

    

    * Fix unused variable a simpler way

    * Fix warning about dungeongen.cpp memcpy()

    

    * Fix unused variable in MapBlock::deSerializeNetworkSpecific()

    

    * Fix unused variable a simpler way

    * Fix unused variable in MapBlock::deSerializeNetworkSpecific()

    

    * Fix unused variable a simpler way

    * Fix unused variable a simpler way

    Fix randomly rejected form field submits (#8091)

    

    If a formspec is submitted from a form fields handling

    callback of another form (or "formspec shown from another

    formspec"), the fields submitted for it can get

    rejected by the form exploit mitigation subsystem with a

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    If a formspec is submitted from a form fields handling

    callback of another form (or "formspec shown from another

    formspec"), the fields submitted for it can get

    rejected by the form exploit mitigation subsystem with a

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    callback of another form (or "formspec shown from another

    formspec"), the fields submitted for it can get

    rejected by the form exploit mitigation subsystem with a

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    formspec"), the fields submitted for it can get

    rejected by the form exploit mitigation subsystem with a

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    rejected by the form exploit mitigation subsystem with a

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    message like "'zorman2000' submitted formspec

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    ('formspec_error:form2') but server hasn't sent formspec to

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    client, possible exploitation attempt" being sent to logs.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    This was already reported as #7374 and a change was made

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    that fixed the simple testcase included with that bug

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    report but the bug still kept lurking around and popping

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    out in more complicated scenarios like the advtrains TSS

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    route programming UI.

    

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    Deep investigation of the problem revealed that this

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    sequence of events is entirely possible and leads to the

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    bug:

    

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      1. Server: show form1

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      2. Client *shows form1*

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      3. Client: submits form1

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      4. Server: show form2

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      5. Client: says form1 closed

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      6. Client *shows form2*

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

      7. Client: submits form2

    

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    What happens inside the code is that when the server in

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    step 4 sends form2, the registry of opened forms is

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    updated to reflect the fact that form2 is now the valid

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    form for the client to submit. Then when in step 5 client

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    says "form1 was closed", the exploit mitigation subsystem

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    code deletes the registry entry for the client without

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    bothering to check whether the form client says was

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    closed just now is indeed the form that is recorded in

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    that entry as the valid form. Then later, in step 7 the

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    client tries to submit its valid form fields, these will

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    be rejected because the entry is missing.

    

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    It turns out the procedure where the broken code resides

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    already gets the form name so a simple "if" around the

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    offending piece of code fixes the whole thing. And

    advtrains TSS agrees with that.

    advtrains TSS agrees with that.

    Make advanced settings noiseparams strings translatable (#8062)

    

    Various minor language improvements in settingtypes.txt.

    Various minor language improvements in settingtypes.txt.

    Advanced settings noiseparams: No tailing comma for empty flags

    

    Previously, when editing noiseparams and disabling all the noise

    flags, the noiseparam is displyed in advanced settings with a

    tailing comma.

    Previously, when editing noiseparams and disabling all the noise

    flags, the noiseparam is displyed in advanced settings with a

    tailing comma.

    flags, the noiseparam is displyed in advanced settings with a

    tailing comma.

    tailing comma.

    Advanced settings noiseparams: Remove '}' left in .conf

    

    Previously, when editing noiseparams then restoring them to the default,

    the final '}' was not removed from minetest.conf.

    Previously, when editing noiseparams then restoring them to the default,

    the final '}' was not removed from minetest.conf.

    the final '}' was not removed from minetest.conf.

    Remove incorrect feature flag (#8086)

    

    And document the versions that introduced the features.

    And document the versions that introduced the features.

    Optimize subgames search a little bit (#8096)

    

    Reserve space for the list of games in findWorldSubgame. The

    performance gain is pretty much negligible but this change

    also gets rid of a performance warning by CLANG TIDY.

    Reserve space for the list of games in findWorldSubgame. The

    performance gain is pretty much negligible but this change

    also gets rid of a performance warning by CLANG TIDY.

    performance gain is pretty much negligible but this change

    also gets rid of a performance warning by CLANG TIDY.

    also gets rid of a performance warning by CLANG TIDY.

    Fix some misspellings (#8104)

    world.mt: Only accept true/false/nil values (#8055)

    

    This patch will make distinguishable mods in modpacks possible in the future

    `nil` checks are required to provide backwards-compatibility for fresh configured worlds

    This patch will make distinguishable mods in modpacks possible in the future

    `nil` checks are required to provide backwards-compatibility for fresh configured worlds

    `nil` checks are required to provide backwards-compatibility for fresh configured worlds

    Speed up the craft definition handling (#8097)

    

    The craft definition handling code that collects the names of

    the craftable nodes suffers from vector reallocation

    performance hits, slowing down instances with lots of

    crafting recipes (VanessaE's DreamBuilder and most public

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    The craft definition handling code that collects the names of

    the craftable nodes suffers from vector reallocation

    performance hits, slowing down instances with lots of

    crafting recipes (VanessaE's DreamBuilder and most public

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    the craftable nodes suffers from vector reallocation

    performance hits, slowing down instances with lots of

    crafting recipes (VanessaE's DreamBuilder and most public

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    performance hits, slowing down instances with lots of

    crafting recipes (VanessaE's DreamBuilder and most public

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    crafting recipes (VanessaE's DreamBuilder and most public

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    server some to my mind when thinking about this). As in each

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    instance the size of the resulting vector is already known,

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    add a reserve() call before the offending loops to allocate

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    the needed chunk of memory within the result vector in one

    go, getting rid of the overhead.

    go, getting rid of the overhead.

    Optimize path finalization in pathfinder (#8100)

    

    The pathfinder needs quite a bunch of items to add to the

    resulting list. It turns out the amount of the space needed

    for the finalized path is known in advance so preallocate it

    to avoid a burst of reallocation calls each time something

    needs to look for a path.

    The pathfinder needs quite a bunch of items to add to the

    resulting list. It turns out the amount of the space needed

    for the finalized path is known in advance so preallocate it

    to avoid a burst of reallocation calls each time something

    needs to look for a path.

    resulting list. It turns out the amount of the space needed

    for the finalized path is known in advance so preallocate it

    to avoid a burst of reallocation calls each time something

    needs to look for a path.

    for the finalized path is known in advance so preallocate it

    to avoid a burst of reallocation calls each time something

    needs to look for a path.

    to avoid a burst of reallocation calls each time something

    needs to look for a path.

    needs to look for a path.

    Fix fake LINT check success (#8092)

    

    The code 'if [ -z ${something} ]; then ... fi' means "if

    ${something} is an empty string, yell at the command line

    about 'binary operator expected' and ignore the body of the

    if statement, if ${something} is not an empty string,

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    The code 'if [ -z ${something} ]; then ... fi' means "if

    ${something} is an empty string, yell at the command line

    about 'binary operator expected' and ignore the body of the

    if statement, if ${something} is not an empty string,

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    ${something} is an empty string, yell at the command line

    about 'binary operator expected' and ignore the body of the

    if statement, if ${something} is not an empty string,

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    about 'binary operator expected' and ignore the body of the

    if statement, if ${something} is not an empty string,

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    if statement, if ${something} is not an empty string,

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    the condition is false so ignore the body of the if

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    statement" which clearly isn't what the author wanted. Fix

    it by adding a few quotes around the offending ${something}.

    it by adding a few quotes around the offending ${something}.

    Make sqlite3 the default auth backend (#8085)

    Import strstr function from FreeBSD 11 libc

    Android build fixes

    

    This fixes #8079

    This fixes #8079

    pkgmgr: Fix games list not being updated after game install

    

    Fixes #8074

    Fixes #8074

    Settingtypes.txt: Rewrite documentation of 'num_emerge_threads' (#8066)

    Fix a crash on Android with Align2Npot2 (#8070)

    

    * Fix a crash on Android with Align2Npot2

    

    glGetString can be NULL. If stored in a string it triggers a SIGSEGV.

    Instead do a basic strstr and verify the pointer

    * Better Align2Npot2 check (+ performance)

    * Fix a crash on Android with Align2Npot2

    

    glGetString can be NULL. If stored in a string it triggers a SIGSEGV.

    Instead do a basic strstr and verify the pointer

    * Better Align2Npot2 check (+ performance)

    glGetString can be NULL. If stored in a string it triggers a SIGSEGV.

    Instead do a basic strstr and verify the pointer

    * Better Align2Npot2 check (+ performance)

    Instead do a basic strstr and verify the pointer

    * Better Align2Npot2 check (+ performance)

    * Better Align2Npot2 check (+ performance)

    Fix wrong code comment (#8061)

    

    "Get core.registered_on_chat_messages" to "Get core.registered_on_player_receive_fields" where `core.registered_on_player_receive_fields` is gotten

    "Get core.registered_on_chat_messages" to "Get core.registered_on_player_receive_fields" where `core.registered_on_player_receive_fields` is gotten

    Content store: Disable more details dialog for now (#8060)

    

    * Content store: Disable more details dialog for now

    * Content store: Disable more details dialog for now

    Content store: Fix update button not working

    Fix various bugs (Anticheat, Lua helpers) (#8013)

    

    * Fix various bugs (Anticheat, Lua helpers)

    

    Anticheat: Use camera position instead of player position for shoot line calculations

    Lua helpers: Increase 'i' to not overwrite earlier added table values

    

    * Remove lag compensation

    

    * * 1.5 for larger selection boxes

    * Fix various bugs (Anticheat, Lua helpers)

    

    Anticheat: Use camera position instead of player position for shoot line calculations

    Lua helpers: Increase 'i' to not overwrite earlier added table values

    

    * Remove lag compensation

    

    * * 1.5 for larger selection boxes

    Anticheat: Use camera position instead of player position for shoot line calculations

    Lua helpers: Increase 'i' to not overwrite earlier added table values

    

    * Remove lag compensation

    

    * * 1.5 for larger selection boxes

    Lua helpers: Increase 'i' to not overwrite earlier added table values

    

    * Remove lag compensation

    

    * * 1.5 for larger selection boxes

    * Remove lag compensation

    

    * * 1.5 for larger selection boxes

    * * 1.5 for larger selection boxes

    Deprecate modpack.txt and use modpack.conf instead (#7892)

    

    * Deprecate modpack.txt and use modpack.conf instead

    * Deprecate modpack.txt and use modpack.conf instead

    Run updatepo.sh

    Update translations from Weblate

    Drop libgmp on Android and use mini-gmp (#8047)

    Bump android version code for next Play Store version

    Make sqlite3 default auth & player backends for new worlds (#8043)

    

    * Make sqlite3 default auth & player backends for new worlds

    

    Also notify about auth backend depreciation

    * Make sqlite3 default auth & player backends for new worlds

    

    Also notify about auth backend depreciation

    Also notify about auth backend depreciation

    Fix on_successful_save -> onSuccessfulSave

    Fix various player save issues (performance penalty on sql backends + bugs)

    

    * PostgreSQL & SQLite3 doesn't setModified(false) on RemotePlayer, then player is saved on each server save call. This results in heavy useless writes.

    * PostgreSQL & SQLite3 ack engine meta write whereas db commit hasn't been performed. If commit failed write has failed. We mustn't notify engine write is done.

    * serializing player meta must not setModified(false) because it didn't ensure write has been done

    * add RemotePlayer::on_successfull_save callback to do the flag update on a successful save

    * PostgreSQL & SQLite3 doesn't setModified(false) on RemotePlayer, then player is saved on each server save call. This results in heavy useless writes.

    * PostgreSQL & SQLite3 ack engine meta write whereas db commit hasn't been performed. If commit failed write has failed. We mustn't notify engine write is done.

    * serializing player meta must not setModified(false) because it didn't ensure write has been done

    * add RemotePlayer::on_successfull_save callback to do the flag update on a successful save

    * PostgreSQL & SQLite3 ack engine meta write whereas db commit hasn't been performed. If commit failed write has failed. We mustn't notify engine write is done.

    * serializing player meta must not setModified(false) because it didn't ensure write has been done

    * add RemotePlayer::on_successfull_save callback to do the flag update on a successful save

    * serializing player meta must not setModified(false) because it didn't ensure write has been done

    * add RemotePlayer::on_successfull_save callback to do the flag update on a successful save

    * add RemotePlayer::on_successfull_save callback to do the flag update on a successful save

    Player file directory must be only created when using file backend.

    

    Also ensure on each player save that the directory exists

    Also ensure on each player save that the directory exists

    Remove remote media compatibility mode. (#8044)

    

    The fallback code shouldn't be needed and is a remnant of the GET

    method that old media servers use. Clients using it are likely

    to just waste bandwidth and having to download the media again

    through the normal transfer from server method. The most reliable

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    The fallback code shouldn't be needed and is a remnant of the GET

    method that old media servers use. Clients using it are likely

    to just waste bandwidth and having to download the media again

    through the normal transfer from server method. The most reliable

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    method that old media servers use. Clients using it are likely

    to just waste bandwidth and having to download the media again

    through the normal transfer from server method. The most reliable

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    to just waste bandwidth and having to download the media again

    through the normal transfer from server method. The most reliable

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    through the normal transfer from server method. The most reliable

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    method is to get all missing textures therefore from the server

    directly and not spam the remote media server with 404s.

    directly and not spam the remote media server with 404s.

    Proselytize the network. Use IEEE F32 (#8030)

    

    * Proselytize the network. Use IEEE F32

    * Remove unused V2F1000 functions

    * Proselytize the network. Use IEEE F32

    * Remove unused V2F1000 functions

    * Remove unused V2F1000 functions

    CSM restrictions: Make 'LOAD_CLIENT_MODS' disable loading of 'builtin' (#8000)

    

    Previously, when the CSM restriction 'LOAD_CLIENT_MODS' was used a

    client was still able to add CSM code to 'builtin' to bypass that

    restriction, because 'builtin' is not yet verified.

    

    Until server-sent CSM and verifying of 'builtin' are complete, make

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    Previously, when the CSM restriction 'LOAD_CLIENT_MODS' was used a

    client was still able to add CSM code to 'builtin' to bypass that

    restriction, because 'builtin' is not yet verified.

    

    Until server-sent CSM and verifying of 'builtin' are complete, make

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    client was still able to add CSM code to 'builtin' to bypass that

    restriction, because 'builtin' is not yet verified.

    

    Until server-sent CSM and verifying of 'builtin' are complete, make

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    restriction, because 'builtin' is not yet verified.

    

    Until server-sent CSM and verifying of 'builtin' are complete, make

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    Until server-sent CSM and verifying of 'builtin' are complete, make

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    'LOAD_CLIENT_MODS' disable the loading of builtin.

    

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    Clarify code comments and messages to distinguish between client-side

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    modding and client-side scripting. 'Scripting' includes 'builtin',

    'modding' does not.

    'modding' does not.

    autojump setting: Remove repeated doc line (#8041)

    Add minetest.load_area (#8023)

    Extend pitch fly mode to swimming (#7943)

    Fix installed modpacks not being found correctly

    Update README.android with current build info (#8026)

    Content store: Fix bugs relating to packages list size

    CSM: add requested CSM_RF_READ_PLAYERINFO (#8007)

    

    * CSM: add requested CSM_RF_READ_PLAYERINFO

    

    This new CSM limit permit to limit PLAYERINFO read from server.

    

    It affects get_player_names call

    * CSM: add requested CSM_RF_READ_PLAYERINFO

    

    This new CSM limit permit to limit PLAYERINFO read from server.

    

    It affects get_player_names call

    This new CSM limit permit to limit PLAYERINFO read from server.

    

    It affects get_player_names call

    It affects get_player_names call

    Remove 'Reset singleplayer world' button from full menu on Android (#8017)

    

    Make button appearence dependent on menustyle not platform.

    Button only functions with simple menu.

    Make button appearence dependent on menustyle not platform.

    Button only functions with simple menu.

    Button only functions with simple menu.

    Fix entity rotation in existing worlds (#7989)

    Android: Fix start-up crashes on version 4.x (#8003)

    

    * Android: Load shared STL library

    

    * Android: Fix exception with window background image

    * Android: Load shared STL library

    

    * Android: Fix exception with window background image

    * Android: Fix exception with window background image

    mapnode: add const/noexcept (#8009)

    Android: Fix memory leak when displaying images in the mainmenu (#8011)

    Lua_api.txt: Add documentation of missing field to 'on_punch' (#8008)

    reportMetadataChange; Silence clang warnings

    Fix more transparency issues with ogles2 driver (#8005)

    Android: Move touchscreen rare controls inline with settings icon (#8006)

    Add command line option to load password from file (#7832)

    ieee_float: Silence compiler warning

    

    Trivial issue reported by @pgimeno

    Trivial issue reported by @pgimeno

    Fix the part of the float test that requires IEC559/IEEE754 compliance

    

    GCC and CLang compilers fail to support full IEC559 compliance required for the test, when certain compiler flags are active. This patch implements a heuristic that checks for the most common flag in GCC and CLang, plues an extra check which GCC disables when it's not compliant, to hopefully catch most cases where it can't run.

    GCC and CLang compilers fail to support full IEC559 compliance required for the test, when certain compiler flags are active. This patch implements a heuristic that checks for the most common flag in GCC and CLang, plues an extra check which GCC disables when it's not compliant, to hopefully catch most cases where it can't run.

    Lua_api.txt: Document inventory sending behaviour (#7720)

    Fix C++11 violation that broke clang on Debian Stretch

    Add a basic kubernetes deployment file (#7979)

    

    * Add a basic kubernetes deployment file

    * Add a basic kubernetes deployment file

    Fix ignored mod.conf mod name for world.mt (broken by e8eaab6)

    

    Patch supplied by @pgimeno. Thank you.

    Patch supplied by @pgimeno. Thank you.

    Android: Add activeobjectmgr.cpp and ieee_float.cpp, sort list

    Add docker image documentation (#7969)

    

    * Add docker image documentation

    * Update README.md

    * Add docker image documentation

    * Update README.md

    * Update README.md

    Add an activeobject manager to hold active objects (#7939)

    

    * Add an activeobject manager to hold active objects

    * Add unittests

    * Add an activeobject manager to hold active objects

    * Add unittests

    * Add unittests

    Network: Send IEEE floats (#7768)

    Make showOverlayMessage strings translatable (#7964)

    (client_)lua_api.txt: Rename func -> function (#7960)

    Gitlab CI: docker image rename + add commit id tag

    Make MapNode handle paramtype2≠leveled properly (#7958)

    Add a Dockerfile + gitlab CI build (#7968)

    

    * Add a minetest docker file

    * Clone minetest_game from git directly

    * Add a minetest docker file

    * Clone minetest_game from git directly

    * Clone minetest_game from git directly

    lua_api.txt: Various fixes and improvements (#7945)

    

    * Add missing tables of registered things

    

    * Eliminate some duplication

    

    Registration functions in 'Registered definitions' section merged into

    'Registration functions' section.

    

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Add missing tables of registered things

    

    * Eliminate some duplication

    

    Registration functions in 'Registered definitions' section merged into

    'Registration functions' section.

    

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Eliminate some duplication

    

    Registration functions in 'Registered definitions' section merged into

    'Registration functions' section.

    

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    Registration functions in 'Registered definitions' section merged into

    'Registration functions' section.

    

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    'Registration functions' section.

    

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Misc. fixes

    

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Add privilege definition table

    

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Remove not-special soil group from special groups

    

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Merge two registration functions sections

    

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Move 'added to' information to tables section

    

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    Also fix some capitalization and missing periods

    

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Minor fixes

    

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    * Split Registration functions into two subsections

    

    And update Registered definition tables to match order

    

    * Fixes

    And update Registered definition tables to match order

    

    * Fixes

    * Fixes

    porting.cpp: better minetest support on BSD

    

    BSD folder detection is pretty raw, just use the same detection as Linux

    BSD folder detection is pretty raw, just use the same detection as Linux

    Fix ContentDB packages timing out by using download_file instead (#7891)

    Add object visual type 'item' (#7870)

    Content store: Fix missing screenshot in package view dialog

    Fix wrong parameter order for inventory callbacks (#7952)

    Fix dissector script to work with newer versions of Wireshark (#7957)

    Add eat sound (#7956)

    Update minetest.conf.example and run updatepo.sh (#7947)

    Fix crash if display resolution is not set (#7950)

    

    On my wayland / gnome3 setup DisplayHeightMM() returns 0. This resulted in a

    misleading startup error suggesting to fix my font paths.

    On my wayland / gnome3 setup DisplayHeightMM() returns 0. This resulted in a

    misleading startup error suggesting to fix my font paths.

    misleading startup error suggesting to fix my font paths.

    Main menu style: Set to 'full' for Android, remove 'auto' option (#7936)

    Disable game bar and header on Android (#7940)

    Draw all horizons and sky base, in front of stars (#7932)

    

    Move star draw to before sun glow texture draw and before sun draw,

    not currently essential but the logical order. Will be necessary if

    a 'no far ground' option is added, to draw stars behind the sun.

    Move star draw to before sun glow texture draw and before sun draw,

    not currently essential but the logical order. Will be necessary if

    a 'no far ground' option is added, to draw stars behind the sun.

    not currently essential but the logical order. Will be necessary if

    a 'no far ground' option is added, to draw stars behind the sun.

    a 'no far ground' option is added, to draw stars behind the sun.

    Gradle now copy most of assets

    It depends on cleanAssets, ensuring they are always fresh

    It depends on cleanAssets, ensuring they are always fresh

    Fix player rotations (#7941)

    Declare mapgens v5 and flat stable. Add missing carpathian (#7942)

    Send only changed node metadata to clients instead of whole mapblock (#5268)

    

    Includes newer style changes and fixes by est31

    

    Improve the block position de-serialization

    Add type NodeMetadataMap

    Includes newer style changes and fixes by est31

    

    Improve the block position de-serialization

    Add type NodeMetadataMap

    Improve the block position de-serialization

    Add type NodeMetadataMap

    Add type NodeMetadataMap

    Update android version code (rebuild)

    Revert "Fix another GCC warning"

    

    This reverts commit e6811184d5824bf7d8febc157495dbecd3e4e0f7.

    This reverts commit e6811184d5824bf7d8febc157495dbecd3e4e0f7.

    Add testWrapDegrees_0_360_v3f unittests

    Fix another GCC warning

    

    ```

    [ 10%] Building CXX object src/CMakeFiles/minetest.dir/client/render/interlaced.cpp.o

    cc1plus: warning: -Wabi won't warn about anything [-Wabi]

    cc1plus: note: -Wabi warns about differences from the most up-to-date ABI, which is also used by default

    cc1plus: note: use e.g. -Wabi=11 to warn about changes from GCC 7

    ```

    [ 10%] Building CXX object src/CMakeFiles/minetest.dir/client/render/interlaced.cpp.o

    cc1plus: warning: -Wabi won't warn about anything [-Wabi]

    cc1plus: note: -Wabi warns about differences from the most up-to-date ABI, which is also used by default

    cc1plus: note: use e.g. -Wabi=11 to warn about changes from GCC 7

    ```

    cc1plus: warning: -Wabi won't warn about anything [-Wabi]

    cc1plus: note: -Wabi warns about differences from the most up-to-date ABI, which is also used by default

    cc1plus: note: use e.g. -Wabi=11 to warn about changes from GCC 7

    ```

    cc1plus: note: -Wabi warns about differences from the most up-to-date ABI, which is also used by default

    cc1plus: note: use e.g. -Wabi=11 to warn about changes from GCC 7

    ```

    cc1plus: note: use e.g. -Wabi=11 to warn about changes from GCC 7

    ```

    Fix a stringop-truncation GCC warning

    

    ```

    minetest/src/filesys.cpp:312:10: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound 10000 equals destination size [-Wstringop-truncation]

       strncpy(argv_data[2], path.c_str(), 10000);

    ```

    minetest/src/filesys.cpp:312:10: warning: ‘char* strncpy(char*, const char*, size_t)’ specified bound 10000 equals destination size [-Wstringop-truncation]

       strncpy(argv_data[2], path.c_str(), 10000);

    ```

       strncpy(argv_data[2], path.c_str(), 10000);

    ```

    Fix uninitialized variable peer_id

    

    Reported by GCC

    

    ```

    minetest/src/server.cpp:996:42: warning: ‘peer_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]

       errorstream << "ProcessData: peer=" << peer_id << e.what() << std::endl;

    ```

    Reported by GCC

    

    ```

    minetest/src/server.cpp:996:42: warning: ‘peer_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]

       errorstream << "ProcessData: peer=" << peer_id << e.what() << std::endl;

    ```

    minetest/src/server.cpp:996:42: warning: ‘peer_id’ may be used uninitialized in this function [-Wmaybe-uninitialized]

       errorstream << "ProcessData: peer=" << peer_id << e.what() << std::endl;

    ```

       errorstream << "ProcessData: peer=" << peer_id << e.what() << std::endl;

    ```

    Mirror 'sunrisebg' texture to fix chopped right edge (#7935)

    Re-master and improve touchscreen gui icons (#7931)

    

    Increase the resolution of the smaller icons to look better on modern HD screens.

    All master SVGs included in the the Android build directory.

    Increase the resolution of the smaller icons to look better on modern HD screens.

    All master SVGs included in the the Android build directory.

    All master SVGs included in the the Android build directory.

    Fix Android build errors (caused by 5f1cd55)

    

    After commit 5f1cd55 touchscreengui.* files were pointing to old file locations

    After commit 5f1cd55 touchscreengui.* files were pointing to old file locations

    README: Add linking table of contents (#7601)

    Improve world configure menu (#7922)

    

    Replace `Subgame mods` with <game name> mods.

    Display game description on left instead of dependencies.

    Fix double DIR_DELIM in some paths.

    Replace `Subgame mods` with <game name> mods.

    Display game description on left instead of dependencies.

    Fix double DIR_DELIM in some paths.

    Display game description on left instead of dependencies.

    Fix double DIR_DELIM in some paths.

    Fix double DIR_DELIM in some paths.

    Update Android java code (#7820)

    

    Targets SDK 26 as required by the playstore.

    Fixes screen auto-rotation closing game.

    Hides on-screen navigation bar if present.

    

    Update gradlew.

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Targets SDK 26 as required by the playstore.

    Fixes screen auto-rotation closing game.

    Hides on-screen navigation bar if present.

    

    Update gradlew.

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Fixes screen auto-rotation closing game.

    Hides on-screen navigation bar if present.

    

    Update gradlew.

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Hides on-screen navigation bar if present.

    

    Update gradlew.

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Update gradlew.

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Fix display aspect on 18+/:9 displays (like a Samsung Galaxy S9).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Remove small app icons, not required.

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Fix xml in unpacking activity.

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Support Android permission: On Android 6.0+ you need to manually give write

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    permission (as required by google).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Background during unpacking (just a demo for now).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Material Design: no more Android 2 interface.

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Immersive mode (Android 4.4+ - hide NavBar for fullscreen mode).

    Raise hotbar limit to 32 slots, add associated keybinding options (#7916)

    

    add associated keybinding options

    update docs and settingtypes

    add associated keybinding options

    update docs and settingtypes

    update docs and settingtypes

    Document which formspec fields are sent (#7717)

    Remove unused settings (#7929)

    Fix spelling of setting descriptions (#7829)

    Draw stars behind the moon (#7928)

    

    This time correctly, by resetting the 'material' to '1' after moon draw.

    This time correctly, by resetting the 'material' to '1' after moon draw.

    Slightly alter star appearence time and full brightness time (#7921)

    

    At sunset:

    Stars first appear slightly later, at the time the sun disappears over the horizon,

    this fixes seeing dark stars in front of the sun horizon glow texture.

    Stars reach full brightness slightly earlier at time 20000, not so excessively long

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    At sunset:

    Stars first appear slightly later, at the time the sun disappears over the horizon,

    this fixes seeing dark stars in front of the sun horizon glow texture.

    Stars reach full brightness slightly earlier at time 20000, not so excessively long

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    Stars first appear slightly later, at the time the sun disappears over the horizon,

    this fixes seeing dark stars in front of the sun horizon glow texture.

    Stars reach full brightness slightly earlier at time 20000, not so excessively long

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    this fixes seeing dark stars in front of the sun horizon glow texture.

    Stars reach full brightness slightly earlier at time 20000, not so excessively long

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    Stars reach full brightness slightly earlier at time 20000, not so excessively long

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    after sunset.

    

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    The above behaviour is also applied at sunrise, but of course, time-inverted.

    Added pitch fly mode (#7817)

    

    In pitch fly mode, you fly to the exact direction you are pointing at, using the forward key. Other move directions are also pitched accordingly.

    It allows smoother and more complex movements.

    Can be enabled/disabled by L key by default (set keymap_pitchfly in minetest.conf)

    In pitch fly mode, you fly to the exact direction you are pointing at, using the forward key. Other move directions are also pitched accordingly.

    It allows smoother and more complex movements.

    Can be enabled/disabled by L key by default (set keymap_pitchfly in minetest.conf)

    It allows smoother and more complex movements.

    Can be enabled/disabled by L key by default (set keymap_pitchfly in minetest.conf)

    Can be enabled/disabled by L key by default (set keymap_pitchfly in minetest.conf)

    Fix sky bugs when using sun or moon textures (#7918)

    

    Reverts the render order change of commit

    ce2d33eb97238e2e050d065a8f0838749a0b31d0

    Reverts the render order change of commit

    ce2d33eb97238e2e050d065a8f0838749a0b31d0

    ce2d33eb97238e2e050d065a8f0838749a0b31d0

    Move client-specific files to 'src/client' (#7902)

    

    Update Android.mk

    Remove 'src/client' from include_directories

    Update Android.mk

    Remove 'src/client' from include_directories

    Remove 'src/client' from include_directories

    Clean up stack after script_get_backtrace (#7854)

    

    script_get_backtrace() was leaving its return value on the stack, corrupting

    subsequent lua operations for functions that did not immediately return.

    

    This problem can specifically be observed in the case of multiple "groupcaps"

    entries, each of which provides the legacy "maxwear" property.  These cause a

    backtrace and thus pollute the stack for the following lua_next() call.

    script_get_backtrace() was leaving its return value on the stack, corrupting

    subsequent lua operations for functions that did not immediately return.

    

    This problem can specifically be observed in the case of multiple "groupcaps"

    entries, each of which provides the legacy "maxwear" property.  These cause a

    backtrace and thus pollute the stack for the following lua_next() call.

    subsequent lua operations for functions that did not immediately return.

    

    This problem can specifically be observed in the case of multiple "groupcaps"

    entries, each of which provides the legacy "maxwear" property.  These cause a

    backtrace and thus pollute the stack for the following lua_next() call.

    This problem can specifically be observed in the case of multiple "groupcaps"

    entries, each of which provides the legacy "maxwear" property.  These cause a

    backtrace and thus pollute the stack for the following lua_next() call.

    entries, each of which provides the legacy "maxwear" property.  These cause a

    backtrace and thus pollute the stack for the following lua_next() call.

    backtrace and thus pollute the stack for the following lua_next() call.

    Add Lua methods 'set_rotation()' and 'get_rotation()' (#7395)

    

    * Adds Lua methods 'set_rotation()' and 'get_rotation'. Also changed some method names to be more clear. Instead of an f32 being sent over network for yaw, now a v3f is sent for rotation on xyz axes. Perserved Lua method set_yaw/setyaw so that old mods still work, other wise to set yaw they would need to switch to set_rotation(0, yaw, 0).

    * Adds Lua methods 'set_rotation()' and 'get_rotation'. Also changed some method names to be more clear. Instead of an f32 being sent over network for yaw, now a v3f is sent for rotation on xyz axes. Perserved Lua method set_yaw/setyaw so that old mods still work, other wise to set yaw they would need to switch to set_rotation(0, yaw, 0).

    Make non-formspec modal menus respect gui scale (#7850)

    Content store: Hide navigation buttons when there's no packages

    Fix macro warning due to incorrect define conjunction

    CSM: Don't create the client script environment if CSM is disabled (#7874)

    

    Use the CSM death formspec when CSM is enabled and use the engine death formspec when CSM is disabled.

    Move the CSM death formspec code to a dedicated file.

    Use the CSM death formspec when CSM is enabled and use the engine death formspec when CSM is disabled.

    Move the CSM death formspec code to a dedicated file.

    Move the CSM death formspec code to a dedicated file.

    MacOS: Fix default sneak key. Improve mouse response (#7885)

    Client-side autojump. Remove Android-only stepheight autojump (#7228)

    

    Works by detecting a collision while moving forward and then

    simulating a jump. If the simulated jump is more successful,

    an artificial jump key press is injected in the client.

    

    Includes setting and key change GUI element for enabling and

    disabling this feature.

    Works by detecting a collision while moving forward and then

    simulating a jump. If the simulated jump is more successful,

    an artificial jump key press is injected in the client.

    

    Includes setting and key change GUI element for enabling and

    disabling this feature.

    simulating a jump. If the simulated jump is more successful,

    an artificial jump key press is injected in the client.

    

    Includes setting and key change GUI element for enabling and

    disabling this feature.

    an artificial jump key press is injected in the client.

    

    Includes setting and key change GUI element for enabling and

    disabling this feature.

    Includes setting and key change GUI element for enabling and

    disabling this feature.

    disabling this feature.

    Lua_api.txt: Update glasslike_framed textures documentation (#7884)

    Android: Fix recursive delete (#7882)

    Android settings: Develop adaptive HUD scaling (#7784)

    

    Use font size 14 for phones.

    Use x_inches < 3.7 instead of < 3.5 for small phones.

    Add a new category x_inches < 6 for larger phones.

    Use HUD scaling 0.85 for larger phones.

    Use desktop defaults for tablets.

    Use font size 14 for phones.

    Use x_inches < 3.7 instead of < 3.5 for small phones.

    Add a new category x_inches < 6 for larger phones.

    Use HUD scaling 0.85 for larger phones.

    Use desktop defaults for tablets.

    Use x_inches < 3.7 instead of < 3.5 for small phones.

    Add a new category x_inches < 6 for larger phones.

    Use HUD scaling 0.85 for larger phones.

    Use desktop defaults for tablets.

    Add a new category x_inches < 6 for larger phones.

    Use HUD scaling 0.85 for larger phones.

    Use desktop defaults for tablets.

    Use HUD scaling 0.85 for larger phones.

    Use desktop defaults for tablets.

    Use desktop defaults for tablets.

    Remove obsolete section in ipv6_server description

    

    This section no longer applies since c66d97726931aa8dde7d8a1ffa5b8e41234f4660.

    This section no longer applies since c66d97726931aa8dde7d8a1ffa5b8e41234f4660.

    Fix Android build (#7873)

    Android: Improve UI scaling on smaller high-density displays (#7834)

    

    * Android: Improve UI scaling on smaller high-density displays

    * Android: Improve UI scaling on smaller high-density displays

    Framed glasslike: Don't use cuboids to draw glass faces (#7828)

    

    Previously, each glass face used drawAutoLightedCuboid() to draw a

    flat cuboid. This also disallowed backface culling, making the

    backface culling inconsistent with 'glasslike'.

    

    Use code from 'glasslike' to draw glass faces using drawQuad().

    

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    Previously, each glass face used drawAutoLightedCuboid() to draw a

    flat cuboid. This also disallowed backface culling, making the

    backface culling inconsistent with 'glasslike'.

    

    Use code from 'glasslike' to draw glass faces using drawQuad().

    

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    flat cuboid. This also disallowed backface culling, making the

    backface culling inconsistent with 'glasslike'.

    

    Use code from 'glasslike' to draw glass faces using drawQuad().

    

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    backface culling inconsistent with 'glasslike'.

    

    Use code from 'glasslike' to draw glass faces using drawQuad().

    

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    Use code from 'glasslike' to draw glass faces using drawQuad().

    

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    Remove long-unknown top/bottom textures feature:

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    Makes the code simpler and cleaner.

    Never documented, long-unknown and not of much use.

    Never documented, long-unknown and not of much use.

    Rename hasprivs command to haspriv (#7860)

    dlg_contentstore.lua: Various fixes and improvements (#7612)

    

    Add missing 'core.formspec_escape' to 'get_screenshot'.

    Add warning label when no packages fetched.

    Internal name of the "Update" button was the same as "Install". Rename to 'update_'.

    Add missing 'core.formspec_escape' to 'get_screenshot'.

    Add warning label when no packages fetched.

    Internal name of the "Update" button was the same as "Install". Rename to 'update_'.

    Add warning label when no packages fetched.

    Internal name of the "Update" button was the same as "Install". Rename to 'update_'.

    Internal name of the "Update" button was the same as "Install". Rename to 'update_'.

    Night sky: Fix brightness threshold for applying night colours (#7859)

    

    Previously, 'time_brightness' never fell below the threshold so

    night sky colours were not applied.

    

    Increase the threshold value. But now also set it to a value less

    sensitive to possible future small changes in 'time_brightness',

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    Previously, 'time_brightness' never fell below the threshold so

    night sky colours were not applied.

    

    Increase the threshold value. But now also set it to a value less

    sensitive to possible future small changes in 'time_brightness',

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    night sky colours were not applied.

    

    Increase the threshold value. But now also set it to a value less

    sensitive to possible future small changes in 'time_brightness',

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    Increase the threshold value. But now also set it to a value less

    sensitive to possible future small changes in 'time_brightness',

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    sensitive to possible future small changes in 'time_brightness',

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    by setting it halfway between the 'time_brightness' values for

    darkest night and first stage of dawn.

    darkest night and first stage of dawn.

    Enable subtle fall bobbing (#7856)

    

    Set the default value of fall_bobbing_amount to 0.03

    Set the default value of fall_bobbing_amount to 0.03

    Fix get_server_status() segfault due to uninitialized m_env

    

    Fixes #7857

    Fixes #7857

    Minor changes for IrrLicht 1.9 support

    Disable HW stereo for IrrLicht 1.9 (not supported anymore)

    Drop .NET-specific workaround: _IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX

    Escape special characters when searching the server list (#7842)

    

    Simple fix to stop searching for "[" or other special characters causing a crash.

    Simple fix to stop searching for "[" or other special characters causing a crash.

    Conf.example generation: Remove quotation marks from noise flags (#7844)

    Content store: Add show_nonfree_packages setting to advanced settings (#7846)

    Content store: Add setting to filter non-free packages (#7766)

    

    Defaulting to hiding in order to help with Debian/etc distribution.

    This could be changed at a later date.

    Defaulting to hiding in order to help with Debian/etc distribution.

    This could be changed at a later date.

    This could be changed at a later date.

    Improve content store layout (#7806)

    New sneak: Smoothen the climb up event (#7727)

    Formspecs: Fix text clipped by scrollbars (#7816)

    Fix string.split returning an empty table if string starts with sepearator (#7827)

    

    Calling string.split(":A:B:C:D", ":") returns an empty array.

    This is due to first empty string not making repeat loop decreasing max_split which has a 0 value when reaching until.

    Changing max_splits default value from -1 to -2 fixes that issue.

    Calling string.split(":A:B:C:D", ":") returns an empty array.

    This is due to first empty string not making repeat loop decreasing max_split which has a 0 value when reaching until.

    Changing max_splits default value from -1 to -2 fixes that issue.

    This is due to first empty string not making repeat loop decreasing max_split which has a 0 value when reaching until.

    Changing max_splits default value from -1 to -2 fixes that issue.

    Changing max_splits default value from -1 to -2 fixes that issue.

    Framed glasslike: Fix z-fighting, improve codestyle (#7826)

    

    Increase inset distance of glass faces that is meant to avoid

    z-fighting.

    Note: Enabling basic shaders made the z-fighting more likely to

    happen.

    Increase inset distance of glass faces that is meant to avoid

    z-fighting.

    Note: Enabling basic shaders made the z-fighting more likely to

    happen.

    z-fighting.

    Note: Enabling basic shaders made the z-fighting more likely to

    happen.

    Note: Enabling basic shaders made the z-fighting more likely to

    happen.

    happen.

    Framed glasslike: Fix and document top/base textures feature (#7824)

    Remove un-needed header inclusion

    Move touchscreen input handling to base GUIModalMenu class

    Advanced settings: Fix noise parameter flags (#7819)

    

    Populate the 'checkboxes' table with bools when creating the editing formspec.

    Populate the 'checkboxes' table with bools when creating the editing formspec.

    Windows: Cpack wix installer (#6153)

    

    Create CPack WIX msi Installer for RUN_IN_PLACE=0 builds

    Correct paths on Windows for RUN_IN_PLACE=0

    Install only required font files

    Games have their own components, and "minimal" is optional

    Create CPack WIX msi Installer for RUN_IN_PLACE=0 builds

    Correct paths on Windows for RUN_IN_PLACE=0

    Install only required font files

    Games have their own components, and "minimal" is optional

    Correct paths on Windows for RUN_IN_PLACE=0

    Install only required font files

    Games have their own components, and "minimal" is optional

    Install only required font files

    Games have their own components, and "minimal" is optional

    Games have their own components, and "minimal" is optional

    Ease selection of entities behind nodes (#7739)

    clear_craft: Return false if recipe not found, don't throw error (#7804)

    Mainmenu: Clean up and improve advanced settings dialogues (#7802)

    

    Improvements:

    1. Formspec size and description box are calculated last

    2. Width and height are now adjustable per setting type

    3. Error message (dialogdata.error_message) shortens the description field and is placed below

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    Improvements:

    1. Formspec size and description box are calculated last

    2. Width and height are now adjustable per setting type

    3. Error message (dialogdata.error_message) shortens the description field and is placed below

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    1. Formspec size and description box are calculated last

    2. Width and height are now adjustable per setting type

    3. Error message (dialogdata.error_message) shortens the description field and is placed below

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    2. Width and height are now adjustable per setting type

    3. Error message (dialogdata.error_message) shortens the description field and is placed below

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    3. Error message (dialogdata.error_message) shortens the description field and is placed below

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    4. Add more spacing for larger fonts

    5. More comments and extensible by setting different height and width values

    5. More comments and extensible by setting different height and width values

    Settingtypes.txt: Various language improvements, document stable mapgens (#7801)

    Android buttons: Inset 'rare controls', inset and resize 'gear icon' (#7792)

    

    Previously these were both inconsistently close to the screen edge.

    'gear icon' has been enlarged to match the width of 'zoom' and 'aux'

    buttons.

    Previously these were both inconsistently close to the screen edge.

    'gear icon' has been enlarged to match the width of 'zoom' and 'aux'

    buttons.

    'gear icon' has been enlarged to match the width of 'zoom' and 'aux'

    buttons.

    buttons.

    Advanced settings tree menu: Resize, fix clipped values (#7790)

    Add release information to appdata file (#7771)

    Add disable_repair group to prevent tool repair (#7381)

    Advanced settings menu: Centre setting edit box (#7778)

    Settingtypes.txt: Limit comments to 90 columns to fix clipped lines (#7777)

    Add a warning to the 'chunksize' setting (#7775)

    

    Several users have been causing problems by increasing this value.

    Several users have been causing problems by increasing this value.

     Add core.remove_detached_inventory (#7684)

    

    Breaks backwards compatibility for good

    Bump protocol version

    Breaks backwards compatibility for good

    Bump protocol version

    Bump protocol version

    Various grammar improvements (#7769)

    

    In builtin//pkgmgr.lua, README.md and settingtypes.txt.

    Based on 2 pull requests by comradekingu.

    In builtin//pkgmgr.lua, README.md and settingtypes.txt.

    Based on 2 pull requests by comradekingu.

    Based on 2 pull requests by comradekingu.

    F5 debug info: Use full words for NSEW directions for readability (#7461)

    Player hand list: require init by mods

    

    Mods will now have to initialize the list/slot in order to define the default player hand.

    They may use the inventory callbacks to prevent abuse of this list.

    Mods will now have to initialize the list/slot in order to define the default player hand.

    They may use the inventory callbacks to prevent abuse of this list.

    They may use the inventory callbacks to prevent abuse of this list.

    Dig particles: Various improvements (#7714)

    

    Improve codestyle.

    Add clarifying comments.

    Use 'movement_gravity' setting and physics override instead of hardcoded value.

    Halve number of particles in final 'node dug' burst.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Improve codestyle.

    Add clarifying comments.

    Use 'movement_gravity' setting and physics override instead of hardcoded value.

    Halve number of particles in final 'node dug' burst.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Add clarifying comments.

    Use 'movement_gravity' setting and physics override instead of hardcoded value.

    Halve number of particles in final 'node dug' burst.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Use 'movement_gravity' setting and physics override instead of hardcoded value.

    Halve number of particles in final 'node dug' burst.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Halve number of particles in final 'node dug' burst.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Avoid extremely small, near-invisible particles.

    Increase velocity to increase number emerging from within a cubic node.

    Increase velocity to increase number emerging from within a cubic node.

    Fix Mapgen Valleys getSpawnLevelAtPoint() (#7756)

    Night clouds: Boost brightness for a moonlit appearence (#7748)

    

    Previously, night clouds were almost indistinguishable from night sky,

    especially since a recent commit that made night sky brighter.

    They were lacking the beautiful luminosity caused by being lit by the

    permanently-full moon.

    

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    Previously, night clouds were almost indistinguishable from night sky,

    especially since a recent commit that made night sky brighter.

    They were lacking the beautiful luminosity caused by being lit by the

    permanently-full moon.

    

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    especially since a recent commit that made night sky brighter.

    They were lacking the beautiful luminosity caused by being lit by the

    permanently-full moon.

    

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    They were lacking the beautiful luminosity caused by being lit by the

    permanently-full moon.

    

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    permanently-full moon.

    

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    When 'directional_colored_fog = false' allow the dawn/dusk cloud

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    brightness boost to apply through the night too.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    Set an identical minimum cloud brightness for when

    'directional_colored_fog = true'.

    'directional_colored_fog = true'.

    Remove settings properly (#7676)

    Software inventorycube (#7651)

    

    Fixes missing/upside-down images on Android.

    Fixes missing/upside-down images on Android.

    Add test_config.h to gitignore (#7708)

    Fix temporary path crash in TestAuthDatabase (#7753)

    

    The constructor of TestAuthDatabase was called immediately, at a time when the settings weren't initialized properly yet.

    The constructor of TestAuthDatabase was called immediately, at a time when the settings weren't initialized properly yet.

    Fix stretched stars bug, change render order

    Builtin//misc_helpers: Various fixes (#7737)

    

    Remove unused variable 'seplen'.

    Fix 'cparam2'->'param2'.

    Do not initialise variable 'p' twice.

    Remove unused variable 'seplen'.

    Fix 'cparam2'->'param2'.

    Do not initialise variable 'p' twice.

    Fix 'cparam2'->'param2'.

    Do not initialise variable 'p' twice.

    Do not initialise variable 'p' twice.

    Fix various code issues found by cppcheck (#7741)

    

    Mapgen Singlenode: Remove 'flags' that duplicates a 'class Mapgen' member.

    Dungeongen: Initialise 'MMVManip *vm' to 'nullptr'.

    Inventorymanager: Remove assignment error 'found = '.

    Mapgen Singlenode: Remove 'flags' that duplicates a 'class Mapgen' member.

    Dungeongen: Initialise 'MMVManip *vm' to 'nullptr'.

    Inventorymanager: Remove assignment error 'found = '.

    Dungeongen: Initialise 'MMVManip *vm' to 'nullptr'.

    Inventorymanager: Remove assignment error 'found = '.

    Inventorymanager: Remove assignment error 'found = '.

    Fix "Hunk #1 FAILED at 9 (different line endings)."

    Make OpenGL preference configurable, default to LEGACY (#7666)

    

    This partially reverts 1ec5028

    Add option OPENGL_GL_PREFERENCE

    This partially reverts 1ec5028

    Add option OPENGL_GL_PREFERENCE

    Add option OPENGL_GL_PREFERENCE

    Light curve: Simplify and improve code, fix darkened daytime sky (#7693)

    Inv deSerialize(): Prevent infinite loop, error on failure (#7711)

    

    Throws an error about potentially damaged player inventories but proceeds converting the rest of them

    Throws an error about potentially damaged player inventories but proceeds converting the rest of them

    markAliasDeprecated: Fix MSVC build

    Particles: Make collision with objects optional (#7682)

    

    Also set it to false for node dig particles, as they are often created

    and high in number.

    

    Improve particle documentation.

    Also set it to false for node dig particles, as they are often created

    and high in number.

    

    Improve particle documentation.

    and high in number.

    

    Improve particle documentation.

    Improve particle documentation.

    Menu content tab: Fix clipped description and missing depends (#7703)

    get_node_drops: Make empty drop return empty table (#7592)

    

    This stops get_node_drops from returning an empty string when using drop = "" and instead returns the supposed empty table instead {}

    This stops get_node_drops from returning an empty string when using drop = "" and instead returns the supposed empty table instead {}

    Shaders: Fix comment line (#7668)

    

    Fixed comment as finalColorBlend() does not exist in the code base.

    Fixed comment as finalColorBlend() does not exist in the code base.

    Damage flash/hurt tilt: Make shorter to reduce player blindness (#7399)

    

    Damage flash is shortened from 0.98-1.27s to 0.25s-0.33s to reduce

    player in-game blindness, especially useful for combat situations.

    It is also visually more comfortable.

    Camera hurt tilt is made slightly shorter to match in duration.

    

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    Damage flash is shortened from 0.98-1.27s to 0.25s-0.33s to reduce

    player in-game blindness, especially useful for combat situations.

    It is also visually more comfortable.

    Camera hurt tilt is made slightly shorter to match in duration.

    

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    player in-game blindness, especially useful for combat situations.

    It is also visually more comfortable.

    Camera hurt tilt is made slightly shorter to match in duration.

    

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    It is also visually more comfortable.

    Camera hurt tilt is made slightly shorter to match in duration.

    

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    Camera hurt tilt is made slightly shorter to match in duration.

    

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    Both flash and camera tilt are now of similar length to a typical

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    damage sound, such as the one used by Minetest Game which is 0.27s.

    The 3 effects become more synchronised and unified.

    The 3 effects become more synchronised and unified.

    Play damage sound on player death (#7679)

    

    Also run CSM 'on_damage_taken' callback.

    Improve function logic and remove 'return'.

    Also run CSM 'on_damage_taken' callback.

    Improve function logic and remove 'return'.

    Improve function logic and remove 'return'.

    Content tab: Fix clipped text in texture pack button (#7667)

    

    Wider buttons to not clip 'Disable Texture Pack' text when using a

    small game window (1024x600, the default).

    Wider buttons to not clip 'Disable Texture Pack' text when using a

    small game window (1024x600, the default).

    small game window (1024x600, the default).

    Change mapgen order to ores > dungeons > decorations (#7656)

    

    Previously dungeons > decorations > ores.

    Decorations depend on the node they are placed on, and ore types are

    increasingly able to place large continuous volumes of nodes, such as

    strata. Decorations are increasingly being used underground.

    

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    Previously dungeons > decorations > ores.

    Decorations depend on the node they are placed on, and ore types are

    increasingly able to place large continuous volumes of nodes, such as

    strata. Decorations are increasingly being used underground.

    

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    Decorations depend on the node they are placed on, and ore types are

    increasingly able to place large continuous volumes of nodes, such as

    strata. Decorations are increasingly being used underground.

    

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    increasingly able to place large continuous volumes of nodes, such as

    strata. Decorations are increasingly being used underground.

    

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    strata. Decorations are increasingly being used underground.

    

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    The new order avoids a node being changed by ore generation after a

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    decoration has been placed on it.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    The new order also avoids ores appearing in the walls of a dungeon if

    the wall nodes match the local stone node.

    the wall nodes match the local stone node.

    Formspecs: Fix invalid background warning

    

    Clipped backgrounds are still valid with no size[] tag, as they will apply themselves correctly to any size

    

    Fixes #7197

    Clipped backgrounds are still valid with no size[] tag, as they will apply themselves correctly to any size

    

    Fixes #7197

    Fixes #7197

    Lua_api.txt: Update mapgen alias docs, add Singlenode use (#7659)

    Set OpenGL preference to GLVND

    

    This silences a CMake warning introduced in CMAKE 3.11.

    This silences a CMake warning introduced in CMAKE 3.11.

    Really delete things in fs::RecursiveDelete (#7433)

    

    * Really delete things in fs::RecursiveDelete

    * Really delete things in fs::RecursiveDelete

    World config: Add modpack descriptions and remove dependencies there (#7397)

    

    * Allow adding descriptions to modpacks using description.txt

    * Use a proper multiline formspec element: textarea

    * Allow adding descriptions to modpacks using description.txt

    * Use a proper multiline formspec element: textarea

    * Use a proper multiline formspec element: textarea

    Mgv5: Change tunnel parameters to those of other mapgens (#7641)

    

    Make tunnels wider and use the noise parameters of most other mapgens.

    All other underground features are already identical to all other

    non-mgv6 mapgens, this final change modernises and improves the tunnels.

    Make tunnels wider and use the noise parameters of most other mapgens.

    All other underground features are already identical to all other

    non-mgv6 mapgens, this final change modernises and improves the tunnels.

    All other underground features are already identical to all other

    non-mgv6 mapgens, this final change modernises and improves the tunnels.

    non-mgv6 mapgens, this final change modernises and improves the tunnels.

    Check node updates whether the blocks are known (#7568)

    

    * Remove unused ignore_id

    * Remove unused ignore_id

    Raycast: export exact pointing location (#6304)

    

    * Return intersection point in node coordinates.

    * Clarify 'intersection_point' documentation

    * Return intersection point in node coordinates.

    * Clarify 'intersection_point' documentation

    * Clarify 'intersection_point' documentation

    lua_api.txt: Refine 'Item types' for 4e2eeee (#7648)

    Formspecs: Fix missing trim() when checking for no_prepend[]

    lua_api.txt: Various fixes and improvements (#7638)

    

    Improve item types descriptions.

    Add replacements field to fuel definition.

    Shorten two headers.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Improve item types descriptions.

    Add replacements field to fuel definition.

    Shorten two headers.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Add replacements field to fuel definition.

    Shorten two headers.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Shorten two headers.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Bracketed section names can be linked when compiled to HTML.

    Save debug.txt to build dir for RUN_IN_PLACE build (#7615)

    texture_packs.txt: Add information for leaves texturing (#7637)

    

    Explain texture requirements due to the leaves rendering options.

    Explain texture requirements due to the leaves rendering options.

    Lua_api.txt: Move item def section nearby node def (#7636)

    Feature check for commit ac4884c3d677ef51bcce47f95ccd49d874022692 (#7618)

    

    adds `entity_independent_selectionbox` to minetest.features

    adds `entity_independent_selectionbox` to minetest.features

    Some minor Fastface optimizations. (#7628)

    Fix debug and info text being the wrong color

    

    Fixes #7623

    Fixes #7623

    Prevent objects from colliding with own child attachments (#7610)

    

    Also, use a better distance calculation for 'collide with objects'.

    Fixes the issue of a vehicle occasionally colliding with its own driver,

    causing one of the velocity components to be set to zero.

    Also, use a better distance calculation for 'collide with objects'.

    Fixes the issue of a vehicle occasionally colliding with its own driver,

    causing one of the velocity components to be set to zero.

    Fixes the issue of a vehicle occasionally colliding with its own driver,

    causing one of the velocity components to be set to zero.

    causing one of the velocity components to be set to zero.

    Formspecs: Add tooltip element for area

    Replace auth.txt with SQLite auth database (#7279)

    

    * Replace auth.txt with SQLite auth database

    * Replace auth.txt with SQLite auth database

    Fix tooltip colors specified by formspec part

    Fix sky objects not rendering with ogles (#7598)

    guiFormspecMenu: Allow fraction values for container[] (#7497)

    

    Switch spacing and pos_offset to v2f32 for percision, add helper function

    Switch spacing and pos_offset to v2f32 for percision, add helper function

    lua_api.txt: Improve code block format (#7599)

    

    Remove ^ and --[[ ]] symbols.

    Fix comment indentation level.

    Separate fields with blank lines.

    Remove period from single-sentence descriptions, add periods to

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    Remove ^ and --[[ ]] symbols.

    Fix comment indentation level.

    Separate fields with blank lines.

    Remove period from single-sentence descriptions, add periods to

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    Fix comment indentation level.

    Separate fields with blank lines.

    Remove period from single-sentence descriptions, add periods to

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    Separate fields with blank lines.

    Remove period from single-sentence descriptions, add periods to

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    Remove period from single-sentence descriptions, add periods to

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    multi-sentence descriptions.

    Separate inline comments from the code with two spaces.

    Separate inline comments from the code with two spaces.

    Smoothed yaw rotation for objects (#6825)

    LuaVoxelManip: Throw warning or error instead of silently doing nothing (#7567)

    

    Error on missing parameter.

    Warning when using a method on the incorrect type of LuaVoxelManip.

    Error on missing parameter.

    Warning when using a method on the incorrect type of LuaVoxelManip.

    Warning when using a method on the incorrect type of LuaVoxelManip.

    Make the primary, flow-advancing action the right-most (#7594)

    Lua_api.txt: Improve Player HUD flags documentation (#7588)

    Lua_api.txt: Clarify entity 'initial_properties' and related deprecation (#7596)

    Document default values for general cmake options (#7595)

    

    And fix a typo

    And fix a typo

    Add protocol_version and supported package types to ContentDB urls

    Allow enter to select items from combobox's list (#7351)

    Log server shutdown using actionstream (#7589)

    Fix build on gcc 5.0 (#7586)

    Lua_api.txt: Various improvements (#7582)

    

    Fixes and format improvements.

    Shorten definition tables headers and clarify when they are used.

    Add subheadings for craft recipes.

    Fixes and format improvements.

    Shorten definition tables headers and clarify when they are used.

    Add subheadings for craft recipes.

    Shorten definition tables headers and clarify when they are used.

    Add subheadings for craft recipes.

    Add subheadings for craft recipes.

    Replace apt-get with apt (#7583)

    Settings: Fix indents, chat_message_*. Update translations (#7580)

    Allow an optional readonly base database (#7544)

    

    * Allow an optional readonly base database

    

    * Added basic documentation

    * Allow an optional readonly base database

    

    * Added basic documentation

    * Added basic documentation

    Add a MSVC / Windows compatible snprintf function (#7353)

    

    Use sizeof where applicable for mt_snprintf

    Use sizeof where applicable for mt_snprintf

    Update gradle android tool to 3.1.3

    Thanks to Monte48 for the correct maven URL outside of android studio

    Thanks to Monte48 for the correct maven URL outside of android studio

    Update Android defaults for modern H/W. (#7572)

    Optimize ABM checks.

    

    See #7555

    

    Cache (up to 64) node types for each active block.

    Check this cache first to see whether any ABM needs to be triggered for a block.

    See #7555

    

    Cache (up to 64) node types for each active block.

    Check this cache first to see whether any ABM needs to be triggered for a block.

    Cache (up to 64) node types for each active block.

    Check this cache first to see whether any ABM needs to be triggered for a block.

    Check this cache first to see whether any ABM needs to be triggered for a block.

    Disable shaders GUI on unsupported drivers (#7563)

    

    * Disable shaders GUI on unsupported drivers (#2060)

    

    * Disable shaders if unavailable

    * Disable shaders GUI on unsupported drivers (#2060)

    

    * Disable shaders if unavailable

    * Disable shaders if unavailable

    Update mip mapping and textarea documentation (#7315)

    

    * Fix textarea formspec documentation

    The label is shown and the background isn't

    * Document the missing gamma correction when generating mip maps

    * Remove duplicate text (such as size parameter descriptions)

    * Fix textarea formspec documentation

    The label is shown and the background isn't

    * Document the missing gamma correction when generating mip maps

    * Remove duplicate text (such as size parameter descriptions)

    The label is shown and the background isn't

    * Document the missing gamma correction when generating mip maps

    * Remove duplicate text (such as size parameter descriptions)

    * Document the missing gamma correction when generating mip maps

    * Remove duplicate text (such as size parameter descriptions)

    * Remove duplicate text (such as size parameter descriptions)

    CSM: Disallow exploitable clientside mod functions by default (#7547)

    Mgvalleys: Make river depth variation and humidity drop optional (#7532)

    

    Add 2 new mapgen flags to make river depth variation and humidity drop

    with altitude independently optional, instead of both being enabled by

    the 'humid rivers' flag.

    

    Simplify and clarify related code by removing a low priority

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    Add 2 new mapgen flags to make river depth variation and humidity drop

    with altitude independently optional, instead of both being enabled by

    the 'humid rivers' flag.

    

    Simplify and clarify related code by removing a low priority

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    with altitude independently optional, instead of both being enabled by

    the 'humid rivers' flag.

    

    Simplify and clarify related code by removing a low priority

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    the 'humid rivers' flag.

    

    Simplify and clarify related code by removing a low priority

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    Simplify and clarify related code by removing a low priority

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    optimisation regarding 't_heat'.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    Remove unnecessary optimisation bools and use spflags directly instead.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    Improve and fix documentation in settingtypes.txt.

    A few minor code cleanups.

    A few minor code cleanups.

    Builtin: Replace deprecated function calls (#7561)

    Check if player exists on use of /privs (#7554)

    

    * /privs: Check if player exists

    * /privs: Check if player exists

    Lua_api.txt: Various minor improvements (#7560)

    

    Add missing section title for 'Node paramtypes'.

    Clarify documentation for schematic Y-slice table.

    Document that schematic Y-slice behaviour does not invert for ceiling

    schematic decorations.

    Add missing section title for 'Node paramtypes'.

    Clarify documentation for schematic Y-slice table.

    Document that schematic Y-slice behaviour does not invert for ceiling

    schematic decorations.

    Clarify documentation for schematic Y-slice table.

    Document that schematic Y-slice behaviour does not invert for ceiling

    schematic decorations.

    Document that schematic Y-slice behaviour does not invert for ceiling

    schematic decorations.

    schematic decorations.

    Remove legacy client handling code.

    Make player liquid speed independent of FPS (#7543)

    

    Make player liquid speed independent of FPS.

    Fix codestyle issues in code block.

    Make player liquid speed independent of FPS.

    Fix codestyle issues in code block.

    Fix codestyle issues in code block.

    Document config updates in minetest.conf.example.

    Adjust some settings to modern environments and networks. (#7549)

    Fix bug setting channel window size.

    Ensure that legacy mode is correctly disabled.

    Reduce block load glitches

    

    See #7542

    This reduces glitches in deep water and underground caves.

    See #7542

    This reduces glitches in deep water and underground caves.

    This reduces glitches in deep water and underground caves.

    Android: Add 'aux' button (#7477)

    

    Add 'aux' button.

    Use joystick to trigger 'aux' button when forward and out of main circle, by enabling

    'virtual_joystick_triggers_aux' setting.

    Add 'aux' button.

    Use joystick to trigger 'aux' button when forward and out of main circle, by enabling

    'virtual_joystick_triggers_aux' setting.

    Use joystick to trigger 'aux' button when forward and out of main circle, by enabling

    'virtual_joystick_triggers_aux' setting.

    'virtual_joystick_triggers_aux' setting.

    Formspecs: Remove accidental empty 'quit' field

    core.spawn_falling_node: Keep metadata (#7476)

    Builtin/../misc.lua: Replace minetest. with core., improve codestyle (#7540)

    Lua templating reading (part 4): s16, v2s16, v2f (#7512)

    Revert 6587 - Optimize entity-entity collision (#7539)

    Lua_api.txt: Formatting and grammar fixes (#7534)

    

    Use tree output for directory structure.

    Remove 2 blank lines near document top.

    Spelling and grammar fixes.

    Markdown fixes.

    Condense paths section.

    Fix skipped heading levels.

    Use tree output for directory structure.

    Remove 2 blank lines near document top.

    Spelling and grammar fixes.

    Markdown fixes.

    Condense paths section.

    Fix skipped heading levels.

    Remove 2 blank lines near document top.

    Spelling and grammar fixes.

    Markdown fixes.

    Condense paths section.

    Fix skipped heading levels.

    Spelling and grammar fixes.

    Markdown fixes.

    Condense paths section.

    Fix skipped heading levels.

    Markdown fixes.

    Remove extra example.

    

    Add blank lines after headings.

    

    Linkify section references.

    Bracketed section names can be linked when compiled to HTML.

    Condense paths section.

    Fix skipped heading levels.

    Fix skipped heading levels.

    Lua_api.txt: Improve section titles, clarify sections (#7533)

    Fix memory leak in guiConfirmRegistration

    Run code style linter first (#7213)

    

    The code style linter is the most likely to fail, so should be

    placed at the top of the list so it's started first. Note that

    a failed job doesn't stop others from running

    The code style linter is the most likely to fail, so should be

    placed at the top of the list so it's started first. Note that

    a failed job doesn't stop others from running

    placed at the top of the list so it's started first. Note that

    a failed job doesn't stop others from running

    a failed job doesn't stop others from running

    Zoom: Correctly verify client passed zoom at the server (#7526)

    

    Fixes generation of distant world when not zooming in creative mode

    (in creative mode zoom FOV is 15 degrees).

    Fixes generation of distant world when not zooming in creative mode

    (in creative mode zoom FOV is 15 degrees).

    (in creative mode zoom FOV is 15 degrees).

    Drop ClientEvent CEE_PLAYER_BREATH: triggering function is not called.

    

    Also drop 3 useless IntervalLimiter

    Also drop 3 useless IntervalLimiter

    Log deprecated Lua function calls (#7491)

    Make the server status message customizable (#7357)

    

    Remove now redundant setting show_statusline_on_connect

    Improve documentation of `minetest.get_server_status`

    Remove now redundant setting show_statusline_on_connect

    Improve documentation of `minetest.get_server_status`

    Improve documentation of `minetest.get_server_status`

    Backport Android cleanup parts from #7123 (#7513)

    

    Also resync properly the dependencies versions.

    

    Don't let the makefile handle the cleanups itself. Let gradle do it.

    

    This is one of the first steps to remove the makefile and replace it with a full gradle support

    Also resync properly the dependencies versions.

    

    Don't let the makefile handle the cleanups itself. Let gradle do it.

    

    This is one of the first steps to remove the makefile and replace it with a full gradle support

    Don't let the makefile handle the cleanups itself. Let gradle do it.

    

    This is one of the first steps to remove the makefile and replace it with a full gradle support

    This is one of the first steps to remove the makefile and replace it with a full gradle support

    Android: Resize jump and sneak buttons' touch target (#7498)

    Modernize lua read (part 2 & 3): C++ templating assurance (#7410)

    

    * Modernize lua read (part 2 & 3): C++ templating assurance

    

    Implement the boolean reader

    Implement the string reader

    Also remove unused & unimplemented script_error_handler

    Add a reader with default value

    * Modernize lua read (part 2 & 3): C++ templating assurance

    

    Implement the boolean reader

    Implement the string reader

    Also remove unused & unimplemented script_error_handler

    Add a reader with default value

    Implement the boolean reader

    Implement the string reader

    Also remove unused & unimplemented script_error_handler

    Add a reader with default value

    Implement the string reader

    Also remove unused & unimplemented script_error_handler

    Add a reader with default value

    Also remove unused & unimplemented script_error_handler

    Add a reader with default value

    Add a reader with default value

    Fix memory leaks in mod storage (#7500)

    Fix world deletion (#7494)

    

    * Fix world deletion

    * Fix world deletion

    Log usage of /pulverize (#7503)

    Removed '$' symbols from the start of shell commands. (#7506)

    Fix a memleak before assertion in l_get_mod_storage

    Bump android version to 20

    Update cURL (7.60.0) & SQLite3 (3.24.0)

    Mgvalleys: Fix 'mgvalleys_spflags' setting name (#7495)

    Fix mod channels crash (#7481)

    Fix small memory leaks in client. (#7492)

    Cavegen: Fix errors when getting biome outside mapchunk (#7480)

    

    Some cave segments are outside the mapchunk.

    

    Previously, biome was being calculated by a function that uses the noise

    maps. Points outside the mapchunk resulted in incorrect noise map indexes

    that were sometimes outside the noise map size, causing a crash.

    

    Use either noise maps or point noise calculations depending on point

    location.

    Some cave segments are outside the mapchunk.

    

    Previously, biome was being calculated by a function that uses the noise

    maps. Points outside the mapchunk resulted in incorrect noise map indexes

    that were sometimes outside the noise map size, causing a crash.

    

    Use either noise maps or point noise calculations depending on point

    location.

    Previously, biome was being calculated by a function that uses the noise

    maps. Points outside the mapchunk resulted in incorrect noise map indexes

    that were sometimes outside the noise map size, causing a crash.

    

    Use either noise maps or point noise calculations depending on point

    location.

    maps. Points outside the mapchunk resulted in incorrect noise map indexes

    that were sometimes outside the noise map size, causing a crash.

    

    Use either noise maps or point noise calculations depending on point

    location.

    that were sometimes outside the noise map size, causing a crash.

    

    Use either noise maps or point noise calculations depending on point

    location.

    Use either noise maps or point noise calculations depending on point

    location.

    location.

    Update settings translations

    Rename CSM flavours to restrictions

    

    & Satisfy LINT

    & Satisfy LINT

    Fix buffer overrun in SRP (#7484)

    

    The old code got a pointer to the array instead of the first element, this resulted in a buffer overflow when the function was used more than once.

    The old code got a pointer to the array instead of the first element, this resulted in a buffer overflow when the function was used more than once.

    Fix libgmp detection (#7488)

    Lua_api.txt: Re-order some sections. Alphabeticise class reference (#7487)

    Fix MurmurHash implementation to really be unaligned (#7482)

    Lua_api.txt: Replace `engine.*` with `core.*` (#7474)

    Decoration API: Add lightweight ability to have complete coverage (#7456)

    

    When the noise value or fill_ratio >= 10.0 complete coverage is enabled.

    This disables random placement to avoid redundant multiple placements

    at one position. Instead, 1 decoration per surface node is placed by

    looping across each division.

    

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    When the noise value or fill_ratio >= 10.0 complete coverage is enabled.

    This disables random placement to avoid redundant multiple placements

    at one position. Instead, 1 decoration per surface node is placed by

    looping across each division.

    

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    This disables random placement to avoid redundant multiple placements

    at one position. Instead, 1 decoration per surface node is placed by

    looping across each division.

    

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    at one position. Instead, 1 decoration per surface node is placed by

    looping across each division.

    

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    looping across each division.

    

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    '10' was chosen as this is the fill_ratio that previously created

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    very near complete coverage. The complete coverage feature therefore

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    integrates smoothly when noise is used for variable decoration density.

    

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    'fill_ratio = 10' should be used by modders who want a decoration

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    placed on every surface node. Compared to before such a decoration

    placement will be 10 times faster.

    placement will be 10 times faster.

    Fix rtt >= 0.0f assertion and free_move crash

    Android: Use correct temporary path (#7463)

    RTT fixes (#7428)

    

    * Few code updates

    

    * Do not show average RTT before timing out

    

    * Fix unwanted integer division in RTTStatistics

    

    * Fix float format, prettier jitter calculation

    

    * Use +=, 0.1f -> 100.0f for stronger average updates

    * Few code updates

    

    * Do not show average RTT before timing out

    

    * Fix unwanted integer division in RTTStatistics

    

    * Fix float format, prettier jitter calculation

    

    * Use +=, 0.1f -> 100.0f for stronger average updates

    * Do not show average RTT before timing out

    

    * Fix unwanted integer division in RTTStatistics

    

    * Fix float format, prettier jitter calculation

    

    * Use +=, 0.1f -> 100.0f for stronger average updates

    * Fix unwanted integer division in RTTStatistics

    

    * Fix float format, prettier jitter calculation

    

    * Use +=, 0.1f -> 100.0f for stronger average updates

    * Fix float format, prettier jitter calculation

    

    * Use +=, 0.1f -> 100.0f for stronger average updates

    * Use +=, 0.1f -> 100.0f for stronger average updates

    Fix crash caused by Lua error during startup (#7473)

    Fix ipv6_server=true not accepting IPv4 connections on Windows (#7471)

    README.md: Improve formatting for consistency (#7472)

    

    * README.md: Improve formatting for consistency

    * README.md: Improve formatting for consistency

    Remove misleading documentation about IPv6 server announcing

    Biome API: Fix absent water decorations and dust, in deep water (#7470)

    

    Previously, the biomemap was 'BIOME_NONE' for a mapchunk column if a

    stone surface was not found in it, causing water surface decorations

    and water surface dust to fail.

    

    Store the biome ID of the biome calculated at a water surface and add

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    Previously, the biomemap was 'BIOME_NONE' for a mapchunk column if a

    stone surface was not found in it, causing water surface decorations

    and water surface dust to fail.

    

    Store the biome ID of the biome calculated at a water surface and add

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    stone surface was not found in it, causing water surface decorations

    and water surface dust to fail.

    

    Store the biome ID of the biome calculated at a water surface and add

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    and water surface dust to fail.

    

    Store the biome ID of the biome calculated at a water surface and add

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    Store the biome ID of the biome calculated at a water surface and add

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    it to the biomemap if the biomemap is 'BIOME_NONE' for the mapchunk

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    column. The biome calculated at a stone surface still has priority

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    for the biomemap entry, as it should.

    

    Edit an incorrect comment.

    Edit an incorrect comment.

    README.md: Improve version scheme text (#7465)

    Lua_api.txt: Fix incorrect vector section directive (#7466)

    Biome dust: Revert fix that added dust to mod structures (#7464)

    

    Revert commit 99143f494711034068685b6ee845ce19fa09d7d9 and commit

    f4ca830abe1aa22875c99b31bf2ee56e26f83f05.

    

    These commits caused biome dust to be applied even when there was no core

    mapgen terrain in a mapchunk column. So the dust, which overgenerates,

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    Revert commit 99143f494711034068685b6ee845ce19fa09d7d9 and commit

    f4ca830abe1aa22875c99b31bf2ee56e26f83f05.

    

    These commits caused biome dust to be applied even when there was no core

    mapgen terrain in a mapchunk column. So the dust, which overgenerates,

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    f4ca830abe1aa22875c99b31bf2ee56e26f83f05.

    

    These commits caused biome dust to be applied even when there was no core

    mapgen terrain in a mapchunk column. So the dust, which overgenerates,

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    These commits caused biome dust to be applied even when there was no core

    mapgen terrain in a mapchunk column. So the dust, which overgenerates,

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    mapgen terrain in a mapchunk column. So the dust, which overgenerates,

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    then appeared on structures added by mods in 'on_generated', such as

    floatlands, asteroids or above-surface realms.

    floatlands, asteroids or above-surface realms.

    Update to new ContentDB API

    Remove deprecated functions from menu_lua_api.txt (#7455)

    Provide Xorg/net wm process ID (#7445)

    

    Adding support for _NET_WM_PID as defined in Extended Window Manager Hints

    Move verbose messaging to setupXorgTopLevelWindow method as Xorg messages should only occur when running in Xorg env.

    Irrlicht returns the XDisplay as a void* and XWindow as an unsigned long so reinterpret those as the appropriate type. Also fixed a spaces for tab formating issue

    Adding support for _NET_WM_PID as defined in Extended Window Manager Hints

    Move verbose messaging to setupXorgTopLevelWindow method as Xorg messages should only occur when running in Xorg env.

    Irrlicht returns the XDisplay as a void* and XWindow as an unsigned long so reinterpret those as the appropriate type. Also fixed a spaces for tab formating issue

    Move verbose messaging to setupXorgTopLevelWindow method as Xorg messages should only occur when running in Xorg env.

    Irrlicht returns the XDisplay as a void* and XWindow as an unsigned long so reinterpret those as the appropriate type. Also fixed a spaces for tab formating issue

    Irrlicht returns the XDisplay as a void* and XWindow as an unsigned long so reinterpret those as the appropriate type. Also fixed a spaces for tab formating issue

    Version scheme change: 0.5.0 -> 5.0.0 (#7449)

    

    * Version scheme change: 0.5.0 -> 5.0.0

    * Version scheme change: 0.5.0 -> 5.0.0

    Remove Server::m_ignore_map_edit_events (noop)

    Fix release script

    

    client_lua_api.md -> client_lua_api.txt

    client_lua_api.md -> client_lua_api.txt

    Minimal: Disable disruptive formspec test by default (#7423)

    

    * Minimal: Explicit log levels

    

    * Minimal: Formspec test now disabled by default

    

    This is done because the formspec test was disruptive.

    This test can now be toggled with server command test_formspec first.

    * Minimal: Explicit log levels

    

    * Minimal: Formspec test now disabled by default

    

    This is done because the formspec test was disruptive.

    This test can now be toggled with server command test_formspec first.

    * Minimal: Formspec test now disabled by default

    

    This is done because the formspec test was disruptive.

    This test can now be toggled with server command test_formspec first.

    This is done because the formspec test was disruptive.

    This test can now be toggled with server command test_formspec first.

    This test can now be toggled with server command test_formspec first.

    Server: move shutdown parts to a specific shutdown state object (#7437)

    

    * Server: move shutdown parts to a specific shutdown state object

    * Server: move shutdown parts to a specific shutdown state object

    Make os.tempfolder work correctly for MinGW & MSVC (#7443)

    README.md: Remove 'unfinished' section. (#7440)

    Add hasprivs chat command (#7336)

    

    Require 'basic_privs' priv

    Only the online players are listed.

    Require 'basic_privs' priv

    Only the online players are listed.

    Only the online players are listed.

    Android: gradle 3.1.3 is not available on mavenCentral

    Also update wrapper

    Also update wrapper

    Android: fix tools versions

    

    Resync with stable-0.4

    Resync with stable-0.4

    Android: fix assets cleanup

    Fix the /shutdown command (#7431)

    Disable clang-tidy when no C/C++ files has been modified.

    Bump android version for next release

    Android: use c++_shared library instead of c++_static

    MT doesn't launch without that

    MT doesn't launch without that

    Fix many Android build issues

    

    It remains one issue with MT itself and rtti

    It remains one issue with MT itself and rtti

    Fix typo (GH#7421)

    Fix narrow/utf8 difference in incoming/outcoming messages

    Mapgen flags: Add 'biomes' global mapgen flag (#7355)

    

    Previously the only way to disable biomes was to 'clear' the registered

    biomes in a mod, but this method causes large amounts of unnecessary

    processing:

    1. Calculation of 4 2D noises.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    Previously the only way to disable biomes was to 'clear' the registered

    biomes in a mod, but this method causes large amounts of unnecessary

    processing:

    1. Calculation of 4 2D noises.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    biomes in a mod, but this method causes large amounts of unnecessary

    processing:

    1. Calculation of 4 2D noises.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    processing:

    1. Calculation of 4 2D noises.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    1. Calculation of 4 2D noises.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    2. Looping through all nodes of a mapchunk replacing nodes with identical

    nodes.

    The new flag disables those operations.

    nodes.

    The new flag disables those operations.

    The new flag disables those operations.

    Lua_api.txt: Warn of errors possible with VoxelArea:index()/indexp() (#7422)

    Stop autoforward on BACKWARD key-press (#7417)

    CSM/SSM: Add on_mods_loaded callback (#7411)

    

    * CSM/SSM: Add on_mods_loaded callback

    * CSM/SSM: Add on_mods_loaded callback

    Fix builtin lua function os.tempfolder (#7368)

    

    * Fix builtin lua function os.tempfolder

    * Fix builtin lua function os.tempfolder

    Set ENABLE_GETTEXT to TRUE by default (#7415)

    Modernize lua read (part 1): C++ templating insurance (#7394)

    

    * Modernize lua read (part 1): C++ templating assurance

    

    Implement the float reader

    * Modernize lua read (part 1): C++ templating assurance

    

    Implement the float reader

    Implement the float reader

    Biome dust placement: Improve comments, re-order some lines

    Lua_api.txt: Various improvements (#7402)

    

    Node definition:

    Clearly document custom selection box/collision box (collision box

    documentation was missing).

    Remove incorrect light attenuation statement and duplicated light

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Node definition:

    Clearly document custom selection box/collision box (collision box

    documentation was missing).

    Remove incorrect light attenuation statement and duplicated light

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Clearly document custom selection box/collision box (collision box

    documentation was missing).

    Remove incorrect light attenuation statement and duplicated light

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    documentation was missing).

    Remove incorrect light attenuation statement and duplicated light

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Remove incorrect light attenuation statement and duplicated light

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    source statement.

    

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Nodes:

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Document which drawtypes require 'paramtype = "light"' to avoid

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    appearing black.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Remove incorrect light attenuation statement.

    

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    HUD: Remove 'HUD API is experimental' text.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Noise params: Spread of every octave must exceed 1.

    Particles and spawners: Document glow values.

    Particles and spawners: Document glow values.

    Biomemap: Simplify code of recent commit (#7398)

    Biomemap: Avoid empty biomemap entry to fix failing biome dust (#7393)

    

    'generateBiomes()' constructs the biomemap as it generates biomes.

    The biome calculated at first stone surface encountered is added to

    the biomemap.

    Previously, if no stone surface was encountered in a mapchunk column

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    'generateBiomes()' constructs the biomemap as it generates biomes.

    The biome calculated at first stone surface encountered is added to

    the biomemap.

    Previously, if no stone surface was encountered in a mapchunk column

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    The biome calculated at first stone surface encountered is added to

    the biomemap.

    Previously, if no stone surface was encountered in a mapchunk column

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    the biomemap.

    Previously, if no stone surface was encountered in a mapchunk column

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    Previously, if no stone surface was encountered in a mapchunk column

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    the biomemap was left empty for that (x, z) position, causing biome

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    dust and water surface decoration placement to fail.

    

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    If at the base of a mapchunk column the biomemap is empty, add the

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    currently active biome to the biomemap, or if biome is NULL calculate

    it for this position and add it to the biomemap.

    it for this position and add it to the biomemap.

    Fix isNan on setYaw Lua call (#7380)

    

    * Fix isNan on setYaw Lua call

    * Fix isNan on setYaw Lua call

    Mgv7: Avoid rivergen removing mod-placed nodes when overgenerating (#7388)

    

    Only allow river generation to replace c_stone.

    This also acts as an optimisation by being placed before canyon shape

    calculation.

    Only allow river generation to replace c_stone.

    This also acts as an optimisation by being placed before canyon shape

    calculation.

    This also acts as an optimisation by being placed before canyon shape

    calculation.

    calculation.

    Update embedded Lua to 5.1.5 (#7387)

    LINT fix

    Rename some keys for clarity (#7384)

    Add crossview support (#7361)

    Tidy up dlg_config_world.lua (#5351)

    

    Move code to pkgmgr

    Move code to pkgmgr

    Fix GameUI flag value regression introduced by a78659ed0529226ad937f5e241ad72ba93702959

    

    Added more strong unittests on that part to prevent future regression

    Added more strong unittests on that part to prevent future regression

    Print error when HOME is not set (#7376)

    

    In some configurations, such as when using the runit supervisor and its

    tool chpst, the HOME variable might be unset. This resulted in an

    unclear error message that was hard to pin down.

    In some configurations, such as when using the runit supervisor and its

    tool chpst, the HOME variable might be unset. This resulted in an

    unclear error message that was hard to pin down.

    tool chpst, the HOME variable might be unset. This resulted in an

    unclear error message that was hard to pin down.

    unclear error message that was hard to pin down.

    Fix more GCC 8.1 warnings                                                           1   master 

    

    Fix 3 warnings reported by GCC 8.1 of the following type

    

    ```src/client/gameui.cpp:191:43: warning: « void* memset(void*, int, size_t) » effacement d'un objet du type non trivial « struct GameUI::Flags »; use assignment or value-initialization instead [-Wclass-memaccess]

      memset(&m_flags, 0, sizeof(GameUI::Flags));

    ```

    Fix 3 warnings reported by GCC 8.1 of the following type

    

    ```src/client/gameui.cpp:191:43: warning: « void* memset(void*, int, size_t) » effacement d'un objet du type non trivial « struct GameUI::Flags »; use assignment or value-initialization instead [-Wclass-memaccess]

      memset(&m_flags, 0, sizeof(GameUI::Flags));

    ```

    ```src/client/gameui.cpp:191:43: warning: « void* memset(void*, int, size_t) » effacement d'un objet du type non trivial « struct GameUI::Flags »; use assignment or value-initialization instead [-Wclass-memaccess]

      memset(&m_flags, 0, sizeof(GameUI::Flags));

    ```

      memset(&m_flags, 0, sizeof(GameUI::Flags));

    ```

    Fix a -Wcatch-value warning reported by GCC 8.1

    

    ```

    src/translation.cpp:43:16: warning: interception du type polymorphique « class std::out_of_range » par valeur [-Wcatch-value=]

      } catch (std::out_of_range) {

    ```·

    src/translation.cpp:43:16: warning: interception du type polymorphique « class std::out_of_range » par valeur [-Wcatch-value=]

      } catch (std::out_of_range) {

    ```·

      } catch (std::out_of_range) {

    ```·

    Remove a useless struct keyword for ObjectProperties

    Formspec verification: Fix show_formspec inside callbacks (#7374)

    Vein ore: Fix bug caused by changing perlinmap Y size (#7371)

    

    Because vein ore uses 3D noise (all the other ores use 2D noise) the

    perlinmap Y size can be different in different mapchunks when close

    to the ore Y limits.

    Previously this caused bugs in the vein structure because changes in

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    Because vein ore uses 3D noise (all the other ores use 2D noise) the

    perlinmap Y size can be different in different mapchunks when close

    to the ore Y limits.

    Previously this caused bugs in the vein structure because changes in

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    perlinmap Y size can be different in different mapchunks when close

    to the ore Y limits.

    Previously this caused bugs in the vein structure because changes in

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    to the ore Y limits.

    Previously this caused bugs in the vein structure because changes in

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    Previously this caused bugs in the vein structure because changes in

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    perlinmap Y size did not recreate the noise objects.

    

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    Delete and recreate the noise objects with the new Y size if Y size

    has changed.

    has changed.

    Schematic decorations: Fix placement bug when centred and rotated (#7365)

    

    Previously, the centering caused by the 'place center x/z' flags did

    not take rotation into account. So schematics with unequal X and Z

    dimensions were incorrectly placed. The bug was hidden for schematics

    equal in X and Z dimensions.

    Previously, the centering caused by the 'place center x/z' flags did

    not take rotation into account. So schematics with unequal X and Z

    dimensions were incorrectly placed. The bug was hidden for schematics

    equal in X and Z dimensions.

    not take rotation into account. So schematics with unequal X and Z

    dimensions were incorrectly placed. The bug was hidden for schematics

    equal in X and Z dimensions.

    dimensions were incorrectly placed. The bug was hidden for schematics

    equal in X and Z dimensions.

    equal in X and Z dimensions.

    Dungeons: Fix duplication of y limit parameters (#7359)

    Fix missing ignore textures (#7326)

    Small usage changes for air and ignore items (#7305)

    

    * Remove “you hacker you!” from node description

    * Prevent placement of ignore in builtin

    * Prevent giving of "unknown" explicitly

    * Remove “you hacker you!” from node description

    * Prevent placement of ignore in builtin

    * Prevent giving of "unknown" explicitly

    * Prevent placement of ignore in builtin

    * Prevent giving of "unknown" explicitly

    * Prevent giving of "unknown" explicitly

    Add screenshots to online content browser

    Player marker on both minimaps (#7350)

    Add updating to online content browser

    Pointed_thing_to_face_pos: Avoid crash when player is inside a node (#7342)

    

    Avoid crash in some situations when player is inside a node, causing

    'above' to equal 'under'.

    In this situation return 'under' which is the node position very close

    to the face position that would normally be returned.

    Avoid crash in some situations when player is inside a node, causing

    'above' to equal 'under'.

    In this situation return 'under' which is the node position very close

    to the face position that would normally be returned.

    'above' to equal 'under'.

    In this situation return 'under' which is the node position very close

    to the face position that would normally be returned.

    In this situation return 'under' which is the node position very close

    to the face position that would normally be returned.

    to the face position that would normally be returned.

    Say position of locale dir more clearly in docs (#7338)

    Minimal: Fix HP change crash (#7344)

    Use server's zoom fov for distant world loading.

    Contributing.md: Various additions and edits (#7309)

    

    Add a new point to encourage discussion before coding. Move the 'ask

    before significant coding' suggestion into this.

    Edit and extend commit message guidelines. Refer to core dev commit

    messages as good examples.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Add a new point to encourage discussion before coding. Move the 'ask

    before significant coding' suggestion into this.

    Edit and extend commit message guidelines. Refer to core dev commit

    messages as good examples.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    before significant coding' suggestion into this.

    Edit and extend commit message guidelines. Refer to core dev commit

    messages as good examples.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Edit and extend commit message guidelines. Refer to core dev commit

    messages as good examples.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    messages as good examples.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Remove 'short' and 'briefly' from the description guideline to try to

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    improve description quality.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Larger text for '### A pull-request is considered ..'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Add a second roadmap link to celeron55's blog roadmap which is the 1st

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    part of the forum roadmap.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Add full stops to lists.

    Consistent text size for '## Donations'.

    Consistent text size for '## Donations'.

    Don't show Android edit dialog when tapping read-only field (#7337)

    

    * Don't show Android edit dialog when tapping read-only field

    

    From Lua API, "If the name is empty the textarea is readonly."

    * Don't show Android edit dialog when tapping read-only field

    

    From Lua API, "If the name is empty the textarea is readonly."

    From Lua API, "If the name is empty the textarea is readonly."

    Fix segfault in player migration and crash in log_deprecated

    

    Makes log_deprecated work when triggered from no function

    Makes log_deprecated work when triggered from no function

    Vertical biome blend: Tune PRNG seed for finer detail (#7329)

    Make sure color returns to normal after a damage flash (#7332)

    Update contentdb_url to content.minetest.net

    Camera: Improve subpixel movement (#7319)

    Run detach callbacks on player leave

    

    Correct docs regarding non-nil detaching children

    Correct docs regarding non-nil detaching children

    Fix crash guiConfirmRegistration quit menu (#7313)

    Fix luajit include not being found

    Mgv7: Code cleanup (#7299)

    Fix builtin inventory list crash when size = 0 (#7297)

    Cavegen: Allow small RandomWalk caves to generate beyond mapchunk border

    Fix invisible chat error messages (#7289)

    nodedef: Delete two unused method definitions (#7288)

    Global new() or grab() to be managed in constuctor only (#7235 partial) (#7236)

    

    * g_extrusion_mesh_cache new() and grab() to be managed in constuctor only (#7235 partial)

    

    This global was getting grab()-ed by each call to getItemMesh, incrementing its reference count. What was to be the final drop() in the destructor ended up with > 0 reference count, so memory not freed by Irrlicht.

    * g_extrusion_mesh_cache new() and grab() to be managed in constuctor only (#7235 partial)

    

    This global was getting grab()-ed by each call to getItemMesh, incrementing its reference count. What was to be the final drop() in the destructor ended up with > 0 reference count, so memory not freed by Irrlicht.

    This global was getting grab()-ed by each call to getItemMesh, incrementing its reference count. What was to be the final drop() in the destructor ended up with > 0 reference count, so memory not freed by Irrlicht.

    Allow damage for attached objects, add attach/detach callbacks (#6786)

    

    * Allow right-clicking on attached LuaEntities

    * Allow right-clicking on attached LuaEntities

    MetaDataRef: Add contains() and get() (#7214)

    Mapgen caves: Re-order generation to fix cavern bug

    

    Previously, caverns confused tunnel generation causing biome top and filler

    nodes to appear in caverns.

    Split 'generateCaves()' into 2 functions to separate tunnel and large

    randomwalk cave generation.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    Previously, caverns confused tunnel generation causing biome top and filler

    nodes to appear in caverns.

    Split 'generateCaves()' into 2 functions to separate tunnel and large

    randomwalk cave generation.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    nodes to appear in caverns.

    Split 'generateCaves()' into 2 functions to separate tunnel and large

    randomwalk cave generation.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    Split 'generateCaves()' into 2 functions to separate tunnel and large

    randomwalk cave generation.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    randomwalk cave generation.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    In each mapgen re-order cave generation to generate tunnels before caverns.

    Biome-defined cave liquids: Use faster biome calculation

    Biome-defined dungeon nodes: Use faster biome calculation

    Fix description wrapping in browse online content

    Dungeons: Mostly fix missing stair nodes

    Mgvalleys: Update settingtypes.txt

    Mgvalleys: Code cleanup

    

    Split some long lines.

    Edit comments.

    Remove unnecessary comments and unnecessary commented-out code.

    Use std::fmax/fmin instead of MYMAX/MYMIN.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Split some long lines.

    Edit comments.

    Remove unnecessary comments and unnecessary commented-out code.

    Use std::fmax/fmin instead of MYMAX/MYMIN.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Edit comments.

    Remove unnecessary comments and unnecessary commented-out code.

    Use std::fmax/fmin instead of MYMAX/MYMIN.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Remove unnecessary comments and unnecessary commented-out code.

    Use std::fmax/fmin instead of MYMAX/MYMIN.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Use std::fmax/fmin instead of MYMAX/MYMIN.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Remove scope-limiting braces.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Consistently define literals as floats, except in noise parameters.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Cleanup literals in noise parameters.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Remove unnecessary 'near_cavern' line.

    Reduce max spawn y to be consistent with other mapgens.

    Reduce max spawn y to be consistent with other mapgens.

    Move ASCII art to std::cerr, to remove it from logs

    Formspecs: Allow setting alpha value for the box[] element

    Mgvalleys: Use shared tunnel / cavern code instead of internal

    

    Caverns first appeared in mgvalleys and were later added to other

    mapgens as shared code. Now this shared code can replace mgvalley's

    internal cavern code.

    Also use shared tunnel code instead of internal code.

    

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    Caverns first appeared in mgvalleys and were later added to other

    mapgens as shared code. Now this shared code can replace mgvalley's

    internal cavern code.

    Also use shared tunnel code instead of internal code.

    

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    mapgens as shared code. Now this shared code can replace mgvalley's

    internal cavern code.

    Also use shared tunnel code instead of internal code.

    

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    internal cavern code.

    Also use shared tunnel code instead of internal code.

    

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    Also use shared tunnel code instead of internal code.

    

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    Changes to mapgen that will affect existing worlds (mgvalleys is not

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    stable):

    

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    Single lava and water sources not added in tunnels.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    Previous caverns are unchanged but an equal number of new ones are

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    added at a distance from the previous.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    From y = -256 to 192 nodes below, where the caverns taper at their

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    upper limit, they will have a slightly different shape as the taper

    is now linear.

    is now linear.

    Cave liquids: Use a more precise point for calculating biome

    

    Use the centre point of the route being carved for a more precise match

    between cave liquids and biome.

    Use the centre point of the route being carved for a more precise match

    between cave liquids and biome.

    between cave liquids and biome.

    Fix i386 bit build at OpenBSD (#7259)

    Fix Android build, broken since 87ad4d8

    Node resolver: Make error on fallback optional, disable for mapgen aliases

    Add online content repository

    

    Replaces mods and texture pack tabs with a single content tab

    Replaces mods and texture pack tabs with a single content tab

    Builtin auth handler: Speed up file writing (#7252)

    Fix wrong channel number representation in logs (#7205)

    PlayerSettings struct for player movement code (#7243)

    

    Instead of calling g_settings->getBool("flag") multiple times

    during each movement step, the current settings are cached

    in a new player object member. Updated via registered callbacks.

    Instead of calling g_settings->getBool("flag") multiple times

    during each movement step, the current settings are cached

    in a new player object member. Updated via registered callbacks.

    during each movement step, the current settings are cached

    in a new player object member. Updated via registered callbacks.

    in a new player object member. Updated via registered callbacks.

    Android: Modify touch screen GUI's buttons (#7240)

    

    * Android: Add zoom, minimap, and toggle chat button

    Zoom button is put above jump button.

    Minimap and toggle chat button are put in settings bar.

    * Jump button is rotated down button

    * Move three buttons on the right screen higher

    * Android: Add zoom, minimap, and toggle chat button

    Zoom button is put above jump button.

    Minimap and toggle chat button are put in settings bar.

    * Jump button is rotated down button

    * Move three buttons on the right screen higher

    Zoom button is put above jump button.

    Minimap and toggle chat button are put in settings bar.

    * Jump button is rotated down button

    * Move three buttons on the right screen higher

    Minimap and toggle chat button are put in settings bar.

    * Jump button is rotated down button

    * Move three buttons on the right screen higher

    * Jump button is rotated down button

    * Move three buttons on the right screen higher

    * Move three buttons on the right screen higher

    Cavegen: Fix variable typo that broke mgvalleys large cave distribution (#7249)

    

    Fix elusive 5 year old bug that caused mgvalleys large caves to be flat and

    limited to mapchunk borders.

    Error was fixed 2 years ago in 'CavesV6' but not in 'CavesRandomWalk'.

    Fix elusive 5 year old bug that caused mgvalleys large caves to be flat and

    limited to mapchunk borders.

    Error was fixed 2 years ago in 'CavesV6' but not in 'CavesRandomWalk'.

    limited to mapchunk borders.

    Error was fixed 2 years ago in 'CavesV6' but not in 'CavesRandomWalk'.

    Error was fixed 2 years ago in 'CavesV6' but not in 'CavesRandomWalk'.

    Add CMakeDoxy* to .gitignore

    FOV: Raise lower limit to avoid zoom-loading of distant world (#7234)

    

    In the client, raise lower limit from 30 to 45 degrees, to avoid server

    seeing this as a zoom and loading world beyond the server-set limit.

    Add minimum in settingtypes.txt and enforce lower limit when set using

    minetest.conf.

    

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    In the client, raise lower limit from 30 to 45 degrees, to avoid server

    seeing this as a zoom and loading world beyond the server-set limit.

    Add minimum in settingtypes.txt and enforce lower limit when set using

    minetest.conf.

    

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    seeing this as a zoom and loading world beyond the server-set limit.

    Add minimum in settingtypes.txt and enforce lower limit when set using

    minetest.conf.

    

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    Add minimum in settingtypes.txt and enforce lower limit when set using

    minetest.conf.

    

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    minetest.conf.

    

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    In the server, distrust the client-sent FOV if below the heuristic zoom

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    threshold and use the player object property 'zoom_fov' to check it, to

    protect against hacked clients.

    protect against hacked clients.

    Android: Replace movement buttons with joystick (#7126)

    

    * Android: Replace movement buttons with joystick

    

    Replace movement control buttons (arrows at bottom left screen) with virtual joystick.

    Joystick has 8 directions (same as keyboard). Basically, just map it to keyboard input.

    Joystick applies only on left 1/3 of screen.

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    * Android: Replace movement buttons with joystick

    

    Replace movement control buttons (arrows at bottom left screen) with virtual joystick.

    Joystick has 8 directions (same as keyboard). Basically, just map it to keyboard input.

    Joystick applies only on left 1/3 of screen.

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Replace movement control buttons (arrows at bottom left screen) with virtual joystick.

    Joystick has 8 directions (same as keyboard). Basically, just map it to keyboard input.

    Joystick applies only on left 1/3 of screen.

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Joystick has 8 directions (same as keyboard). Basically, just map it to keyboard input.

    Joystick applies only on left 1/3 of screen.

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Joystick applies only on left 1/3 of screen.

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Joystick's position can be fixed by enabling fixed_virtual_joystick setting.

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Three new images:

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    (1) placeholder joystick,

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    (2) joystick container (background), and

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    (3) joystick cursor.

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Remove unused images: movement control buttons (*_arrow.png).

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    New data type: touch_gui_joystick_move_id

    

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Joystick's fixed position is spaced one button size from bottom and from left of screen.

    Remove unused variable: m_joystick_downlocation

    Remove unused variable: m_joystick_downlocation

    Fix segfault caused by wrong wgettext()

    Fix for translating empty strings

    

    Fix for incorrect translation of empty strings

    

    In the key change menu, when a button key not have name an empty string is passed to gettext.

    The empty string is reserved for gettext to return de header of the .po file an this is shoved in the button

    Fix for incorrect translation of empty strings

    

    In the key change menu, when a button key not have name an empty string is passed to gettext.

    The empty string is reserved for gettext to return de header of the .po file an this is shoved in the button

    In the key change menu, when a button key not have name an empty string is passed to gettext.

    The empty string is reserved for gettext to return de header of the .po file an this is shoved in the button

    The empty string is reserved for gettext to return de header of the .po file an this is shoved in the button

    upright_sprite: Fix texture position for players

    Fixes #6471

    Fixes #6471

    Sun colour: Undo colour change. Remove double assignment (#7227)

    

    Commit 5070ca2111dd5b3f333a942059ef2c592de8dc24 changed sun colour by

    fixing what seemed to be a code mistake.

    Return to the standard colour but comment-out the first assignment of the

    double-assignment for performance.

    Add a comment to explain.

    Commit 5070ca2111dd5b3f333a942059ef2c592de8dc24 changed sun colour by

    fixing what seemed to be a code mistake.

    Return to the standard colour but comment-out the first assignment of the

    double-assignment for performance.

    Add a comment to explain.

    fixing what seemed to be a code mistake.

    Return to the standard colour but comment-out the first assignment of the

    double-assignment for performance.

    Add a comment to explain.

    Return to the standard colour but comment-out the first assignment of the

    double-assignment for performance.

    Add a comment to explain.

    double-assignment for performance.

    Add a comment to explain.

    Add a comment to explain.

    Biome API / dungeons: Add biome-defined dungeon nodes

    

    Add new biome fields 'node_dungeon', 'node_dungeon_alt', 'node_dungeon_stair'.

    If 'node_dungeon' is not defined dungeons fall back to classic behaviour.

    

    Remove messy and imprecise dungeon material code from 'generateBiomes()'.

    Code deciding dungeon materials is now in 'generateDungeons()' and uses the

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    Add new biome fields 'node_dungeon', 'node_dungeon_alt', 'node_dungeon_stair'.

    If 'node_dungeon' is not defined dungeons fall back to classic behaviour.

    

    Remove messy and imprecise dungeon material code from 'generateBiomes()'.

    Code deciding dungeon materials is now in 'generateDungeons()' and uses the

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    If 'node_dungeon' is not defined dungeons fall back to classic behaviour.

    

    Remove messy and imprecise dungeon material code from 'generateBiomes()'.

    Code deciding dungeon materials is now in 'generateDungeons()' and uses the

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    Remove messy and imprecise dungeon material code from 'generateBiomes()'.

    Code deciding dungeon materials is now in 'generateDungeons()' and uses the

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    Code deciding dungeon materials is now in 'generateDungeons()' and uses the

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    biome at mapchunk centre for more precision.

    

    Remove hardcoded 'MG_STONE' types as long intended.

    Remove hardcoded 'MG_STONE' types as long intended.

    Fix SAOM (#7200)

    

    * Bugfix

    * Bugfix

    Add player:get_meta(), deprecate player attributes (#7202)

    

    * Add player:get_meta(), deprecate player attributes

    * Add player:get_meta(), deprecate player attributes

    Mgcarpathian: Fix spawn level calculation (#7212)

    Mgcarpathian: Remove insignificant 'base' noise variation (#7209)

    

    Was only +-1 node over a scale of thousands of nodes.

    Replace with 'base_level' parameter value.

    Was only +-1 node over a scale of thousands of nodes.

    Replace with 'base_level' parameter value.

    Replace with 'base_level' parameter value.

    Zoom adjustDist(): Improve variable name (#7208)

    Biome API / cavegen: Add definable cave liquid for a biome (#7192)

    

    Add 'node_cave_liquid' as a new field in biome registration.

    If field is absent cave liquids fall back to classic behaviour.

    Add 'node_cave_liquid' as a new field in biome registration.

    If field is absent cave liquids fall back to classic behaviour.

    If field is absent cave liquids fall back to classic behaviour.

    [clang-tidy] Promote some performance-* as a coding error (#7194)

    

    * Promote performance-type-promotion-in-math-fn as a coding error

    * Promote performance-faster-string-find too (which is not problematic currently)

    * Same for performance-implicit-cast-in-loop

    * Fix remaining tidy points

    * Promote performance-type-promotion-in-math-fn as a coding error

    * Promote performance-faster-string-find too (which is not problematic currently)

    * Same for performance-implicit-cast-in-loop

    * Fix remaining tidy points

    * Promote performance-faster-string-find too (which is not problematic currently)

    * Same for performance-implicit-cast-in-loop

    * Fix remaining tidy points

    * Same for performance-implicit-cast-in-loop

    * Fix remaining tidy points

    * Fix remaining tidy points

    Huge LBM lookup performance improvement on mapblock loading (#7195)

    

    * Huge LBM lookup performance improvement on mapblock loading

    * Huge LBM lookup performance improvement on mapblock loading

    Fix 5 issues reported by PVS studio

    

    * src/sky.cpp  146     warn    V519 The 'suncolor_f.r' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 142, 146.

    * src/sky.cpp  147     warn    V519 The 'suncolor_f.g' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 143, 147.

    * src/sky.cpp  148     warn    V519 The 'suncolor_f.b' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 144, 148.

    * src/threading/thread.cpp     63      err     V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_thread_obj.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    * src/sky.cpp  146     warn    V519 The 'suncolor_f.r' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 142, 146.

    * src/sky.cpp  147     warn    V519 The 'suncolor_f.g' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 143, 147.

    * src/sky.cpp  148     warn    V519 The 'suncolor_f.b' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 144, 148.

    * src/threading/thread.cpp     63      err     V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_thread_obj.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    * src/sky.cpp  147     warn    V519 The 'suncolor_f.g' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 143, 147.

    * src/sky.cpp  148     warn    V519 The 'suncolor_f.b' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 144, 148.

    * src/threading/thread.cpp     63      err     V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_thread_obj.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    * src/sky.cpp  148     warn    V519 The 'suncolor_f.b' variable is assigned values twice successively. Perhaps this is a mistake. Check lines: 144, 148.

    * src/threading/thread.cpp     63      err     V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_thread_obj.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    * src/threading/thread.cpp     63      err     V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_thread_obj.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    * src/server.cpp       3243    err     V595 The 'log' pointer was utilized before it was verified against nullptr. Check lines: 3243, 3258.

    Fix last performance-type-promotion-in-math-fn problems

    Optimize a little bit isBlockInSight, adjustDist & collisions (#7193)

    

    * Use constexpr + unroll some calculations to cache definitively some calculations

    * Unroll some calls in collision code & use a constref instead of a copy in one occurence

    * Use constexpr + unroll some calculations to cache definitively some calculations

    * Unroll some calls in collision code & use a constref instead of a copy in one occurence

    * Unroll some calls in collision code & use a constref instead of a copy in one occurence

    Fix last clang-tidy reported problems for performance-type-promotion-in-math-fn

    

    Based on https://travis-ci.org/minetest/minetest/jobs/361810382 output

    

    Also fix 2 missing copyright notices

    Based on https://travis-ci.org/minetest/minetest/jobs/361810382 output

    

    Also fix 2 missing copyright notices

    Also fix 2 missing copyright notices

    Fix more clang-tidy reported problems for performance-type-promotion-in-math-fn

    

    Based on https://travis-ci.org/minetest/minetest/jobs/361714253 output

    Based on https://travis-ci.org/minetest/minetest/jobs/361714253 output

    Fix various clang-tidy reported performance-type-promotion-in-math-fn

    Selected ItemStack: Reduce black magic (#6520)

    

    * Selected ItemStack: Reduce black magic

    Better button variable value naming

    * Selected ItemStack: Reduce black magic

    Better button variable value naming

    Better button variable value naming

    Optimize entity-entity collision (#6587)

    

    * Add IrrLicht type aliases

    * Add hash for IrrLicht vector

    * Add object map

    * Add IrrLicht type aliases

    * Add hash for IrrLicht vector

    * Add object map

    * Add hash for IrrLicht vector

    * Add object map

    * Add object map

    Fix many issues reported by clang-tidy (#7189)

    

    * Fix many issues reported by clang-tidy

    

    We have many issues in code related to some performance to float <-> double.

    Clang-tidy reported it in performance-type-promotion-in-math-fn

    

    I fixed many of them. It's not ready for a promote to blocking

    

    Also fix some value which should be const-ref

    * Fix many issues reported by clang-tidy

    

    We have many issues in code related to some performance to float <-> double.

    Clang-tidy reported it in performance-type-promotion-in-math-fn

    

    I fixed many of them. It's not ready for a promote to blocking

    

    Also fix some value which should be const-ref

    We have many issues in code related to some performance to float <-> double.

    Clang-tidy reported it in performance-type-promotion-in-math-fn

    

    I fixed many of them. It's not ready for a promote to blocking

    

    Also fix some value which should be const-ref

    Clang-tidy reported it in performance-type-promotion-in-math-fn

    

    I fixed many of them. It's not ready for a promote to blocking

    

    Also fix some value which should be const-ref

    I fixed many of them. It's not ready for a promote to blocking

    

    Also fix some value which should be const-ref

    Also fix some value which should be const-ref

    'fix' LINT, use InventoryLocation==

    Run callback in IDropAction, refactor function arguments

    Add player inventory callbacks

    Formspecs: Use mouse wheel to pick up and deposit single items

    LINT: add clang-tidy step (#6295)

    

    * Implement new travis clang-tidy build step

    

    * This step enable some rules and enforce one rule as error

    * This permits to have some C++ quality rules based on clang & clang contributor guidelines

    

    * Fix clang-tidy reported problems on push_back -> emplace_back

    * Implement new travis clang-tidy build step

    

    * This step enable some rules and enforce one rule as error

    * This permits to have some C++ quality rules based on clang & clang contributor guidelines

    

    * Fix clang-tidy reported problems on push_back -> emplace_back

    * This step enable some rules and enforce one rule as error

    * This permits to have some C++ quality rules based on clang & clang contributor guidelines

    

    * Fix clang-tidy reported problems on push_back -> emplace_back

    * This permits to have some C++ quality rules based on clang & clang contributor guidelines

    

    * Fix clang-tidy reported problems on push_back -> emplace_back

    * Fix clang-tidy reported problems on push_back -> emplace_back

    ObjectRef: Add add_velocity() (#3208)

    

    Allow changing the velocity of objects relatively to their current velocity

    Allow changing the velocity of objects relatively to their current velocity

    event.h: Fix import GCC warning caused by ce87310

    Client eventmanager refactor (#7179)

    

    * Drop EventManager from GameDef & do some client cleanups

    

    * EventManager is only used by Client. Don't expose it on Server & GameDef for nothing

    * Drop Client::event() in favor of direct calls to getEventManager

    * Cleanup some event put from new + put to put(new)

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * Drop EventManager from GameDef & do some client cleanups

    

    * EventManager is only used by Client. Don't expose it on Server & GameDef for nothing

    * Drop Client::event() in favor of direct calls to getEventManager

    * Cleanup some event put from new + put to put(new)

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * EventManager is only used by Client. Don't expose it on Server & GameDef for nothing

    * Drop Client::event() in favor of direct calls to getEventManager

    * Cleanup some event put from new + put to put(new)

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * Drop Client::event() in favor of direct calls to getEventManager

    * Cleanup some event put from new + put to put(new)

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * Cleanup some event put from new + put to put(new)

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * MtEvent: add Type(u8) enum

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * This will enhance event performance & ensure stricter type

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * Drop MtEvent::checkIs (unused)

    

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * clang-tidy reported fixes

    

    * Code style

    

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    * Code style

    

    * More code styling

    * Move event_manager.h to the client directory as it's only used by client

    

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    Add EventManager unittests + switch to unordered_map as order is not important here

    

    Drop a unused function

    Drop a unused function

    Mgcarpathian: Mapgen loop optimisations. fabs() -> std::fabs()

    

    * Mgcarpathian: ZYX -> ZXY mapgen loop optimisation.

    

    * 'pow(n, 3)' to 'n * n * n' type optimisations.

    

    * fabs() -> std::fabs().

    * Mgcarpathian: ZYX -> ZXY mapgen loop optimisation.

    

    * 'pow(n, 3)' to 'n * n * n' type optimisations.

    

    * fabs() -> std::fabs().

    * 'pow(n, 3)' to 'n * n * n' type optimisations.

    

    * fabs() -> std::fabs().

    * fabs() -> std::fabs().

    core.rotate_node: Do not trigger after_place_node (#6900)

    Sound: fix static initialization order dependency by not having one (#7168)

    

    Ensure singleton is reset

    Ensure singleton is reset

    Optional alpha channel support for entities

    Fix a warning introduced by c5b4e541749c50805519ce040d98a0a8e5e0ec03

    Fix a warning reported by clang

    

    minetest/src/script/cpp_api/s_player.h:27:1: warning: struct 'PlayerHPChangeReason' was previously declared as a class [-Wmismatched-tags]

    struct PlayerHPChangeReason;

    minetest/src/script/cpp_api/s_player.h:27:1: warning: struct 'PlayerHPChangeReason' was previously declared as a class [-Wmismatched-tags]

    struct PlayerHPChangeReason;

    struct PlayerHPChangeReason;

    Fix various Client class functions not marked as override (virtual)

    

    Also switch some of them which are reported by clang-tidy

    Also switch some of them which are reported by clang-tidy

    Load dependencies and description from mod.conf

    Add reasons to on_dieplayer and on_hpchange

    Add formspec theming using prepended strings

    Update jsoncpp to 1.8.4 (#7172)

    Guard sound manager initialization with "enable_sound" (#7167)

    macOS: don't require X11 libraries during compilation (#7149)

    

    The xxf86vm needs to be removed from Apple builds to avoid CMake Error XXF86VM_LIBRARY is NOTFOUND

    The xxf86vm needs to be removed from Apple builds to avoid CMake Error XXF86VM_LIBRARY is NOTFOUND

    Mapgen: Remove unused mgv7 code and some unused biometypes

    Make sounds stop playing when entering game or mainmenu

    Cleanup sound manager class (#7158)

    

    * Cleanup sound manager client

    

    * Use some const refs

    * Use auto on iterators

    * Drop unused parameters

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Cleanup sound manager client

    

    * Use some const refs

    * Use auto on iterators

    * Drop unused parameters

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Use some const refs

    * Use auto on iterators

    * Drop unused parameters

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Use auto on iterators

    * Drop unused parameters

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Drop unused parameters

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Move sound_openal.* to client folder

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    * Move sound.cpp + OnDemandSoundFetcher to client/ folder + reorganize includes properly

    Print the mod loading time (#7137)

    

    * Print the mod loading time

    * Print the mod loading time

    Fix some gcc 7.3 reported warnings

    

    ```

    src/client/joystick_controller.h:85:2: warning: duplicate 'virtual' declaration specifier [-Wduplicate-decl-specifier]

            virtual bool isTriggered(const irr::SEvent::SJoystickEvent &ev) const;

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickAxisCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

                    destroy(_Up* __p) { __p->~_Up(); }

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

    src/client/joystick_controller.h:85:2: warning: duplicate 'virtual' declaration specifier [-Wduplicate-decl-specifier]

            virtual bool isTriggered(const irr::SEvent::SJoystickEvent &ev) const;

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickAxisCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

                    destroy(_Up* __p) { __p->~_Up(); }

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

            virtual bool isTriggered(const irr::SEvent::SJoystickEvent &ev) const;

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickAxisCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

                    destroy(_Up* __p) { __p->~_Up(); }

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickAxisCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

                    destroy(_Up* __p) { __p->~_Up(); }

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

                    destroy(_Up* __p) { __p->~_Up(); }

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

    /usr/bin/../lib64/gcc/x86_64-pc-linux-gnu/7.3.1/../../../../include/c++/7.3.1/ext/new_allocator.h:140:22: warning: destructor called on non-final 'JoystickButtonCmb' that has virtual functions but non-virtual destructor [-Wdelete-non-virtual-dtor]

            destroy(_Up* __p) { __p->~_Up(); }

    ```

            destroy(_Up* __p) { __p->~_Up(); }

    ```

    Global initialization of sound using SoundManagerGlobal (#7063)

    

    * Global initialization of sound using SoundManagerGlobal

    * Global initialization of sound using SoundManagerGlobal

    Update mesh collector and move it to a separate file (#6904)

    

    * Update MeshCollector

    

    * Simplify MeshCollector

    * Update MeshCollector

    

    * Simplify MeshCollector

    * Simplify MeshCollector

    Gitlab CI: Disable currently broken ubuntu 16.10 & 17.04 builds

    

    I will try to repair them later

    I will try to repair them later

    Lua_api.txt: Improve noise documentation

    Minetest ASCII art: Move from actionstream to rawstream

    Mgfractal / chunksize: Improve documentation

    Lua_api.txt: Fix hardware colouring documentation

    

    More 'draw type' -> 'paramtype2' changes, missing from a previous commit.

    More 'draw type' -> 'paramtype2' changes, missing from a previous commit.

    Add src/unittest/test_world/world.mt to gitignore

    

    Fixes #7146

    Fixes #7146

    Add missing file to android build

    Fix node-nodebox lighting difference in direct sunlight (#7061)

    .gitignore: ignore more files (android, unittests)

    Lua_api.txt: Split long lines part 6

    Fix a crash or random memory leak when reseting saved environment variable in test_servermodmanager.cpp

    Drop Server::m_enable_rollback_recording it's only used in server constructor

    ServerEnvironment::loadDefaultMeta: Loading default meta is only possible for ServerEnv itself

    Forgot to remove obsolete Server::m_mods

    Server: delegate mod management & config to ServerModConfiguration (#7131)

    

    * Server: delegate mod management & config to ServerModConfiguration (rename it to ServerModManager)

    

    * Use c++11 range based loops

    * Add unittests + experimental/default mod as a test case to permit testing mod loading in future tests

    * Server: delegate mod management & config to ServerModConfiguration (rename it to ServerModManager)

    

    * Use c++11 range based loops

    * Add unittests + experimental/default mod as a test case to permit testing mod loading in future tests

    * Use c++11 range based loops

    * Add unittests + experimental/default mod as a test case to permit testing mod loading in future tests

    * Add unittests + experimental/default mod as a test case to permit testing mod loading in future tests

    Fix an alone if to be with a missing else

    Lua_api.txt: Split long lines part 5, fix hardware colouring docs

    Biomes: Fix vertical biome blend

    README: Fix Fedora dependencies (#7133)

    Lua_api.txt: Split long lines part 4

    Rename 'subgame' to 'game'

    Lua_api.txt: Improve and complete drawtype documentation

    

    Move documentation of mesh and plantlike_rooted drawtypes into main section.

    Move documentation of mesh and plantlike_rooted drawtypes into main section.

    Lua_api.txt: Split long lines part 3

    Biome API: Add 'get_biome_name(biome_id)' API

    

    Change name of default biome to a more suitable lowercase 'default'.

    Change name of default biome to a more suitable lowercase 'default'.

    Add Voxelarea unittests (#7121)

    

    * Add voxelarea unittests

    * Add voxelarea unittests

    Android: typo fix since recent gradle update, as output path changed

    Finally fix android build

    Fix Android build, but there is a remaining linking issue in guiConfirmRegistration

    

    * Also fix variable name overloading in guiConfirmRegistration

    * Also fix variable name overloading in guiConfirmRegistration

    Android build fixes for c++11

    Android: update tools (gradle, NDK) & prepare to switch to clang

    Drop texture file list cache (#6660)

    Fix typo in lighting code since bcdb3d5

    Lua_api.txt: Split long lines part 2

    Spawn level: Add 'get_spawn_level(x, z)' API

    

    Returns a suitable player spawn y co-ordinate for unmodified terrain.

    Returns a suitable player spawn y co-ordinate for unmodified terrain.

    Formspecs: Unify textarea and field parsing functions, fix wrong fallback text

    

    * textarea[], field[]: Unify function, fix wrong fallback text

    * Remove apparently superflous mainmenumanager.h incldue

    * intlGUIEditBox.cpp: make read-only boxes really read-only

    * Use elseif (trivial)

    * textarea[], field[]: Unify function, fix wrong fallback text

    * Remove apparently superflous mainmenumanager.h incldue

    * intlGUIEditBox.cpp: make read-only boxes really read-only

    * Use elseif (trivial)

    * Remove apparently superflous mainmenumanager.h incldue

    * intlGUIEditBox.cpp: make read-only boxes really read-only

    * Use elseif (trivial)

    * intlGUIEditBox.cpp: make read-only boxes really read-only

    * Use elseif (trivial)

    * Use elseif (trivial)

    VoxelArea: add_{x,y,z,p} must be static

    

    Fix some documentations issues

    Use getNodeNoCheck(v3s16, ...) in some cases instead of getNodeNoCheck(x, y, z, ...)

    Fix some documentations issues

    Use getNodeNoCheck(v3s16, ...) in some cases instead of getNodeNoCheck(x, y, z, ...)

    Use getNodeNoCheck(v3s16, ...) in some cases instead of getNodeNoCheck(x, y, z, ...)

    Drop unused struct ModLicenseInfo & ModAuthorInfo + default constructor in ModMetadata

    ServerEnvironment & StaticObject cleanups

    

    * isFreeServerActiveObjectId is now part of ServerEnvironment

    * getFreeServerActiveObjectId is now part of ServerEnvironment

    * StaticObject constructor now take ServerActiveObject instead of type + string. This permits to remove a big string copy in some code parts

    * isFreeServerActiveObjectId is now part of ServerEnvironment

    * getFreeServerActiveObjectId is now part of ServerEnvironment

    * StaticObject constructor now take ServerActiveObject instead of type + string. This permits to remove a big string copy in some code parts

    * getFreeServerActiveObjectId is now part of ServerEnvironment

    * StaticObject constructor now take ServerActiveObject instead of type + string. This permits to remove a big string copy in some code parts

    * StaticObject constructor now take ServerActiveObject instead of type + string. This permits to remove a big string copy in some code parts

    Drop unused Server::m_ignore_map_edit_events_peer_id

    Variable name fix + structure creation unrolling in lighting code

    Drop less performant Server::setBlockNotSent for ClientInterface::markBlockposAsNotSent

    Lua_api.txt: Split long lines part 1

    Gennotify docs: Clarify returned positions for decorations

    Biomes: Document xyz biome limits

    Getv3intfield: Fix logic of return bool

    Biomes: Add 'min_pos'/'max_pos' xyz biome limits

    

    'y_min' and 'y_max' are still accepted for compatibility.

    'y_min' and 'y_max' are still accepted for compatibility.

    Cleanup & bugfix

    

    * ObjectRef::set_local_animation: fix wrong lua return (should push a boolean, currently returns nil)

    * ObjectRef::set_eye_offset: fix wrong lua return (should push a boolean, currently returns nil)

    * Fix various Server functions which depends on RemotePlayer objet and return true/false when player object is nil whereas it's a caller implementation error. Change those bool functions to void and add sanitize_check call instead. Current callers are always checking player object validity

    * Optimize Server::setClouds : use CloudParams object ref instead of attribute deserialization from structure & perform RemotePlayer::setCloudParams directly in server class like many other calls

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    * ObjectRef::set_local_animation: fix wrong lua return (should push a boolean, currently returns nil)

    * ObjectRef::set_eye_offset: fix wrong lua return (should push a boolean, currently returns nil)

    * Fix various Server functions which depends on RemotePlayer objet and return true/false when player object is nil whereas it's a caller implementation error. Change those bool functions to void and add sanitize_check call instead. Current callers are always checking player object validity

    * Optimize Server::setClouds : use CloudParams object ref instead of attribute deserialization from structure & perform RemotePlayer::setCloudParams directly in server class like many other calls

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    * ObjectRef::set_eye_offset: fix wrong lua return (should push a boolean, currently returns nil)

    * Fix various Server functions which depends on RemotePlayer objet and return true/false when player object is nil whereas it's a caller implementation error. Change those bool functions to void and add sanitize_check call instead. Current callers are always checking player object validity

    * Optimize Server::setClouds : use CloudParams object ref instead of attribute deserialization from structure & perform RemotePlayer::setCloudParams directly in server class like many other calls

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    * Fix various Server functions which depends on RemotePlayer objet and return true/false when player object is nil whereas it's a caller implementation error. Change those bool functions to void and add sanitize_check call instead. Current callers are always checking player object validity

    * Optimize Server::setClouds : use CloudParams object ref instead of attribute deserialization from structure & perform RemotePlayer::setCloudParams directly in server class like many other calls

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    * Optimize Server::setClouds : use CloudParams object ref instead of attribute deserialization from structure & perform RemotePlayer::setCloudParams directly in server class like many other calls

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    * Optimize Server::SendCloudParams: use CloudParams object ref instead of deserialized attributes

    Cleanup: drop Server::hudGetHotbarSelectedImage()

    

    Call directly accessible RemotePlayer::getHotbarSelectedImage() from server api

    Call directly accessible RemotePlayer::getHotbarSelectedImage() from server api

    Cleanup: drop Server::hudGetHotbarImage()

    

    Call directly accessible RemotePlayer::getHotbarImage() from server api & make it const ref

    Call directly accessible RemotePlayer::getHotbarImage() from server api & make it const ref

    Cleanup: drop Server::hudGetHotbarItemcount()

    

    Call directly accessible RemotePlayer::getHotbarItemcount() from server api

    Call directly accessible RemotePlayer::getHotbarItemcount() from server api

    mods.cpp/h: little performance improvement in getModsInPath (+ codestyle) (#7108)

    

    * mods.cpp/h: little performance improvement in getModsInPath

    * mods.cpp/h: little performance improvement in getModsInPath

    Fix bad markdown in lua_api.txt

    Fix missing warningstream (or similar problem) (#7034)

    

    Use the --color command line parameter instead of a setting for coloured logs

    

    This fixes the missing warningstream bug, g_settings->get mustn't be used there.

    Also, the decision about en- or disabling log colours fits better to the command line parameters than minetest settings.

    Use the --color command line parameter instead of a setting for coloured logs

    

    This fixes the missing warningstream bug, g_settings->get mustn't be used there.

    Also, the decision about en- or disabling log colours fits better to the command line parameters than minetest settings.

    This fixes the missing warningstream bug, g_settings->get mustn't be used there.

    Also, the decision about en- or disabling log colours fits better to the command line parameters than minetest settings.

    Also, the decision about en- or disabling log colours fits better to the command line parameters than minetest settings.

    Allow for getting world name and path separately on the command line (#6555)

    

    Change to --worldlist instead of --world list.

    

    Gets rid of --worldpath parameter added as part of this pull request,

    instead moving the listing function to a command --worldlist that

    accepts either name, path, or both and prints out the corresponding

    information.

    Change to --worldlist instead of --world list.

    

    Gets rid of --worldpath parameter added as part of this pull request,

    instead moving the listing function to a command --worldlist that

    accepts either name, path, or both and prints out the corresponding

    information.

    Gets rid of --worldpath parameter added as part of this pull request,

    instead moving the listing function to a command --worldlist that

    accepts either name, path, or both and prints out the corresponding

    information.

    instead moving the listing function to a command --worldlist that

    accepts either name, path, or both and prints out the corresponding

    information.

    accepts either name, path, or both and prints out the corresponding

    information.

    information.

    Gennotify: Add 'minetest.get_decoration_id' API

    

    Returns the decoration ID for the provided decoration name string.

    For use with gennotify, to know the decoration IDs for use in

    'minetest.set_gen_notify'.

    Returns the decoration ID for the provided decoration name string.

    For use with gennotify, to know the decoration IDs for use in

    'minetest.set_gen_notify'.

    For use with gennotify, to know the decoration IDs for use in

    'minetest.set_gen_notify'.

    'minetest.set_gen_notify'.

    Generate Notifier: Clear events once after all 'on generated' functions

    MapgenValleys: Fixed submarine valleys shape

    c_converter: Function template for numeric fields, add v3s16 default (#7090)

    Slippery: Simplify, make more efficient (#7086)

    

    Use already existing collision results for the nearest colliding node

    Fix slippery effect in free_move mode

    Use already existing collision results for the nearest colliding node

    Fix slippery effect in free_move mode

    Fix slippery effect in free_move mode

    Cleanup in flat lighting (#7051)

    Fix liquid post effect colour behaviour in third person view

    Place schematic (on vmanip): Enable use of 'place center' flags

    

    For 'place schematic' and 'place schematic on vmanip' APIs.

    Fix 'place center' code to properly centre schematics.

    Fix some comments.

    For 'place schematic' and 'place schematic on vmanip' APIs.

    Fix 'place center' code to properly centre schematics.

    Fix some comments.

    Fix 'place center' code to properly centre schematics.

    Fix some comments.

    Fix some comments.

    CollisionMoveSimple: Collide with 'ignore' nodes

    SAO limits: Allow SAOs to exist outside the set 'mapgen limit'

    Fix CMake error (#7074) by bumping the required CMake version past 3.8.1 (#7075)

    is_area_protected: Rename from intersects_protection (#7073)

    

    * is_area_protected: Rename from intersects_protection

    Return first protected position

    Clarify docs: Mods may overwrite the function

    * is_area_protected: Rename from intersects_protection

    Return first protected position

    Clarify docs: Mods may overwrite the function

    Return first protected position

    Clarify docs: Mods may overwrite the function

    Clarify docs: Mods may overwrite the function

    CMakeLists use the source_group command to improve look and feel when generating Visual Studio projects.

    The TREE argument of source_group appears in CMake 3.8 therefore check for version.

    The TREE argument of source_group appears in CMake 3.8 therefore check for version.

    CMakeLists pass windows sources (manifest and resource file) to executable targets separately from common_SRCS

    Registration dialog: Larger text field with scrollbars (#7047)

    

    Center text, text area doubled now

    Center text, text area doubled now

    Find nodes in area (under air): Raise volume limit and document it

    Settingtypes.txt: Fix valleys dungeon ymax error

    Vertical biome blend: Tune blend patterns

    Dungeons: Add Y limits in all mapgens

    

    Preserve the upper limit used in mgvalleys.

    Preserve the upper limit used in mgvalleys.

    Delete world dialog: Move buttons to avoid double click deletion

    

    Move confirmation delete button to never overlap initial delete button,

    to avoid world deletion by accidental double click.

    Move confirmation delete button to never overlap initial delete button,

    to avoid world deletion by accidental double click.

    to avoid world deletion by accidental double click.

    /shutdown can't do countdown when using reconnect and/or shutdown message (#7055)

    

    Delay was converted from the param string and not the delay value, thus never using the actual given delay value when used in combination with other string values in the param, in this case reconnect and the shutdown messsage.

    Delay was converted from the param string and not the delay value, thus never using the actual given delay value when used in combination with other string values in the param, in this case reconnect and the shutdown messsage.

    Add a refresh button to the serverlist (#6957)

    

    * add refresh button

    

    * Make search and refresh buttons smaller

    

    * Change to image button

    * add refresh button

    

    * Make search and refresh buttons smaller

    

    * Change to image button

    * Make search and refresh buttons smaller

    

    * Change to image button

    * Change to image button

    Mitigate formspec exploits by verifying that the formspec was shown to the user by the server. (#6878)

    

    This doesn't check the fields in anyway whatsoever so it should only be seen as a way to mitigate exploits, a last line of defense to make it harder to exploit bugs in mods, not as a reason to not do all the usually checks.

    This doesn't check the fields in anyway whatsoever so it should only be seen as a way to mitigate exploits, a last line of defense to make it harder to exploit bugs in mods, not as a reason to not do all the usually checks.

    Lua API documentation: Fix spelling (#7046)

    Check argument types inside MetaDataRef Lua API (#7045)

    Fix "Ignoring CONTENT_IGNORE redefinition" warning (#4393)

    

    minetest.override_item still passes to core

    minetest.override_item still passes to core

    Remove legacy chat network code. (#6954)

    Render copyright notice: Fix name spelling (#7042)

    Add `on_auth_fail` callback (#7039)

    

    Called when a client fails to supply the correct password for the account it's attempting to login as.

    Called when a client fails to supply the correct password for the account it's attempting to login as.

    Dungeons: Avoid generation in multiple liquid nodes and 'airlike'

    

    Previously only 'mapgen water source' and 'mapgen river water source'

    were checked for. Games can use multiple liquid nodes defined for biomes,

    many of which will not be aliased to those 2 mapgen aliases, causing

    floating dungeons to generate in some liquids.

    

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    Previously only 'mapgen water source' and 'mapgen river water source'

    were checked for. Games can use multiple liquid nodes defined for biomes,

    many of which will not be aliased to those 2 mapgen aliases, causing

    floating dungeons to generate in some liquids.

    

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    were checked for. Games can use multiple liquid nodes defined for biomes,

    many of which will not be aliased to those 2 mapgen aliases, causing

    floating dungeons to generate in some liquids.

    

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    many of which will not be aliased to those 2 mapgen aliases, causing

    floating dungeons to generate in some liquids.

    

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    floating dungeons to generate in some liquids.

    

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    Now we check for liquid drawtype instead, so can remove liquid nodes

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    from dungeonparams.

    

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    Also check for 'airlike' drawtype instead of 'CONTENT_AIR' to avoid

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    generation in 'airlike' nodes in some rare situations. This will also be

    needed for when we add definable biome air nodes.

    needed for when we add definable biome air nodes.

    Item entity: Delete in 'ignore' nodes

    Falling.lua: Delete falling node entities on contact with 'ignore'

    

    Prevents falling node entities entering the ignore at a world edge and

    resting on unloaded nodes 16 nodes below, unreachable, undiggable and

    still being processed by 'on step' because they don't revert to nodes.

    Prevents falling node entities entering the ignore at a world edge and

    resting on unloaded nodes 16 nodes below, unreachable, undiggable and

    still being processed by 'on step' because they don't revert to nodes.

    resting on unloaded nodes 16 nodes below, unreachable, undiggable and

    still being processed by 'on step' because they don't revert to nodes.

    still being processed by 'on step' because they don't revert to nodes.

    map.cpp: Initialize NodeNeighbor, set NeighborType to u8 & cleanup

    

    Cleanup:

    * Drop unused Map::transforming_liquid_size()

    * NodeNeighbor must use const ref for v3s16

    * Add a missing default in a switch case

    Cleanup:

    * Drop unused Map::transforming_liquid_size()

    * NodeNeighbor must use const ref for v3s16

    * Add a missing default in a switch case

    * Drop unused Map::transforming_liquid_size()

    * NodeNeighbor must use const ref for v3s16

    * Add a missing default in a switch case

    * NodeNeighbor must use const ref for v3s16

    * Add a missing default in a switch case

    * Add a missing default in a switch case

    Node definition manager refactor (#7016)

    

    * Rename IWritableNodeDefManager to NodeDefManager

    * Make INodeDefManager functions const

    * Use "const *NodeDefManager" instead of "*INodeDefManager"

    * Remove unused INodeDefManager class

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Rename IWritableNodeDefManager to NodeDefManager

    * Make INodeDefManager functions const

    * Use "const *NodeDefManager" instead of "*INodeDefManager"

    * Remove unused INodeDefManager class

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Make INodeDefManager functions const

    * Use "const *NodeDefManager" instead of "*INodeDefManager"

    * Remove unused INodeDefManager class

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Use "const *NodeDefManager" instead of "*INodeDefManager"

    * Remove unused INodeDefManager class

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Remove unused INodeDefManager class

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Merge NodeDefManager and CNodeDefManager

    * Document NodeDefManager

    * Document NodeDefManager

    Position entity nametags relative to selection-box (#7031)

    Fix 'Change Keys' menu crash caused by 501f936

    Allow dumping userdata (#7012)

    Switch F3 to use 'enable_fog' setting

    Include alpha channel reference in MaterialTypeParam

    Move `setlocale` from Lua to C++.

    Add main_menu_style setting

    Add minetest.is_player (#7013)

    

    * Add minetest.is_player

    

    * First use for is_player

    * Add minetest.is_player

    

    * First use for is_player

    * First use for is_player

    Lua_api.txt: Document 'wielditem' visual in object properties

    Item entity: Prevent motion in ignore nodes

    Add kill chat command (#6992)

    

    Replace minetest.* with core.* in 1 file

    Replace minetest.* with core.* in 1 file

    Make hud_get return aligment, offset and size. (#7006)

    

    * Make hud_get return aligment and offset.

    

    * Return size aswell.

    * Make hud_get return aligment and offset.

    

    * Return size aswell.

    * Return size aswell.

    Remove unused light updating code

    

    Also remove the unit test that tests the removed algorithms.

    Also remove the unit test that tests the removed algorithms.

    Refine movement anticheat again (#7004)

    

    * Account for walking speed in vertical dir

    * Avoid undefined behaviour due to division-by-zero

    * Account for walking speed in vertical dir

    * Avoid undefined behaviour due to division-by-zero

    * Avoid undefined behaviour due to division-by-zero

    Fix liquid bottoms not being rendered

    Add Android drivers to the video_driver drop-down menu

    

    Adds the Android video drivers ogles1 and ogles2 to the video_drivers drop-down menu

    Adds the Android video drivers ogles1 and ogles2 to the video_drivers drop-down menu

    Add minetest.bulk_set_node call + optimize Environment::set_node call (#6958)

    

    * Add minetest.bulk_set_node call + experimental mod unittest

    

    * Optimize set_node function to prevent triple lookup on contentfeatures

    

    Do only one lookup for old, and try to merge old and new lookup if node is same than previous node

    

    * Add benchmark function + optimize vector population to have real results

    * Add minetest.bulk_set_node call + experimental mod unittest

    

    * Optimize set_node function to prevent triple lookup on contentfeatures

    

    Do only one lookup for old, and try to merge old and new lookup if node is same than previous node

    

    * Add benchmark function + optimize vector population to have real results

    * Optimize set_node function to prevent triple lookup on contentfeatures

    

    Do only one lookup for old, and try to merge old and new lookup if node is same than previous node

    

    * Add benchmark function + optimize vector population to have real results

    Do only one lookup for old, and try to merge old and new lookup if node is same than previous node

    

    * Add benchmark function + optimize vector population to have real results

    * Add benchmark function + optimize vector population to have real results

    Make chat command + privilege help slightly more accurate (#6964)

    

    * Make chat command help slightly more accurate

    

    * Slightly more accurate privilege help

    

    * Simplify command/priv help

    

    * More command/priv help tweaks

    * Make chat command help slightly more accurate

    

    * Slightly more accurate privilege help

    

    * Simplify command/priv help

    

    * More command/priv help tweaks

    * Slightly more accurate privilege help

    

    * Simplify command/priv help

    

    * More command/priv help tweaks

    * Simplify command/priv help

    

    * More command/priv help tweaks

    * More command/priv help tweaks

    Apply physics overrides correctly during anticheat calculations (#6970)

    [CSM] HUD Fix not updating server HUDs caused by 4f688d5

    Fix issues with earlier CSM HUD commit (#6940)

    

    The CSM HUD PR caused some strange behavior including aborts due to parts of it using some slightly hacky code, the event refactor changing how events are processed and a minor oversight.

    The CSM HUD PR caused some strange behavior including aborts due to parts of it using some slightly hacky code, the event refactor changing how events are processed and a minor oversight.

    Main menu: Change tabs to 'Start Game' and 'Join Game' (#6955)

    Disable fall damage when "immortal" group set (#6946)

    Add missing languages from menu (#6953)

    

    The following languages exist in Minetest PO folder were missing from the selection menu:

    - dv (Dhivehi)

    - ms (Malay)

    - sl (Slovenian)

    - sv (Swedish)

    - sw (Swahili)

    The following languages exist in Minetest PO folder were missing from the selection menu:

    - dv (Dhivehi)

    - ms (Malay)

    - sl (Slovenian)

    - sv (Swedish)

    - sw (Swahili)

    - dv (Dhivehi)

    - ms (Malay)

    - sl (Slovenian)

    - sv (Swedish)

    - sw (Swahili)

    - ms (Malay)

    - sl (Slovenian)

    - sv (Swedish)

    - sw (Swahili)

    - sl (Slovenian)

    - sv (Swedish)

    - sw (Swahili)

    - sv (Swedish)

    - sw (Swahili)

    - sw (Swahili)

    Intersects_protection(): Move from Minetest Game to builtin (#6952)

    

    A useful function that applies 'core.is_protected()' to a 3D lattice of

    points evenly spaced throughout a defined volume, with a parameter for

    the maximum spacing of points.

    A useful function that applies 'core.is_protected()' to a 3D lattice of

    points evenly spaced throughout a defined volume, with a parameter for

    the maximum spacing of points.

    points evenly spaced throughout a defined volume, with a parameter for

    the maximum spacing of points.

    the maximum spacing of points.

    CSM: Remove screenshot API

    

    Reverted from commit 19960e26c672c6337f8c6ffbe27f2c6bca49750c

    (* [CSM] add screenshot api lua)

    Reverted from commit 19960e26c672c6337f8c6ffbe27f2c6bca49750c

    (* [CSM] add screenshot api lua)

    (* [CSM] add screenshot api lua)

    [CSM] Don't Load the package library (#6944)

    

    Already removed by a latter step in CSM init so this just saves on pointless work.

    Already removed by a latter step in CSM init so this just saves on pointless work.

    Change include from "cmake_config.h" to "config.h"

    

    Fixes #6894

    Fixes #6894

    [CSM] Remove `on_connect` callback (#6941)

    

    Fixes #6939

    Fixes #6939

    [CSM] Add functions to create particles and particlespawners. (#6072)

    Add minetest issue template (#6936)

    

    * Add minetest issue template

    

    This permits end user to have a basic template permitting to do issue triage and for users to know what we expect.

    * Add minetest issue template

    

    This permits end user to have a basic template permitting to do issue triage and for users to know what we expect.

    This permits end user to have a basic template permitting to do issue triage and for users to know what we expect.

    Game refactor [4/X]: keycache is now owned by InputHandler

    

    * Make InputHandler own the key cache

    * Add a helper function InputHandler::cancelPressed to avoid multiple similar calls in game.cpp

    * Move RandomInputHandler::step definition into cpp file

    * Make InputHandler own the key cache

    * Add a helper function InputHandler::cancelPressed to avoid multiple similar calls in game.cpp

    * Move RandomInputHandler::step definition into cpp file

    * Add a helper function InputHandler::cancelPressed to avoid multiple similar calls in game.cpp

    * Move RandomInputHandler::step definition into cpp file

    * Move RandomInputHandler::step definition into cpp file

    Game refactor [3/X]: Move keycache to inputhandler

    Game refactor [2/X]:  Various moves (profilergraph, nodePlacementPrediction, create_formspec_menu)

    

    * Move profilergraph to dedicated files

    * Move nodePlacementPrediction to Game class

    * Rename create_formspec_menu to GUIFormSpecMenu::create

    * Move profilergraph to dedicated files

    * Move nodePlacementPrediction to Game class

    * Rename create_formspec_menu to GUIFormSpecMenu::create

    * Move nodePlacementPrediction to Game class

    * Rename create_formspec_menu to GUIFormSpecMenu::create

    * Rename create_formspec_menu to GUIFormSpecMenu::create

    Game/Input refactor [1/X]: make RealInputHandler handle joystick inputs with standard input

    

    Joystick input is a RealInputHandler only usage, make it intelligent and handle the joystick with keyboard direct.

    This permits to remove many getters in game which should be owned by RealInputHandler

    Joystick input is a RealInputHandler only usage, make it intelligent and handle the joystick with keyboard direct.

    This permits to remove many getters in game which should be owned by RealInputHandler

    This permits to remove many getters in game which should be owned by RealInputHandler

    [CSM] Add basic HUD manipulation. (#6067)

    

    * [CSM] Add basic HUD manipulation.

    

    Workaround for on_connect not working right now.

    * [CSM] Add basic HUD manipulation.

    

    Workaround for on_connect not working right now.

    Workaround for on_connect not working right now.

    Biomes: Add 'get heat', 'get humidity', 'get biome data' APIs

    

    'get biome data' returns biome id, heat and humidity.

    Clean up nearby lines in lua_api.txt.

    'get biome data' returns biome id, heat and humidity.

    Clean up nearby lines in lua_api.txt.

    Clean up nearby lines in lua_api.txt.

    Load a texturepack from the 'textures' subfolder of a game

    Lua_api.txt: Various improvements

    

    Improve documentation for formspec 'position' and 'anchor' elements.

    Add missing documentation of 'animation' and 'glow' for particle spawners.

    Improve documentation for formspec 'position' and 'anchor' elements.

    Add missing documentation of 'animation' and 'glow' for particle spawners.

    Add missing documentation of 'animation' and 'glow' for particle spawners.

    Mapgen folder: Update and improve copyright information of files

    Lua_api.txt: Improve bullet point indentation consistency

    Registration confirmation dialog: Fix grammar

    

    Fixes commit 792752997c5ae2aaa4f54d0a2e2af2a96d7d1e9f.

    Fixes commit 792752997c5ae2aaa4f54d0a2e2af2a96d7d1e9f.

    Lua_api.txt: Add chat command params info

    Add confirmation on new player registration (#6849)

    

    * Attempt to add registration confirmation

    

    Using SRP auth mechanism, if server sent AUTH_MECHANISM_FIRST_SRP that means the player isn't exist.

    Also tell player about the server and chosen username.

    Local game has localhost as IP address of the server.

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    * Attempt to add registration confirmation

    

    Using SRP auth mechanism, if server sent AUTH_MECHANISM_FIRST_SRP that means the player isn't exist.

    Also tell player about the server and chosen username.

    Local game has localhost as IP address of the server.

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Using SRP auth mechanism, if server sent AUTH_MECHANISM_FIRST_SRP that means the player isn't exist.

    Also tell player about the server and chosen username.

    Local game has localhost as IP address of the server.

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Also tell player about the server and chosen username.

    Local game has localhost as IP address of the server.

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Local game has localhost as IP address of the server.

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Add RenderingEngine::draw_menu_scene() to draw GUI and clouds background.

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    aborted -> connection_aborted

    

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    * Rewrite information message text

    

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Client::promptConfirmRegister() -> Client::promptConfirmRegistration()

    Revert "Add an active object step time budget #6721"

    

    This reverts commit 9c669016d1578a5c62f932c6ccb7a2b4b1e21f0a.

    See #6907

    This reverts commit 9c669016d1578a5c62f932c6ccb7a2b4b1e21f0a.

    See #6907

    See #6907

    Add a build step to test non freetype builds (#6908)

    

    * Add a build step to test non freetype builds

    * Add a build step to test non freetype builds

    Forget to fix non freetype build in StaticText

    Lua_api.txt: Fix, improve and add to Object Properties documentation

    

    Correct 'automatic rotate' to be a number instead of a bool.

    Correct 'automatic rotate' to be a number instead of a bool.

    Lua_api.txt: Improve and complete ABM documentation

    

    Document 'active object count (wider)'.

    Document 'active object count (wider)'.

    Settingtypes.txt: Correct value of 'max block send distance'

    Fix ambient occlusion and dark lines at mapblock borders

    Fix off-by-one in log output line length (#6896)

    Fix buffer parameter not working in LuaPerlinNoiseMap::l_getMapSlice()

    Lua API docs: Add warning that schematic placing is cached

    Fix naming conventions of noise userdata

    Don't recalculate statustext initial color everytime & review fixes

    GameUI refactor (part 7/7): Finish to include profiler things to GameUI

    

    Other changes:

    * Add GameUI clarification comment

    * Move force_fog_off & disable_camera_update flags from GameUI to Game, it's not UI related

    * Properly init GameUI::Flags

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    Other changes:

    * Add GameUI clarification comment

    * Move force_fog_off & disable_camera_update flags from GameUI to Game, it's not UI related

    * Properly init GameUI::Flags

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    * Add GameUI clarification comment

    * Move force_fog_off & disable_camera_update flags from GameUI to Game, it's not UI related

    * Properly init GameUI::Flags

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    * Move force_fog_off & disable_camera_update flags from GameUI to Game, it's not UI related

    * Properly init GameUI::Flags

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    * Properly init GameUI::Flags

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    * Move toggleChat toggleHud & toggleProfiler to GameUI

    * Add gameui.cpp to LINT whitelist

    * Add gameui.cpp to LINT whitelist

    GameUI refactor (part 6/X): Move Game::guitext_profiler & showStatusTextSimple to GameUI class

    

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    GameUI refactor (part 5/X): Move Game::guitext_chat to GameUI class

    

    Other enhancements:

    * Move update_profiler_gui to Game class

    * Move updateChat to Game class

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    * Move update_profiler_gui to Game class

    * Move updateChat to Game class

    * Move updateChat to Game class

    GameUI refactor (part 4/X): Move Game::guitext_status, Game::m_statustext, GameRunData::statustext_time to GameUI class

    

    Other enhancements:

    * Simplify setStatusText to showStatusText, as it shows the label too (preventing almost every setStatusText to call setStatusTextTime(0)

    * Add unittests

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    * Simplify setStatusText to showStatusText, as it shows the label too (preventing almost every setStatusText to call setStatusTextTime(0)

    * Add unittests

    * Add unittests

    GameUI refactor (part 3/X): Move Game::guitext2, Game::guitext_info, Game::infotext to GameUI class

    

    Other enhancements:

    * Drop unused GameRunData::time_of_day

    * Little GameUI::update code path optimizations

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    * Drop unused GameRunData::time_of_day

    * Little GameUI::update code path optimizations

    * Little GameUI::update code path optimizations

    GameUI refactor (part 2/X): Move Game::guitext to GameUI + enhancements on StaticText

    

    Other enhancements:

    * C++ friendlyness for addStaticText() -> move to static StaticText::add()

    Other enhancements:

    * Move showStatusTextSimple to GameUI class & rename to showTranslatedStatusText

    * C++ friendlyness for addStaticText() -> move to static StaticText::add()

    GameUI refactor (part 1/X): GameUI object creation + GameUIFlags move to GameUI

    

    Game class is too huge and has too specialization on various subjects, like UI, formspecs, client, renderer. Start to move UI related things to GameUI object and cleanup them

    

    Other improvements:

    * updateChat: more performance on error messages by remove string copies

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    Game class is too huge and has too specialization on various subjects, like UI, formspecs, client, renderer. Start to move UI related things to GameUI object and cleanup them

    

    Other improvements:

    * updateChat: more performance on error messages by remove string copies

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    Other improvements:

    * updateChat: more performance on error messages by remove string copies

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    * updateChat: more performance on error messages by remove string copies

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    * Add GameUI unittests

    Biomes: Add vertical biome blend (#6853)

    

    Add 'vertical blend' parameter to biome registration that defines how

    many nodes above the biome's 'y max' limit the blend will extend.

    Add 'vertical blend' parameter to biome registration that defines how

    many nodes above the biome's 'y max' limit the blend will extend.

    many nodes above the biome's 'y max' limit the blend will extend.

    Prevent Android from automatically locking display (#6876)

    

    As mentioned in #5759

    As mentioned in #5759

    Fix Wstringop-overflow warning from util/srp.cpp (#6855)

    

    * Fix Wstringop-overflow warning from util/srp.cpp

    * Fix Wstringop-overflow warning from util/srp.cpp

    [CSM] Don't load the IO library. (#6087)

    

    * [CSM] Don't load the IO library.

    

    * Rename the function to match the Lua API function name and add a missing `const`

    

    * Add a comment to explain some strange code and fix the other issues pointed out by shadowninja.

    * [CSM] Don't load the IO library.

    

    * Rename the function to match the Lua API function name and add a missing `const`

    

    * Add a comment to explain some strange code and fix the other issues pointed out by shadowninja.

    * Rename the function to match the Lua API function name and add a missing `const`

    

    * Add a comment to explain some strange code and fix the other issues pointed out by shadowninja.

    * Add a comment to explain some strange code and fix the other issues pointed out by shadowninja.

    Mgv7: Add docs for the new floatland exponent parameter

    Fix crash on can_bypass_userlimit returning non-boolean

    Mgv7 floatlands: Add exponent parameter

    

    Allows more control over shape of floatland mountain terrain.

    Terrain shape is unchanged.

    Allows more control over shape of floatland mountain terrain.

    Terrain shape is unchanged.

    Terrain shape is unchanged.

    Connected Nodeboxes: Add `disconnected` boxes

    

    The `disconnected_*` boxes are the opposites of the `connect_*` ones,

    i.e. when a node has no suitable neighbours on the respective side, the

    according disconnected box is drawn.

    

    * disconnected_top

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    The `disconnected_*` boxes are the opposites of the `connect_*` ones,

    i.e. when a node has no suitable neighbours on the respective side, the

    according disconnected box is drawn.

    

    * disconnected_top

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    i.e. when a node has no suitable neighbours on the respective side, the

    according disconnected box is drawn.

    

    * disconnected_top

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    according disconnected box is drawn.

    

    * disconnected_top

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_top

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_bottom

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_front

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_left

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_back

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_right

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected (when there is *no* neighbour)

    * disconnected_sides (when there are *no* neighbours to the sides)

    * disconnected_sides (when there are *no* neighbours to the sides)

    Tool.cpp/.h, lua_api/l_util.cpp: Tidy up code and remove dead code

    Tool getDigParams: Fix selecting the best fitting time

    

    Previously, time was compared with result_time before dividing it by

    the level difference.

    Previously, time was compared with result_time before dividing it by

    the level difference.

    the level difference.

    Add unittests on ActiveObject and BanManager class (#6866)

    

    * Add unittests on ActiveObject and BanManager class

    

    This also permit to fix a bug in ban manager setting bans modified when no modification occurs

    * Add unittests on ActiveObject and BanManager class

    

    This also permit to fix a bug in ban manager setting bans modified when no modification occurs

    This also permit to fix a bug in ban manager setting bans modified when no modification occurs

    Update README.md copyright notice too

    Happy new year 2018: update LICENSE.txt

    Advanced settings: Add range check for float type

    Fix rounding error in g/set_node caused by truncation to float

    Add check to pause game on lost window focus

    Line_of_sight: Improve using VoxelLineIterator

    

    This commit rewrites line_of_sight with VoxelLineIterator.

    Stepsize is no longer needed, the results will be always accurate.

    This commit rewrites line_of_sight with VoxelLineIterator.

    Stepsize is no longer needed, the results will be always accurate.

    Stepsize is no longer needed, the results will be always accurate.

    Wireshark plugin: Complete all commands. (#6841)

    

    This still leaves plenty of data undecoded, but just having the packet

    types all covered 100% for 0.4.16 will make looking at traces a lot

    simpler than seeing half the packets show up as unknown.

    This still leaves plenty of data undecoded, but just having the packet

    types all covered 100% for 0.4.16 will make looking at traces a lot

    simpler than seeing half the packets show up as unknown.

    types all covered 100% for 0.4.16 will make looking at traces a lot

    simpler than seeing half the packets show up as unknown.

    simpler than seeing half the packets show up as unknown.

    Fix dancing text

    - Clear colors when reading property info.

    - Set vertex colors on upright_sprites.

    - Set vertex colors on upright_sprites.

    Fix error if setting menu_last_game is not a valid game

    Fix undefined behaviour on getting pointer to data in empty vector

    

    `&vector[0]` is undefined if vector.empty(), causing build failure on MSVC

    `&vector[0]` is undefined if vector.empty(), causing build failure on MSVC

    Fix wrong scrolling (#6809)

    Vector functions: Fix vector.direction() function, improve documentation (#6801)

    

    vector.direction() now returns a normalised vector with direction p1 to p2.

    vector.direction() now returns a normalised vector with direction p1 to p2.

    Allow 'default' parameter in 'settings:get_bool' function

    

    Default value is used when the setting key is not found in the config

    file. If default value is not set, 'nil' is returned.

    

    #6188

    Default value is used when the setting key is not found in the config

    file. If default value is not set, 'nil' is returned.

    

    #6188

    file. If default value is not set, 'nil' is returned.

    

    #6188

    Adjust default console height

    

    #6797

    Give subgames the ability to disallow specific mapgens (#6792)

    Fix items turning black (#6780)

    Change Normal Map setting to be less ambigous

    Zoom: Add 'disabled by game or mod' message

    Minimap messages: Improve 'disabled by server' message

    Add callback to preserve node metadata as item metadata

    Chat: Remove prompt history duplicates (#6762)

    directiontables: Fix MSVC compiler error (#6785)

    Update light decoding table size (#6696)

    

    Fix old undiminish_light bug

    Fix old undiminish_light bug

    Builtin: Fix handle_node_drops crash with nil digger

    CSM fixes: load mods after flavours & add flavour to block mod loading (#6738)

    

    * CSM fixes: load mods after flavours & add flavour to block mod loading

    

    * Don't permit to load mods twice

    

    * Prepare builtin integrity global algorithm

    

    * Add missing doc & use a nicer byteflag for LOAD_CLIENT_MODS flavour

    

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * CSM fixes: load mods after flavours & add flavour to block mod loading

    

    * Don't permit to load mods twice

    

    * Prepare builtin integrity global algorithm

    

    * Add missing doc & use a nicer byteflag for LOAD_CLIENT_MODS flavour

    

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * Don't permit to load mods twice

    

    * Prepare builtin integrity global algorithm

    

    * Add missing doc & use a nicer byteflag for LOAD_CLIENT_MODS flavour

    

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * Prepare builtin integrity global algorithm

    

    * Add missing doc & use a nicer byteflag for LOAD_CLIENT_MODS flavour

    

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * Add missing doc & use a nicer byteflag for LOAD_CLIENT_MODS flavour

    

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * flag typo fix

    

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    * Invert CSM_FL_LOOKUP_NODES & CSM_FL_LOAD_CLIENT_MODS ids

    Lua_api.txt: Fix a spelling error

    F5 debug info: Add colons, use lowercase except for FPS and RTT

    Damage: Remove damage ignore timer

    Use std::vector instead of dynamic C-Array (#6744)

    Pointed thing to face pos: Use 'eye height' object property (#6754)

    Add an active object step time budget #6721

    

    This can be set via the active_object_interval option.

    This can be set via the active_object_interval option.

    Add coloured logs (#4549)

    

    The setting log_colour can be used to en-/disable or autodetect it.

    The setting log_colour can be used to en-/disable or autodetect it.

    Auth handler: Player deletion & Iterator (#6741)

    

    * Add player deletion method to auth handler (fixes #6653)

    * Support iterating over the auth database

    

    There was no way to do this previously and a recent commit

    broke doing this the "hacky" way by accessing `core.auth_table`.

    * Add player deletion method to auth handler (fixes #6653)

    * Support iterating over the auth database

    

    There was no way to do this previously and a recent commit

    broke doing this the "hacky" way by accessing `core.auth_table`.

    * Support iterating over the auth database

    

    There was no way to do this previously and a recent commit

    broke doing this the "hacky" way by accessing `core.auth_table`.

    There was no way to do this previously and a recent commit

    broke doing this the "hacky" way by accessing `core.auth_table`.

    broke doing this the "hacky" way by accessing `core.auth_table`.

    Ensure no item stack is being held before crafting (#4779)

    Use Irrlicht's mesh cache for animated meshes.

    

    Fixes #6676.

    Allow animated meshes to be cached in Irrlicht's builtin mesh cache.

    Use Material.EmmissiveColor instead of manipulating the mesh' vertex colors.

    Fixes #6676.

    Allow animated meshes to be cached in Irrlicht's builtin mesh cache.

    Use Material.EmmissiveColor instead of manipulating the mesh' vertex colors.

    Allow animated meshes to be cached in Irrlicht's builtin mesh cache.

    Use Material.EmmissiveColor instead of manipulating the mesh' vertex colors.

    Use Material.EmmissiveColor instead of manipulating the mesh' vertex colors.

    Zoom: Set zoom FOV per-player using a player object property

    

    Remove player object property 'can zoom'.

    Add player object property 'zoom fov'.

    Remove clientside setting for 'zoom fov'.

    Object property default is 15 degrees in creative mode, zoom disabled

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Remove player object property 'can zoom'.

    Add player object property 'zoom fov'.

    Remove clientside setting for 'zoom fov'.

    Object property default is 15 degrees in creative mode, zoom disabled

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Add player object property 'zoom fov'.

    Remove clientside setting for 'zoom fov'.

    Object property default is 15 degrees in creative mode, zoom disabled

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Remove clientside setting for 'zoom fov'.

    Object property default is 15 degrees in creative mode, zoom disabled

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Object property default is 15 degrees in creative mode, zoom disabled

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    in survival mode.

    

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Needed due to zoom now loading and/or generating distant world

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    according to zoom FOV.

    

    Update object properties serialisation version to 3.

    Update object properties serialisation version to 3.

    Android: Update build system for ndk-r15x

    

    Add workarounds for ndk-r16.

    Add workarounds for ndk-r16.

    Document extended meaning of active_object_send_range_blocks setting.

    Optionally extend the active object in a players camera direction.

    

    See #6667

    

    By setting active_object_send_range_blocks > active_block_range a server admin

    can allow clients to retrieve active objects futher out from the player at

    relatively low cost to the server

    (only objects in the players' view cone are considered).

    See #6667

    

    By setting active_object_send_range_blocks > active_block_range a server admin

    can allow clients to retrieve active objects futher out from the player at

    relatively low cost to the server

    (only objects in the players' view cone are considered).

    By setting active_object_send_range_blocks > active_block_range a server admin

    can allow clients to retrieve active objects futher out from the player at

    relatively low cost to the server

    (only objects in the players' view cone are considered).

    can allow clients to retrieve active objects futher out from the player at

    relatively low cost to the server

    (only objects in the players' view cone are considered).

    relatively low cost to the server

    (only objects in the players' view cone are considered).

    (only objects in the players' view cone are considered).

    Shut down mapgen threads before other shutdown tasks (#6689)

    

    Solves some issues with ModStorage functionality in mapgen threads

    that occurred when mapgen threads continued to run after the main

    server thread had stopped. Also shuts down mapgen threads before

    shutdown callbacks are called.

    Solves some issues with ModStorage functionality in mapgen threads

    that occurred when mapgen threads continued to run after the main

    server thread had stopped. Also shuts down mapgen threads before

    shutdown callbacks are called.

    that occurred when mapgen threads continued to run after the main

    server thread had stopped. Also shuts down mapgen threads before

    shutdown callbacks are called.

    server thread had stopped. Also shuts down mapgen threads before

    shutdown callbacks are called.

    shutdown callbacks are called.

    Update documentation regarding authentication handler and related functions

    

    Properly document it instead of referencing the builtin handler as

    authoritative "example" code.

    Also adds definition of get_auth_handler() which was missing previously.

    Properly document it instead of referencing the builtin handler as

    authoritative "example" code.

    Also adds definition of get_auth_handler() which was missing previously.

    authoritative "example" code.

    Also adds definition of get_auth_handler() which was missing previously.

    Also adds definition of get_auth_handler() which was missing previously.

    Make core.auth_table private and structure builtin/auth.lua

    

    If you give modders the ability to do something, they will...

    If you give modders the ability to do something, they will...

    Lua_api.txt: Remove MT version, fix spelling and clean up

    

    Removes references to MT version in intro section.

    Update bump_version.sh to no longer manage version information.

    Removes references to MT version in intro section.

    Update bump_version.sh to no longer manage version information.

    Update bump_version.sh to no longer manage version information.

    CAO/SAO: Nicer velocity-controlled, interpolated rotation property:

    

    'automatic_face_movement_max_rotation_per_sec'.

    Rotate towards the smaller angle.

    'automatic_face_movement_max_rotation_per_sec'.

    Rotate towards the smaller angle.

    Rotate towards the smaller angle.

    Turn off verbose info message introduced accidentally with ae9b1aa

    Fix spelling mistakes in client_lua_api.txt

    Client lua api documentation: .md -> .txt

    

    For consistency, and for much improved access on Github.

    

    On Github:

    .md disables being able to link to a line, needed daily when

    quickly referring people to particular lines.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    For consistency, and for much improved access on Github.

    

    On Github:

    .md disables being able to link to a line, needed daily when

    quickly referring people to particular lines.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    On Github:

    .md disables being able to link to a line, needed daily when

    quickly referring people to particular lines.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    .md disables being able to link to a line, needed daily when

    quickly referring people to particular lines.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    quickly referring people to particular lines.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    Search returns results in .md files, but you cannot then click

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    the line number to go to that line in the document, making searching

    difficult.

    Line numbers are not displayed for .md documents.

    difficult.

    Line numbers are not displayed for .md documents.

    Line numbers are not displayed for .md documents.

    Fix lua_api.txt indentation issues

    Fix documentation formatting for on_death callback

    F5 Debug info: More compact, return to 2 lines

    

    All data fits on width 960, most useful data still visible on width 800.

    All data fits on width 960, most useful data still visible on width 800.

    Hint at problematic code when logging deprecated calls

    Light curve: Add and tune mid boost gaussian

    

    Create a closer match to the light curve of 0.4.16 stable.

    Results in darker shadows while maintaining the 'brightness' and light

    spread.

    Create a closer match to the light curve of 0.4.16 stable.

    Results in darker shadows while maintaining the 'brightness' and light

    spread.

    Results in darker shadows while maintaining the 'brightness' and light

    spread.

    spread.

    Improve documentation for player:set_attribute()

    Fix misspellings

    

    "diffferent" to "different"

    "occuring" to "occurring"

    "determin" to "determine"

    "ommited" to "omitted"

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "diffferent" to "different"

    "occuring" to "occurring"

    "determin" to "determine"

    "ommited" to "omitted"

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "occuring" to "occurring"

    "determin" to "determine"

    "ommited" to "omitted"

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "determin" to "determine"

    "ommited" to "omitted"

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "ommited" to "omitted"

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "authetification" to "authentication"

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "conponent" to "component"

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "ommitted" to "omitted"

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "celcius" to "Celsius"

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    "succesful" to "successful"

    

    Misspellings found using GNU Spell version 1.0

    Misspellings found using GNU Spell version 1.0

    Inventory: Restrict access from too far away

    Clearobjects: Send progress messages to terminal using actionstream

    

    Change default mode to 'quick' as 'full' can lock up a server for a

    long time.

    Change default mode to 'quick' as 'full' can lock up a server for a

    long time.

    long time.

    core.rotate_node: Run callbacks like with any regular placed node (#6648)

    Stratum ore: Add option for a constant thickness stratum

    

    Add a 'stratum thickness' integer parameter, as an alternative

    to providing a 2nd noise parameter for thickness variation.

    Add a 'stratum thickness' integer parameter, as an alternative

    to providing a 2nd noise parameter for thickness variation.

    to providing a 2nd noise parameter for thickness variation.

    Mainmenu: Improve button alignment

    README.md: Add table of Linux dependencies

    Fix mousewheel behaviour in textarea (#6641)

    

    Allowing scrolling with the mousewheel when the vertical scrollbar is

    hidden, unnecessarily exposes oversized containers and newlines at the

    end of the text. For example try scrolling over the textareas in the

    pause menu. This PR addresses the issue by requiring the scrollbar to be

    visible before allowing the scrolling with the mousewheel.

    Allowing scrolling with the mousewheel when the vertical scrollbar is

    hidden, unnecessarily exposes oversized containers and newlines at the

    end of the text. For example try scrolling over the textareas in the

    pause menu. This PR addresses the issue by requiring the scrollbar to be

    visible before allowing the scrolling with the mousewheel.

    hidden, unnecessarily exposes oversized containers and newlines at the

    end of the text. For example try scrolling over the textareas in the

    pause menu. This PR addresses the issue by requiring the scrollbar to be

    visible before allowing the scrolling with the mousewheel.

    end of the text. For example try scrolling over the textareas in the

    pause menu. This PR addresses the issue by requiring the scrollbar to be

    visible before allowing the scrolling with the mousewheel.

    pause menu. This PR addresses the issue by requiring the scrollbar to be

    visible before allowing the scrolling with the mousewheel.

    visible before allowing the scrolling with the mousewheel.

    Fix dark liquids (#6621)

    

    * Update light storage format

    * Update light storage format

    Ore API documentation: Update and improve

    Biome dust node: Only place on 'walkable' cubic non-liquid drawtypes

    

    No longer decide placement on 'buildable_to' parameter.

    Dust nodes only look acceptable placed on cubic nodes.

    Modders may not want to make their plantlike decorations 'buildable_to'.

    No longer decide placement on 'buildable_to' parameter.

    Dust nodes only look acceptable placed on cubic nodes.

    Modders may not want to make their plantlike decorations 'buildable_to'.

    Dust nodes only look acceptable placed on cubic nodes.

    Modders may not want to make their plantlike decorations 'buildable_to'.

    Modders may not want to make their plantlike decorations 'buildable_to'.

    Load files from subfolders in texturepacks

    

    Updated and rebased version of a PR by red-001

    Updated and rebased version of a PR by red-001

    Allow zoom to actually show more data.

    

    This allows the client to retrieve blocks at a greater distance

    from the server, thus allowing for a real zoom.

    This allows the client to retrieve blocks at a greater distance

    from the server, thus allowing for a real zoom.

    from the server, thus allowing for a real zoom.

    Fix item and wield meshes (#6596)

    Mainmenu: Make capitalisation consistent in mainmenu and advanced settings

    PlayerSAO damage: Update to cope with variable player heights

    

    Nearby codestyle cleanup.

    Nearby codestyle cleanup.

    Sounds: Add falling node sounds

    

    Falling nodes should make a sound. This can only be done here,

    so for simplicity we just call the sound_play() here with the node

    place sound. We ignore any gain value in the sound spec since a

    falling node should be loud, so the 1.0 default gain makes sense

    here.

    Falling nodes should make a sound. This can only be done here,

    so for simplicity we just call the sound_play() here with the node

    place sound. We ignore any gain value in the sound spec since a

    falling node should be loud, so the 1.0 default gain makes sense

    here.

    so for simplicity we just call the sound_play() here with the node

    place sound. We ignore any gain value in the sound spec since a

    falling node should be loud, so the 1.0 default gain makes sense

    here.

    place sound. We ignore any gain value in the sound spec since a

    falling node should be loud, so the 1.0 default gain makes sense

    here.

    falling node should be loud, so the 1.0 default gain makes sense

    here.

    here.

    Improve Settings tab button alignments

    Lua_api.txt: Add documentation of required mapgen aliases

    Remove incorrect entry from settingtypes

    Move files to subdirectories (#6599)

    

    * Move files around

    * Move files around

    Make use of safe file writing in auth handler (fixes #6576)

    Add minetest.safe_write_file() to script API

    Fix issue Minetest crash when custom font path is not exist

    

    We try to use default fallback for both mono and main font when custom font path is not exist. This way, if Minetest is not corrupted, we could avoid crash.

    We try to use default fallback for both mono and main font when custom font path is not exist. This way, if Minetest is not corrupted, we could avoid crash.

    Lua_api.txt: Add documentation for 'eye_height' player object property

    Item entities: Enable item collision detection for sudden movement

    LINT: Add files to whitelist, fix detected indent errors

    Player eye height: Make this a settable player object property

    Fix Settings tab formspec alignment (#6585)

    Do not scale texture unless necessary.

    

    This avoids scaling textures to 'texture_min_size' unless it is actually

    required (because either auto-scaling or bi/trilinear filtering is enabled)

    This avoids scaling textures to 'texture_min_size' unless it is actually

    required (because either auto-scaling or bi/trilinear filtering is enabled)

    required (because either auto-scaling or bi/trilinear filtering is enabled)

    httpfetch: Enable gzip support

    Rewrite rendering engine (#6253)

    

    * Clean draw_*() arguments

    

    * Split rendering core

    

    * Add anaglyph 3D

    

    * Interlaced 3D

    

    * Drop obsolete methods

    * Clean draw_*() arguments

    

    * Split rendering core

    

    * Add anaglyph 3D

    

    * Interlaced 3D

    

    * Drop obsolete methods

    * Split rendering core

    

    * Add anaglyph 3D

    

    * Interlaced 3D

    

    * Drop obsolete methods

    * Add anaglyph 3D

    

    * Interlaced 3D

    

    * Drop obsolete methods

    * Interlaced 3D

    

    * Drop obsolete methods

    * Drop obsolete methods

    Add sha1 to lua utils. (#6563)

    Initial Haiku support (#6568)

    

    * Iitial Haiku support

    * Iitial Haiku support

    Fix day_night_ratio_do_override not being initialised server-side

    

    Causes get_day_night_ratio() to return unpredictable results.

    Causes get_day_night_ratio() to return unpredictable results.

    CSM: Add a way to get current locale from CSM

    Biome API: Add decoration flags for underground decorations

    

    Add "all_floors" and "all_ceilings" flags for simple and schematic

    decorations. Decorations are placed on all floor and/or ceiling surfaces.

    Decorations are placed before dungeon generation so placement in dungeons

    is not possible.

    

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    Add "all_floors" and "all_ceilings" flags for simple and schematic

    decorations. Decorations are placed on all floor and/or ceiling surfaces.

    Decorations are placed before dungeon generation so placement in dungeons

    is not possible.

    

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    decorations. Decorations are placed on all floor and/or ceiling surfaces.

    Decorations are placed before dungeon generation so placement in dungeons

    is not possible.

    

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    Decorations are placed before dungeon generation so placement in dungeons

    is not possible.

    

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    is not possible.

    

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    Add 'getSurfaces()' function to mapgen.cpp that returns 2 arrays of y

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    coordinates for all floor and ceiling surfaces in a specified node column.

    

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    Move 'getHeight()' checks into DecoSimple and DecoSchematic. Delete

    'getHeight()' functions.

    'getHeight()' functions.

    Allow overriding tool capabilities through itemstack metadata

    

    This makes it possible to modify the tool capabilities of individual

    itemstacks by calling a method on itemstack metadata references.

    This makes it possible to modify the tool capabilities of individual

    itemstacks by calling a method on itemstack metadata references.

    itemstacks by calling a method on itemstack metadata references.

    Avoid filtering low-res textures for animated meshes (incl. players) (#6562)

    Fix default item callbacks to work with nil users (#5819)

    

    * Fix default item callbacks to work with nil users

    

    * item.lua: Handle node drops for invalid players

    

    The if-condition for the dropping loop is the same as `inv`, which means that the 2nd possible definition of `give_item` is never used.

    Remove redundant `local _, dropped_item`

    * Fix default item callbacks to work with nil users

    

    * item.lua: Handle node drops for invalid players

    

    The if-condition for the dropping loop is the same as `inv`, which means that the 2nd possible definition of `give_item` is never used.

    Remove redundant `local _, dropped_item`

    * item.lua: Handle node drops for invalid players

    

    The if-condition for the dropping loop is the same as `inv`, which means that the 2nd possible definition of `give_item` is never used.

    Remove redundant `local _, dropped_item`

    The if-condition for the dropping loop is the same as `inv`, which means that the 2nd possible definition of `give_item` is never used.

    Remove redundant `local _, dropped_item`

    Remove redundant `local _, dropped_item`

    Add missing? include

    Reduce server FOV with forward speed

    

    This causes blocks in front of the player to be rendered sooner and

    blocks in the periphal view (that would soon be out of view) a bit later.

    Overall this leads to smoother rendering as the player is moving around.

    This causes blocks in front of the player to be rendered sooner and

    blocks in the periphal view (that would soon be out of view) a bit later.

    Overall this leads to smoother rendering as the player is moving around.

    blocks in the periphal view (that would soon be out of view) a bit later.

    Overall this leads to smoother rendering as the player is moving around.

    Overall this leads to smoother rendering as the player is moving around.

    Minetest.conf.example(.extra): Updates due to noise group format

    

    Autogenerate minetest.conf.example to convert noises to the now standard

    'group format'.

    Delete the now unnecessary minetest.conf.example.extra.

    Autogenerate minetest.conf.example to convert noises to the now standard

    'group format'.

    Delete the now unnecessary minetest.conf.example.extra.

    'group format'.

    Delete the now unnecessary minetest.conf.example.extra.

    Delete the now unnecessary minetest.conf.example.extra.

    Lua_api.txt: Revert changes to NoiseParams format example

    Improvements/fixes for noise parameter input in advanced settings

    

    Formspec input for each individual noise parameter and flag.

    Allow noise flags to be set in advanced settings, previously only settable

    in minetest.conf.

    

    Standardise 'group format' for noise parameters set in minetest.conf, as

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    Formspec input for each individual noise parameter and flag.

    Allow noise flags to be set in advanced settings, previously only settable

    in minetest.conf.

    

    Standardise 'group format' for noise parameters set in minetest.conf, as

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    Allow noise flags to be set in advanced settings, previously only settable

    in minetest.conf.

    

    Standardise 'group format' for noise parameters set in minetest.conf, as

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    in minetest.conf.

    

    Standardise 'group format' for noise parameters set in minetest.conf, as

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    Standardise 'group format' for noise parameters set in minetest.conf, as

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    only these support noise flags. However the older 'single line' format is

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    still accepted to support existing minetest.conf files.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    Therefore auto-generate minetest.conf.example with noise parameters in

    'group format'.

    

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    'group format'.

    Delete the now unnecessary minetest.conf.example.extra.

    Setting 'type' in settingtypes.txt is now either 'noise_params_2D' or

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    'noise_params_3D', the dimension number is displayed in the advanced

    settings edit page.

    settings edit page.

    Correct `prot_vers` in lua_api.txt.

    

    We should avoid providing incorrect struct members in documentation

    since people will be coding based on them.

    We should avoid providing incorrect struct members in documentation

    since people will be coding based on them.

    since people will be coding based on them.

    Set range of blocks to retrieve per roundtrip to 2.

    

    This is a small, partial revert of #6483, which had set this to 1.

    This is a small, partial revert of #6483, which had set this to 1.

    directiontables.cpp: fix a warning reported by VS2017

    Fix inventory drag drop flag (#6416)

    Add updated settings_translation_file

    don't pass g_settings around, and use it directly

    Regenerate minetest.conf.example and translation file

    Implement #6096

    Fix strict_protocol_version_checking functionality after ee9a442

    Don't try to craft a non-existent item

    Real global textures (#6105)

    

    * Real global textures

    

    * Add world-aligned textures

    * Update minimal to support world-aligned tiles

    * Update minimal

    * Real global textures

    

    * Add world-aligned textures

    * Update minimal to support world-aligned tiles

    * Update minimal

    * Add world-aligned textures

    * Update minimal to support world-aligned tiles

    * Update minimal

    * Update minimal to support world-aligned tiles

    * Update minimal

    * Update minimal

    Cache server config settings. (#6530)

    

    * Cache server config settings.

    * Cache server config settings.

    Profiler: Fix var args not being passed to callback register function

    

    Fixes #6517

    Fixes #6517

    Retrieve a small cone of blocks in the direction of the players velocity.

    

    This helps retrieving the right set of blocks when the player is falling,

    traveling on cart, or in general traveling in a direction different from

    the view direction.

    This helps retrieving the right set of blocks when the player is falling,

    traveling on cart, or in general traveling in a direction different from

    the view direction.

    traveling on cart, or in general traveling in a direction different from

    the view direction.

    the view direction.

    Formspec: Fallback to 'label' in readonly textarea[]

    Guarantees backwards compatibility for this formspec element change

    Guarantees backwards compatibility for this formspec element change

    Simple decorations: Make 'place_offset_y' usable with simple decorations

    

    Necessary for placing the base cube of 'plantlike_rooted' drawtype in the

    seabed instead of on it.

    Useful for placing decorations sunk into, or buried in, the ground.

    Necessary for placing the base cube of 'plantlike_rooted' drawtype in the

    seabed instead of on it.

    Useful for placing decorations sunk into, or buried in, the ground.

    seabed instead of on it.

    Useful for placing decorations sunk into, or buried in, the ground.

    Useful for placing decorations sunk into, or buried in, the ground.

    Smooth lighting: Fix light leaking through edge-connected corners

    

    For solid nodes, the lighting at a corner becomes face-dependent, which

    means that only the four nodes in face-direction contribute to the

    lighting (getSmoothLightSolid).

    For special nodes, which use the lighting values at the eight corners of

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    For solid nodes, the lighting at a corner becomes face-dependent, which

    means that only the four nodes in face-direction contribute to the

    lighting (getSmoothLightSolid).

    For special nodes, which use the lighting values at the eight corners of

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    means that only the four nodes in face-direction contribute to the

    lighting (getSmoothLightSolid).

    For special nodes, which use the lighting values at the eight corners of

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    lighting (getSmoothLightSolid).

    For special nodes, which use the lighting values at the eight corners of

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    For special nodes, which use the lighting values at the eight corners of

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    a node, the lighting is not face-dependent, but certain nodes of the

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    eight surrounding nodes of a corner (here indices 4, 5, 6 and 7) can be

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    obstructed.

    

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    Ambient occlusion now also occurs for solid nodes, if two, three or four

    of the four nodes in face-direction are solid.

    of the four nodes in face-direction are solid.

    Fix warnings introduced by 9b8fa99fe30728c1fcfa73cdf74211841bdae9fb

    Thread: fix a crash on Windows due to data race condition on Thread::m_start_finished_mutex (#6515)

    NetworkPacket::putRawPacket: resize m_data to datasize + memcpy

    

    In some cases NetworkPacket was created using default constructor and m_data is not properly sized.

    This fixed out of bounds memory copy

    Also use memcpy instead of std::vector affectation to enhance packet creation

    In some cases NetworkPacket was created using default constructor and m_data is not properly sized.

    This fixed out of bounds memory copy

    Also use memcpy instead of std::vector affectation to enhance packet creation

    This fixed out of bounds memory copy

    Also use memcpy instead of std::vector affectation to enhance packet creation

    Also use memcpy instead of std::vector affectation to enhance packet creation

    Simple decorations: Add 'param2_max' parameter for random param2

    

    If 'param2_max' is not used, parameter 'param2' works as before for

    compatibility.

    If 'param2_max' is used, 'param2' and 'param2_max' become the lower

    and upper bounds of a per-decoration random param2.

    If 'param2_max' is not used, parameter 'param2' works as before for

    compatibility.

    If 'param2_max' is used, 'param2' and 'param2_max' become the lower

    and upper bounds of a per-decoration random param2.

    compatibility.

    If 'param2_max' is used, 'param2' and 'param2_max' become the lower

    and upper bounds of a per-decoration random param2.

    If 'param2_max' is used, 'param2' and 'param2_max' become the lower

    and upper bounds of a per-decoration random param2.

    and upper bounds of a per-decoration random param2.

    Travis: Update clang from 4.0 to 5.0 (#6467)

    

    * Update clang from 4.0 to 5.0

    * Update clang from 4.0 to 5.0

    Formspec: textarea with scrollbar improvements

    

    Increase scrollrate depending on fontsize

    

    Scroll on mousewheel

    

    Allow scrolling and marking text on non writable textareas

    

    Update lua api about readonly mode

    

    Show scrollbar if text overflows

    Increase scrollrate depending on fontsize

    

    Scroll on mousewheel

    

    Allow scrolling and marking text on non writable textareas

    

    Update lua api about readonly mode

    

    Show scrollbar if text overflows

    Scroll on mousewheel

    

    Allow scrolling and marking text on non writable textareas

    

    Update lua api about readonly mode

    

    Show scrollbar if text overflows

    Allow scrolling and marking text on non writable textareas

    

    Update lua api about readonly mode

    

    Show scrollbar if text overflows

    Update lua api about readonly mode

    

    Show scrollbar if text overflows

    Show scrollbar if text overflows

    FormSpec : Add an auto vertical scrollbar to the textarea

    Replace deprecated WINAPI GetVersionInfoEx (#6496)

    

    * Replace deprecated WINAPI GetVersionInfoEx

    * Replace deprecated WINAPI GetVersionInfoEx

    Do not grant all privs to the admin - changes game behavior (#6460)

    

    * Do not grant all privs to admins.

    

    * Default give_to_admin to give_to_singleplayer

    * Do not grant all privs to admins.

    

    * Default give_to_admin to give_to_singleplayer

    * Default give_to_admin to give_to_singleplayer

    Add setting for near plane distance. (#6395)

    

    * Allow setting the near plane

    

    * - Add near_plane limit of 0.5 to prevent x-ray.

    - Add more details to near_plane setting.

    * Allow setting the near plane

    

    * - Add near_plane limit of 0.5 to prevent x-ray.

    - Add more details to near_plane setting.

    * - Add near_plane limit of 0.5 to prevent x-ray.

    - Add more details to near_plane setting.

    - Add more details to near_plane setting.

    Unkown nodes: Provide position on interact (#6505)

    

    * Unkown nodes: Provide position on interact

    * Unkown nodes: Provide position on interact

    settingtypes.txt: Update zoom description (#6443)

    Move register_on_modchannel_signal() (#6497)

    

    Moved from lua_api.txt to client_lua_api.md.

    Moved from lua_api.txt to client_lua_api.md.

    [CSM] Add callback on open inventory (#5793)

    ParticleSpawner::step cleanup and rotation fix (#6486)

    

    * Particles: Move spawner code to a separate fucntion

    * Particles: Move spawner code to a separate fucntion

    CAO footstep sounds: Reduce gain to balance volume

    Stratum ore: Allow use with no noise for simple horizontal strata

    

    If either of the 2 noise parameters are omitted the ore will occur from y_min

    to y_max in a simple horizontal stratum. As this does not compute noise

    performance improves, and is ideal for placing many layers.

    

    Clean up some nearby ore documentation.

    If either of the 2 noise parameters are omitted the ore will occur from y_min

    to y_max in a simple horizontal stratum. As this does not compute noise

    performance improves, and is ideal for placing many layers.

    

    Clean up some nearby ore documentation.

    to y_max in a simple horizontal stratum. As this does not compute noise

    performance improves, and is ideal for placing many layers.

    

    Clean up some nearby ore documentation.

    performance improves, and is ideal for placing many layers.

    

    Clean up some nearby ore documentation.

    Clean up some nearby ore documentation.

    game.cpp: remove dead code for proto v25 compat (#6481)

    

    Protocol v25 is not supported anymore

    Protocol v25 is not supported anymore

    Fix attached particle spawners far from spawn (#6479)

    

    * Fix attached particle spawners far from spawn

    

    When far from spawn, attached particle spawners

    did not spawn particles.

    * Fix attached particle spawners far from spawn

    

    When far from spawn, attached particle spawners

    did not spawn particles.

    When far from spawn, attached particle spawners

    did not spawn particles.

    did not spawn particles.

    Make Player::peer_id server-side only and add getters and setters (#6478)

    

    * Make Player::peer_id server-side only and add getters and setters

    

    Player::peer_id has no sense client side, move it to server, make it private and add setter and getter

    Also add some PEER_ID_INEXISTENT instead of harcoded 0

    * Make Player::peer_id server-side only and add getters and setters

    

    Player::peer_id has no sense client side, move it to server, make it private and add setter and getter

    Also add some PEER_ID_INEXISTENT instead of harcoded 0

    Player::peer_id has no sense client side, move it to server, make it private and add setter and getter

    Also add some PEER_ID_INEXISTENT instead of harcoded 0

    Also add some PEER_ID_INEXISTENT instead of harcoded 0

    Localplayer: Fix disable_jump effect and getStandingNodePos()

    

    Leave the old move code untouched.

    Leave the old move code untouched.

    Lua_api.txt: Clarify arguments of functions, plus some cleanup

    Document orientation parameter of set_attach (#6473)

    Add static_save property to luaentites to not save them statically. (#5112)

    

    * Add no_static_save property to luaentites to not save them statically.

    This allows for temporary objects that would get deleted anyway as soon as they are loaded again without the static saving overhead.

    

    * Use positive meaning for static_save object property

    

    * Invert meaning also for the LUA parameter

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    * Add no_static_save property to luaentites to not save them statically.

    This allows for temporary objects that would get deleted anyway as soon as they are loaded again without the static saving overhead.

    

    * Use positive meaning for static_save object property

    

    * Invert meaning also for the LUA parameter

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    This allows for temporary objects that would get deleted anyway as soon as they are loaded again without the static saving overhead.

    

    * Use positive meaning for static_save object property

    

    * Invert meaning also for the LUA parameter

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    * Use positive meaning for static_save object property

    

    * Invert meaning also for the LUA parameter

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    * Invert meaning also for the LUA parameter

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    Note: getboolfield() does not change &result when field does not exist, so it defaults to the default value in the header file, which is 'true'.

    

    * Extend push_object_properties()

    * Extend push_object_properties()

    Server: affect bind_addr on constructor instead of start() (#6474)

    

    bind_addr is already ready when using constructor as we read is.IPv6 from it, instead pass the whole address

    bind_addr is already ready when using constructor as we read is.IPv6 from it, instead pass the whole address

    Fix some forgotten u16 -> session_t in ad7daf7b52348e1b71aa803be10de5b2134cba11

    Fix recent commit: std::max -> std::fmax for floats (#6469)

    

    Fixes commit a455297d297c0819a7eff89e51e5f01a5ac731c3

    <cmath> header was already present in commit.

    Fixes commit a455297d297c0819a7eff89e51e5f01a5ac731c3

    <cmath> header was already present in commit.

    <cmath> header was already present in commit.

    Lint fix

    Add session_t typedef + remove unused functions (#6470)

    

    * Add session_t typedef + remove unused functions

    

    u16 peer_id is used everywhere, to be more consistent and permit some evolutions on this type in the future (i'm working on a PoC), uniformize u16 peer_id to SessionId peer_id

    * Add session_t typedef + remove unused functions

    

    u16 peer_id is used everywhere, to be more consistent and permit some evolutions on this type in the future (i'm working on a PoC), uniformize u16 peer_id to SessionId peer_id

    u16 peer_id is used everywhere, to be more consistent and permit some evolutions on this type in the future (i'm working on a PoC), uniformize u16 peer_id to SessionId peer_id

    Update version correctly again (#6462)

    

    * Update version correctly again

    Partial revert of PR 6331

    

    * It doesn't update automatically

    * Update version correctly again

    Partial revert of PR 6331

    

    * It doesn't update automatically

    Partial revert of PR 6331

    

    * It doesn't update automatically

    * It doesn't update automatically

    Update JsonCPP to 1.8.3 (#6466)

    

    * Update JsonCPP to 1.8.3

    

    * Fix deprecated functions

    

    Json::FastWriter, Json::StyledWriter and Json::Reader are marked deprecated since 1.1 and are deprecated in 0.8 but not shown at compilation time.

    

    Use new methods to serialize/deserialize

    * Update JsonCPP to 1.8.3

    

    * Fix deprecated functions

    

    Json::FastWriter, Json::StyledWriter and Json::Reader are marked deprecated since 1.1 and are deprecated in 0.8 but not shown at compilation time.

    

    Use new methods to serialize/deserialize

    * Fix deprecated functions

    

    Json::FastWriter, Json::StyledWriter and Json::Reader are marked deprecated since 1.1 and are deprecated in 0.8 but not shown at compilation time.

    

    Use new methods to serialize/deserialize

    Json::FastWriter, Json::StyledWriter and Json::Reader are marked deprecated since 1.1 and are deprecated in 0.8 but not shown at compilation time.

    

    Use new methods to serialize/deserialize

    Use new methods to serialize/deserialize

    preview: try to send mod channel messages 4 seconds after joining, not after loading mod

    Add mute setting (toggled by the mute key and in the volume menu) (#6415)

    

    * Add mute setting (toggled by the mute key and in the volume menu)

    * Add mute setting (toggled by the mute key and in the volume menu)

    Implement mod communication channels (#6351)

    

    Implement network communication for channels

    

    * Implement ModChannel manager server side to route incoming messages from clients to other clients

    * Add signal handler switch on client & ModChannelMgr on client to handle channels

    * Add Lua API bindings + client packet sending + unittests

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    Implement network communication for channels

    

    * Implement ModChannel manager server side to route incoming messages from clients to other clients

    * Add signal handler switch on client & ModChannelMgr on client to handle channels

    * Add Lua API bindings + client packet sending + unittests

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    * Implement ModChannel manager server side to route incoming messages from clients to other clients

    * Add signal handler switch on client & ModChannelMgr on client to handle channels

    * Add Lua API bindings + client packet sending + unittests

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    * Add signal handler switch on client & ModChannelMgr on client to handle channels

    * Add Lua API bindings + client packet sending + unittests

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    * Add Lua API bindings + client packet sending + unittests

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    * Implement server message sending

    * Add callback from received message handler to Lua API using registration method

    * Add callback from received message handler to Lua API using registration method

    Can_zoom player object property: Add missing documentation

    Positional sound: Limit volume when closer than 1 node

    

    Change OpenAL distance model from AL_INVERSE_DISTANCE to

    AL_INVERSE_DISTANCE_CLAMPED to avoid excessive volume when very close

    to the sound location, for example MTG doors, and MTG fire sounds which

    are combined at an average position and often located in air nodes.

    

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    Change OpenAL distance model from AL_INVERSE_DISTANCE to

    AL_INVERSE_DISTANCE_CLAMPED to avoid excessive volume when very close

    to the sound location, for example MTG doors, and MTG fire sounds which

    are combined at an average position and often located in air nodes.

    

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    AL_INVERSE_DISTANCE_CLAMPED to avoid excessive volume when very close

    to the sound location, for example MTG doors, and MTG fire sounds which

    are combined at an average position and often located in air nodes.

    

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    to the sound location, for example MTG doors, and MTG fire sounds which

    are combined at an average position and often located in air nodes.

    

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    are combined at an average position and often located in air nodes.

    

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    Because AL_REFERENCE_DISTANCE has been reduced to 1 node (the distance

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    under which gain is clamped), multiply volume by the same factor to keep

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    sound gains the same as before, since the gain is calculated as:

    

    gain = (AL_REFERENCE_DISTANCE / distance)

    gain = (AL_REFERENCE_DISTANCE / distance)

    Fix blocks written by vmanip not being marked as modified

    

    This bug can be triggered by e.g. calling minetest.place_schematic()

    and stopping the server immediately afterwards.

    This bug can be triggered by e.g. calling minetest.place_schematic()

    and stopping the server immediately afterwards.

    and stopping the server immediately afterwards.

    Set placer to nil instead of a non-functional one in item_OnPlace (#6449)

    

    * Set placer to nil instead of a non-functional one

    

    This requires nil checks in core.rotate_node and core.rotate_and_place.

    * Set placer to nil instead of a non-functional one

    

    This requires nil checks in core.rotate_node and core.rotate_and_place.

    This requires nil checks in core.rotate_node and core.rotate_and_place.

    on_death: Fix callback number of pushed arguments (Fixes #6451)

    keycode.cpp: use std::unordered_map for keypress cache

    Fix compile error in openbsd (#6430)

    

    Include the header that defines AF_INET and AF_INET6

    Include the header that defines AF_INET and AF_INET6

    Rooted plantlike drawtype: Add remaining documentation

    

    Plus a small clarification of 'glasslike framed' documentation.

    Plus a small clarification of 'glasslike framed' documentation.

    Leveled nodebox: Change levels from 1/63rds to 1/64ths

    

    Add missing documentation of leveled nodebox to lua_api.txt, plus

    a little cleaning up nearby.

    Add missing documentation of leveled nodebox to lua_api.txt, plus

    a little cleaning up nearby.

    a little cleaning up nearby.

    Biome API: Revert biomes, decos, ores being relative to water level

    

    Feature is unnecessary and would greatly complicate future development,

    it would also make 'get biome at pos' extremely complex.

    Mgv7: Revert option to repeat surface biomes in floatlands, which

    depended on the above.

    Feature is unnecessary and would greatly complicate future development,

    it would also make 'get biome at pos' extremely complex.

    Mgv7: Revert option to repeat surface biomes in floatlands, which

    depended on the above.

    it would also make 'get biome at pos' extremely complex.

    Mgv7: Revert option to repeat surface biomes in floatlands, which

    depended on the above.

    Mgv7: Revert option to repeat surface biomes in floatlands, which

    depended on the above.

    depended on the above.

    Biome generation: Fix layers of 'filler' nodes at biome y limits

    

    Error was exposed by commit a1389c38658fe69c3bd25c3099bae9a4e51ed401

    'nplaced' was not set to U16_MAX when biome 'stone' was placed, so when

    biome was recalculated in a column of stone, the 'nplaced' value

    caused a few remaining filler nodes to be placed.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    Error was exposed by commit a1389c38658fe69c3bd25c3099bae9a4e51ed401

    'nplaced' was not set to U16_MAX when biome 'stone' was placed, so when

    biome was recalculated in a column of stone, the 'nplaced' value

    caused a few remaining filler nodes to be placed.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    'nplaced' was not set to U16_MAX when biome 'stone' was placed, so when

    biome was recalculated in a column of stone, the 'nplaced' value

    caused a few remaining filler nodes to be placed.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    biome was recalculated in a column of stone, the 'nplaced' value

    caused a few remaining filler nodes to be placed.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    caused a few remaining filler nodes to be placed.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    Occurs when the lower biome has a deeper depth of 'top' plus 'filler'

    than the upper biome.

    than the upper biome.

    Fix Rotate Node Placement (#6424)

    

    This properly checks for creative mode or privilege when using fixed rotate_node() function.

    This properly checks for creative mode or privilege when using fixed rotate_node() function.

    Correct tooltip_append_itemstring terminology (#6421)

    Fix addModsFormConfig typo (#6420)

    Generate biomes: Recalculate biome at biome lower limit

    

    Prevents biome nodes passing below the defined y_min of that biome.

    Prevents biome nodes passing below the defined y_min of that biome.

    Add setting to display the itemstring after the tooltip in the inventory. (#6413)

    

    * Add setting to display the itemstring after the tooltip in the inventory.

    * Add setting to display the itemstring after the tooltip in the inventory.

    ServerEnv: Clean up object lifecycle handling (#6414)

    

    * ServerEnv: Clean up object lifecycle handling

    * ServerEnv: Clean up object lifecycle handling

    Customizeable max breath for players (#6411)

    

    * Customizeable maximal breath for players

    * Customizeable maximal breath for players

    Cavegen: Avoid unsupported biome 'top' or 'filler' nodes

    

    For 3D noise tunnels only, replace unsupported biome 'top' and 'filler'

    nodes in tunnel roof with the defined biome 'stone'.

    This makes terrain created by 3D noise tunnels consistent with the rest

    of mapgen, which does exactly the same in this situation.

    For 3D noise tunnels only, replace unsupported biome 'top' and 'filler'

    nodes in tunnel roof with the defined biome 'stone'.

    This makes terrain created by 3D noise tunnels consistent with the rest

    of mapgen, which does exactly the same in this situation.

    nodes in tunnel roof with the defined biome 'stone'.

    This makes terrain created by 3D noise tunnels consistent with the rest

    of mapgen, which does exactly the same in this situation.

    This makes terrain created by 3D noise tunnels consistent with the rest

    of mapgen, which does exactly the same in this situation.

    of mapgen, which does exactly the same in this situation.

    Object properties: Add 'glow', disables light's effect if negative

    

    The 'glow' value is added to the ambient light value.

    Negative 'glow' disables light's effect on object colour, for faking

    self-lighting, UI-style entities, or programmatic colouring in mods.

    The 'glow' value is added to the ambient light value.

    Negative 'glow' disables light's effect on object colour, for faking

    self-lighting, UI-style entities, or programmatic colouring in mods.

    Negative 'glow' disables light's effect on object colour, for faking

    self-lighting, UI-style entities, or programmatic colouring in mods.

    self-lighting, UI-style entities, or programmatic colouring in mods.

    Item drop: Tune to land exactly 2 nodes away with level view (#6410)

    Network: Fix logging into older worlds with base64 hashes

    Network: Remove large parts of deprecated legacy code (#6404)

    

    Also remove the setting 'send_pre_v25_init'

    Keep old enum entries for obsolete commands

    Also remove the setting 'send_pre_v25_init'

    Keep old enum entries for obsolete commands

    Keep old enum entries for obsolete commands

    Fix failing linter (travis)

    Fix core.wrap_text and make its behaviour consistent with the docs

    

    Code based on initial implementation by @dsohler.

    Code based on initial implementation by @dsohler.

    Make INodeDefManager::getIds return a vector, not a set

    Implement client node dig prediction

    

    Dig prediction allows clients to remove dug nodes without

    waiting for server acknowledgement.

    This patch allows mods to override dig prediction,

    it can either be turned off or a different "prediction node"

    can be selected.

    Dig prediction allows clients to remove dug nodes without

    waiting for server acknowledgement.

    This patch allows mods to override dig prediction,

    it can either be turned off or a different "prediction node"

    can be selected.

    waiting for server acknowledgement.

    This patch allows mods to override dig prediction,

    it can either be turned off or a different "prediction node"

    can be selected.

    This patch allows mods to override dig prediction,

    it can either be turned off or a different "prediction node"

    can be selected.

    it can either be turned off or a different "prediction node"

    can be selected.

    can be selected.

    Allow the join/leave message to be overridden by mods.

    Fix dropped item look (#6370)

    

    * Abort set_item when it does nothing

    

    * Do not adjust dropped item size linearly

    

    Instead use cube root because the item count is proportional to the volume, not to the length.

    

    * Make the item rotate slower when it's bigger

    

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    * Abort set_item when it does nothing

    

    * Do not adjust dropped item size linearly

    

    Instead use cube root because the item count is proportional to the volume, not to the length.

    

    * Make the item rotate slower when it's bigger

    

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    * Do not adjust dropped item size linearly

    

    Instead use cube root because the item count is proportional to the volume, not to the length.

    

    * Make the item rotate slower when it's bigger

    

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    Instead use cube root because the item count is proportional to the volume, not to the length.

    

    * Make the item rotate slower when it's bigger

    

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    * Make the item rotate slower when it's bigger

    

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    Bigger items chafe more on the ground, so they can't rotate as fast as small ones

    

    * Fix items flying in air

    * Fix items flying in air

    Object properties: Fix loss of custom selectionbox

    Only adjust it to the collisionbox value when the collisionbox was really set.

    Only adjust it to the collisionbox value when the collisionbox was really set.

    Fix incorrect buffer size calculation on creation of HUD status messages

    

    Fixes #6400

    Fixes #6400

    Schematic decorations: Add 'place_offset_y' placement parameter

    

    For precise control of schematic vertical position relative to the

    'place_on' node.

    Avoids workarounds that add empty nodes to a schematic and therefore

    reduce performance.

    

    Also remove long-unused decoration cutoff code.

    For precise control of schematic vertical position relative to the

    'place_on' node.

    Avoids workarounds that add empty nodes to a schematic and therefore

    reduce performance.

    

    Also remove long-unused decoration cutoff code.

    'place_on' node.

    Avoids workarounds that add empty nodes to a schematic and therefore

    reduce performance.

    

    Also remove long-unused decoration cutoff code.

    Avoids workarounds that add empty nodes to a schematic and therefore

    reduce performance.

    

    Also remove long-unused decoration cutoff code.

    reduce performance.

    

    Also remove long-unused decoration cutoff code.

    Also remove long-unused decoration cutoff code.

    Fix empty legacy meta being persisted

    Fix crash on revocation of removed privilege

    Server: Calculate maximal total block sends dynamically (#6393)

    

    The block sends per client is 1/2 when reaching the maximal player count.

    The block sends per client is 1/2 when reaching the maximal player count.

    Particles: Do not add digging particles for airlike nodes (#6392)

    Prevent /spawnentity from spawning unknown entity (#6388)

    main.cpp: server-only builds should not include client headers

    Use a Buffer instead of SharedBuffer in ConnectionCommand

    

    This fixes #6373

    This fixes #6373

    Make HUD status messages translatable (#5795)

    

    * Make HUD status messages translatable

    

    * Make strings in showStatusTextSimple translatable

    * Make HUD status messages translatable

    

    * Make strings in showStatusTextSimple translatable

    * Make strings in showStatusTextSimple translatable

    Remove DSTACK keybind setting (#6378)

    Conf.example: Update using auto-generation

    Network protocol documentation: Add 'can_zoom' to version 36

    Implement minetest.register_can_bypass_userlimit (#6369)

    

    * Implement minetest.register_on_userlimit_check

    

    This new callback permits to bypass the max_users parameter with new mods condition, based on player name or IP

    Only one mod needs to permit it.

    

    Move core part for builtin privileges checks to builtin

    * Implement minetest.register_on_userlimit_check

    

    This new callback permits to bypass the max_users parameter with new mods condition, based on player name or IP

    Only one mod needs to permit it.

    

    Move core part for builtin privileges checks to builtin

    This new callback permits to bypass the max_users parameter with new mods condition, based on player name or IP

    Only one mod needs to permit it.

    

    Move core part for builtin privileges checks to builtin

    Only one mod needs to permit it.

    

    Move core part for builtin privileges checks to builtin

    Move core part for builtin privileges checks to builtin

    Re-apply previous commit with a typo fix

    Revert "Network: fix a concurrency problem, by re-adding a copy in ConnectionCommand"

    

    This reverts commit 5b04f5e7d231437b534f4cad39da78624d97c584.

    This reverts commit 5b04f5e7d231437b534f4cad39da78624d97c584.

    Network: fix a concurrency problem, by re-adding a copy in ConnectionCommand

    World start time: Add setting for this, default unchanged

    Add build date to minetest --version and increase readability (#6331)

    Ores: Add stratum ore (#6352)

    

    Creates a single undulating ore stratum that is continuous across mapchunk

    borders and horizontally spans the world.

    Due to being continuous is ideal for creating bands of alternative stone

    type running through cliffs and mountains, or underground layers.

    

    Add missing documentation of 'ore_param2' parameter.

    Creates a single undulating ore stratum that is continuous across mapchunk

    borders and horizontally spans the world.

    Due to being continuous is ideal for creating bands of alternative stone

    type running through cliffs and mountains, or underground layers.

    

    Add missing documentation of 'ore_param2' parameter.

    borders and horizontally spans the world.

    Due to being continuous is ideal for creating bands of alternative stone

    type running through cliffs and mountains, or underground layers.

    

    Add missing documentation of 'ore_param2' parameter.

    Due to being continuous is ideal for creating bands of alternative stone

    type running through cliffs and mountains, or underground layers.

    

    Add missing documentation of 'ore_param2' parameter.

    type running through cliffs and mountains, or underground layers.

    

    Add missing documentation of 'ore_param2' parameter.

    Add missing documentation of 'ore_param2' parameter.

    Use member initialization list instead of the constructor's body (#6371)

    

    * Use member initialization list instead of the constructor's body

    * Use member initialization list instead of the constructor's body

    Network part requires SharedBuffers to be pass as value

    This can trigger unreproductible crashes due to concurrency problem on SharedBuffers

    

    This fixes #6354

    This can trigger unreproductible crashes due to concurrency problem on SharedBuffers

    

    This fixes #6354

    This fixes #6354

    Remove 3D noise from getSteps function (#6360)

    Remove nodeupdate completely (#6358)

    Fix animation frame_speed and blend loosing precision due to incorrec… (#6357)

    

    * Fix animation frame_speed and blend loosing precision due to incorrect data type

    Add lua function set_animation_frame_speed to update the frame speed without resetting the animation to start

    * Fix animation frame_speed and blend loosing precision due to incorrect data type

    Add lua function set_animation_frame_speed to update the frame speed without resetting the animation to start

    Add lua function set_animation_frame_speed to update the frame speed without resetting the animation to start

    Remove nodeupdate and nodeupdate_single

    Zoom: Move enabling zoom to a new player object property

    

    Default enabled for no change in default behaviour.

    Remove 'zoom' privilege.

    Default enabled for no change in default behaviour.

    Remove 'zoom' privilege.

    Remove 'zoom' privilege.

    Remove DSTACK support (#6346)

    

    Debugstacks is not useful, we don't really use it, the DebugStack is not pertinent, gdb and lldb are better if we really want to debug.

    Debugstacks is not useful, we don't really use it, the DebugStack is not pertinent, gdb and lldb are better if we really want to debug.

    Documentation for 'slippery' node group (#6345)

    Network proto handlers/container fixes (#6334)

    

    * Fix HP transport + some double <-> float problems

    

    TOCLIENT_HP transport u16 hp as a u8, use u16 HP, this prevent HP over 255 to overflow across network

    

    * Fix more double/float problem in serverpackethandler & remove implicit struct type for TileAnimationParams

    

    * Fix connection unittests container

    * Fix HP transport + some double <-> float problems

    

    TOCLIENT_HP transport u16 hp as a u8, use u16 HP, this prevent HP over 255 to overflow across network

    

    * Fix more double/float problem in serverpackethandler & remove implicit struct type for TileAnimationParams

    

    * Fix connection unittests container

    TOCLIENT_HP transport u16 hp as a u8, use u16 HP, this prevent HP over 255 to overflow across network

    

    * Fix more double/float problem in serverpackethandler & remove implicit struct type for TileAnimationParams

    

    * Fix connection unittests container

    * Fix more double/float problem in serverpackethandler & remove implicit struct type for TileAnimationParams

    

    * Fix connection unittests container

    * Fix connection unittests container

    Pushing typo fix introduced in b7ee608e70f8e031e3e01c9672bedb16efa648b8

    Bump minimal protocol version to 36 (#6319)

    

    * Bump minimal protocol version to 36

    Item/Node/TileDef, NodeBox, TileAnimation: Remove old compat code

    

    * Accept future serialisation versions

    * Bump minimal protocol version to 36

    Item/Node/TileDef, NodeBox, TileAnimation: Remove old compat code

    

    * Accept future serialisation versions

    Item/Node/TileDef, NodeBox, TileAnimation: Remove old compat code

    

    * Accept future serialisation versions

    * Accept future serialisation versions

    Formspec: Add options to set background color and opacity (fullscreen mode + default mode) (#5493)

    

    * Formspec: Add options to set background color and opacity (fullscreen mode)

    

    * Enhance previous comment: Set formspec background when regenerate UI.

    

    * This permit to do the calcul only at regen and override it with bgcolor tag

    * Add a setting for default background color into formspec, separated from fullscreen

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    * Formspec: Add options to set background color and opacity (fullscreen mode)

    

    * Enhance previous comment: Set formspec background when regenerate UI.

    

    * This permit to do the calcul only at regen and override it with bgcolor tag

    * Add a setting for default background color into formspec, separated from fullscreen

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    * Enhance previous comment: Set formspec background when regenerate UI.

    

    * This permit to do the calcul only at regen and override it with bgcolor tag

    * Add a setting for default background color into formspec, separated from fullscreen

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    * This permit to do the calcul only at regen and override it with bgcolor tag

    * Add a setting for default background color into formspec, separated from fullscreen

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    * Add a setting for default background color into formspec, separated from fullscreen

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    * Add a little performance gain on formspecs using a const ref instead of copying formspec string

    Fix mistake when calling on_priv_grant/revoke, and document them (#6341)

    Advanced settings: Make 'controls', 'graphics', 'sound' more accessible

    

    Move client 'controls', 'graphics' and 'sound' into the first level to be

    immediately visible to players who may not realise these come under 'client'.

    These are the settings that new players or players on a server are likely to

    want to access while not having understanding of what comes under 'client'.

    

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    Move client 'controls', 'graphics' and 'sound' into the first level to be

    immediately visible to players who may not realise these come under 'client'.

    These are the settings that new players or players on a server are likely to

    want to access while not having understanding of what comes under 'client'.

    

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    immediately visible to players who may not realise these come under 'client'.

    These are the settings that new players or players on a server are likely to

    want to access while not having understanding of what comes under 'client'.

    

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    These are the settings that new players or players on a server are likely to

    want to access while not having understanding of what comes under 'client'.

    

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    want to access while not having understanding of what comes under 'client'.

    

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    Leave client 'network' and 'advanced' under 'client' as these are more

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    advanced.

    

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    Move 'show entity selection boxes' from the bizarre location in

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    'client'>'network' to 'graphics'>'in game'>'advanced'.

    mapblock_mesh.cpp: Fix code style and simplify a bit code (#4558)

    

    * mapblock_mesh.cpp: Fix code style and simplify a bit code

    * mapblock_mesh.cpp: Fix code style and simplify a bit code

    Clientevent refactor (#6320)

    

    * Refactor clientevent structure

    

    * Move structure outside of client header

    

    * Create client events on heap not stack, this remove the ClientEvent object copy

    

    * Use clientEventHandler to route events

    * Refactor clientevent structure

    

    * Move structure outside of client header

    

    * Create client events on heap not stack, this remove the ClientEvent object copy

    

    * Use clientEventHandler to route events

    * Move structure outside of client header

    

    * Create client events on heap not stack, this remove the ClientEvent object copy

    

    * Use clientEventHandler to route events

    * Create client events on heap not stack, this remove the ClientEvent object copy

    

    * Use clientEventHandler to route events

    * Use clientEventHandler to route events

    Pass SharedBuffer as value to increment reference count

    This should fix #6332

    Refcount is not increased due to reference, it can make this refcount incorrect in a multithread context

    This should fix #6332

    Refcount is not increased due to reference, it can make this refcount incorrect in a multithread context

    Refcount is not increased due to reference, it can make this refcount incorrect in a multithread context

    Use crack animation on all tile layers (#6104)

    Statbars: fix incorrect half-images in non-standard orientations (fixes #6198)

    Lua API: Add function to deregister single biomes (#5445)

    core.get_objects_inside_radius: Omit removed objects (#6318)

    

    Fixes #6294

    Fixes #6294

    More readable default controls in README

    Add '@n' escape sequences and some documentation on translated strings.

    Alternative code for slipping (#6256)

    

    * Alternative code for slipping

    

    - does not depend on frame rate

    - controllable via environment variables for now

    

    * Adjust slipping speed for item entities too.

    

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Alternative code for slipping

    

    - does not depend on frame rate

    - controllable via environment variables for now

    

    * Adjust slipping speed for item entities too.

    

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    - does not depend on frame rate

    - controllable via environment variables for now

    

    * Adjust slipping speed for item entities too.

    

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    - controllable via environment variables for now

    

    * Adjust slipping speed for item entities too.

    

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Adjust slipping speed for item entities too.

    

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Final version of framerate-independent slippery code

    

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Remove dead code and fix formatting

    

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * getStandingNodePos should only look 0.05 nodes downwards

    

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    This ensures that, even if the player is standing on a partially

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    filled node, this node is used as the standing node and not the

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    node below it.

    

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    Specific use: enables slippery slabs

    

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Exchange global getStandingPosNode change for local inline change

    

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    Reverts previous commit

    

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Revert the item movement changes

    

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Slippery nodes now slip over cliffs and edges

    

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    Players no longer suddenly stop before falling off.

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    Also refactored slippery code into getSlipFactor method.

    

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Slipping over an edge gated by player's is_slipping state

    

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    A new flag for just this case, to reduce costly node lookups in

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    the normal case of leaning over a non-slippery edge.

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    Public access for consistency and potential future uses.

    

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Minor code tweaks / cosmetics

    

    * Add temp variable to improve readability and fix indentation issues

    * Add temp variable to improve readability and fix indentation issues

    Android stepheight: Only increase if 'touching ground' (#6313)

    Mgfractal: Use 'switch case' instead of 'if else' (#6314)

    Add on_grant and on_revoke callbacks (#4713)

    

    * Add register_on_priv_grant/revoke, and on_grant/revoke to privs. Call from /grant and /revoke

    

    * Call on_grant and on_revoke callbacks from set_privs

    * Add register_on_priv_grant/revoke, and on_grant/revoke to privs. Call from /grant and /revoke

    

    * Call on_grant and on_revoke callbacks from set_privs

    * Call on_grant and on_revoke callbacks from set_privs

    Check item_drop amount clientside (#6242)

    Network cleanup  (#6310)

    

    * Move Connection threads to dedicated files + various cleanups

    

    * ConnectionReceiveThread::processPacket now uses function pointer table to route MT packet types

    * Various code style fixes

    

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Move Connection threads to dedicated files + various cleanups

    

    * ConnectionReceiveThread::processPacket now uses function pointer table to route MT packet types

    * Various code style fixes

    

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * ConnectionReceiveThread::processPacket now uses function pointer table to route MT packet types

    * Various code style fixes

    

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Various code style fixes

    

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Fix many SharedBuffer copy (thanks to delete operator)

    Overlays for wield and inventory images (#6107)

    

    * Overlays for wield and inventory images

    * Overlays for wield and inventory images

    Translations: prevent remote crash with invalid translations

    Builtin item: Tidy up (#4370)

    

    New code structure

    Use setting movement_gravity

    Reset age on merge

    Set merge radius to 1.0m

    New code structure

    Use setting movement_gravity

    Reset age on merge

    Set merge radius to 1.0m

    Use setting movement_gravity

    Reset age on merge

    Set merge radius to 1.0m

    Reset age on merge

    Set merge radius to 1.0m

    Set merge radius to 1.0m

    Add translation of LANG_CODE in all languages

    Fix updatepo.sh and run it.

    It was broken due to the presence of "µ" utf-8 characters in builtin/profiler/reporter.lua.

    It was broken due to the presence of "µ" utf-8 characters in builtin/profiler/reporter.lua.

    Add clientside translations.

    Verify compiler version before building anything (#6293)

    

    GCC 4.9 and Clang 3.4 are the minimum

    GCC 4.9 and Clang 3.4 are the minimum

    Dont define min/max macros in minwindef.h (#6308)

    Fix OSX builds caused by __WORDSIZE again (#6307)

    Make entity selection and collision boxes independently settable (#6218)

    

    * Make entity selection and collision boxes independently settable

    * Make entity selection and collision boxes independently settable

    Fix Android node selection distance (#6187)

    Safe digging and placing (#6127)

    

    * Setting: Safe digging and placing

    

    * New setting 'safe_dig_and_place' under Controls

    * If set, digging and placing will not auto-repeat

    * Releasing buttons unblocks the respective action again

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * Setting: Safe digging and placing

    

    * New setting 'safe_dig_and_place' under Controls

    * If set, digging and placing will not auto-repeat

    * Releasing buttons unblocks the respective action again

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * New setting 'safe_dig_and_place' under Controls

    * If set, digging and placing will not auto-repeat

    * Releasing buttons unblocks the respective action again

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * If set, digging and placing will not auto-repeat

    * Releasing buttons unblocks the respective action again

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * Releasing buttons unblocks the respective action again

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * Useful for inexperienced users in creative mode where default

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

      repeat times may be too short

    

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * Safe placing (right click repetition) does not need a guarding flag

    

    * Added new setting to minetest.conf.example

    * Added new setting to minetest.conf.example

    Network cleanup (#6302)

    

    * Cleanup network headers

    

    * Move peerhandler to a specific header to reduce compilation times

    * Move socket.cpp/h to network folder

    

    * More work

    

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Cleanup network headers

    

    * Move peerhandler to a specific header to reduce compilation times

    * Move socket.cpp/h to network folder

    

    * More work

    

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Move peerhandler to a specific header to reduce compilation times

    * Move socket.cpp/h to network folder

    

    * More work

    

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Move socket.cpp/h to network folder

    

    * More work

    

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * More work

    

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Network code cleanups

    

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Move socket.{cpp,h} to network folder

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Move Address object to network/address.{cpp,h}

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Move network exceptions to network/networkexceptions.h

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Client: use unique_ptr for Connection

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Server/ClientIface: use shared_ptr for Connection

    

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Format fixes

    

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Remove socket.cpp socket.h from clang-format whitelist

    

    * Also fix NetworkPacket code style & make it under clang-format

    * Also fix NetworkPacket code style & make it under clang-format

    Fix OSX builds (closes #6289, fixes #6270) (#6306)

    

    Of course, this is not ideal solution, but we want our users to be happy in the

    first place, right?

    Of course, this is not ideal solution, but we want our users to be happy in the

    first place, right?

    first place, right?

    Respect object property hp_max field for players (#6287)

    

    * Respect object property hp_max field for players

    This allows modders to configure the maximal HP per player

    

    * Statbars: Downscale bar to full 20 HP when exceeding this value

    Add default max HP for players and breath constants to builtin

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    * Respect object property hp_max field for players

    This allows modders to configure the maximal HP per player

    

    * Statbars: Downscale bar to full 20 HP when exceeding this value

    Add default max HP for players and breath constants to builtin

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    This allows modders to configure the maximal HP per player

    

    * Statbars: Downscale bar to full 20 HP when exceeding this value

    Add default max HP for players and breath constants to builtin

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    * Statbars: Downscale bar to full 20 HP when exceeding this value

    Add default max HP for players and breath constants to builtin

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    Add default max HP for players and breath constants to builtin

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    Document the constants

    

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    * Rename PLAYER_MAX_HP -> PLAYER_MAX_HP_DEFAULT

    Do not add base position to player selection box (#6241)

    serialize: use a temporary for SerializeException

    Exception must always use temporary instead of global copied exception instances, it's not recommended and should have undefined issues

    Exception must always use temporary instead of global copied exception instances, it's not recommended and should have undefined issues

    Mgv6: Remove incorrectly defined and unused 'volume nodes'

    Minimap: Add new HUD flag for minimap radar mode

    

    Flag default is true to not change default behaviour.

    The existing minimap HUD flag remains the master control for minimap.

    Flag default is true to not change default behaviour.

    The existing minimap HUD flag remains the master control for minimap.

    The existing minimap HUD flag remains the master control for minimap.

    Fix a formspec crash triggered by ae9b5e00989756bb676429530dfe81039009001c

    Add missing ENABLE_SYSTEM_JSONCPP in docs

    Change BS constant from implicit double to float (#6286)

    

    the BS constant

    implicitly promotes all position calculations it is used in to double even

    though positions (= v3f) are only meant to be floats.

    

    There are many, many similar occurrences everywhere, but I'm not willing to

    hunt down all; I only fixed the little part I'm already familiar with.

    the BS constant

    implicitly promotes all position calculations it is used in to double even

    though positions (= v3f) are only meant to be floats.

    

    There are many, many similar occurrences everywhere, but I'm not willing to

    hunt down all; I only fixed the little part I'm already familiar with.

    implicitly promotes all position calculations it is used in to double even

    though positions (= v3f) are only meant to be floats.

    

    There are many, many similar occurrences everywhere, but I'm not willing to

    hunt down all; I only fixed the little part I'm already familiar with.

    though positions (= v3f) are only meant to be floats.

    

    There are many, many similar occurrences everywhere, but I'm not willing to

    hunt down all; I only fixed the little part I'm already familiar with.

    There are many, many similar occurrences everywhere, but I'm not willing to

    hunt down all; I only fixed the little part I'm already familiar with.

    hunt down all; I only fixed the little part I'm already familiar with.

    Modernize code: very last fixes (#6290)

    

    Last modernization fixes

    Last modernization fixes

    Travis-ci build: fix osx jpeg installation failure, git ambiguous argument error (caused by merging commits) and add a workaround for travis commit range bug (#6227)

    

    * common.sh: fix travis-ci build bugs

    install_macosx_deps: check if jpeg is installed, if not - upgrade it.

    needs_compile: Check if $TRAVIS_COMMIT_RANGE is valid, if not, rewrite

    the range with the correct one, and fix git ambiguous argument error.

    

    * Changed detection method and removed commments

    * common.sh: fix travis-ci build bugs

    install_macosx_deps: check if jpeg is installed, if not - upgrade it.

    needs_compile: Check if $TRAVIS_COMMIT_RANGE is valid, if not, rewrite

    the range with the correct one, and fix git ambiguous argument error.

    

    * Changed detection method and removed commments

    install_macosx_deps: check if jpeg is installed, if not - upgrade it.

    needs_compile: Check if $TRAVIS_COMMIT_RANGE is valid, if not, rewrite

    the range with the correct one, and fix git ambiguous argument error.

    

    * Changed detection method and removed commments

    needs_compile: Check if $TRAVIS_COMMIT_RANGE is valid, if not, rewrite

    the range with the correct one, and fix git ambiguous argument error.

    

    * Changed detection method and removed commments

    the range with the correct one, and fix git ambiguous argument error.

    

    * Changed detection method and removed commments

    * Changed detection method and removed commments

    New version scheme (#6292)

    

    * Version changes: current dev version is now 0.5.0

    

    * This change permit to have multi branches with various versions

    * Dev version is 0.5.0-dev and next release will be 0.5.0

    * Version changes: current dev version is now 0.5.0

    

    * This change permit to have multi branches with various versions

    * Dev version is 0.5.0-dev and next release will be 0.5.0

    * This change permit to have multi branches with various versions

    * Dev version is 0.5.0-dev and next release will be 0.5.0

    * Dev version is 0.5.0-dev and next release will be 0.5.0

    Modernize source code: last part (#6285)

    

    * Modernize source code: last par

    

    * Use empty when needed

    * Use emplace_back instead of push_back when needed

    * For range-based loops

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * Modernize source code: last par

    

    * Use empty when needed

    * Use emplace_back instead of push_back when needed

    * For range-based loops

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * Use empty when needed

    * Use emplace_back instead of push_back when needed

    * For range-based loops

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * Use emplace_back instead of push_back when needed

    * For range-based loops

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * For range-based loops

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * Initializers fixes

    * constructors, destructors default

    * c++ C stl includes

    * constructors, destructors default

    * c++ C stl includes

    * c++ C stl includes

    Fix shader.h inclusion place in game.cpp

    Code modernization: subfolders (#6283)

    

    * Code modernization: subfolders

    

    Modernize various code on subfolders client, network, script, threading, unittests, util

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * Code modernization: subfolders

    

    Modernize various code on subfolders client, network, script, threading, unittests, util

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    Modernize various code on subfolders client, network, script, threading, unittests, util

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * Make connection.cpp readable in a pointed place + typo

    Code modernization: src/p*, src/q*, src/r*, src/s* (partial) (#6282)

    

    * Code modernization: src/p*, src/q*, src/r*, src/s* (partial)

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Spelling: vertice -> vertex

    * Code modernization: src/p*, src/q*, src/r*, src/s* (partial)

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Spelling: vertice -> vertex

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * Spelling: vertice -> vertex

    Code modernization: src/n*, src/o* (#6280)

    

    * Code modernization: src/n*, src/o*

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * remove unused IWritableNodeDefManager::clone()

    * C++ STL header style

    * Pointer constness in some functions

    * Code modernization: src/n*, src/o*

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * remove unused IWritableNodeDefManager::clone()

    * C++ STL header style

    * Pointer constness in some functions

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * remove unused IWritableNodeDefManager::clone()

    * C++ STL header style

    * Pointer constness in some functions

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * Pointer constness in some functions

    GenericCAO: Fix light position for non-players, remove deprecated initialisation code (#6281)

    ServerMap saving: cleanups (#6274)

    

    * remove sector meta loading/saving from files which targets dead code (differs_from_disk is always empty)

    * this remove empty ServerMapSector and ClientMapSector, remove MapSector childs

    * remove sector meta loading/saving from files which targets dead code (differs_from_disk is always empty)

    * this remove empty ServerMapSector and ClientMapSector, remove MapSector childs

    * this remove empty ServerMapSector and ClientMapSector, remove MapSector childs

    ItemCAO removal (#6279)

    

    This object is from 0.3 era and was never used since 0.4.X and GenericCAO usage

    This object is from 0.3 era and was never used since 0.4.X and GenericCAO usage

    Code modernization: src/m* (part 3)

    

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * remove some unused headers in some cpp variable

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * remove some unused headers in some cpp variable

    Code modernization: src/m* (part 2)

    

    * empty function

    * default constructor/destructor

    * remove unused Map::emergeSector(a,b)

    * for range-based loops

    * migrate a dirs[7] table to direction tables

    * remove various old unused function

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * remove unused Map::emergeSector(a,b)

    * for range-based loops

    * migrate a dirs[7] table to direction tables

    * remove various old unused function

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    * migrate a dirs[7] table to direction tables

    * remove various old unused function

    * remove various old unused function

    Banmanager: Move 'creating' message from warningstream to infostream (#6277)

    Make world creation menu automatically generate a random world name (#6257)

    

    * Make world creation menu automatically generate a name.

    

    * Name is now initialy empty, and generated if player tries to create a world without a name.

    * Make world creation menu automatically generate a name.

    

    * Name is now initialy empty, and generated if player tries to create a world without a name.

    * Name is now initialy empty, and generated if player tries to create a world without a name.

    Optimize headers (part 2) (#6272)

    

    * Optimize headers (part 2)

    

    * less debug.h in headers

    * less remoteplayer.h for everybody

    

    * Cleanup (part 2)

    

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * Optimize headers (part 2)

    

    * less debug.h in headers

    * less remoteplayer.h for everybody

    

    * Cleanup (part 2)

    

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * less debug.h in headers

    * less remoteplayer.h for everybody

    

    * Cleanup (part 2)

    

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * less remoteplayer.h for everybody

    

    * Cleanup (part 2)

    

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * Cleanup (part 2)

    

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * camera.h: mesh.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * mapgen.h: mapnode.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * serverenvironment.h: mapblock.h

    * nodedef.h: shader.h

    * nodedef.h: shader.h

    Modernize various files (src/m*) (#6267)

    

    * Modernize various files (src/m*)

    

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * Modernize various files (src/m*)

    

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * empty function

    * default constructor/destructor

    * for range-based loops

    * use emplace_back instead of push_back

    * C++ STL header style

    * Make connection.cpp readable in a pointed place + typo

    Thanks to clang-tidy

    server.cpp: unroll setting when sending mapblocks (#6265)

    

    * server.cpp: unroll setting when sending mapblocks

    

    * Improve a little bit performance when sending mapblocks massively

    * Use a range based for

    * Code style fixes

    * server.cpp: unroll setting when sending mapblocks

    

    * Improve a little bit performance when sending mapblocks massively

    * Use a range based for

    * Code style fixes

    * Improve a little bit performance when sending mapblocks massively

    * Use a range based for

    * Code style fixes

    * Use a range based for

    * Code style fixes

    * Code style fixes

    Add missing ctime include (#6269)

    Change README to Markdown format, add LICENSE.txt (#6244)

    Modernize various files (src/k*, src/l*)

    

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    Modernize various files (part 2)

    

    * range-based for loops

    * emplace_back instead of push_back

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty stl function

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * emplace_back instead of push_back

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty stl function

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * empty stl function

    Modernize various files

    

    * range-based for loops

    * emplace_back instead of push_back

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty stl function

    * range-based for loops

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * emplace_back instead of push_back

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty stl function

    * code style

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * C++ headers instead of C headers

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * Default operators

    * empty function

    

    Thanks to clang-tidy

    * empty stl function

    Modernize src/c* src/d* and src/e* files (#6263)

    

    * Modernize src/c* src/d* and src/e* files

    

    * default operator

    * redundant init

    * delete default constructors on CraftDefinition childs (never used)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * Modernize src/c* src/d* and src/e* files

    

    * default operator

    * redundant init

    * delete default constructors on CraftDefinition childs (never used)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * default operator

    * redundant init

    * delete default constructors on CraftDefinition childs (never used)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * redundant init

    * delete default constructors on CraftDefinition childs (never used)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * delete default constructors on CraftDefinition childs (never used)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * fix some missing init values

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * const ref fix reported by clang-tidy

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * ranged-based for loops

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * simple conditions & returns

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * empty stl function instead of size

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * emplace_back stl function instead of push_back + construct temp obj

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * auto for some iterators

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * code style fixes

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    * c++ stl headers instead of C stl headers (stdio.h -> cstdio)

    C++ modernize: Pragma once (#6264)

    

    * Migrate cpp headers to pragma once

    * Migrate cpp headers to pragma once

    clientobject, clouds, collision, clientsimpleobject: code modernization (#6260)

    

    * clientobject, clouds, collision, clientsimpleobject: code modernization

    

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * clientobject, clouds, collision, clientsimpleobject: code modernization

    

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * unroll v3s16 creation on collisionMoveSimple

    Reduce dedicated server step to 0.09 (#6252)

    

    Minetest performance improvement has been huge since months, server step reduction will permit to handle client events a little bit faster without too many penalty costs due to core engine

    Minetest performance improvement has been huge since months, server step reduction will permit to handle client events a little bit faster without too many penalty costs due to core engine

    Typo fix in compat code from commit 1d8d01074fdb52946f81110bebf1d001185b394b

    clientmap, clientmedia: code modernization

    

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * remove debugprint in ClientMap::getBackgroundBrightness, debug code was not intended to be there

    * remove unused fields in MapDrawControl

    * use emplace_back instead of push_back when necessary

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * remove debugprint in ClientMap::getBackgroundBrightness, debug code was not intended to be there

    * remove unused fields in MapDrawControl

    * use emplace_back instead of push_back when necessary

    * remove unused fields in MapDrawControl

    * use emplace_back instead of push_back when necessary

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    l_server, clientenvironment, clientiface: code modernization

    

    * use range-based for loops

    * use refs on some exceptions & one setter

    * use range-based for loops

    * simplify some tests

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    * use refs on some exceptions & one setter

    New lighting curve (#5279)

    

    * New lighting curve

    

    * Make polynomial lighting curve

    

    * Update default lighting settings

    * New lighting curve

    

    * Make polynomial lighting curve

    

    * Update default lighting settings

    * Make polynomial lighting curve

    

    * Update default lighting settings

    * Update default lighting settings

    ClientInterface: add a function to verify (correctly) if user limit was reached (#6258)

    

    * ClientInterface: add a function to verify (correctly) if user limit was reached

    

    CS_HelloSent is a better indicator of active slots than CS_Created, which are session objects created after init packet reception

    

    Switch existing checks to ClientInterface::isUserLimitReached()

    

    Use range-based for loop for getClientIds() used function too

    

    This will fix #6254 (not the memory overhead if init is flooded)

    * ClientInterface: add a function to verify (correctly) if user limit was reached

    

    CS_HelloSent is a better indicator of active slots than CS_Created, which are session objects created after init packet reception

    

    Switch existing checks to ClientInterface::isUserLimitReached()

    

    Use range-based for loop for getClientIds() used function too

    

    This will fix #6254 (not the memory overhead if init is flooded)

    CS_HelloSent is a better indicator of active slots than CS_Created, which are session objects created after init packet reception

    

    Switch existing checks to ClientInterface::isUserLimitReached()

    

    Use range-based for loop for getClientIds() used function too

    

    This will fix #6254 (not the memory overhead if init is flooded)

    Switch existing checks to ClientInterface::isUserLimitReached()

    

    Use range-based for loop for getClientIds() used function too

    

    This will fix #6254 (not the memory overhead if init is flooded)

    Use range-based for loop for getClientIds() used function too

    

    This will fix #6254 (not the memory overhead if init is flooded)

    This will fix #6254 (not the memory overhead if init is flooded)

    Cleanup various headers to reduce compilation times (#6255)

    

    * Cleanup various headers to reduce compilation times

    * Cleanup various headers to reduce compilation times

    client.cpp: modernize code

    

    * Range based for loops

    * Empty operator on stl containers

    * Range based for loops

    * Empty operator on stl containers

    * Empty operator on stl containers

    cavegen.cpp, chat.cpp: modernize code

    Modernize client code (#6250)

    

    * Various code style fixes

    * Use range based for loops

    * Use empty instead of empty objects

    * Use C++11 default keyword for trivial constructors and destructors

    * Drop some useless casts

    * Use emplace_back instead of push_back to improve performance of some vectors push

    * Various code style fixes

    

    * Code style with clang-format

    

    * Various SharedBuffer copy removal

    

    * SharedBuffer cannot be copied anymore using Buffer

    * Fix many SharedBuffer copy (thanks to delete operator)

    * Use range based for loops

    * Use empty instead of empty objects

    * Use C++11 default keyword for trivial constructors and destructors

    * Drop some useless casts

    * Use emplace_back instead of push_back to improve performance of some vectors push

    * Use empty instead of empty objects

    * Use C++11 default keyword for trivial constructors and destructors

    * Drop some useless casts

    * Use emplace_back instead of push_back to improve performance of some vectors push

    * Use C++11 default keyword for trivial constructors and destructors

    * Drop some useless casts

    * Use emplace_back instead of push_back to improve performance of some vectors push

    * Drop some useless casts

    * Use emplace_back instead of push_back to improve performance of some vectors push

    * Use emplace_back instead of push_back to improve performance of some vectors push

    bab.cpp: code modernization

    

    * Use for range based loops

    * Simplify some tests

    * Code style fixes

    * Use for range based loops

    * Simplify some tests

    * Code style fixes

    * Simplify some tests

    * Code style fixes

    * Code style fixes

    server.cpp: code modernization

    

    * Use more for range based loops

    * Simplify some tests

    * Code style fixes

    * connection.h: better PeerChange constructor instead of creating uninitalized object and then affect variables

    * Use more for range based loops

    * Simplify some tests

    * Code style fixes

    * connection.h: better PeerChange constructor instead of creating uninitalized object and then affect variables

    * Simplify some tests

    * Code style fixes

    * Code style fixes

    * connection.h: better PeerChange constructor instead of creating uninitalized object and then affect variables

    Lint fix on localplayer.h

    Advanced settings: Re-organise mapgen settings for ease of use

    

    Add a comment about the auto-generated minetest.conf.example possibly

    appearing in the bin folder.

    Add a comment about the auto-generated minetest.conf.example possibly

    appearing in the bin folder.

    appearing in the bin folder.

    Make dropped items colorable

    L-system: Fix leaves cutting through stems

    Player::getSpeed/setSpeed use const refs

    Player class: disable copy

    Various server.cpp cleanups

    

    * Modernize many for loops

    * Use constness on many loops

    * use empty function on many strings tests

    * various code style fixes

    * Modernize many for loops

    * Use constness on many loops

    * use empty function on many strings tests

    * various code style fixes

    * Use constness on many loops

    * use empty function on many strings tests

    * various code style fixes

    * use empty function on many strings tests

    * various code style fixes

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    Server::AsyncRunStep + Server::sendAddNode: modernize code

    

    * Use various modern for loops

    * Make some loop iterator constants, whereas there weren't

    * Use empty on some size() > 0 tests

    * Various little codestyle fixes

    * Fix an hidden scope variable in Server::SendBlockNoLock

    * Use various modern for loops

    * Make some loop iterator constants, whereas there weren't

    * Use empty on some size() > 0 tests

    * Various little codestyle fixes

    * Fix an hidden scope variable in Server::SendBlockNoLock

    * Make some loop iterator constants, whereas there weren't

    * Use empty on some size() > 0 tests

    * Various little codestyle fixes

    * Fix an hidden scope variable in Server::SendBlockNoLock

    * Use empty on some size() > 0 tests

    * Various little codestyle fixes

    * Fix an hidden scope variable in Server::SendBlockNoLock

    * Various little codestyle fixes

    * Fix an hidden scope variable in Server::SendBlockNoLock

    * Fix an hidden scope variable in Server::SendBlockNoLock

    LocalPlayer::accelerateHorizontal: cleanups

    

    * Properly use v3f default constructor

    * v3f d_wanted = target_speed - m_speed; and d_wanted = target_speed * 0.1f - m_speed * 0.1f; can be factorized to d_wanted = (target_speed - m_speed) * 0.1f; => d_wanted *= 0.1f;

    * Properly use v3f default constructor

    * v3f d_wanted = target_speed - m_speed; and d_wanted = target_speed * 0.1f - m_speed * 0.1f; can be factorized to d_wanted = (target_speed - m_speed) * 0.1f; => d_wanted *= 0.1f;

    * v3f d_wanted = target_speed - m_speed; and d_wanted = target_speed * 0.1f - m_speed * 0.1f; can be factorized to d_wanted = (target_speed - m_speed) * 0.1f; => d_wanted *= 0.1f;

    Cleanup LocalPlayer::applyControl

    

    * Use Environment interface instead of ClientEnvironemnt

    * Don't create slippery variable and then re-affect it

    * itemgroup_get return a int, properly test != 0 to be clearer

    * Use Environment interface instead of ClientEnvironemnt

    * Don't create slippery variable and then re-affect it

    * itemgroup_get return a int, properly test != 0 to be clearer

    * Don't create slippery variable and then re-affect it

    * itemgroup_get return a int, properly test != 0 to be clearer

    * itemgroup_get return a int, properly test != 0 to be clearer

    Add slippery group for nodes (players/items slide)

    Trigger on_rightclick regardless on the formspec meta field

    

    Document behaviour for older clients.

    Document behaviour for older clients.

    Add short description for disabled texture packs

    Change “Use” key name to “Special”

    Full viewing range key message clarified

    

    To make it sound less confusing to players

    To make it sound less confusing to players

    Remove cloud_height setting

    

    With the cloud API, the cloud_height setting has become obsolete

    and replaceable by a mod. It, and supporting code, can be

    removed.

    With the cloud API, the cloud_height setting has become obsolete

    and replaceable by a mod. It, and supporting code, can be

    removed.

    and replaceable by a mod. It, and supporting code, can be

    removed.

    removed.

    Abort if static_spawnpoint is an invalid setting instead of just giving an error log

    Mgv5: Make spawn position search more reliable

    ServerEnvironment::step: modernize loops

    

    Use various ranged-based for loops in ServerEnvironment::step

    Also set ServerObject::getBasePosition const to be compliant

    ServerEnvironment::deleteParticleSpawner: use a const iterator

    Use various ranged-based for loops in ServerEnvironment::step

    Also set ServerObject::getBasePosition const to be compliant

    ServerEnvironment::deleteParticleSpawner: use a const iterator

    Also set ServerObject::getBasePosition const to be compliant

    ServerEnvironment::deleteParticleSpawner: use a const iterator

    ServerEnvironment::deleteParticleSpawner: use a const iterator

    Mgv7: Raise spawn point by 1 node for no mountain case

    Step height: Add as a player object property

    

    Add settable player step height using the existing object property.

    Breaks compatibility with old clients, add to protocol version 35.

    Add settable player step height using the existing object property.

    Breaks compatibility with old clients, add to protocol version 35.

    Breaks compatibility with old clients, add to protocol version 35.

    Minimap: Leaner minimap arrow makes it easier to see the direction

    

    The arrow symbolizing the player in the square minimap looks almost like a

    triangle, making it a bit hard to see which direction it is currently

    pointing in when in a hurry.

    

    Redraw it leaner, pointier. Colors unchanged.

    The arrow symbolizing the player in the square minimap looks almost like a

    triangle, making it a bit hard to see which direction it is currently

    pointing in when in a hurry.

    

    Redraw it leaner, pointier. Colors unchanged.

    triangle, making it a bit hard to see which direction it is currently

    pointing in when in a hurry.

    

    Redraw it leaner, pointier. Colors unchanged.

    pointing in when in a hurry.

    

    Redraw it leaner, pointier. Colors unchanged.

    Redraw it leaner, pointier. Colors unchanged.

    Key change menu: Expose more keys

    Fix error not printed to console when no name is provided

    

    When minetest is launched, if there was no nameprovided in

    configuration or parameters, the game would not show any error in

    console. if the --go parameter was also prowided, the game would

    exit without an error. This is undesired behavior, so this merged

    commit add the missing function that displays the missing error

    message in console.

    When minetest is launched, if there was no nameprovided in

    configuration or parameters, the game would not show any error in

    console. if the --go parameter was also prowided, the game would

    exit without an error. This is undesired behavior, so this merged

    commit add the missing function that displays the missing error

    message in console.

    configuration or parameters, the game would not show any error in

    console. if the --go parameter was also prowided, the game would

    exit without an error. This is undesired behavior, so this merged

    commit add the missing function that displays the missing error

    message in console.

    console. if the --go parameter was also prowided, the game would

    exit without an error. This is undesired behavior, so this merged

    commit add the missing function that displays the missing error

    message in console.

    exit without an error. This is undesired behavior, so this merged

    commit add the missing function that displays the missing error

    message in console.

    commit add the missing function that displays the missing error

    message in console.

    message in console.

    Update credits (#6228)

    Singleplayer: Pause game in the key change dialog

    Fixes #6201. @t0ny2 pointed to the right place. Thanks!

    Fixes #6201. @t0ny2 pointed to the right place. Thanks!

    Start off newly generated worlds early at sunrise, 5:15am (#6211)

    

    Gives starting singleplayer games this subtle "dawn of a new world" feel.

    I would have set it even earlier (up to 4:45am), but I was worried that in

    some pre-existing games the player could be overwhelmed by hostile

    mobs right at the start, seriously changing gameplay.

    

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    Gives starting singleplayer games this subtle "dawn of a new world" feel.

    I would have set it even earlier (up to 4:45am), but I was worried that in

    some pre-existing games the player could be overwhelmed by hostile

    mobs right at the start, seriously changing gameplay.

    

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    I would have set it even earlier (up to 4:45am), but I was worried that in

    some pre-existing games the player could be overwhelmed by hostile

    mobs right at the start, seriously changing gameplay.

    

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    some pre-existing games the player could be overwhelmed by hostile

    mobs right at the start, seriously changing gameplay.

    

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    mobs right at the start, seriously changing gameplay.

    

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    It's just the default, individual games should be able to override it, and

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    for public servers it's irrelevant anyway, because only the first player to

    set foot in the world will notice, and that's usually the server admin.

    set foot in the world will notice, and that's usually the server admin.

    Add tiny Y offset in collisionMoveSimple() to tweak performance

    

    Another small general problem: the player is always standing exactly on the

    bondary between 2 nodes e.g. Y=1.5 is exactly between nodes Y=1 and Y=2.

    floatToInt() and myround() will round +/-n.5 always 'outwards' to +/-(n+1),

    which means they behave differently depending on where you are: they round

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    Another small general problem: the player is always standing exactly on the

    bondary between 2 nodes e.g. Y=1.5 is exactly between nodes Y=1 and Y=2.

    floatToInt() and myround() will round +/-n.5 always 'outwards' to +/-(n+1),

    which means they behave differently depending on where you are: they round

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    bondary between 2 nodes e.g. Y=1.5 is exactly between nodes Y=1 and Y=2.

    floatToInt() and myround() will round +/-n.5 always 'outwards' to +/-(n+1),

    which means they behave differently depending on where you are: they round

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    floatToInt() and myround() will round +/-n.5 always 'outwards' to +/-(n+1),

    which means they behave differently depending on where you are: they round

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    which means they behave differently depending on where you are: they round

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    upwards above sea level and downwards when underground. This inconsistency

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    comes from the way the coordinates are calculated, independent of the

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    specific C++ code.

    

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    The result is a tiny bit of lost performance when moving underground,

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    because 1 node level more than necessary is checked for collisions. This can

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    be amended by adding a tiny offset to minpos_f.Y, like @paramat suggested.

    This is not an elegant solution, but still better than wasting CPU.

    This is not an elegant solution, but still better than wasting CPU.

    Fix player coordinate rounding in collisionMoveSimple() (#6197)

    

    To determine the area (nodes) where a player movement took place

    collisionMoveSimple() first took the old/new player coordinates and rounded

    them to integers, then added the player character's collision box and

    implicitely rounded the result. This has 2 problems:

    

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    To determine the area (nodes) where a player movement took place

    collisionMoveSimple() first took the old/new player coordinates and rounded

    them to integers, then added the player character's collision box and

    implicitely rounded the result. This has 2 problems:

    

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    collisionMoveSimple() first took the old/new player coordinates and rounded

    them to integers, then added the player character's collision box and

    implicitely rounded the result. This has 2 problems:

    

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    them to integers, then added the player character's collision box and

    implicitely rounded the result. This has 2 problems:

    

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    implicitely rounded the result. This has 2 problems:

    

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    Rounding the position and the box seperately, then adding the resulting

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    integers means you get twice the rounding error. And implicit rounding

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    always rounds towards 0.0, unlike floatToInt(), which rounds towards the

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    closest integer.

    

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    Previous (simplified) behavior: round(pos)+(int)box, for example player at

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    Y=0.9, body is 1.75m high: round(0.9)+(int)1.75 = 1+1 = 2.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    ==> A character's height of 1.75m always got rounded down to 1m, its width

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    of +/-0.3 even became 0.

    

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    Fixed by adding the floats first, then rounding properly: round(pos+box) =

    round(0.9+1.75) = round(2.65) = 3.

    round(0.9+1.75) = round(2.65) = 3.

    Sort box corners correctly

    Update minetest.conf.example for keymap_slot*

    Fix crash when using --go in command line

    Dungeons: Use biome 'node_stone' if normal stone types not detected

    

    Construct dungeons from the node defined as biome 'node_stone' if

    'mapgen_stone', 'mapgen_desert_stone' and 'mapgen_sandstone' are not

    detected.

    Feature long-intended by kwolekr/hmmmm and present in code as a TODO.

    Construct dungeons from the node defined as biome 'node_stone' if

    'mapgen_stone', 'mapgen_desert_stone' and 'mapgen_sandstone' are not

    detected.

    Feature long-intended by kwolekr/hmmmm and present in code as a TODO.

    'mapgen_stone', 'mapgen_desert_stone' and 'mapgen_sandstone' are not

    detected.

    Feature long-intended by kwolekr/hmmmm and present in code as a TODO.

    detected.

    Feature long-intended by kwolekr/hmmmm and present in code as a TODO.

    Feature long-intended by kwolekr/hmmmm and present in code as a TODO.

    GenericCAO: Fix dark model below y = 0

    

    Move point at which light is sampled up to 0.5 nodes above foot level,

    to avoid that point sometimes passing into the node below causing the

    model to go dark.

    Move point at which light is sampled up to 0.5 nodes above foot level,

    to avoid that point sometimes passing into the node below causing the

    model to go dark.

    to avoid that point sometimes passing into the node below causing the

    model to go dark.

    model to go dark.

    Darkness detection: Reduce chance of false positives darkening the skybox

    

    The getBackgroundBrightness() function detects darkness in the view direction

    to decide when to make the skybox dark. The volume checked was too narrow and

    missed the left and right edges of the view, too easily causing a dark skybox.

    

    Widen the checked volume to match a FOV of 72 degrees and a 16:9 aspect ratio

    game window.

    The getBackgroundBrightness() function detects darkness in the view direction

    to decide when to make the skybox dark. The volume checked was too narrow and

    missed the left and right edges of the view, too easily causing a dark skybox.

    

    Widen the checked volume to match a FOV of 72 degrees and a 16:9 aspect ratio

    game window.

    to decide when to make the skybox dark. The volume checked was too narrow and

    missed the left and right edges of the view, too easily causing a dark skybox.

    

    Widen the checked volume to match a FOV of 72 degrees and a 16:9 aspect ratio

    game window.

    missed the left and right edges of the view, too easily causing a dark skybox.

    

    Widen the checked volume to match a FOV of 72 degrees and a 16:9 aspect ratio

    game window.

    Widen the checked volume to match a FOV of 72 degrees and a 16:9 aspect ratio

    game window.

    game window.

    Make direct item selection keys freely bindable

    Move the nametag back to the top of the player (#6179)

    

    read the actual height of the collisionbox

    read the actual height of the collisionbox

    Noise: Prevent unittest crash caused by division by zero

    Revert "Noise::perlinMap2D,3D: replace a loop init with a single memset call"

    

    This reverts commit bc1654feedc90caa8c26328ca6f0fc59fbe5b76c.

    This reverts commit bc1654feedc90caa8c26328ca6f0fc59fbe5b76c.

    Fix a warning introduced by 4eb59aeeb2f2b535f4eb2a1608189bb03098454e

    Add LuaEntity on_death callback (#6177)

    

    Add LuaEntity on_death callback

    

    This fixes #5474

    Add LuaEntity on_death callback

    

    This fixes #5474

    This fixes #5474

    Rename previous_was_found to previous_exists

    MapBlock::actuallyUpdateDayNightDiff(): little performance optimization

    

    don't check isLightDayNightEq if checked on previous node

    don't check isLightDayNightEq if checked on previous node

    compressZlib: don't use a SharedBuffer but a raw u8 * pointer

    

    Remove usage of the SharedBuffer in zlib compression which has two problems:

    * We copied the whole memory block to compress it (not good with mapblocks)

    * We copied sometimes strings to SharedBuffer to SharedBuffer (2nd time)

    

    Use this method in MapNode::serializeBulk + optimize serialization but merging 3 identical loops in a single loop

    Remove usage of the SharedBuffer in zlib compression which has two problems:

    * We copied the whole memory block to compress it (not good with mapblocks)

    * We copied sometimes strings to SharedBuffer to SharedBuffer (2nd time)

    

    Use this method in MapNode::serializeBulk + optimize serialization but merging 3 identical loops in a single loop

    * We copied the whole memory block to compress it (not good with mapblocks)

    * We copied sometimes strings to SharedBuffer to SharedBuffer (2nd time)

    

    Use this method in MapNode::serializeBulk + optimize serialization but merging 3 identical loops in a single loop

    * We copied sometimes strings to SharedBuffer to SharedBuffer (2nd time)

    

    Use this method in MapNode::serializeBulk + optimize serialization but merging 3 identical loops in a single loop

    Use this method in MapNode::serializeBulk + optimize serialization but merging 3 identical loops in a single loop

    Massive performance improvement on correctBlockNodeIds

    

    correctBlockNodeIds does 2 lookups for each loaded node, one to translate DB ID to name and a second to translate name to real ID. Name to real ID is very consumming if done on every node. As mapblocks are in most cases composed of many identical adjacent nodes, cache previous source and destination id and use them on the next node to prevent any lookup on those maps.

    

    This reduce the function load from 15% of my CPU usage to ~0.7%, on the test, calls was reduced from 2.5M lookups to 42k lookups, it's a huge performance gain

    correctBlockNodeIds does 2 lookups for each loaded node, one to translate DB ID to name and a second to translate name to real ID. Name to real ID is very consumming if done on every node. As mapblocks are in most cases composed of many identical adjacent nodes, cache previous source and destination id and use them on the next node to prevent any lookup on those maps.

    

    This reduce the function load from 15% of my CPU usage to ~0.7%, on the test, calls was reduced from 2.5M lookups to 42k lookups, it's a huge performance gain

    This reduce the function load from 15% of my CPU usage to ~0.7%, on the test, calls was reduced from 2.5M lookups to 42k lookups, it's a huge performance gain

    Noise::perlinMap2D,3D: replace a loop init with a single memset call

    Remove one unused variable in Server::Receive function

    Remove unused Map::getDayNightDiff + fix one undefined variable in mapblock.cpp

    TileLayer: use shared_ptr for FrameSpec vector (#6171)

    

    * TileLayer: use shared_ptr for vector framespec

    This reduce memory copy of TileLayer from (4 to 16) * FrameSpec where FrameSpec = (sizeof(int) + 3 * sizeof(ptr)) to int + sizeof(ptr)

    

    Callgrind difference

    

    Before: https://lut.im/RGkiJqQb8T/LeQIEXpAuRzfl7gd.png

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    * TileLayer: use shared_ptr for vector framespec

    This reduce memory copy of TileLayer from (4 to 16) * FrameSpec where FrameSpec = (sizeof(int) + 3 * sizeof(ptr)) to int + sizeof(ptr)

    

    Callgrind difference

    

    Before: https://lut.im/RGkiJqQb8T/LeQIEXpAuRzfl7gd.png

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    This reduce memory copy of TileLayer from (4 to 16) * FrameSpec where FrameSpec = (sizeof(int) + 3 * sizeof(ptr)) to int + sizeof(ptr)

    

    Callgrind difference

    

    Before: https://lut.im/RGkiJqQb8T/LeQIEXpAuRzfl7gd.png

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    Callgrind difference

    

    Before: https://lut.im/RGkiJqQb8T/LeQIEXpAuRzfl7gd.png

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    Before: https://lut.im/RGkiJqQb8T/LeQIEXpAuRzfl7gd.png

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    After: https://lut.im/bcqmwee1xu/cTwtptY5tRuS9lp0.png

    

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    * Fix one push_back to use vector::emplace_back & optimize inclusions

    VoxelManip cleanups (const ref, const move) + function removal (#6169)

    

    * VoxelManip cleanups (const ref, const move) permitting to improve a little bit performance

    

    * VoxelArea: precalculate extent (performance enhancement)

    

    This permits to reduce extend high cost to zero and drop many v3s16 object creation/removal to calculate extent

    It rebalance the client thread update to updateFastFaceRow instead of MapBlockMesh generation

    This will also benefits to mapgen

    * VoxelManip cleanups (const ref, const move) permitting to improve a little bit performance

    

    * VoxelArea: precalculate extent (performance enhancement)

    

    This permits to reduce extend high cost to zero and drop many v3s16 object creation/removal to calculate extent

    It rebalance the client thread update to updateFastFaceRow instead of MapBlockMesh generation

    This will also benefits to mapgen

    * VoxelArea: precalculate extent (performance enhancement)

    

    This permits to reduce extend high cost to zero and drop many v3s16 object creation/removal to calculate extent

    It rebalance the client thread update to updateFastFaceRow instead of MapBlockMesh generation

    This will also benefits to mapgen

    This permits to reduce extend high cost to zero and drop many v3s16 object creation/removal to calculate extent

    It rebalance the client thread update to updateFastFaceRow instead of MapBlockMesh generation

    This will also benefits to mapgen

    It rebalance the client thread update to updateFastFaceRow instead of MapBlockMesh generation

    This will also benefits to mapgen

    This will also benefits to mapgen

    Create_schematic documentation: Update for per-node force-place

    

    The probability list has to also encode per-node force-place.

    The probability list has to also encode per-node force-place.

    Mgv7: Add 'mount_zero_level' parameter

    

    Allows setting of the mountain 'zero level' (y where density gradient is zero).

    

    It is easy to vertically shift smooth terrain by editing noise parameter 'offset',

    but vertically shifting mountain terrain was complex and imprecise, involving

    making a calculation based on an average of the mountain height parameter.

    Allows setting of the mountain 'zero level' (y where density gradient is zero).

    

    It is easy to vertically shift smooth terrain by editing noise parameter 'offset',

    but vertically shifting mountain terrain was complex and imprecise, involving

    making a calculation based on an average of the mountain height parameter.

    It is easy to vertically shift smooth terrain by editing noise parameter 'offset',

    but vertically shifting mountain terrain was complex and imprecise, involving

    making a calculation based on an average of the mountain height parameter.

    but vertically shifting mountain terrain was complex and imprecise, involving

    making a calculation based on an average of the mountain height parameter.

    making a calculation based on an average of the mountain height parameter.

    Move MapEditEventAreaIgnorer to emerge.cpp

    

    It's only used in emerge threads and it's a local object, don't expose it to the whole Minetest

    It's only used in emerge threads and it's a local object, don't expose it to the whole Minetest

    Network protocol: Document settable player collisionbox (#6168)

    Clouds API: change speed from 'y' to 'z', ColorSpecs in Lua docs (#6164)

    LBM: use range based for and fixed a loop variable overloading in applyLBMs

    Mgv7: Add option to repeat surface biomes in floatlands

    Player collisionbox: Make settable

    

    Breaks compatibility with old clients.

    Breaks compatibility with old clients.

    In-cloud fog: Strengthen effect when small view range is used

    

    Ensure in-cloud fog is always stronger than outside-of-cloud-fog even when

    using a small view range.

    Also limit in-cloud fog range to a maximum of 32 nodes to keep it fairly

    strong when using a large view range.

    Ensure in-cloud fog is always stronger than outside-of-cloud-fog even when

    using a small view range.

    Also limit in-cloud fog range to a maximum of 32 nodes to keep it fairly

    strong when using a large view range.

    using a small view range.

    Also limit in-cloud fog range to a maximum of 32 nodes to keep it fairly

    strong when using a large view range.

    Also limit in-cloud fog range to a maximum of 32 nodes to keep it fairly

    strong when using a large view range.

    strong when using a large view range.

    Window size: use 1024x600 to avoid a smaller UI

    

    The change from 800x600 to 1024x576 (16:9) was a reduction in height which caused

    user interface to become smaller.

    Continue to use width 1024 as it is a common small screen width.

    The change from 800x600 to 1024x576 (16:9) was a reduction in height which caused

    user interface to become smaller.

    Continue to use width 1024 as it is a common small screen width.

    user interface to become smaller.

    Continue to use width 1024 as it is a common small screen width.

    Continue to use width 1024 as it is a common small screen width.

    [CSM] Add flavour limits controlled by server (#5930)

    

    * [CSM] Add flavour limits controlled by server

    

    Server send flavour limits to client permitting to disable or limit some Lua calls

    

    * Add limits for reading nodedefs and itemdefs

    

    * flavour: Add lookup node limits

    

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * [CSM] Add flavour limits controlled by server

    

    Server send flavour limits to client permitting to disable or limit some Lua calls

    

    * Add limits for reading nodedefs and itemdefs

    

    * flavour: Add lookup node limits

    

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    Server send flavour limits to client permitting to disable or limit some Lua calls

    

    * Add limits for reading nodedefs and itemdefs

    

    * flavour: Add lookup node limits

    

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * Add limits for reading nodedefs and itemdefs

    

    * flavour: Add lookup node limits

    

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * flavour: Add lookup node limits

    

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * Merge get_node_or_nil into get_node.

    

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    Sending fake node doesn't make sense in CSM, just return nil if node is not available for any reason

    

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * Add node range customization when noderange flavour is enabled (default 8 nodes)

    

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * Limit nodes range & disable chat message sending by default

    

    * Bump protocol version

    * Bump protocol version

    Copy lua51.dll (luajit) to bindir (#6148)

    LBM content mapping map doesn't need to be ordered, use std::unordered_map

    

    Also rename helper to lbm_map instead of container_map

    Also rename helper to lbm_map instead of container_map

    Very little performance fix on correctBlockNodeIds

    

    + C++11 codestyle

    + C++11 codestyle

    Mgfractal: Improve spawning behaviour

    

    Spawn player 1 node higher to avoid spawning waist-deep in a possible

    biome 'dust' node, such as tundra snowblock.

    Tune default offset to spawn players in a more interesting location on the

    mandelbrot sets, on a raised area that looks like a spawn platform.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    Spawn player 1 node higher to avoid spawning waist-deep in a possible

    biome 'dust' node, such as tundra snowblock.

    Tune default offset to spawn players in a more interesting location on the

    mandelbrot sets, on a raised area that looks like a spawn platform.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    biome 'dust' node, such as tundra snowblock.

    Tune default offset to spawn players in a more interesting location on the

    mandelbrot sets, on a raised area that looks like a spawn platform.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    Tune default offset to spawn players in a more interesting location on the

    mandelbrot sets, on a raised area that looks like a spawn platform.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    mandelbrot sets, on a raised area that looks like a spawn platform.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    Tune julia parameters to help avoid spawn search failing, especially for

    fractal 6.

    fractal 6.

    Mesh generation: Fix performance regression caused by 'plantlike_rooted' PR

    

    Regression caused by ef285b2815962a7a01791059ed984cb12fdba4dd

    Regression caused by ef285b2815962a7a01791059ed984cb12fdba4dd

    Chat: Move chat text down to not overlap 3rd line of debug text (#6145)

    Add information about the button height

    F5 debug display: Reformat and remove some information (#6125)

    

    For consistency return to 'FPS =', add comma before FPS.

    Remove 'R' from 'range_all' as may be re-keymapped.

    Remove inconsistent brackets from 'range_all'.

    Change 'v_range' to 'view_range'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    For consistency return to 'FPS =', add comma before FPS.

    Remove 'R' from 'range_all' as may be re-keymapped.

    Remove inconsistent brackets from 'range_all'.

    Change 'v_range' to 'view_range'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Remove 'R' from 'range_all' as may be re-keymapped.

    Remove inconsistent brackets from 'range_all'.

    Change 'v_range' to 'view_range'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Remove inconsistent brackets from 'range_all'.

    Change 'v_range' to 'view_range'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Change 'v_range' to 'view_range'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Add 'pos = ' before co-ordinates.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Add spaces around '=' in yaw display.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Remove brackets from around 'yaw' and 'seed'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Move 'pointing_at' to 3rd line.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Remove 'param1' (0 for all solid nodes and unreadable for light sources due to

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    light bank encoding).

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Remove file name of pointed node top tile (this also removes the need to get

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    ContentFeatures for the node, slightly improving performance).

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Replace quotes around node data with brackets, looks better and more consistent.

    

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Add 'guitext3' for third line.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Use 'setVisible' for all 3 lines to control the setting of each text rectangle.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Improve logic of 3rd line to only run code it needs to depending on whether

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    pointing data is avaialble and whether node is not 'ignore' and not 'unknown'.

    Chat protocol rewrite (#5117)

    

    * New TOCLIENT_CHAT_MESSAGE packet

    

    * Rename old packet to TOCLIENT_CHAT_MESSAGE_OLD for compat

    * Handle TOCLIENT_CHAT_MESSAGE new structure client side

    * Client chat queue should use a specific object

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * New TOCLIENT_CHAT_MESSAGE packet

    

    * Rename old packet to TOCLIENT_CHAT_MESSAGE_OLD for compat

    * Handle TOCLIENT_CHAT_MESSAGE new structure client side

    * Client chat queue should use a specific object

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Rename old packet to TOCLIENT_CHAT_MESSAGE_OLD for compat

    * Handle TOCLIENT_CHAT_MESSAGE new structure client side

    * Client chat queue should use a specific object

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Handle TOCLIENT_CHAT_MESSAGE new structure client side

    * Client chat queue should use a specific object

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Client chat queue should use a specific object

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * SendChatMessage: use the right packet depending on protocol version (not complete yet)

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Add chatmessage(type) objects and handle them client side (partially)

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Use ChatMessage instead of std::wstring server side

    

    * Update with timestamp support

    * Update with timestamp support

    Camera: Fix wieldmesh glitch after teleporting (#6138)

    Revert "CSM: Revert "[CSM] Add send_chat_message and run_server_chatcommand""

    

    This reverts commit bdac12761cd92960c3df83c932aa610f2322215f.

    This reverts commit bdac12761cd92960c3df83c932aa610f2322215f.

    Default window size: Increase to 1024x576, aspect ratio 16:9

    CSM: Revert "[CSM] Add send_chat_message and run_server_chatcommand"

    

    Original PR: #5747.

    This reverts commit 39f4a2f607d44738d60db84eba4b30e3d7450204.

    Original PR: #5747.

    This reverts commit 39f4a2f607d44738d60db84eba4b30e3d7450204.

    This reverts commit 39f4a2f607d44738d60db84eba4b30e3d7450204.

    Sneak: Stripped down version

    

    Fix taking damage caused by sneaking over a nodebox gap.

    Fix strange behaviour on stair nodeboxes.

    Enable jumping from node edges while sneaking.

    Enable movement around corners while sneaking on a 1-node-high groove in a wall.

    Fix taking damage caused by sneaking over a nodebox gap.

    Fix strange behaviour on stair nodeboxes.

    Enable jumping from node edges while sneaking.

    Enable movement around corners while sneaking on a 1-node-high groove in a wall.

    Fix strange behaviour on stair nodeboxes.

    Enable jumping from node edges while sneaking.

    Enable movement around corners while sneaking on a 1-node-high groove in a wall.

    Enable jumping from node edges while sneaking.

    Enable movement around corners while sneaking on a 1-node-high groove in a wall.

    Enable movement around corners while sneaking on a 1-node-high groove in a wall.

    Remove remaining modstore code (#6120)

    Dont search for locale folders if gettext is disabled (#6133)

    

    If gettext is disabled, it is defined as 0.

    If gettext is disabled, it is defined as 0.

    Advanced settings: Reformat noise parameter format example

    

    Previously the example ran off the edge of the formspec.

    Also include 'lacunarity' in the format instead of treating it as an option.

    Previously the example ran off the edge of the formspec.

    Also include 'lacunarity' in the format instead of treating it as an option.

    Also include 'lacunarity' in the format instead of treating it as an option.

    Biomes/decorations/ores: Make relative to 'water_level' setting

    

    Add 'biome_zero_level' argument to 'generateBiomes()', 'deco_zero_level'

    argument to 'placeAllDecos()' and 'ore_zero_level' to 'placeAllOres()'

    to allow mapgens to vertically shift the registered biomes, decorations

    and ores per-mapchunk.

    Will also allow many realm possibilities in future mapgens.

    Add 'biome_zero_level' argument to 'generateBiomes()', 'deco_zero_level'

    argument to 'placeAllDecos()' and 'ore_zero_level' to 'placeAllOres()'

    to allow mapgens to vertically shift the registered biomes, decorations

    and ores per-mapchunk.

    Will also allow many realm possibilities in future mapgens.

    argument to 'placeAllDecos()' and 'ore_zero_level' to 'placeAllOres()'

    to allow mapgens to vertically shift the registered biomes, decorations

    and ores per-mapchunk.

    Will also allow many realm possibilities in future mapgens.

    to allow mapgens to vertically shift the registered biomes, decorations

    and ores per-mapchunk.

    Will also allow many realm possibilities in future mapgens.

    and ores per-mapchunk.

    Will also allow many realm possibilities in future mapgens.

    Will also allow many realm possibilities in future mapgens.

    Add 'plantlike_rooted' drawtype

    

    Useful for underwater plants.

    Node consists of a base cube plus a plantlike extension that can pass through

    liquid nodes above without creating air bubbles or interfering with liquid flow.

    Uses paramtype2 'leveled', param2 defines height of plantlike extension.

    Useful for underwater plants.

    Node consists of a base cube plus a plantlike extension that can pass through

    liquid nodes above without creating air bubbles or interfering with liquid flow.

    Uses paramtype2 'leveled', param2 defines height of plantlike extension.

    Node consists of a base cube plus a plantlike extension that can pass through

    liquid nodes above without creating air bubbles or interfering with liquid flow.

    Uses paramtype2 'leveled', param2 defines height of plantlike extension.

    liquid nodes above without creating air bubbles or interfering with liquid flow.

    Uses paramtype2 'leveled', param2 defines height of plantlike extension.

    Uses paramtype2 'leveled', param2 defines height of plantlike extension.

    Mapgen Carpathian: Add lava_depth parameter

    Expose getPointedThing to Lua

    

    This commit introduces Raycast, a Lua user object, which can be

    used to perform a raycast on the map. The ray is continuable, so one can

    also get hidden nodes (for example to see trough glass).

    This commit introduces Raycast, a Lua user object, which can be

    used to perform a raycast on the map. The ray is continuable, so one can

    also get hidden nodes (for example to see trough glass).

    used to perform a raycast on the map. The ray is continuable, so one can

    also get hidden nodes (for example to see trough glass).

    also get hidden nodes (for example to see trough glass).

    Mapgen: Add Carpathian mapgen (#6015)

    Fog effect when camera is inside cloud

    

    Fixes issue #3576

    

    * Clouds now take camera position as 3D, not 2D

    

    * Cloud grid filling extracted to gridFilled method

    

    * Clouds detect whether camera is inside cloud

    

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    Fixes issue #3576

    

    * Clouds now take camera position as 3D, not 2D

    

    * Cloud grid filling extracted to gridFilled method

    

    * Clouds detect whether camera is inside cloud

    

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Clouds now take camera position as 3D, not 2D

    

    * Cloud grid filling extracted to gridFilled method

    

    * Clouds detect whether camera is inside cloud

    

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Cloud grid filling extracted to gridFilled method

    

    * Clouds detect whether camera is inside cloud

    

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Clouds detect whether camera is inside cloud

    

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Camera in cloud changes fog by overriding sky colors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

      with cloud color

    

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Sun, moon and stars can be temporarily disabled

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

      with setBodiesVisible

    

    * Disabling fog also disables all "inside cloud" behaviors

    * Disabling fog also disables all "inside cloud" behaviors

    Treegen: Fix s16 overflow warning (#6082)

    Main Menu: Allow copying directories from non-Minetest locations (#6095)

    

    Allow `core.copy_dir` (main menu API) to copy directories from a

    non-Minetest location. The check to disallow copying to non-Minetest

    locations is retained.

    Allow `core.copy_dir` (main menu API) to copy directories from a

    non-Minetest location. The check to disallow copying to non-Minetest

    locations is retained.

    non-Minetest location. The check to disallow copying to non-Minetest

    locations is retained.

    locations is retained.

    Camera: Arm inertia code cleanup (#6094)

    Fix crash due to missing pointer validation

    

    Fix #6092

    Fix #6092

    Irrlicht cleanup: cleanup various object to use RenderingEngine (#6088)

    

    * Irrlicht cleanup: cleanup various object to use RenderingEngine

    

    * CAO doesn't need scenemanager in addToScene

    * Camera doesn't need VideoDriver pointer or SceneManager in constructor

    * Hud doesn't need driver & scene manager in constructor

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * Irrlicht cleanup: cleanup various object to use RenderingEngine

    

    * CAO doesn't need scenemanager in addToScene

    * Camera doesn't need VideoDriver pointer or SceneManager in constructor

    * Hud doesn't need driver & scene manager in constructor

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * CAO doesn't need scenemanager in addToScene

    * Camera doesn't need VideoDriver pointer or SceneManager in constructor

    * Hud doesn't need driver & scene manager in constructor

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * Camera doesn't need VideoDriver pointer or SceneManager in constructor

    * Hud doesn't need driver & scene manager in constructor

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * Hud doesn't need driver & scene manager in constructor

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * Hud doesn't need scenemanager pointer

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * Tile.h doesn't need IrrlichtDevice header (just SMaterial)

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    * WieldMeshSceneNode: only take scene, we always use scene root node as parent

    Camera: Improve arm inertia

    Dungeons: Add setting to prevent projecting dungeons

    

    Prevents dungeons generating into ignore nodes in ungenerated mapchunks,

    which can occasionally result in a dungeon projecting from the terrain.

    Prevents dungeons generating into ignore nodes in ungenerated mapchunks,

    which can occasionally result in a dungeon projecting from the terrain.

    which can occasionally result in a dungeon projecting from the terrain.

    Include TILE_MATERIAL_OPAQUE in shaders header (#6086)

    C++11 cleanup inventorymanager (#6077)

    

    * C++11 cleanup inventorymanager

    * C++11 cleanup inventorymanager

    Tile material: Add 'TILE_MATERIAL_OPAQUE', use for drawtype 'NDT_NORMAL'

    

    Prevents normal drawtype nodes having transparency.

    Avoids clients cheating by using 'x-ray' texture packs with transparent textures.

    Prevents normal drawtype nodes having transparency.

    Avoids clients cheating by using 'x-ray' texture packs with transparent textures.

    Avoids clients cheating by using 'x-ray' texture packs with transparent textures.

    Create a filesystem abstraction layer for CSM and only allow accessing files that are scanned into it. (#5965)

    

    * Load client-side mods into memory before executing them.

    

    This removes the remaining filesystem access that client-sided mods had and it will hopefully make then more secure.

    

    * Lua Virtual filesystem: don't load the files into memory just scan the filenames into memory.

    

    * Fix the issues with backtrace

    

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    * Load client-side mods into memory before executing them.

    

    This removes the remaining filesystem access that client-sided mods had and it will hopefully make then more secure.

    

    * Lua Virtual filesystem: don't load the files into memory just scan the filenames into memory.

    

    * Fix the issues with backtrace

    

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    This removes the remaining filesystem access that client-sided mods had and it will hopefully make then more secure.

    

    * Lua Virtual filesystem: don't load the files into memory just scan the filenames into memory.

    

    * Fix the issues with backtrace

    

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    * Lua Virtual filesystem: don't load the files into memory just scan the filenames into memory.

    

    * Fix the issues with backtrace

    

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    * Fix the issues with backtrace

    

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    * fix most of the issues

    

    * fix code style.

    

    * add a comment

    * fix code style.

    

    * add a comment

    * add a comment

    Mapgen: Remove unnecessary 'this->' from constructors (#6069)

    Change the server description after a search (#6074)

    Mgv7: Fix undefined 'float_mount_height'

    

    Commit cad10ce3b747b721fd63784915e05f12bc488128 altered the parameter

    'float_mount_height' but was missing the necessary line in the constructor

    to get the altered value from 'params'.

    

    Fixes 3D floatland terrain generating everywhere.

    Commit cad10ce3b747b721fd63784915e05f12bc488128 altered the parameter

    'float_mount_height' but was missing the necessary line in the constructor

    to get the altered value from 'params'.

    

    Fixes 3D floatland terrain generating everywhere.

    'float_mount_height' but was missing the necessary line in the constructor

    to get the altered value from 'params'.

    

    Fixes 3D floatland terrain generating everywhere.

    to get the altered value from 'params'.

    

    Fixes 3D floatland terrain generating everywhere.

    Fixes 3D floatland terrain generating everywhere.

    Fix for empty key/value when reading item string with wear but no metadata (#6058)

    Fix msvc annoyances (#5963)

    

    * MSVC: Fix '/std:c++11' is not a valid compiler option

    

    * MSVC/MINGW: Define 'WIN32_LEAN_AND_MEAN' for the whole project

    

    In some obscure cases 'Windows.h" got includet before that definition, which leaded to compilation warnings+errors

    

    * MSVC: '/arch:SSE' is only available for x86

    

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC: Fix '/std:c++11' is not a valid compiler option

    

    * MSVC/MINGW: Define 'WIN32_LEAN_AND_MEAN' for the whole project

    

    In some obscure cases 'Windows.h" got includet before that definition, which leaded to compilation warnings+errors

    

    * MSVC: '/arch:SSE' is only available for x86

    

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC/MINGW: Define 'WIN32_LEAN_AND_MEAN' for the whole project

    

    In some obscure cases 'Windows.h" got includet before that definition, which leaded to compilation warnings+errors

    

    * MSVC: '/arch:SSE' is only available for x86

    

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    In some obscure cases 'Windows.h" got includet before that definition, which leaded to compilation warnings+errors

    

    * MSVC: '/arch:SSE' is only available for x86

    

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC: '/arch:SSE' is only available for x86

    

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC: Fix float conversation

    

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC/MINGW: use winthreads on Windows

    

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC: 'USE_CMAKE_CONFIG' might be already definied by CMake build system

    

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * MSVC: Use all available cpu cores for compiling

    

    * Add missing include ctime and use std::time_t

    * Add missing include ctime and use std::time_t

    Fix arm inertia limit case

    Fix undefined behaviour in arm movement when dividing by zero

    Isolate irrlicht references and use a singleton (#6041)

    

    * Add Device3D class which will contain IrrlichtDevice interface

    

    move getSupportedVideoDrivers to Device3D

    

    Add Device3D singleton & use it in various places

    

    Rename Device3D to Rendering engine & add helper functions to various device pointers

    

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    * Add Device3D class which will contain IrrlichtDevice interface

    

    move getSupportedVideoDrivers to Device3D

    

    Add Device3D singleton & use it in various places

    

    Rename Device3D to Rendering engine & add helper functions to various device pointers

    

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    move getSupportedVideoDrivers to Device3D

    

    Add Device3D singleton & use it in various places

    

    Rename Device3D to Rendering engine & add helper functions to various device pointers

    

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    Add Device3D singleton & use it in various places

    

    Rename Device3D to Rendering engine & add helper functions to various device pointers

    

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    Rename Device3D to Rendering engine & add helper functions to various device pointers

    

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    More singleton work

    

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    RenderingEngine owns draw_load_screen

    

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    move draw functions to RenderingEngine

    

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    Reduce IrrlichtDevice exposure and guienvironment

    

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    RenderingEngine: Expose get_timer_time() to remove device from guiEngine

    

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    Make irrlichtdevice & scene manager less exposed

    

    * Code style fixes

    

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    * Code style fixes

    * Move porting::getVideoDriverName, getVideoDriverFriendlyName, getDisplayDensity, getDisplaySize to RenderingEngine

    

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    Fix XORG_USED macro -> RenderingEngine + create_engine_device from RenderingEngine constructor directly

    

    * enum paralax => enum parallax

    * enum paralax => enum parallax

    Fix Camera::add_arm_inertia -> addArmInertia

    Add Arm Inertia (#6050)

    Ores: Make 'absheight' flag non-functional

    

    The 'absheight' flag was added years ago for the floatlands of 'indev'

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The 'absheight' flag was added years ago for the floatlands of 'indev'

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The flag itself remains to not break flag values.

    Revert "Ores: Make 'absheight' flag non-functional"

    

    This reverts commit 90ed6fc732ca667ca970b7c38d39c809e5c3553e.

    This reverts commit 90ed6fc732ca667ca970b7c38d39c809e5c3553e.

    Inventory: Fix wrong stack size behaviour and item loss (#6039)

    

    Also fix itemFits and remove constness-nonsense

    Also fix itemFits and remove constness-nonsense

    Mgv7: Clean up divide-by-zero fix

    Ores: Make 'absheight' flag non-functional

    

    The 'absheight' flag was added years ago for the floatlands of 'indev'

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The 'absheight' flag was added years ago for the floatlands of 'indev'

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    mapgen (now deleted). The feature mirrored all ore placement around y = 0

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    to place ores in floatlands.

    

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    In MTG we now use dedicated ore registrations for floatlands.

    

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The feature is crude, inflexible, problematic and very rarely used, it

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    also makes ore vertical range code more complex.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    Minetest 0.5 is a good chance to remove the feature.

    

    The flag itself remains to not break flag values.

    The flag itself remains to not break flag values.

    Helper methods for hardware colorization (#5870)

    Emit liquid sound if the player walks in liquid (#6040)

    C++11 cleanup on constructors guiEngine (#6036)

    

    * C++11 cleanup on constructors guiEngine

    * C++11 cleanup on constructors guiEngine

    Game::showOverlayMessage: securise function

    

    Do wgettext call directly in the function instead of caller, as we destroy wstd inside it

    Do wgettext call directly in the function instead of caller, as we destroy wstd inside it

    Mgv7: Avoid divide-by-zero errors

    

    Some settings of paramters can cause mgv7 variables to be -inf, nan or -nan.

    This can cause massive vertical columns of water to appear above sea level.

    Some settings of paramters can cause mgv7 variables to be -inf, nan or -nan.

    This can cause massive vertical columns of water to appear above sea level.

    This can cause massive vertical columns of water to appear above sea level.

    Mgvalleys: Use existing 'lava_max_height' value in CavesRandomWalk

    

    Now that lava depth in large caves is variable we can use the already

    present 'lava_max_height' value to set the lava depth in them.

    Now that lava depth in large caves is variable we can use the already

    present 'lava_max_height' value to set the lava depth in them.

    present 'lava_max_height' value to set the lava depth in them.

    Show param1 and param2 in debug screen (#6031)

    

    * Show param1 and param2 in debug screen

    

    * Add units and some formatting to debug screen

    

    * Minor refactor of param1/param2 debug display

    * Show param1 and param2 in debug screen

    

    * Add units and some formatting to debug screen

    

    * Minor refactor of param1/param2 debug display

    * Add units and some formatting to debug screen

    

    * Minor refactor of param1/param2 debug display

    * Minor refactor of param1/param2 debug display

    LINT fix

    Fix CSM crash caused by move to C++11. (#6027)

    CavesRandomWalk: Make 'lava_depth' a mapgen parameter

    

    As with 'large_cave_depth', lava depth was previously a fixed y value and

    therefore incompatible with the ability to shift terrain vertically.

    

    Add 'lava_depth' mapgen parameter to mgflat, mgfractal, mgv5, mgv7.

    As with 'large_cave_depth', lava depth was previously a fixed y value and

    therefore incompatible with the ability to shift terrain vertically.

    

    Add 'lava_depth' mapgen parameter to mgflat, mgfractal, mgv5, mgv7.

    therefore incompatible with the ability to shift terrain vertically.

    

    Add 'lava_depth' mapgen parameter to mgflat, mgfractal, mgv5, mgv7.

    Add 'lava_depth' mapgen parameter to mgflat, mgfractal, mgv5, mgv7.

    Add minetest.rgba function that returns ColorString from RGBA or RGB values

    Cpp11 initializers: last src root changeset (#6022)

    

    * Cpp11 initializers: last src root changeset

    

    Finish to migrate all src root folder files to C++11 constructor initializers

    * Cpp11 initializers: last src root changeset

    

    Finish to migrate all src root folder files to C++11 constructor initializers

    Finish to migrate all src root folder files to C++11 constructor initializers

    Fix render order of overlays (#6008)

    

    * Fix render order of overlays

    

    * Use C++11 loops

    

    * Fix time_t

    * Fix render order of overlays

    

    * Use C++11 loops

    

    * Fix time_t

    * Use C++11 loops

    

    * Fix time_t

    * Fix time_t

    C++11 cleanup on constructors dir network (#6021)

    

    * C++11 cleanup on constructors dir network

    * C++11 cleanup on constructors dir network

    C++11 cleanup on constructors dir client (#6012)

    

    * C++11 cleanup on constructors dir client

    * C++11 cleanup on constructors dir client

    Fix console resize issue when maximising game window (#6023)

    Mgv5/v7/fractal: Add 'large_cave_depth' parameter to replace fixed value

    

    The value cannot be fixed because we can shift terrain vertically.

    This also makes these mapgens consistent with mgflat and mgvalleys which

    have 'large_cave_depth' parameters.

    The value cannot be fixed because we can shift terrain vertically.

    This also makes these mapgens consistent with mgflat and mgvalleys which

    have 'large_cave_depth' parameters.

    This also makes these mapgens consistent with mgflat and mgvalleys which

    have 'large_cave_depth' parameters.

    have 'large_cave_depth' parameters.

    Inventory: Make addItem for empty ItemStacks respect max stack size

    

    When adding items to an empty ItemStack, limit the number of items taken

    based on the maximum stack size in the item description.

    Likewise, when checking whether items will fit into an empty ItemStack,

    only absorb as many items as are allowed in a single stack and return the rest.

    When adding items to an empty ItemStack, limit the number of items taken

    based on the maximum stack size in the item description.

    Likewise, when checking whether items will fit into an empty ItemStack,

    only absorb as many items as are allowed in a single stack and return the rest.

    based on the maximum stack size in the item description.

    Likewise, when checking whether items will fit into an empty ItemStack,

    only absorb as many items as are allowed in a single stack and return the rest.

    Likewise, when checking whether items will fit into an empty ItemStack,

    only absorb as many items as are allowed in a single stack and return the rest.

    only absorb as many items as are allowed in a single stack and return the rest.

    Merge cguittfont lib in irrlicht change folder. (#6016)

    

    * Merge cguittfont lib in irrlicht change folder.

    

    This remove hack and static lib for FreeType

    * Merge cguittfont lib in irrlicht change folder.

    

    This remove hack and static lib for FreeType

    This remove hack and static lib for FreeType

    Fix console not being properly resized after window size changed (#6020)

    Automatic item and node colorization (#5640)

    

    * Automatic item and node colorization

    

    Now nodes with a palette yield colored item stacks, and colored items

    place colored nodes by default. The client predicts the colorization.

    

    * Backwards compatibility

    

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    * Automatic item and node colorization

    

    Now nodes with a palette yield colored item stacks, and colored items

    place colored nodes by default. The client predicts the colorization.

    

    * Backwards compatibility

    

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    Now nodes with a palette yield colored item stacks, and colored items

    place colored nodes by default. The client predicts the colorization.

    

    * Backwards compatibility

    

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    place colored nodes by default. The client predicts the colorization.

    

    * Backwards compatibility

    

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    * Backwards compatibility

    

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    * Use nil

    

    * Style fixes

    

    * Fix code style

    

    * Document changes

    * Style fixes

    

    * Fix code style

    

    * Document changes

    * Fix code style

    

    * Document changes

    * Document changes

    Add new travis required configuration for trusty

    Fix 1 more warning reported by GCC

    

    We don't write in correct buffer size in analyze_block

    We don't write in correct buffer size in analyze_block

    Fix 2 warnings reported by GCC

    

    * ClientEnvironment::m_irr is not used anymore since a recent cleanup

    * l_vmanip constructor ordering

    * ClientEnvironment::m_irr is not used anymore since a recent cleanup

    * l_vmanip constructor ordering

    * l_vmanip constructor ordering

    C++11 cleanup on constructors (#6000)

    

    * C++11 cleanup on constructors dir script

    * C++11 cleanup on constructors dir script

    Remove IrrlichtDevice unused pointer from ClientActiveObject class & childs (#6010)

    find_nodes_in_area: Extend maximal count to U32_MAX (#5277)

    

    Extend documentation, limit area volume

    Remove u16 count limitation

    

    * Prevent integer overflow, replace minp/maxp with pos1/pos2

    Extend documentation, limit area volume

    Remove u16 count limitation

    

    * Prevent integer overflow, replace minp/maxp with pos1/pos2

    Remove u16 count limitation

    

    * Prevent integer overflow, replace minp/maxp with pos1/pos2

    * Prevent integer overflow, replace minp/maxp with pos1/pos2

    hud.h: add missing false default state on use_hotbar_selected_image

    hud.cpp: fix wrong indent in drawItem

    Verify HudSetParams input when hotbar textures are set (#6013)

    

    * Verify HudSetParams input when hotbar textures are set

    

    This fix #6011

    * Verify HudSetParams input when hotbar textures are set

    

    This fix #6011

    This fix #6011

    Mgv7: Do not limit river generation if no floatlands

    

    Previously, the carving of rivers was disabled above 'shadow_limit' even if

    floatlands were disabled. This caused rivers to be unnecessarily disabled if

    mapgen was customised to have surface level above y = 1024.

    Previously, the carving of rivers was disabled above 'shadow_limit' even if

    floatlands were disabled. This caused rivers to be unnecessarily disabled if

    mapgen was customised to have surface level above y = 1024.

    floatlands were disabled. This caused rivers to be unnecessarily disabled if

    mapgen was customised to have surface level above y = 1024.

    mapgen was customised to have surface level above y = 1024.

    Mgv7 spawn search: Cope with extreme custom terrain and biome 'dust'

    

    Previously, maximum spawn level was set to 'water_level + 16'. This would result

    in spawn search failing if terrain had been customised to be much higher than

    'water_level' at all points.

    

    Also raise spawn level by 1 node to avoid spawning half-buried in a biome 'dust'

    node such as 'default:snowblock'.

    Previously, maximum spawn level was set to 'water_level + 16'. This would result

    in spawn search failing if terrain had been customised to be much higher than

    'water_level' at all points.

    

    Also raise spawn level by 1 node to avoid spawning half-buried in a biome 'dust'

    node such as 'default:snowblock'.

    in spawn search failing if terrain had been customised to be much higher than

    'water_level' at all points.

    

    Also raise spawn level by 1 node to avoid spawning half-buried in a biome 'dust'

    node such as 'default:snowblock'.

    'water_level' at all points.

    

    Also raise spawn level by 1 node to avoid spawning half-buried in a biome 'dust'

    node such as 'default:snowblock'.

    Also raise spawn level by 1 node to avoid spawning half-buried in a biome 'dust'

    node such as 'default:snowblock'.

    node such as 'default:snowblock'.

    Client::makeScreenshot: remove device param

    

        We already have the device param as class member

        We already have the device param as class member

    Cpp11 patchset 11: continue working on constructor style migration (#6004)

    Cpp11 initializers 2 (#5999)

    

    * C++11 patchset 10: continue cleanup on constructors

    

    * Drop obsolete bool MainMenuData::enable_public (setting is called with cURL in server loop)

    

    * More classes cleanup

    

    * More classes cleanup + change NULL tests to boolean tests

    * C++11 patchset 10: continue cleanup on constructors

    

    * Drop obsolete bool MainMenuData::enable_public (setting is called with cURL in server loop)

    

    * More classes cleanup

    

    * More classes cleanup + change NULL tests to boolean tests

    * Drop obsolete bool MainMenuData::enable_public (setting is called with cURL in server loop)

    

    * More classes cleanup

    

    * More classes cleanup + change NULL tests to boolean tests

    * More classes cleanup

    

    * More classes cleanup + change NULL tests to boolean tests

    * More classes cleanup + change NULL tests to boolean tests

    C++11 patchset 9: move hardcoded init parameters to class definitions (part 1) (#5984)

    

    * C++11 patchset 9: move hardcoded init parameters to class definitions

    

    C++11 introduced the possibility to define the default values directly in class definitions, do it on current code

    

    Also remove some unused attributes

    

    * CollisionInfo::bouncy

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * C++11 patchset 9: move hardcoded init parameters to class definitions

    

    C++11 introduced the possibility to define the default values directly in class definitions, do it on current code

    

    Also remove some unused attributes

    

    * CollisionInfo::bouncy

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    C++11 introduced the possibility to define the default values directly in class definitions, do it on current code

    

    Also remove some unused attributes

    

    * CollisionInfo::bouncy

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    Also remove some unused attributes

    

    * CollisionInfo::bouncy

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * CollisionInfo::bouncy

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * collisionMoveResult::collides_xy

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * collisionMoveResult::standing_on_unloaded

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * Clouds::speed

    

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * More constructor cleanups + some variables removal

    

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * remove only write guiFormSpecMenu::m_old_tooltip

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * move header included inside defintions in genericobject.h

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * remove some unused since years exception classes

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * remove unused & empty debug_stacks_init

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * remove unused & empty content_nodemeta_serialize_legacy

    * remove forgotten useless bool (bouncy) in collision.cpp code

    * remove forgotten useless bool (bouncy) in collision.cpp code

    Fix deserialization of ItemDefinition (#5995)

    Mgv6 mudflow: Also check for 'ignore' nodes

    

    Previously, when removing decorations we searched upwards and removed until we

    found air or water. However, the node above the decoration can be 'ignore' if

    a stacked decoration extends into the volume above the mapchunk. The result

    could be a problematic column of air placed in the volume of 'ignore'. The

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    Previously, when removing decorations we searched upwards and removed until we

    found air or water. However, the node above the decoration can be 'ignore' if

    a stacked decoration extends into the volume above the mapchunk. The result

    could be a problematic column of air placed in the volume of 'ignore'. The

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    found air or water. However, the node above the decoration can be 'ignore' if

    a stacked decoration extends into the volume above the mapchunk. The result

    could be a problematic column of air placed in the volume of 'ignore'. The

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    a stacked decoration extends into the volume above the mapchunk. The result

    could be a problematic column of air placed in the volume of 'ignore'. The

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    could be a problematic column of air placed in the volume of 'ignore'. The

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    unnecessary placing of air also slows the function.

    

    Add a check for 'ignore' nodes when removing decorations.

    Add a check for 'ignore' nodes when removing decorations.

    Improve chatcommand params consistency (#5985)

    

    * Fix and improve params consistency

    

    * Move parenthesis requirement to descriptions

    * Fix and improve params consistency

    

    * Move parenthesis requirement to descriptions

    * Move parenthesis requirement to descriptions

    Mgv6 mudflow: Avoid partially removed stacked decorations

    

    Recently we started to remove decorations if the dirt below was flowed away,

    but this did not check for stacked decorations, causing them to have only

    their lowest node removed.

    Also, placed mud could partially bury stacked decorations.

    

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Recently we started to remove decorations if the dirt below was flowed away,

    but this did not check for stacked decorations, causing them to have only

    their lowest node removed.

    Also, placed mud could partially bury stacked decorations.

    

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    but this did not check for stacked decorations, causing them to have only

    their lowest node removed.

    Also, placed mud could partially bury stacked decorations.

    

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    their lowest node removed.

    Also, placed mud could partially bury stacked decorations.

    

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Also, placed mud could partially bury stacked decorations.

    

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Remove 'old_is_water' bool which on testing is never true.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Add new function 'moveMud()' to reduce indentation.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Remove stacked decoration nodes above a removed decoration.

    Remove stacked decorations partially buried in placed mud.

    Remove stacked decorations partially buried in placed mud.

    Fix no sound bug (#5968)

    Remove legacy content_abm.{cpp,h}

    Update list of installed files concerning server and non-RUN_IN_PLACE builds (#5976)

    

    * mods/mods_here.txt should be present on servers

    * client/serverlist/ can be omitted for RUN_IN_PLACE=0

    * clientmods/ is not used on servers

    * mods/mods_here.txt should be present on servers

    * client/serverlist/ can be omitted for RUN_IN_PLACE=0

    * clientmods/ is not used on servers

    * client/serverlist/ can be omitted for RUN_IN_PLACE=0

    * clientmods/ is not used on servers

    * clientmods/ is not used on servers

    Fix the serialization error by ff73c7a (#5964)

    Use thread_local instead from some static settings (#5955)

    

    thread_local permits to limit variable lifetime to thread duration. Use it on each setting place which uses static to cache variable result only for thread lifetime. This permits to keep the same performance level & reconfigure server from MT gui in those various variables places.

    

    Add thread_local to undersampling calculation too.

    thread_local permits to limit variable lifetime to thread duration. Use it on each setting place which uses static to cache variable result only for thread lifetime. This permits to keep the same performance level & reconfigure server from MT gui in those various variables places.

    

    Add thread_local to undersampling calculation too.

    Add thread_local to undersampling calculation too.

    Sound: Add pitch option (#5960)

    

    * Sound: Add pitch option

    * Sound: Add pitch option

    Remove minetestmapper from this repository (#5901)

    

    It's now located at https://github.com/minetest/minetestmapper

    

    Remove colors.txt and sectors2sqlite too

    It's now located at https://github.com/minetest/minetestmapper

    

    Remove colors.txt and sectors2sqlite too

    Remove colors.txt and sectors2sqlite too

    Improve the path select GUI (#5852)

    

    - Allow lua to chose whatever directories or files can be selected

    - Fix selecting directories

    - Rename dialog to `guiPathSelectMenu` from `guiFileSelectMenu`

    - Rename lua function for opening the menu from `show_file_open_dialog` to `show_path_select_dialog`

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Allow lua to chose whatever directories or files can be selected

    - Fix selecting directories

    - Rename dialog to `guiPathSelectMenu` from `guiFileSelectMenu`

    - Rename lua function for opening the menu from `show_file_open_dialog` to `show_path_select_dialog`

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Fix selecting directories

    - Rename dialog to `guiPathSelectMenu` from `guiFileSelectMenu`

    - Rename lua function for opening the menu from `show_file_open_dialog` to `show_path_select_dialog`

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Rename dialog to `guiPathSelectMenu` from `guiFileSelectMenu`

    - Rename lua function for opening the menu from `show_file_open_dialog` to `show_path_select_dialog`

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Rename lua function for opening the menu from `show_file_open_dialog` to `show_path_select_dialog`

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Remove duplicate code and fix code style.

    

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    Related changes

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - fix `clang-format` whitelist.

    - Regenerate minetest.conf.example

    - Regenerate minetest.conf.example

    Remove threads.h and replace its definitions with their C++11 equivalents (#5957)

    

    This also changes threadProc's signature, since C++11 supports arbitrary

    thread function signatures.

    This also changes threadProc's signature, since C++11 supports arbitrary

    thread function signatures.

    thread function signatures.

    Remove superfluous pointer null checks

    Plantlike meshoptions: Fix inverted random vertical offset

    (Re)spawn players within 'mapgen_limit'

    

    Previously, findSpawnPos() did not take the 'mapgen_limit' setting into account,

    a small limit often resulted in a spawn out in the void.

    Use the recently added 'calcMapgenEdges()' to get max spawn range through a new

    mapgenParams function 'getSpawnRangeMax()'.

    

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    Previously, findSpawnPos() did not take the 'mapgen_limit' setting into account,

    a small limit often resulted in a spawn out in the void.

    Use the recently added 'calcMapgenEdges()' to get max spawn range through a new

    mapgenParams function 'getSpawnRangeMax()'.

    

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    a small limit often resulted in a spawn out in the void.

    Use the recently added 'calcMapgenEdges()' to get max spawn range through a new

    mapgenParams function 'getSpawnRangeMax()'.

    

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    Use the recently added 'calcMapgenEdges()' to get max spawn range through a new

    mapgenParams function 'getSpawnRangeMax()'.

    

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    mapgenParams function 'getSpawnRangeMax()'.

    

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    Previously, when a player respawned into a world, 'objectpos_over_limit()' was

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    used as a check, which was inaccurate.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    Use the recently added 'saoPosOverLimit()' to get exact mapgen edges.

    

    Also fix default value of 'm_sao_limit_min'.

    Also fix default value of 'm_sao_limit_min'.

    Menu: Do not use textlist for shaders in settings tab (#5820)

    

    Replace the textlist used if the shaders checkbox is unchecked in the settings tab of the main menu with labels. This makes the formspec feel more consistent as the items do not move when shaders is unchecked but only change colour and the checkboxes beside them disappear.

    Replace the textlist used if the shaders checkbox is unchecked in the settings tab of the main menu with labels. This makes the formspec feel more consistent as the items do not move when shaders is unchecked but only change colour and the checkboxes beside them disappear.

    Add a server-sided way to remove color codes from incoming chat messages (#5948)

    

    These code be generated by CSM, a modded client or just copy and pasted by the player.

    

    Changes

    - Update configuration example and setting translation file.

    - Remove colour codes before logging chat.

    - Add setting to remove colour codes before processing the chat.

    These code be generated by CSM, a modded client or just copy and pasted by the player.

    

    Changes

    - Update configuration example and setting translation file.

    - Remove colour codes before logging chat.

    - Add setting to remove colour codes before processing the chat.

    Changes

    - Update configuration example and setting translation file.

    - Remove colour codes before logging chat.

    - Add setting to remove colour codes before processing the chat.

    - Update configuration example and setting translation file.

    - Remove colour codes before logging chat.

    - Add setting to remove colour codes before processing the chat.

    - Remove colour codes before logging chat.

    - Add setting to remove colour codes before processing the chat.

    - Add setting to remove colour codes before processing the chat.

    fix an example in lua_api (#5604)

    C++11 patchset 6: forbid object copy using assigment/copy function deleters (#5945)

    

    C++11 implement function deleting, it's generally used to prevent some object copy

    In script API use this function removal on ScriptApiBase instead of ScriptApiClient/Server/MainMenu, this affect all ScriptApis

    Move DISABLE_CLASS_COPY with constructor, the deleted function permit to replace function in its original place

    C++11 implement function deleting, it's generally used to prevent some object copy

    In script API use this function removal on ScriptApiBase instead of ScriptApiClient/Server/MainMenu, this affect all ScriptApis

    Move DISABLE_CLASS_COPY with constructor, the deleted function permit to replace function in its original place

    In script API use this function removal on ScriptApiBase instead of ScriptApiClient/Server/MainMenu, this affect all ScriptApis

    Move DISABLE_CLASS_COPY with constructor, the deleted function permit to replace function in its original place

    Move DISABLE_CLASS_COPY with constructor, the deleted function permit to replace function in its original place

    Order es_DrawType exactly like enum NodeDrawType in nodedef.h (#5946)

    

    This will help to avoid some strange bugs.

    This will help to avoid some strange bugs.

    Fix sending color codes to clients that don't support them. (#5950)

    

    Also remove `disable_escape_sequences` since it's not needed anymore.

    Also remove `disable_escape_sequences` since it's not needed anymore.

    CSM: Fix documentation error for register_on_*_chat_messages (#5917)

    buildbot: exit 0 at the end of the script

    

    This permits script to return correct state when skipping packaging

    This permits script to return correct state when skipping packaging

    Implement GItlab CI daily builds for windows platform (32 & 64) (#5923)

    

    * Implement win32 & win64 builds in Gitlab CI + pkg improvements

    

    * windows buildbot: split build & deploy steps

    * move deb artifacts to root folder to have a nicer artifact

    * add windows build + packaging on xenial

    * Implement win32 & win64 builds in Gitlab CI + pkg improvements

    

    * windows buildbot: split build & deploy steps

    * move deb artifacts to root folder to have a nicer artifact

    * add windows build + packaging on xenial

    * windows buildbot: split build & deploy steps

    * move deb artifacts to root folder to have a nicer artifact

    * add windows build + packaging on xenial

    * move deb artifacts to root folder to have a nicer artifact

    * add windows build + packaging on xenial

    * add windows build + packaging on xenial

    Have the server send the player list to the client (#5924)

    

    * Have the server send the player list to the client

    

    Currently the client generates the player list based on the Client active object list, the issue with this is that we can't be sure all player active objects will be sent to the client, so this could result in players showing up when someone run `/status` but auto complete not working with their nick and CSM not being aware of the player

    * Have the server send the player list to the client

    

    Currently the client generates the player list based on the Client active object list, the issue with this is that we can't be sure all player active objects will be sent to the client, so this could result in players showing up when someone run `/status` but auto complete not working with their nick and CSM not being aware of the player

    Currently the client generates the player list based on the Client active object list, the issue with this is that we can't be sure all player active objects will be sent to the client, so this could result in players showing up when someone run `/status` but auto complete not working with their nick and CSM not being aware of the player

    C++11 patchset 5: use std::threads and remove old compat layer (#5928)

    

    * C++11 patchset 5: use std::threads and remove old compat layer

    

    * use pragma once in modified headers

    * use C++11 function delete for object copy

    * C++11 patchset 5: use std::threads and remove old compat layer

    

    * use pragma once in modified headers

    * use C++11 function delete for object copy

    * use pragma once in modified headers

    * use C++11 function delete for object copy

    * use C++11 function delete for object copy

    Autorun: Change to 'autoforward' (#5926)

    

    Minetest does not have 'run'.

    Automatic forwards is very often used while flying or swimming, so a general

    word is more suitable.

    Minetest does not have 'run'.

    Automatic forwards is very often used while flying or swimming, so a general

    word is more suitable.

    Automatic forwards is very often used while flying or swimming, so a general

    word is more suitable.

    word is more suitable.

    Use a settings object when generating world.mt and set player_backend to sqlite. (#5940)

    

    * Use a settings object when generating world.mt and set player_backend to sqlite.

    

    * Update subgame.cpp

    * Use a settings object when generating world.mt and set player_backend to sqlite.

    

    * Update subgame.cpp

    * Update subgame.cpp

    make ret variable in /builtin/mainmenu/tab_credits.lua local (#5942)

    [CSM] Add function to get player privileges (#5933)

    

    * [CSM] Add function to get player privileges + move related help functions to common

    

    * Added @Zeno- const

    * [CSM] Add function to get player privileges + move related help functions to common

    

    * Added @Zeno- const

    * Added @Zeno- const

    DragonflyBSD & NetBSD build fix

    Fix bump_version.sh & client_lua_api.md

    

    This modification was forgotten at release

    This modification was forgotten at release

    Fix typos/mistakes in the documentation for colour related functions. (#5936)

    Use C++11 mutexes only (remove compat code) (#5922)

    

    * Fix event LINT & remove default constructor/destructors

    * remove compat code & modernize autolock header

    * Fix event LINT & remove default constructor/destructors

    * remove compat code & modernize autolock header

    * remove compat code & modernize autolock header

    Revert "Remove deprecated code segments (#5891)"

    

    This reverts commit 599e13e95e81aadb959c9f3715aec9b425ede084.

    This reverts commit 599e13e95e81aadb959c9f3715aec9b425ede084.

    Main Menu: Add get_clientmodpath API (#5912)

    

    Add `core.get_clientmodpath` to main menu API (also possible in async calls).

    Add `core.get_clientmodpath` to main menu API (also possible in async calls).

    C++11 patchset 3: remove Atomic/GenericAtomic and use std::atomic (#5906)

    Remove old network code (#5921)

    Fixed #5907 Documentation for screen_h and screen_w (#5909)

    Remove SharedPtr, it's not used and will be never used, we use C++11

    Gitlab CI: Fix Ubuntu 14.04/Debian 8 build by using GCC 6 toolchain

    

    + indent fix

    + indent fix

    Remove deprecated code segments (#5891)

    C++11 patchset 2: remove util/cpp11.h and util/cpp11_container.h (#5821)

    JsonCPP update from 0.10.6 to 1.8.0

    Minetest for C++11 (CMakeLists + Travis)

    

    * Move GCC to GCC 6 & GCC 7

    * Move Clang to Clang 3.6 & Clang 4.0

    * LINT moves from Clang 3.9 to Clang 4.0

    * Move XCode 7.3 to 8.0

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Move GCC to GCC 6 & GCC 7

    * Move Clang to Clang 3.6 & Clang 4.0

    * LINT moves from Clang 3.9 to Clang 4.0

    * Move XCode 7.3 to 8.0

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Move Clang to Clang 3.6 & Clang 4.0

    * LINT moves from Clang 3.9 to Clang 4.0

    * Move XCode 7.3 to 8.0

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * LINT moves from Clang 3.9 to Clang 4.0

    * Move XCode 7.3 to 8.0

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Move XCode 7.3 to 8.0

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Use more travis tricks to install compilers instead of adding complexity to our build script

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Clang format fixes on checked files (compat Cpp11 instead of Cpp03)

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Mingw GCC update from 4.8.4 to 5.3 (Ubuntu Xenial)

    * Drop mingw cmake generated files and add them to gitignore

    * Drop mingw cmake generated files and add them to gitignore

    Mapgen v6: Use snow blocks in tundra and remove them from taiga (#5827)

    

    * Mapgen v6: Use snow blocks in tundra and remove them from taiga

    

    * Use snowblocks in tundra above dirt with snow

    * Mapgen v6: Use snow blocks in tundra and remove them from taiga

    

    * Use snowblocks in tundra above dirt with snow

    * Use snowblocks in tundra above dirt with snow

    Fix segmentation fault with tool capabilities (#5899)

    Snake case for screen options in minetest.conf (#5792)

    Continue with 0.4.16-dev

    Bump version to 0.4.16

    Update remove_player documentation

    

    This function only removes player meta data,

    not player authentication data.

    This function only removes player meta data,

    not player authentication data.

    not player authentication data.

    Update credits

    

    The following algorithm was used when selecting contributors:

    

    * Every non-trivial contributor from the current release,

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    The following algorithm was used when selecting contributors:

    

    * Every non-trivial contributor from the current release,

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    * Every non-trivial contributor from the current release,

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    In the future this should be automated

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 77.6% (795 of 1024 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 38.1% (391 of 1024 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 61.3% (628 of 1024 strings)

    Added translation using Weblate (Slovenian)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 48.2% (494 of 1024 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 79.7% (817 of 1024 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 12.1% (124 of 1024 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 11.0% (113 of 1024 strings)

    Translated using Weblate (Swedish)

    

    Currently translated at 61.1% (894 of 1462 strings)

    Currently translated at 10.9% (112 of 1024 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 90.2% (924 of 1024 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 94.5% (968 of 1024 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 84.2% (863 of 1024 strings)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 100.0% (1024 of 1024 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 88.6% (908 of 1024 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 88.5% (907 of 1024 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 88.4% (906 of 1024 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 87.4% (895 of 1024 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 86.9% (890 of 1024 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (1024 of 1024 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (1024 of 1024 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.8% (1022 of 1024 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.8% (1022 of 1024 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 40.0% (410 of 1024 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 37.6% (386 of 1024 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 37.6% (386 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.3% (987 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.2% (986 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.2% (986 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.1% (985 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 96.0% (984 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.8% (982 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.8% (981 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.8% (981 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.8% (981 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 95.8% (981 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 75.5% (774 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 75.3% (772 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 58.2% (596 of 1024 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 55.0% (564 of 1024 strings)

    Properly remove SAO when worldedges are overtaken (#5889)

    

    * LuaEntitySAO: Remove beyond outermost mapchunk edges

    

    Based on a commit by, and with help from, nerzhul.

    Add 2 functions to class Mapgen:

    A function to calculate actual mapgen edges, called from the Mapgen constructor.

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    * LuaEntitySAO: Remove beyond outermost mapchunk edges

    

    Based on a commit by, and with help from, nerzhul.

    Add 2 functions to class Mapgen:

    A function to calculate actual mapgen edges, called from the Mapgen constructor.

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    Based on a commit by, and with help from, nerzhul.

    Add 2 functions to class Mapgen:

    A function to calculate actual mapgen edges, called from the Mapgen constructor.

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    Add 2 functions to class Mapgen:

    A function to calculate actual mapgen edges, called from the Mapgen constructor.

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    A function to calculate actual mapgen edges, called from the Mapgen constructor.

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    A function called indirectly from content_sao.cpp per entity step to check SAO

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    position is within mapgen edges.

    

    * Calculate borders from params not mapgen, which is not available everytime

    * Calculate borders from params not mapgen, which is not available everytime

    Android: update build tools version + versionCode bump for release

    Remove unimplemented setting `movement_speed_descend` (#5892)

    Tooltips: Unify the tooltip[] and list[] description tooltip display functions (#5848)

    

    * Tooltips: Unify the tooltip[] and list[] description tooltip display functions

    * Tooltips: Unify the tooltip[] and list[] description tooltip display functions

    Mention data type for get/set_attribute in docs (#5884)

    Lua_api.txt: Various edits and Markdown syntax improvements

    

    Add minor bits of missing Lua API documentation.

    Remove L-system lighting bug warning.

    Clarify 2 lines in node timer documentation.

    Fix many Markdown syntax errors in lua_api.txt.

    Add minor bits of missing Lua API documentation.

    Remove L-system lighting bug warning.

    Clarify 2 lines in node timer documentation.

    Fix many Markdown syntax errors in lua_api.txt.

    Remove L-system lighting bug warning.

    Clarify 2 lines in node timer documentation.

    Fix many Markdown syntax errors in lua_api.txt.

    Clarify 2 lines in node timer documentation.

    Fix many Markdown syntax errors in lua_api.txt.

    Fix many Markdown syntax errors in lua_api.txt.

    Remove “inf” argument from shutdown command help (#5880)

    Document hardware coloring and soft node overlays (#5876)

    Do not shade inventory items with textures (#5869)

    

    This commit restores the old behavior: if an inventory item has an own

    inventory texture, it will not be shaded.

    This commit restores the old behavior: if an inventory item has an own

    inventory texture, it will not be shaded.

    inventory texture, it will not be shaded.

    Show singlenode mapgen to menu (#5868)

    

    Fix #5867

    Fix #5867

    Fix dropdown menu selection (#5847)

    

    This fixes a bug that occurred when the selection list of a drop down menu was changed but the name was still the same.

    This fixes a bug that occurred when the selection list of a drop down menu was changed but the name was still the same.

    Add more files and file types to `.gitignore` (#5859)

    Nametag: remove colour codes before calculating alignment. (#5862)

    Don't add damage flash while punch texture modifier is active (#5767)

    guiVolumeChange: prevent wrong value position by using 1 label instead of 2 (#5839)

    

    * Use only one label instead of two for the soundText, this permit to ensure both label & values are aligned

    * Add '%' character too, to reflect it's a percentage volume

    * Remove rect on regenerateGui (upper part) which shadows outer part and which is not needed outside of the DesiredRect affectation

    

    Fix issue #5837

    * Use only one label instead of two for the soundText, this permit to ensure both label & values are aligned

    * Add '%' character too, to reflect it's a percentage volume

    * Remove rect on regenerateGui (upper part) which shadows outer part and which is not needed outside of the DesiredRect affectation

    

    Fix issue #5837

    * Add '%' character too, to reflect it's a percentage volume

    * Remove rect on regenerateGui (upper part) which shadows outer part and which is not needed outside of the DesiredRect affectation

    

    Fix issue #5837

    * Remove rect on regenerateGui (upper part) which shadows outer part and which is not needed outside of the DesiredRect affectation

    

    Fix issue #5837

    Fix issue #5837

    Added missing levels to logging menu (#5836)

    

    * Added missing levels to logging menu

    

    Added none and error options to the debug_log_level in the advance settings.

    * Added missing levels to logging menu

    

    Added none and error options to the debug_log_level in the advance settings.

    Added none and error options to the debug_log_level in the advance settings.

    Mapgen files: Update and correct copyright credits

    Time: Change old `u32` timestamps to 64-bit (#5818)

    

    MacOSX build fix + cleanups

    MacOSX build fix + cleanups

    Enhance ABM performance a little bit by removing two std::set copy (#5815)

    

    * Enhance ABM performance a little bit by removing two std::set copy

    

    * ActiveBlockModifier::getTriggerContents now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors is now purely virtual

    

    * Little code style fix

    * Enhance ABM performance a little bit by removing two std::set copy

    

    * ActiveBlockModifier::getTriggerContents now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors is now purely virtual

    

    * Little code style fix

    * ActiveBlockModifier::getTriggerContents now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors is now purely virtual

    

    * Little code style fix

    * ActiveBlockModifier::getRequiredNeighbors now returns a const ref

    * ActiveBlockModifier::getRequiredNeighbors is now purely virtual

    

    * Little code style fix

    * ActiveBlockModifier::getRequiredNeighbors is now purely virtual

    

    * Little code style fix

    * Little code style fix

    Mgv6 mudflow: Remove decoration if 'dirt with grass' below flows away (#5798)

    

    Mudflow of a neighbouring mapchunk extends into a mapchunk's edge, and could

    remove 'dirt with grass' from under a decoration, creating unsupported

    decorations.

    

    Remove any decoration above if a 'dirt with grass' node is removed by mudflow.

    Mudflow of a neighbouring mapchunk extends into a mapchunk's edge, and could

    remove 'dirt with grass' from under a decoration, creating unsupported

    decorations.

    

    Remove any decoration above if a 'dirt with grass' node is removed by mudflow.

    remove 'dirt with grass' from under a decoration, creating unsupported

    decorations.

    

    Remove any decoration above if a 'dirt with grass' node is removed by mudflow.

    decorations.

    

    Remove any decoration above if a 'dirt with grass' node is removed by mudflow.

    Remove any decoration above if a 'dirt with grass' node is removed by mudflow.

    Close formspec on client shutdown. (#5811)

    

    This ensures the shutting down progress bar is correctly rendered. This fixes #3050.

    This ensures the shutting down progress bar is correctly rendered. This fixes #3050.

    Revert 1469424 and fix wrong char position when doing mouse selection on intlGUIEditBox (#5806)

    

    * Revert 1469424075affce7c27bb44e5a5cbd51485e44b2 and fix wrong char position when doing mouse selection on intlGUIEditBox

    

    position should look at current line not the whole text and shift 1 character on the last line (due to \0 string delimiter)

    

    * Finish the fix and prevent values under zero for getCursorPos which crash the program if found

    

    * Forget to remove old comment

    

    * fix zero to NULL

    

    * Fix typo

    * Revert 1469424075affce7c27bb44e5a5cbd51485e44b2 and fix wrong char position when doing mouse selection on intlGUIEditBox

    

    position should look at current line not the whole text and shift 1 character on the last line (due to \0 string delimiter)

    

    * Finish the fix and prevent values under zero for getCursorPos which crash the program if found

    

    * Forget to remove old comment

    

    * fix zero to NULL

    

    * Fix typo

    position should look at current line not the whole text and shift 1 character on the last line (due to \0 string delimiter)

    

    * Finish the fix and prevent values under zero for getCursorPos which crash the program if found

    

    * Forget to remove old comment

    

    * fix zero to NULL

    

    * Fix typo

    * Finish the fix and prevent values under zero for getCursorPos which crash the program if found

    

    * Forget to remove old comment

    

    * fix zero to NULL

    

    * Fix typo

    * Forget to remove old comment

    

    * fix zero to NULL

    

    * Fix typo

    * fix zero to NULL

    

    * Fix typo

    * Fix typo

    Add formspec escaping to subgame list in create world dialog (#5808)

    Minimal: Add river water nodes (#5809)

    

    Is a base terrain node needed by any core mapgen with sloping rivers.

    Is a base terrain node needed by any core mapgen with sloping rivers.

    Fix wrong return value in get_sky Lua call since ad9fcf859ec2347325830e09504ae96968b51ea8

    

    Fix #5803

    Fix #5803

    Client crashfix: load meta after digging (#5801)

    

    Fixes a crash caused in MTGame by breaking and right-clicking a chest.

    

    If loading meta, digging, node can disappear and we looked at meta, which is wrong because meta became NULL.

    

    Pointer is invalidated and we read wrong memory area

    Fixes a crash caused in MTGame by breaking and right-clicking a chest.

    

    If loading meta, digging, node can disappear and we looked at meta, which is wrong because meta became NULL.

    

    Pointer is invalidated and we read wrong memory area

    If loading meta, digging, node can disappear and we looked at meta, which is wrong because meta became NULL.

    

    Pointer is invalidated and we read wrong memory area

    Pointer is invalidated and we read wrong memory area

    LINT fix & check all files with clang-format

    

    Seems the diff mode doesn't work well, PR are detected as working whereas in master it's shown it's problematic (and really problematic). Use same check everywhere

    Seems the diff mode doesn't work well, PR are detected as working whereas in master it's shown it's problematic (and really problematic). Use same check everywhere

    [CSM] Add send_chat_message and run_server_chatcommand API functions (#5747)

    

    * [CSM] Add send_chat_message and run_server_chatcommand API functions

    

    * Add client-side chat message rate limiting

    

    * Limit out chat queue size

    

    * [CSM] Add minetest.clear_out_chat_queue API function and .clear_chat_queue chatcommand

    

    * Last fixes/cleanups before merge

    * [CSM] Add send_chat_message and run_server_chatcommand API functions

    

    * Add client-side chat message rate limiting

    

    * Limit out chat queue size

    

    * [CSM] Add minetest.clear_out_chat_queue API function and .clear_chat_queue chatcommand

    

    * Last fixes/cleanups before merge

    * Add client-side chat message rate limiting

    

    * Limit out chat queue size

    

    * [CSM] Add minetest.clear_out_chat_queue API function and .clear_chat_queue chatcommand

    

    * Last fixes/cleanups before merge

    * Limit out chat queue size

    

    * [CSM] Add minetest.clear_out_chat_queue API function and .clear_chat_queue chatcommand

    

    * Last fixes/cleanups before merge

    * [CSM] Add minetest.clear_out_chat_queue API function and .clear_chat_queue chatcommand

    

    * Last fixes/cleanups before merge

    * Last fixes/cleanups before merge

    Run updatepo.sh

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 38.1% (350 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 61.5% (565 of 918 strings)

    Translated using Weblate (Chinese (Simplified))

    

    Currently translated at 93.9% (1330 of 1416 strings)

    Currently translated at 74.2% (682 of 918 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 59.4% (546 of 918 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 65.4% (601 of 918 strings)

    

    Retranslate the correct word

    Retranslate the correct word

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 31.8% (292 of 918 strings)

    Added translation using Weblate (Dhivehi)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 58.0% (533 of 918 strings)

    Fix LINT broken by dfa0c15ce045705f05487d623dc7beca6c945b4b

    [CSM] Add function to get the definition of items (#5732)

    

    Add node def and item def documentation.

    

    Please be ready for merge!

    Add node def and item def documentation.

    

    Please be ready for merge!

    Please be ready for merge!

    Prevent fall damage from overflowing when falling from a large height. (#5791)

    Menu: Merge singleplayer and server tabs (#5627)

    

    Rename "Singleplayer" tab to "Play" and remove "Server" tab placing server functionality under a "Host Game" checkbox in "Play."

    Rename "Singleplayer" tab to "Play" and remove "Server" tab placing server functionality under a "Host Game" checkbox in "Play."

    Add clientmods/mods.conf & client/mod_storage to gitignore

    [CSM] Allow enabling and disabling mods. (#5554)

    Real control fix (#5787)

    

    * Allow enabling and disabling mods.

    

    * Re-fix 605599b6f150b89ba6539c4d088231b326adcb48

    

    This breaks some chars like € in chat.

    

    Instead verify is char is a non control char -> iswcntrl

    * Allow enabling and disabling mods.

    

    * Re-fix 605599b6f150b89ba6539c4d088231b326adcb48

    

    This breaks some chars like € in chat.

    

    Instead verify is char is a non control char -> iswcntrl

    * Re-fix 605599b6f150b89ba6539c4d088231b326adcb48

    

    This breaks some chars like € in chat.

    

    Instead verify is char is a non control char -> iswcntrl

    This breaks some chars like € in chat.

    

    Instead verify is char is a non control char -> iswcntrl

    Instead verify is char is a non control char -> iswcntrl

    Fix instant digging (#5785)

    

    Use runData.dig_time_complete instead of params.time to find out whether it's instant digging.

    runData.dig_time_complete is set to something very big if the node can't be dug, whereas param.time is 0 when digging is impossible or it's instant digging. So not using param.time fixes #5728.

    Use runData.dig_time_complete instead of params.time to find out whether it's instant digging.

    runData.dig_time_complete is set to something very big if the node can't be dug, whereas param.time is 0 when digging is impossible or it's instant digging. So not using param.time fixes #5728.

    runData.dig_time_complete is set to something very big if the node can't be dug, whereas param.time is 0 when digging is impossible or it's instant digging. So not using param.time fixes #5728.

    Fix wchar_t type on 605599b6f150b89ba6539c4d088231b326adcb48

    

    event.KeyInput.Char is a wchar_t, iswprint should be used

    event.KeyInput.Char is a wchar_t, iswprint should be used

    Particle spawner: Do not spawn particles distant from player (#5766)

    

    Previously, every particle was rendered by (even if not actually visible to)

    the client regardless of distance. This significantly reduced client FPS.

    

    Acts clientside, particle spawners are always sent to clients, but each

    particle is checked for distance from the player.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    Previously, every particle was rendered by (even if not actually visible to)

    the client regardless of distance. This significantly reduced client FPS.

    

    Acts clientside, particle spawners are always sent to clients, but each

    particle is checked for distance from the player.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    the client regardless of distance. This significantly reduced client FPS.

    

    Acts clientside, particle spawners are always sent to clients, but each

    particle is checked for distance from the player.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    Acts clientside, particle spawners are always sent to clients, but each

    particle is checked for distance from the player.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    particle is checked for distance from the player.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    As with 'add particle' the distance limit is set to 'max block send distance'

    as this determines how far a client can see.

    as this determines how far a client can see.

    [CSM] Correct the log destination of print() (#5784)

    Fix CSM crash (#5779)

    

    Caused by dc5bc6c and them made worse by 5ebf8f9

    Caused by dc5bc6c and them made worse by 5ebf8f9

    Typo fix in README.txt

    

    Fix issue #4293

    Fix issue #4293

    Add /clearinv chat command (#4994)

    

    Allow players to clear their own inventory or that of another player with /clearinv command. server privilege is required to clear another player's inventory, no privileges are required to clear your own inventory.'

    Allow players to clear their own inventory or that of another player with /clearinv command. server privilege is required to clear another player's inventory, no privileges are required to clear your own inventory.'

    chat.cpp fix wchar_t isspace -> iswspace & wrong isspace on an index (#5783)

    Cleanup in content_mapblock (#5746)

    

    NDT_LIQUID is being drawn by MapBlockMesh since a long time ago...

    NDT_LIQUID is being drawn by MapBlockMesh since a long time ago...

    Improve password change menu (#5757)

    

    - Fix the GUI getting messed up when resizing

    - Save the input when resizing

    - Fix the GUI getting messed up when resizing

    - Save the input when resizing

    - Save the input when resizing

    Fix shift key producing space in console (#5777)

    

    * Fix shift key producing space in console

    * Fix shift key producing space in console

    this might fix #5661, needs testing (#5775)

    [CSM] Fix crash when the minimap is disabled. Caused by e25a38e

    Fix input regression introduced by a4a377ecad6f1732cc54e7ac329fdef9949f9bf7

    

    Fix #5776

    Fix #5776

    Fix mem leak in mesh cache (#5781)

    Various code cleanup & little performance improvement on HTTP download (#5772)

    

    * Disable or remove unused enum members/functions

    * Tiny code style fixes

    * Make some functions const

    * Replace ClientMediaDownloader std::unordered_map with std::map

    * Disable or remove unused enum members/functions

    * Tiny code style fixes

    * Make some functions const

    * Replace ClientMediaDownloader std::unordered_map with std::map

    * Tiny code style fixes

    * Make some functions const

    * Replace ClientMediaDownloader std::unordered_map with std::map

    * Make some functions const

    * Replace ClientMediaDownloader std::unordered_map with std::map

    * Replace ClientMediaDownloader std::unordered_map with std::map

    Do not create dummy normalmaps (#4180)

    

    fixes #1811

    fixes #1811

    Fix textarea bug: clicking right of the end of a line caused the cursor to be in one of the next lines (#3474)

    Fix alpha for liquid nodes (#5494)

    Mainmenu: Fix issues while trying to enable all mods (#5770)

    When minimap is disabled in configuration, really disable it (#5771)

    

    * When minimap is disabled in configuration, really disable it

    * When minimap is disabled in configuration, really disable it

    Fix a warning pointed by GCC 7.1

    

    lua_tonumber overflow in snprintf (12 bytes and only 10 can be written)

    lua_tonumber overflow in snprintf (12 bytes and only 10 can be written)

    Builtin: Fix subgame mod selection (#5367)

    Particles: Do not send single particles to distant clients (#5760)

    

    Previously, every individual particle on a server is sent to, and rendered by

    (even if not actually visible), every client regardless of distance. This

    significantly reduces client FPS and creates unnecessary network traffic.

    Maximum distance is set by 'max block send distance' as this determines how far

    a client is able to see.

    Previously, every individual particle on a server is sent to, and rendered by

    (even if not actually visible), every client regardless of distance. This

    significantly reduces client FPS and creates unnecessary network traffic.

    Maximum distance is set by 'max block send distance' as this determines how far

    a client is able to see.

    (even if not actually visible), every client regardless of distance. This

    significantly reduces client FPS and creates unnecessary network traffic.

    Maximum distance is set by 'max block send distance' as this determines how far

    a client is able to see.

    significantly reduces client FPS and creates unnecessary network traffic.

    Maximum distance is set by 'max block send distance' as this determines how far

    a client is able to see.

    Maximum distance is set by 'max block send distance' as this determines how far

    a client is able to see.

    a client is able to see.

    Append -debug to version string (#5765)

    CSM: Document forgotten functions

    Caverns: Remove unnecessary liquid excavation

    

    Also disable CavesRandomWalk at a safer distance from caverns.

    

    Excavating liquids in cavern code is unnecessary as in practice we are already

    successfully disabling the generation of liquid caves that could intersect

    with caverns and cause excessive amounts of spreading liquids in caverns.

    

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    Also disable CavesRandomWalk at a safer distance from caverns.

    

    Excavating liquids in cavern code is unnecessary as in practice we are already

    successfully disabling the generation of liquid caves that could intersect

    with caverns and cause excessive amounts of spreading liquids in caverns.

    

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    Excavating liquids in cavern code is unnecessary as in practice we are already

    successfully disabling the generation of liquid caves that could intersect

    with caverns and cause excessive amounts of spreading liquids in caverns.

    

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    successfully disabling the generation of liquid caves that could intersect

    with caverns and cause excessive amounts of spreading liquids in caverns.

    

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    with caverns and cause excessive amounts of spreading liquids in caverns.

    

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    However to be safer this commit now disables liquid caves at a larger distance

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    from caverns, to compensate for liquid caves being able to generate up to a

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    mapblock beyond a mapchunk border.

    

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    Not excavating liquids in cavern code also allows a feature i am working on in

    experimental new core mapgens, but also allows for more flexibility in future.

    experimental new core mapgens, but also allows for more flexibility in future.

    Fix a memleak pointed by @Zeno- in MeshUpdateQueue

    

    This leak was introduced when added cache to MeshUpdateQueue and only occurs when leaving world.

    This leak was introduced when added cache to MeshUpdateQueue and only occurs when leaving world.

    Fix uninitalised variable in event.cpp (#5764)

    Add option to use neither node highlighting nor outlining

    No cursor lock when window inactive (#5754)

    Android dependencies updates (#5755)

    

    * irrlicht ogles 5122 -> 5145

    * openssl 1.0.2j -> 1.0.2k

    * curl 7.52 -> 7.54

    * sqlite 3.15.2 -> 3.18.0

    * irrlicht ogles 5122 -> 5145

    * openssl 1.0.2j -> 1.0.2k

    * curl 7.52 -> 7.54

    * sqlite 3.15.2 -> 3.18.0

    * openssl 1.0.2j -> 1.0.2k

    * curl 7.52 -> 7.54

    * sqlite 3.15.2 -> 3.18.0

    * curl 7.52 -> 7.54

    * sqlite 3.15.2 -> 3.18.0

    * sqlite 3.15.2 -> 3.18.0

    Limit properly the sound setting at updateSound runtime step (#5753)

    

    * Limit properly the sound setting at updateSound runtime step

    

    Fix #5026

    

    * Add a comment

    * Limit properly the sound setting at updateSound runtime step

    

    Fix #5026

    

    * Add a comment

    Fix #5026

    

    * Add a comment

    * Add a comment

    Move KeyList & InputHandler from game.h to client/inputhandler.h (#5752)

    

    * Move KeyList & InputHandler from game.h to client/inputhandler.h

    

    We have a header for inputs, move inputhandler class & related keylist object to it

    

    Also introduce a cpp file for MyEventReceiver::OnEvent function in inputhandler.h because a so huge function doesn't needs to be inlined

    

    * Pass clang-format on inputhandler.{cpp,h} (compatible)

    * Move KeyList & InputHandler from game.h to client/inputhandler.h

    

    We have a header for inputs, move inputhandler class & related keylist object to it

    

    Also introduce a cpp file for MyEventReceiver::OnEvent function in inputhandler.h because a so huge function doesn't needs to be inlined

    

    * Pass clang-format on inputhandler.{cpp,h} (compatible)

    We have a header for inputs, move inputhandler class & related keylist object to it

    

    Also introduce a cpp file for MyEventReceiver::OnEvent function in inputhandler.h because a so huge function doesn't needs to be inlined

    

    * Pass clang-format on inputhandler.{cpp,h} (compatible)

    Also introduce a cpp file for MyEventReceiver::OnEvent function in inputhandler.h because a so huge function doesn't needs to be inlined

    

    * Pass clang-format on inputhandler.{cpp,h} (compatible)

    * Pass clang-format on inputhandler.{cpp,h} (compatible)

    Android build fix

    Minor pause/escape menu improvements (#5751)

    

    - Split movement keys into separate entries.

    - Increase buffer size due to the above change.

    - Change capitalisation.

    - Remove code-style violating white spaces.

    - Split movement keys into separate entries.

    - Increase buffer size due to the above change.

    - Change capitalisation.

    - Remove code-style violating white spaces.

    - Increase buffer size due to the above change.

    - Change capitalisation.

    - Remove code-style violating white spaces.

    - Change capitalisation.

    - Remove code-style violating white spaces.

    - Remove code-style violating white spaces.

    Replace inconsistent mentions of core.* with minetest.* (#5749)

    Rework escape/pause menu (#5719)

    

    * Rework escape/pause menu

    

    - Remove build information

    - Use current controls instead of default controls

    - Add information about the current server in place of the build information

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    * Rework escape/pause menu

    

    - Remove build information

    - Use current controls instead of default controls

    - Add information about the current server in place of the build information

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    - Remove build information

    - Use current controls instead of default controls

    - Add information about the current server in place of the build information

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    - Use current controls instead of default controls

    - Add information about the current server in place of the build information

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    - Add information about the current server in place of the build information

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    - Add text saying the game is paused to if in singleplayer mode.

    rework pause/escape menu

    

    * improve consistency + display server_name

    rework pause/escape menu

    

    * improve consistency + display server_name

    * improve consistency + display server_name

    Menu: Fix starting a server if the server address is an empty string. (#5742)

    

    Minetest uses an empty string internal to signal that a server should be started.

    Minetest uses an empty string internal to signal that a server should be started.

    Private nodemeta (#5702)

    

    * Private node metadata that isn't sent to the client

    * Private node metadata that isn't sent to the client

    minetest.deserialize: Throw error when argument not string (#5738)

    Android: Fix crash while loading main menu (#5736)

    

    Broken by 43d1f37

    Broken by 43d1f37

    Add cancel button to password change menu. (#5720)

    

    * Add cancel button to password change menu.

    * Add cancel button to password change menu.

    Move Pilzadam to previous developers. (#5735)

    Revert custom player collision box and step height commits

    

    These caused inability to pass through 2 node high spaces or step up onto slabs

    or steps when a new client connected to an older server.

    These caused inability to pass through 2 node high spaces or step up onto slabs

    or steps when a new client connected to an older server.

    or steps when a new client connected to an older server.

    read_schematic_replacements: ensure fields are strings (#5726)

    

    * read_schematic_replacements: ensure fields are strings

    

    add a type check before reading strings on read_schematic_replacements deserializer

    

    * throw LuaError instead of asserting the whole client

    * read_schematic_replacements: ensure fields are strings

    

    add a type check before reading strings on read_schematic_replacements deserializer

    

    * throw LuaError instead of asserting the whole client

    add a type check before reading strings on read_schematic_replacements deserializer

    

    * throw LuaError instead of asserting the whole client

    * throw LuaError instead of asserting the whole client

    Custom step height: Fix implementation

    

    Recent commit 45ab62d6a3d90ab3b97aec88251a766cb5dd1899 had a coding error that

    made climbing out of water difficult due to an incorrect value of the step height

    when not 'touching ground'.

    It also incorrectly multiplied the custom stepheight by BS, resulting in being

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    Recent commit 45ab62d6a3d90ab3b97aec88251a766cb5dd1899 had a coding error that

    made climbing out of water difficult due to an incorrect value of the step height

    when not 'touching ground'.

    It also incorrectly multiplied the custom stepheight by BS, resulting in being

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    made climbing out of water difficult due to an incorrect value of the step height

    when not 'touching ground'.

    It also incorrectly multiplied the custom stepheight by BS, resulting in being

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    when not 'touching ground'.

    It also incorrectly multiplied the custom stepheight by BS, resulting in being

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    It also incorrectly multiplied the custom stepheight by BS, resulting in being

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    able to step-up 2 nodes if set to the default of 0.6, or even 0.3.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    Also the implementation was wrong because it customised the step height when

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    not 'touching ground', this step height is for a slight rise when catching the

    edge of a node during a jump, and should always remain at 0.2 * BS.

    edge of a node during a jump, and should always remain at 0.2 * BS.

    Shaders: Remove unused water surface shader

    

    Also remove hardcoded MTGame node.

    

    The 'water surface shader' was duplicated shader code in preparation for

    intended new water surface shaders. For development purposes the MTGame node

    'default:water_source' had it's top tile assigned to 'water surface shader'.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    Also remove hardcoded MTGame node.

    

    The 'water surface shader' was duplicated shader code in preparation for

    intended new water surface shaders. For development purposes the MTGame node

    'default:water_source' had it's top tile assigned to 'water surface shader'.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    The 'water surface shader' was duplicated shader code in preparation for

    intended new water surface shaders. For development purposes the MTGame node

    'default:water_source' had it's top tile assigned to 'water surface shader'.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    intended new water surface shaders. For development purposes the MTGame node

    'default:water_source' had it's top tile assigned to 'water surface shader'.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    'default:water_source' had it's top tile assigned to 'water surface shader'.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    Due to shader duplication this commit does not cause any change to shader

    behaviour.

    behaviour.

    Player attrs: permits to remove an attribute by setting value to nil (#5716)

    

    * Player attrs: permits to remove an attribute by setting value to nil

    

    When doing player:set_attribute("attr", nil) remove attribute

    

    Also remove a useless check on C++ API part (already done by checkplayer)

    

    Fix #5709

    * Player attrs: permits to remove an attribute by setting value to nil

    

    When doing player:set_attribute("attr", nil) remove attribute

    

    Also remove a useless check on C++ API part (already done by checkplayer)

    

    Fix #5709

    When doing player:set_attribute("attr", nil) remove attribute

    

    Also remove a useless check on C++ API part (already done by checkplayer)

    

    Fix #5709

    Also remove a useless check on C++ API part (already done by checkplayer)

    

    Fix #5709

    Fix #5709

    LINT fix since d0678948165768472fc940c03e78cba787f49ea5

    Player properties: Set correct default collisionbox

    

    Recent commit b6f4a9c7e1a4f0bac66fd6f6ff844425ac775975 removed a hardcoded

    player collisionbox which resulted on falling back to an incorrect default.

    This stopped players walking through 2-node high spaces and made the player

    slightly wider.

    

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    Recent commit b6f4a9c7e1a4f0bac66fd6f6ff844425ac775975 removed a hardcoded

    player collisionbox which resulted on falling back to an incorrect default.

    This stopped players walking through 2-node high spaces and made the player

    slightly wider.

    

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    player collisionbox which resulted on falling back to an incorrect default.

    This stopped players walking through 2-node high spaces and made the player

    slightly wider.

    

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    This stopped players walking through 2-node high spaces and made the player

    slightly wider.

    

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    slightly wider.

    

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    Improve docs for custom player collisionbox feature and reformat nearby lines.

    Replace occurrence of luaL_reg in l_camera.cpp

    

    Related to commit 41c5483. Replace an occurrence of luaL_reg in

    src/script/lua_api/l_camera.cpp (added by commit de028fc).

    Related to commit 41c5483. Replace an occurrence of luaL_reg in

    src/script/lua_api/l_camera.cpp (added by commit de028fc).

    src/script/lua_api/l_camera.cpp (added by commit de028fc).

    Fix myfloor(0.0)

    Clean up numeric.h and split FacePositionCache from it

    

    I also optiized FacePositionCache a bit: I removed a map

    lookup and vector copy from both branches of getFacePosition.

    I also optiized FacePositionCache a bit: I removed a map

    lookup and vector copy from both branches of getFacePosition.

    lookup and vector copy from both branches of getFacePosition.

    Make the player collisionbox settable

    Use a settings object for the main settings

    

    This unifies the settings APIs.

    

    This also unifies the sync and async registration APIs, since the async

    registration API did not support adding non-functions to the API table.

    This unifies the settings APIs.

    

    This also unifies the sync and async registration APIs, since the async

    registration API did not support adding non-functions to the API table.

    This also unifies the sync and async registration APIs, since the async

    registration API did not support adding non-functions to the API table.

    registration API did not support adding non-functions to the API table.

    Fix codestyle since CSM Camera API

    Add configurable key bindings for hotbar scrolling, and for changing volume.

    Use stepheight from CAO instead of hardcoded value

    [CSM] add `on_item_use` (#5544)

    Make players respect makes_footstep_sound in the object properties

    [CSM] Add camera API (#5609)

    

    * [CSM] Add camera API

    roper rebase & squash

    

    * Address nerzhul's review

    * [CSM] Add camera API

    roper rebase & squash

    

    * Address nerzhul's review

    roper rebase & squash

    

    * Address nerzhul's review

    * Address nerzhul's review

    Clouds API: Fix yellow clouds at dawn and dusk (#5707)

    Add missing server sending rule for bd921a7916f0fafc493b1c4d0eeb5e2bb1d6a7c2

    Fix Android build (#5706)

    

    * Fix Android build

    * Fix Android build

    Save minetest screen width/height options when modified (#5683)

    

    * Save minetest screen width/height options when modified

    

    * Add autosave_screensize setting (default true)

    

    * Fix @SmallJoker comments

    * Save minetest screen width/height options when modified

    

    * Add autosave_screensize setting (default true)

    

    * Fix @SmallJoker comments

    * Add autosave_screensize setting (default true)

    

    * Fix @SmallJoker comments

    * Fix @SmallJoker comments

    Add option to also check the center to `find_node_near` (#5255)

    

    * Add option to also check the center to `find_node_near`

    * Add option to also check the center to `find_node_near`

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 31.9% (293 of 918 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 96.0% (882 of 918 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 66.9% (615 of 918 strings)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 58.0% (533 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 57.9% (532 of 918 strings)

    Added translation using Weblate (Swedish)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 49.6% (456 of 918 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 49.4% (454 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 60.1% (552 of 918 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 93.6% (860 of 918 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 54.9% (504 of 918 strings)

    Remove CMAKE -ffast-math flag from OSX/FreeBSD

    

    Fixes issue: #4274

    

    I have tested on MacOS 10.12.4

    

    Requires testing on:

    FreeBSD, Windows and Linux which I do not have access to.

    Fixes issue: #4274

    

    I have tested on MacOS 10.12.4

    

    Requires testing on:

    FreeBSD, Windows and Linux which I do not have access to.

    I have tested on MacOS 10.12.4

    

    Requires testing on:

    FreeBSD, Windows and Linux which I do not have access to.

    Requires testing on:

    FreeBSD, Windows and Linux which I do not have access to.

    FreeBSD, Windows and Linux which I do not have access to.

    LINT fix since cloud API merge

    Directional coloured fog: Fix order of SColor components

    

    'video::SColor pointcolor' was initialised with order RGBA instead of ARGB.

    No change in behaviour as 'm_bgcolor' has alpha 255.

    'video::SColor pointcolor' was initialised with order RGBA instead of ARGB.

    No change in behaviour as 'm_bgcolor' has alpha 255.

    No change in behaviour as 'm_bgcolor' has alpha 255.

    Clouds: Fix reddish clouds. Add missing alpha update

    

    Fix accidental swap of red and blue components that caused reddish clouds

    Add missing update of alpha in remoteplayer.cpp

    Fix accidental swap of red and blue components that caused reddish clouds

    Add missing update of alpha in remoteplayer.cpp

    Add missing update of alpha in remoteplayer.cpp

    Add function to get server info.

    Fading soungs: Fix client crash on older servers

    Set sky API: Add bool for clouds in front of custom skybox

    

    Default true.

    Add 'm_clouds_enabled' bool to sky.h, set from new bool in 'set sky' API.

    Make 'getCloudsVisible()' depend on 'm_clouds_enabled' instead of

    'm_visible' (whether normal sky is visible).

    Default true.

    Add 'm_clouds_enabled' bool to sky.h, set from new bool in 'set sky' API.

    Make 'getCloudsVisible()' depend on 'm_clouds_enabled' instead of

    'm_visible' (whether normal sky is visible).

    Add 'm_clouds_enabled' bool to sky.h, set from new bool in 'set sky' API.

    Make 'getCloudsVisible()' depend on 'm_clouds_enabled' instead of

    'm_visible' (whether normal sky is visible).

    Make 'getCloudsVisible()' depend on 'm_clouds_enabled' instead of

    'm_visible' (whether normal sky is visible).

    'm_visible' (whether normal sky is visible).

    Sneak: Improve and fix various things

    

    Remove useless `got_teleported`.

    Fix jitter when walking against the sneak limits.

    Fix damage evading on sneak ladders.

    Remove useless `got_teleported`.

    Fix jitter when walking against the sneak limits.

    Fix damage evading on sneak ladders.

    Fix jitter when walking against the sneak limits.

    Fix damage evading on sneak ladders.

    Fix damage evading on sneak ladders.

    Sound API: Add fading sounds

    Add clouds API

    Optimize updateFastFaceRow processing by removing some TileSpec copy (#5678)

    

    * Optimize updateFastFaceRow processing by removing some TileSpec copy

    

    It permit to decrease this function from 54% runtime to 45% and reduce copy from 14% runtime to 12.5%

    getTileInfo also reduced from 27% to 23%

    

    * makeFastFace should use a const ref too

    

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    * Optimize updateFastFaceRow processing by removing some TileSpec copy

    

    It permit to decrease this function from 54% runtime to 45% and reduce copy from 14% runtime to 12.5%

    getTileInfo also reduced from 27% to 23%

    

    * makeFastFace should use a const ref too

    

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    It permit to decrease this function from 54% runtime to 45% and reduce copy from 14% runtime to 12.5%

    getTileInfo also reduced from 27% to 23%

    

    * makeFastFace should use a const ref too

    

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    getTileInfo also reduced from 27% to 23%

    

    * makeFastFace should use a const ref too

    

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    * makeFastFace should use a const ref too

    

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    this trigger a const pointer need in the underlying function

    

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    Also fix some code style and prevent calculating 4 times the same position at a point

    

    * Reduce a comparison cost for lights in updateFastFaceRow

    * Reduce a comparison cost for lights in updateFastFaceRow

    Fix visual slide issue with set_detach, fixes #5620

    content_cao: fix getPlayerControl structure copy on each step (#5677)

    

    Also fix some codestyle issues around it.

    Also fix some codestyle issues around it.

    Client & ClientEnvirnment: don't create fake events (#5676)

    

    Instead of create fake events on the stack on each loop call (Game::run), verify is queue is empty or not and handle event directly if there is.

    

    This prevents fake ClientEvent creation & memory allocations

    

    Same fix is also applied on ClientEnvironment, & rename getClientEvent to getClientEnvEvent to match ClientEnvEvent object

    Instead of create fake events on the stack on each loop call (Game::run), verify is queue is empty or not and handle event directly if there is.

    

    This prevents fake ClientEvent creation & memory allocations

    

    Same fix is also applied on ClientEnvironment, & rename getClientEvent to getClientEnvEvent to match ClientEnvEvent object

    This prevents fake ClientEvent creation & memory allocations

    

    Same fix is also applied on ClientEnvironment, & rename getClientEvent to getClientEnvEvent to match ClientEnvEvent object

    Same fix is also applied on ClientEnvironment, & rename getClientEvent to getClientEnvEvent to match ClientEnvEvent object

    Fix Travis/unittest broken since b662a45

    Remove legacy unused define DIGGING_PARTICLES_AMOUNT

    [CSM] Add event on_place_node API lua (#5548)

    

    * [CSM] Add event on_place_node API lua

    * [CSM] Add event on_place_node API lua

    Fix Lint broken by b662a4577d692329b9ca83525e6039f2ddcd1ac1

    Reorder TileLayer. (#5638)

    

    Despite the split of TileSpec into TileDef and TileLayer, the

    TileLayer struct is still 66 bytes large, and doesn't fit in

    a single cacheline.

    

    I'm moving the color member to cacheline 2, in the hope that it

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    Despite the split of TileSpec into TileDef and TileLayer, the

    TileLayer struct is still 66 bytes large, and doesn't fit in

    a single cacheline.

    

    I'm moving the color member to cacheline 2, in the hope that it

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    TileLayer struct is still 66 bytes large, and doesn't fit in

    a single cacheline.

    

    I'm moving the color member to cacheline 2, in the hope that it

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    a single cacheline.

    

    I'm moving the color member to cacheline 2, in the hope that it

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    I'm moving the color member to cacheline 2, in the hope that it

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    is less used and the compiler loads all the hot members in a single

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    cacheline instead. Only color sits now in cacheline 2, all the

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    other members are in cacheline 1.

    

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    Note: is_color is probably rarely set, most nodes will likely

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    not use hardware coloring, but this may change in the future.

    Ideally, this class is shrunk to 64 bytes.

    Ideally, this class is shrunk to 64 bytes.

    [CSM] add screenshot api lua (#5674)

    

    * [CSM] add screenshot api lua

    * [CSM] add screenshot api lua

    Clean up getTime helpers

    

    This increases size of the getTime return values to 64 bits.

    It also removes the TimeGetter classes since the getTime functions

    are now very precise.

    This increases size of the getTime return values to 64 bits.

    It also removes the TimeGetter classes since the getTime functions

    are now very precise.

    It also removes the TimeGetter classes since the getTime functions

    are now very precise.

    are now very precise.

    Fix click-digging torches (#5652)

    

    Torches are dug instantly again.

    When the digging time is 0, a delay of 0.15 seconds is added between digging nodes. If the left mouse button is released, the delay is set to 0, thus click-digging.

    Torches are dug instantly again.

    When the digging time is 0, a delay of 0.15 seconds is added between digging nodes. If the left mouse button is released, the delay is set to 0, thus click-digging.

    When the digging time is 0, a delay of 0.15 seconds is added between digging nodes. If the left mouse button is released, the delay is set to 0, thus click-digging.

    Allow mesh and nodeboxes to wave like plants or leaves. (#3497)

    

    We introduce a new value for "waving" - 2:

    

    0 - waving disabled

    1 - wave like a plant

    2 - wave like a leave

    

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    We introduce a new value for "waving" - 2:

    

    0 - waving disabled

    1 - wave like a plant

    2 - wave like a leave

    

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    0 - waving disabled

    1 - wave like a plant

    2 - wave like a leave

    

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    1 - wave like a plant

    2 - wave like a leave

    

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    2 - wave like a leave

    

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    Plantlike nodes will only allow waving = 1, but for leaves we will

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    permit both 1 and 2 since current minetest_game sets it to 1 for

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    all leaves. This makes it somewhat backwards compatible.

    

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    For mesh and nodebox, values 1 and 2 are both valid, and the node

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    can wave in both fashions as desired.

    

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    I've tested this with the crops:corn plants, which are mesh nodes,

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    and the results are really good. The code change is trivial as

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    well, so I've opted to document the waving parameter in lua_api.txt

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    because it was missing from there.

    

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    Nodeboxes likely will not wave properly unless waving = 2. However

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    it's possible that waving=1 may be desired by some mod developers

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    for geometries I have not tried, so the code will not prohibit

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    either value for mesh and nodebox drawtypes.

    

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    Add lua_api.txt documentation for this feature and document both

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    the existing functionality and the expansion to mesh and nodebox

    drawtypes.

    drawtypes.

    Fix Travis builds

    Search user path for sounds (#5657)

    Don't permit to copy Scripting classes (Client,Server,Mainmenu)

    Allow scripts to get the client protocol version in non-debug builds. (#5649)

    Fix incorrect formspec-tooltip doc, add detail in 'floodable' & 'on_flood' docs (#5660)

    

    * Fix incorrect formspec tooltip documentation

    

    * Improve `floodable` and `on_flood` documentation.

    

    The original documentation did not specify that liquids should not themselves be floodable. This is probably something that should be mentioned.

    * Fix incorrect formspec tooltip documentation

    

    * Improve `floodable` and `on_flood` documentation.

    

    The original documentation did not specify that liquids should not themselves be floodable. This is probably something that should be mentioned.

    * Improve `floodable` and `on_flood` documentation.

    

    The original documentation did not specify that liquids should not themselves be floodable. This is probably something that should be mentioned.

    The original documentation did not specify that liquids should not themselves be floodable. This is probably something that should be mentioned.

    Fix Android build since 2818d3f2244d2146a5cdb61cd41f6561c514f97c

    Fix #5655 (#5658)

    

    Client: Don't send `TOSERVER_RECEIVED_MEDIA` since it's not used anymore

    Server: Handle `TOSERVER_RECEIVED_MEDIA` using `Server::handleCommand_Deprecated`

    Client: Don't send `TOSERVER_RECEIVED_MEDIA` since it's not used anymore

    Server: Handle `TOSERVER_RECEIVED_MEDIA` using `Server::handleCommand_Deprecated`

    Server: Handle `TOSERVER_RECEIVED_MEDIA` using `Server::handleCommand_Deprecated`

    Tiny documentation fix. (#5659)

    

    There are plenty of lines longer than 80 characters, and spliting the function declaration across two lines can be momentarily confusing.

    There are plenty of lines longer than 80 characters, and spliting the function declaration across two lines can be momentarily confusing.

    Rename Scripting API files for consistency

    Footsteps without view bobbing (#5645)

    

    * Remove redundant view_bobbing setting

    

    Also fixes bug where disabling view_bobbing disables footstep sounds.

    

    * Removes redundant view_bobbing setting

    

    Setting view_bobbing amount to 0 is now the only way to

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    * Remove redundant view_bobbing setting

    

    Also fixes bug where disabling view_bobbing disables footstep sounds.

    

    * Removes redundant view_bobbing setting

    

    Setting view_bobbing amount to 0 is now the only way to

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    Also fixes bug where disabling view_bobbing disables footstep sounds.

    

    * Removes redundant view_bobbing setting

    

    Setting view_bobbing amount to 0 is now the only way to

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    * Removes redundant view_bobbing setting

    

    Setting view_bobbing amount to 0 is now the only way to

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    Setting view_bobbing amount to 0 is now the only way to

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    turn view_bobbing on and off. Also fixed a bug where footstep

    sounds would not play when view_bobbing was disabled.

    sounds would not play when view_bobbing was disabled.

    Fix various points reported by cppcheck (#5656)

    

    * Fix various performance issues reported by cppcheck + code style (CI)

    

    * Make CI happy with code style on master

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * Fix various performance issues reported by cppcheck + code style (CI)

    

    * Make CI happy with code style on master

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * Make CI happy with code style on master

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * Fix various iterator post-increment reported by cppcheck

    Gitlab-CI: keep build workspace only 1 hour

    Fix lint since recent player to db merge

    Player data to Database (#5475)

    

    * Player data to Database

    

    Add player data into databases (SQLite3 & PG only)

    

    PostgreSQL & SQLite: better POO Design for databases

    

    Add --migrate-players argument to server + deprecation warning

    

    * Remove players directory if empty

    * Player data to Database

    

    Add player data into databases (SQLite3 & PG only)

    

    PostgreSQL & SQLite: better POO Design for databases

    

    Add --migrate-players argument to server + deprecation warning

    

    * Remove players directory if empty

    Add player data into databases (SQLite3 & PG only)

    

    PostgreSQL & SQLite: better POO Design for databases

    

    Add --migrate-players argument to server + deprecation warning

    

    * Remove players directory if empty

    PostgreSQL & SQLite: better POO Design for databases

    

    Add --migrate-players argument to server + deprecation warning

    

    * Remove players directory if empty

    Add --migrate-players argument to server + deprecation warning

    

    * Remove players directory if empty

    * Remove players directory if empty

    LINT fix

    Revert "CONTRIBUTING: disallow signed git commits"

    

    This reverts commit 7a6502a7a5007e4bed8c1dd10af39d4fa2b296a4.

    

    Signed commits are supported by PPA and weblate now

    This reverts commit 7a6502a7a5007e4bed8c1dd10af39d4fa2b296a4.

    

    Signed commits are supported by PPA and weblate now

    Signed commits are supported by PPA and weblate now

    Pass clang-format on various cpp/header files (#5559)

    Network:Remove old opcodes and fix documentation. (#5573)

    Mgflat, Mgv7: Fix noise crash on world exit.

    

    Fix crash caused by destructor 'delete' on noise objects that are not

    created due to mapgen options.

    Crash was caused by commit 57eaf62c697cec91890d9cb28d10385d293d2d3f

    Fix crash caused by destructor 'delete' on noise objects that are not

    created due to mapgen options.

    Crash was caused by commit 57eaf62c697cec91890d9cb28d10385d293d2d3f

    created due to mapgen options.

    Crash was caused by commit 57eaf62c697cec91890d9cb28d10385d293d2d3f

    Crash was caused by commit 57eaf62c697cec91890d9cb28d10385d293d2d3f

    Add /fixlight chat command

    Mgflat, Mgv7: Only create noise objects if needed

    Sneak glitch: Set default to false

    

    The 'sneak glitch' physics override now controls whether a player can

    use the new move code replications of the old sneak side-effects:

    sneak ladders and 2 node sneak jump. This completes our intention to

    replicate the old sneak side-effects in new code and provide them as

    an option that is disabled by default.

    The 'sneak glitch' physics override now controls whether a player can

    use the new move code replications of the old sneak side-effects:

    sneak ladders and 2 node sneak jump. This completes our intention to

    replicate the old sneak side-effects in new code and provide them as

    an option that is disabled by default.

    use the new move code replications of the old sneak side-effects:

    sneak ladders and 2 node sneak jump. This completes our intention to

    replicate the old sneak side-effects in new code and provide them as

    an option that is disabled by default.

    sneak ladders and 2 node sneak jump. This completes our intention to

    replicate the old sneak side-effects in new code and provide them as

    an option that is disabled by default.

    replicate the old sneak side-effects in new code and provide them as

    an option that is disabled by default.

    an option that is disabled by default.

    Add on_flood() callback.

    

    This callback is called if a liquid definitely floods a non-air

    node on the map. The callback arguments are (pos, oldnode, newnode)

    and can return a `bool` value indicating whether flooding the

    node should be cancelled (`return true` will prevent the node

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    This callback is called if a liquid definitely floods a non-air

    node on the map. The callback arguments are (pos, oldnode, newnode)

    and can return a `bool` value indicating whether flooding the

    node should be cancelled (`return true` will prevent the node

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    node on the map. The callback arguments are (pos, oldnode, newnode)

    and can return a `bool` value indicating whether flooding the

    node should be cancelled (`return true` will prevent the node

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    and can return a `bool` value indicating whether flooding the

    node should be cancelled (`return true` will prevent the node

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    node should be cancelled (`return true` will prevent the node

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    from flooding).

    

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    Documentation is added, the callback function was tested with a

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    modified minetest_game.

    

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    Note that `return true` will likely cause the node's `on_flood()`

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    callback to be called every second until the node gets removed,

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    so care must be taken to prevent many callbacks from using this

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    return value. The current default liquid update interval is 1.0

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    seconds, which isn't unmanageable.

    

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    The larger aim of this patch is to remove the lava cooling ABM,

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    which is a significant cost to idle servers that have lava on their

    map. This callback will be much more efficient.

    map. This callback will be much more efficient.

    Fix a memory leak (#5636)

    Fixing warning pointed by @sfan5 and clang and cleanup guiFileSelectMenu

    

    * Also pass clang-format on guiFileSelectMenu.h and remove it from whitelist

    * Also pass clang-format on guiFileSelectMenu.h and remove it from whitelist

    Revert a const ref on update texture

    

    if mod is a reference to a class member a variable swap breaks.

    We should find a way to keep this const ref if possible.

    Added a comment about this in header

    if mod is a reference to a class member a variable swap breaks.

    We should find a way to keep this const ref if possible.

    Added a comment about this in header

    We should find a way to keep this const ref if possible.

    Added a comment about this in header

    Added a comment about this in header

    lua: remove core.cause_error call (#5637)

    

    it was used in minimal to trigger core crash, not very useful

    it was used in minimal to trigger core crash, not very useful

    Fix various performance issues reported by cppcheck + code style (CI) (#5635)

    

    * Make CI happy with code style on master

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    * Make CI happy with code style on master

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * guiFileSelectMenu: remove useless includes

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * some performance fixes pointed by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * remove some useless casts

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    * TextDest: remove unused setFormSpec function

    

    * Fix various iterator post-increment reported by cppcheck

    Fix #5617 - respect message and reconnect parameters when shutting down immediately (#5621)

    Fix after soft node overlays

    

    This removes a segmentation fault and makes node meshes well colorized.

    This removes a segmentation fault and makes node meshes well colorized.

    Soft node overlay (#5186)

    

    This commit adds node overlays, which are tiles that are drawn on top of

    other tiles.

    This commit adds node overlays, which are tiles that are drawn on top of

    other tiles.

    other tiles.

    Gitlab-CI enhancements (#5629)

    Fix various performance issues reported by cppcheck (#5628)

    

    * Also remove 1 non declared but defined functions

    * Also remove 1 non declared but defined functions

    Run generate_from_settingtypes.lua

    Light update for map blocks

    

    This is not really different from the light update of a voxel

    manipulator. This update does not assume that the lighting was correct

    before, therefore it is useful for correction.

    

    Also expose this function to the Lua API for light correction, and

    allow voxel manipulators not to update the light.

    This is not really different from the light update of a voxel

    manipulator. This update does not assume that the lighting was correct

    before, therefore it is useful for correction.

    

    Also expose this function to the Lua API for light correction, and

    allow voxel manipulators not to update the light.

    manipulator. This update does not assume that the lighting was correct

    before, therefore it is useful for correction.

    

    Also expose this function to the Lua API for light correction, and

    allow voxel manipulators not to update the light.

    before, therefore it is useful for correction.

    

    Also expose this function to the Lua API for light correction, and

    allow voxel manipulators not to update the light.

    Also expose this function to the Lua API for light correction, and

    allow voxel manipulators not to update the light.

    allow voxel manipulators not to update the light.

    Split light update into two parts

    

    The common part can be reused.

    The common part can be reused.

    Fix various copy instead of const ref reported by cppcheck (part 3) (#5616)

    

    * Also remove 2 non declared but defined functions

    * Make some functions around const ref changes const

    * Also remove 2 non declared but defined functions

    * Make some functions around const ref changes const

    * Make some functions around const ref changes const

    Fix various copy instead of const ref reported by cppcheck (#5615)

    

    * Also remove InventoryList::peekItem unused function

    * Fix some post increment to preincrement reported by cppcheck

    * Also remove InventoryList::peekItem unused function

    * Fix some post increment to preincrement reported by cppcheck

    * Fix some post increment to preincrement reported by cppcheck

    Conf.example: Move some lines to minetest.conf.example.extra

    

    Some information in conf.example cannot be generated from

    settingtypes.txt, moving it to a new file makes generating

    conf.example while preserving that information easier.

    

    Regenerate conf.example from settingtypes.txt.

    Some information in conf.example cannot be generated from

    settingtypes.txt, moving it to a new file makes generating

    conf.example while preserving that information easier.

    

    Regenerate conf.example from settingtypes.txt.

    settingtypes.txt, moving it to a new file makes generating

    conf.example while preserving that information easier.

    

    Regenerate conf.example from settingtypes.txt.

    conf.example while preserving that information easier.

    

    Regenerate conf.example from settingtypes.txt.

    Regenerate conf.example from settingtypes.txt.

    Pointed thing to face pos: Fix crash if opening door with slab or stair

    

    Avoids crash caused when 'pointed thing -under' and '-above' are not

    face-neighbours, for example in the case of pointing to the top half

    of a door.

    Avoids crash caused when 'pointed thing -under' and '-above' are not

    face-neighbours, for example in the case of pointing to the top half

    of a door.

    face-neighbours, for example in the case of pointing to the top half

    of a door.

    of a door.

    Tools: Fix tool digging speed limit

    Fix various variables passed by copy instead of const ref (#5610)

    

    Pointed by cppcheck

    Pointed by cppcheck

    Fix broken lint since 04cc9de8f2fbcb11f133c88f02fc11504b3ea6f3

    Reorder TileSpec. (#5591)

    

    Put accessed members that are needed by updateFastFaceRow()

    all in the same cacheline.

    Put accessed members that are needed by updateFastFaceRow()

    all in the same cacheline.

    all in the same cacheline.

    Fix always using the xbox layout (reported by coverity).

    Don't make TAB exit game if bound to inventory.

    

    I play with the TAB key bound to the inventory. However, the

    code here assumes that TAB means "close formspec" in all contexts,

    including the main menu. This causes my game to exit when I attempt

    to TAB in between USERNAME and PASSWORD fields.

    

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    I play with the TAB key bound to the inventory. However, the

    code here assumes that TAB means "close formspec" in all contexts,

    including the main menu. This causes my game to exit when I attempt

    to TAB in between USERNAME and PASSWORD fields.

    

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    code here assumes that TAB means "close formspec" in all contexts,

    including the main menu. This causes my game to exit when I attempt

    to TAB in between USERNAME and PASSWORD fields.

    

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    including the main menu. This causes my game to exit when I attempt

    to TAB in between USERNAME and PASSWORD fields.

    

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    to TAB in between USERNAME and PASSWORD fields.

    

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    We know when m_client != NULL that the game is a client game and

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    not in the main menu, and then it's OK to use the INVENTORY bound

    key to exit the formspec, since it's not the main menu.

    key to exit the formspec, since it's not the main menu.

    Fix MSVC build broken by 34d32ce

    `round` -> `myround`

    Remove superflous `floor` calls

    `round` -> `myround`

    Remove superflous `floor` calls

    Remove superflous `floor` calls

    MeshUpdateQueue: Add a MapBlock cache that minimizes the amount of MapBlock copying done in the main thread

    

    Cache size is configurable by the meshgen_block_cache_size (default 20 MB).

    

    New profiler stats:

    - MeshUpdateQueue MapBlock cache hit %

    - MeshUpdateQueue MapBlock cache size kB

    

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    Cache size is configurable by the meshgen_block_cache_size (default 20 MB).

    

    New profiler stats:

    - MeshUpdateQueue MapBlock cache hit %

    - MeshUpdateQueue MapBlock cache size kB

    

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    New profiler stats:

    - MeshUpdateQueue MapBlock cache hit %

    - MeshUpdateQueue MapBlock cache size kB

    

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - MeshUpdateQueue MapBlock cache hit %

    - MeshUpdateQueue MapBlock cache size kB

    

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - MeshUpdateQueue MapBlock cache size kB

    

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    Removes one type of stutter that was seen on the client when received MapBlocks

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    were being handled. (the "MeshMakeData::fill" stutter)

    

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    Kind of related to at least #5239

    

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    Originally preceded by these commits, now includes them:

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - Move the mesh generator thread into src/mesh_generator_thread.{cpp,h}

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - mesh_generator_thread.cpp: Update code style

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - MeshUpdateThread: Modify interface to house a different implementation: Actual functionality will be changed by next commits.

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    - MeshMakeData: Add fillBlockData() interface (so that caller can fill in stuff from eg. a MapBlock cache)

    Include container.h in util/thread.h. util/thread.h doesn't compile without it

    Sneak: Add option for old move code

    

    Temporary option for the old move code for specific old sneak behaviour.

    Enabled by setting the added 'new move' physics override to false.

    By default 'new move' is true.

    Temporary option for the old move code for specific old sneak behaviour.

    Enabled by setting the added 'new move' physics override to false.

    By default 'new move' is true.

    Enabled by setting the added 'new move' physics override to false.

    By default 'new move' is true.

    By default 'new move' is true.

    Remove an unused variable in Android Build

    Plug two minor Leaks (#5603)

    

    * Resource leak: CHECK_FILE_ERR returns, without freeing chunk_name.

    

    Found with static analysis.

    

    * Resource leak: leaks `page` on error path.

    

    Found with static analysis.

    * Resource leak: CHECK_FILE_ERR returns, without freeing chunk_name.

    

    Found with static analysis.

    

    * Resource leak: leaks `page` on error path.

    

    Found with static analysis.

    Found with static analysis.

    

    * Resource leak: leaks `page` on error path.

    

    Found with static analysis.

    * Resource leak: leaks `page` on error path.

    

    Found with static analysis.

    Found with static analysis.

    

    * Resource leak: leaks `page` on error path.

    

    Found with static analysis.

    Android progressbar fix (#5601)

    

    * Fix progressbar for Android

    

    Fixes #5599

    Fixed #5403

    

    * draw_load_screen: use texturesource

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * Fix progressbar for Android

    

    Fixes #5599

    Fixed #5403

    

    * draw_load_screen: use texturesource

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    Fixes #5599

    Fixed #5403

    

    * draw_load_screen: use texturesource

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    Fixed #5403

    

    * draw_load_screen: use texturesource

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * draw_load_screen: use texturesource

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

      this permits to unify texture loading code

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * scale progress bar

    

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * Add gl version check for GL_OES_texture_npot. This fixed the texture on loading screen

    

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * Remove two sanity checks pointed by @celeron55

    

    * sfan5 comments + android ratio fixes

    * sfan5 comments + android ratio fixes

    Disable android leveldb by default (#5596)

    

    1) Now leveldb is brick (thanks google)

    2) By default, use SQLite3, this work perfectly and NOBODY not use LevelDB on Android :)

    1) Now leveldb is brick (thanks google)

    2) By default, use SQLite3, this work perfectly and NOBODY not use LevelDB on Android :)

    2) By default, use SQLite3, this work perfectly and NOBODY not use LevelDB on Android :)

    Implement delayed server shutdown with cancelation (#4664)

    Minimap: Do a double-typecast to fix compiling with MSVC

    Partial damage cheat fix: node damages server side (#4981)

    

    * Damage cheat fix: server side

    

    * Lava/Node damages overtime server side

    * lava hurt interval is only for old protocol

    * Damage cheat fix: server side

    

    * Lava/Node damages overtime server side

    * lava hurt interval is only for old protocol

    * Lava/Node damages overtime server side

    * lava hurt interval is only for old protocol

    * lava hurt interval is only for old protocol

    NetworkPacket: don't copy push std::string and std::wstring

    Fix wrong channel type in Client/Server CommandFactories

    This is a u8 not a u16

    This is a u8 not a u16

    ClientIface::sendToAll: honor packet configuration (#5590)

    Fix android build

    [CSM] Add function to set minimap shape (#5569)

    

    * [CSM] Add function to set minimap shape

    

    Also deprecates `toggle_shape`.

    

    * Oh fish, I messed that one up!

    

    * Fix Style

    

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * [CSM] Add function to set minimap shape

    

    Also deprecates `toggle_shape`.

    

    * Oh fish, I messed that one up!

    

    * Fix Style

    

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    Also deprecates `toggle_shape`.

    

    * Oh fish, I messed that one up!

    

    * Fix Style

    

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Oh fish, I messed that one up!

    

    * Fix Style

    

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Fix Style

    

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Sorry, I missed something

    

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    I still had the `luamethod` call in there!

    

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Add getters

    

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Remove extra line

    

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Remove useless variable

    

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    Please review again @nerzhul . Thanks!

    

    * Satisfy nerzhul

    * Satisfy nerzhul

    Only use palette if param_type2 is correct

    Add documentation for map block format 27 (#5576)

    [CSM] Fix localplayer documentation (#5557)

    Fix inability to change metadata using stack:to_table() (#5547)

    Fix fips_cipher_abort warning and other duplicate macros

    [CSM] Allow escaping chatcommands and add missing calls to gettext. (#5565)

    Replace occurrence of luaL_reg in l_localplayer (#5566)

    

    Related to commit 41c5483. Replace a final occurrence of luaL_reg in

    src/script/lua_api/l_localplayer.cpp

    Related to commit 41c5483. Replace a final occurrence of luaL_reg in

    src/script/lua_api/l_localplayer.cpp

    src/script/lua_api/l_localplayer.cpp

    Sneak glitch: Detect ledge for 2-node climb-up

    

    Re-creates the old sneak-jump behaviour in new code.

    Enabled by the 'sneak glitch' physics override.

    When a ledge is detected the jump speed modifier is set to the larger

    of 'physics override jump' and 1.3 to allow a 2-node climb-up.

    

    An unexpected side-effect is the simple sneak ladder working smoothly.

    Re-creates the old sneak-jump behaviour in new code.

    Enabled by the 'sneak glitch' physics override.

    When a ledge is detected the jump speed modifier is set to the larger

    of 'physics override jump' and 1.3 to allow a 2-node climb-up.

    

    An unexpected side-effect is the simple sneak ladder working smoothly.

    Enabled by the 'sneak glitch' physics override.

    When a ledge is detected the jump speed modifier is set to the larger

    of 'physics override jump' and 1.3 to allow a 2-node climb-up.

    

    An unexpected side-effect is the simple sneak ladder working smoothly.

    When a ledge is detected the jump speed modifier is set to the larger

    of 'physics override jump' and 1.3 to allow a 2-node climb-up.

    

    An unexpected side-effect is the simple sneak ladder working smoothly.

    of 'physics override jump' and 1.3 to allow a 2-node climb-up.

    

    An unexpected side-effect is the simple sneak ladder working smoothly.

    An unexpected side-effect is the simple sneak ladder working smoothly.

    [CSM] Use more gettext (#5553)

    [CSM] Move `.list_players` and `.disconnect` to builtin. (#5550)

    Clang-format fix for Android

    Clang-format styles fixes since previous commit

    Clang format: fix LINT on old PR which doesn't have LINT enabled

    Hard-coded undersampling.

    

    Adds uniform undersampling for the 3D rendered scene. GUI elements

    are not undersampled, resulting in better playability for users

    with low-performance platforms with readable fonts and formspecs.

    

    The undersampling setting can be set to 0 (disabled), 2, 3, 4 pixels

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    Adds uniform undersampling for the 3D rendered scene. GUI elements

    are not undersampled, resulting in better playability for users

    with low-performance platforms with readable fonts and formspecs.

    

    The undersampling setting can be set to 0 (disabled), 2, 3, 4 pixels

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    are not undersampled, resulting in better playability for users

    with low-performance platforms with readable fonts and formspecs.

    

    The undersampling setting can be set to 0 (disabled), 2, 3, 4 pixels

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    with low-performance platforms with readable fonts and formspecs.

    

    The undersampling setting can be set to 0 (disabled), 2, 3, 4 pixels

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    The undersampling setting can be set to 0 (disabled), 2, 3, 4 pixels

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    which translates into a resolution reduction of x4, x9 or x16, and

    is significant.

    is significant.

    LocalPlayer api lua

    Hardware coloring for itemstacks

    

    Adds the possibility to colorize item stacks based on their metadata.

    

    In the item/node definition you can specify palette (an image file)

    and color (fallback color if the item has no palette or metadata).

    Then you can add palette_index to the metadata.

    

    Dropped itemstacks with different colors do not merge.

    Adds the possibility to colorize item stacks based on their metadata.

    

    In the item/node definition you can specify palette (an image file)

    and color (fallback color if the item has no palette or metadata).

    Then you can add palette_index to the metadata.

    

    Dropped itemstacks with different colors do not merge.

    In the item/node definition you can specify palette (an image file)

    and color (fallback color if the item has no palette or metadata).

    Then you can add palette_index to the metadata.

    

    Dropped itemstacks with different colors do not merge.

    and color (fallback color if the item has no palette or metadata).

    Then you can add palette_index to the metadata.

    

    Dropped itemstacks with different colors do not merge.

    Then you can add palette_index to the metadata.

    

    Dropped itemstacks with different colors do not merge.

    Dropped itemstacks with different colors do not merge.

    Move chat command handling code from C++ to Lua (#5528)

    Document that write_json will error on unserializable types. (#5539)

    

    Previously it was erroneously documented that it would save them as null.

    Previously it was erroneously documented that it would save them as null.

    Prepare for Linux daily build packages (using Gitlab.com CI) (#5542)

    

    * Prepare for Linux daily build packages (using Gitlab.com CI)

    * Prepare for Linux daily build packages (using Gitlab.com CI)

    Replace luaL_reg with luaL_Reg as recent LuaJIT dropped the Lua 5.0 compat (#5541)

    

    We are bundling Lua5.1 which has same macro

    We are bundling Lua5.1 which has same macro

    code style fix on src/script/cpp_api/s_client.h

    [CSM] Add event on_connect player API lua (#5540)

    

    * Add event on_connect player API lua

    * Add event on_connect player API lua

    Fix cmake library default build problem since moving to lib/

    

    Also make Lua library check a cmake module

    Also make Lua library check a cmake module

    Pass clang-format on 14 trivial header files fixes

    

    Also remove them from whitelist

    Also remove them from whitelist

    Fix signed/unsigned conversion warning

    

    There was no bug here (as I checked for negativeness),

    however it's good to get rid of warnings.

    There was no bug here (as I checked for negativeness),

    however it's good to get rid of warnings.

    however it's good to get rid of warnings.

    Cavegen: Fix non-constant array initializer error for MSVC

    Settings: Update documentation (#5534)

    

    Now documented (sorted a-z):

    enable_console

    enable_particles

    creative_mode

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    Now documented (sorted a-z):

    enable_console

    enable_particles

    creative_mode

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    enable_console

    enable_particles

    creative_mode

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    enable_particles

    creative_mode

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    creative_mode

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    hud_scaling

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    inventory_image_hack

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    keymap_console

    keymap_zoom

    shader_path

    view_bobbing

    keymap_zoom

    shader_path

    view_bobbing

    shader_path

    view_bobbing

    view_bobbing

    Clang-format: fix some header files and remove them from whitelist

    Add the REQUIRE_LUAJIT option (#5526)

    Windows: Skip cmd for release builds (#5416)

    Fix "error: ‘playerSAO’ was not declared"

    

    Cause: 351cc2e79a7d78f7ec97ff9b33e4f0bad4042b19

    

    A rebase issue missed a rename from playerSAO to playersao.

    

    Tested.

    Cause: 351cc2e79a7d78f7ec97ff9b33e4f0bad4042b19

    

    A rebase issue missed a rename from playerSAO to playersao.

    

    Tested.

    A rebase issue missed a rename from playerSAO to playersao.

    

    Tested.

    Tested.

    Fix spacing

    Fix problems when overriding the hand:

    - If the hand can dig a node the item wielded can't, allow to dig it anyway.

    - Fix the API callbacks from setting the hand instead of the wielded item.

    - If the hand can dig a node the item wielded can't, allow to dig it anyway.

    - Fix the API callbacks from setting the hand instead of the wielded item.

    - Fix the API callbacks from setting the hand instead of the wielded item.

    Add Joystick type detection and Xbox controller support

    

    * Add joystick type detection (with joystick_type setting to override it)

    * Fix multiple joysticks from interfering with each other by only reading from one (add joystick_id setting)

    * Add support for Xbox controllers

    * Add joystick type detection (with joystick_type setting to override it)

    * Fix multiple joysticks from interfering with each other by only reading from one (add joystick_id setting)

    * Add support for Xbox controllers

    * Fix multiple joysticks from interfering with each other by only reading from one (add joystick_id setting)

    * Add support for Xbox controllers

    * Add support for Xbox controllers

    Fix multiple death messages (#5305)

    

    Fix multiple death messages (#3565) and damage server logs after death.

    Fix multiple death messages (#3565) and damage server logs after death.

    Show media download progress in percent on progress screen (#5498)

    LINT: Switch whitelist check from egrep to awk

    

    Bonus: make CI happy with the last rules fix

    Bonus: make CI happy with the last rules fix

    [CSM] Add function to get the server protocol version. (#5529)

    Clang-format continuation indent fixes + .gitignore additions

    

    * Proper support for continuation indents in clang format

    * make src/wieldmesh.h proper and remove it from whitelist

    * Add CLion default build directories in .gitignore

    * Proper support for continuation indents in clang format

    * make src/wieldmesh.h proper and remove it from whitelist

    * Add CLion default build directories in .gitignore

    * make src/wieldmesh.h proper and remove it from whitelist

    * Add CLion default build directories in .gitignore

    * Add CLion default build directories in .gitignore

    Clang format brace style fix

    Fix clang-format binary selection

    

    Also fix spaces to tabs

    Also fix spaces to tabs

    Move LINT process in dedicated shell & fix

    Move lint to dedicated shell permit to use it from your shell easily to check what is wrong

    Also fix recent regressions in code style

    Move lint to dedicated shell permit to use it from your shell easily to check what is wrong

    Also fix recent regressions in code style

    Also fix recent regressions in code style

    Clang format: only show errors on non whitelisted files

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.4% (638 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 59.2% (544 of 918 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 96.0% (882 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 99.4% (913 of 918 strings)

    

    Se isso se referir a Instrument builtin aa tradução é embutido

    Se isso se referir a Instrument builtin aa tradução é embutido

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 87.0% (799 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 67.8% (623 of 918 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 37.0% (340 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 66.4% (610 of 918 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 24.8% (228 of 918 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 34.9% (321 of 918 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 73.0% (671 of 918 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 70.2% (645 of 918 strings)

    Translated using Weblate (Malay)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 17.4% (160 of 918 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 73.0% (671 of 918 strings)

    Added translation using Weblate (Malay)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 72.9% (670 of 918 strings)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 3.9% (36 of 918 strings)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (Belarusian)

    

    Currently translated at 100.0% (1274 of 1274 strings)

    Currently translated at 13.5% (124 of 918 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 61.2% (562 of 918 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.4% (638 of 918 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 27.1% (249 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 99.3% (912 of 918 strings)

    [CSM] Add support for positional audio. (#5516)

    

    Fixes parts of #5389.

    Fixes parts of #5389.

    Expose vector helpers to CSM

    Memleak fix: LocalPlayer object was not deleted

    

    Delete LocalPlayer when ClientEnvironment (object owner) is destroyed

    Delete LocalPlayer when ClientEnvironment (object owner) is destroyed

    Mapgen documentation: Add descriptions to noise parameters

    

    Shorten 'readable names'.

    Add a new advanced settings menu section for Biome API noises.

    Various minor edits and improvements.

    Shorten 'readable names'.

    Add a new advanced settings menu section for Biome API noises.

    Various minor edits and improvements.

    Add a new advanced settings menu section for Biome API noises.

    Various minor edits and improvements.

    Various minor edits and improvements.

    Mapgen: Remove '#include treegen.h' from non-mgv6 mapgens

    

    Only mgv6 uses the tree functions from treegen.cpp.

    Only mgv6 uses the tree functions from treegen.cpp.

    MapgenBasic: Add lava source as commonly used content (#5512)

    

    Future mapgens are likely to use this for magma and volcanos.

    Remove the getting of lava source content id in mgvalleys.

    Future mapgens are likely to use this for magma and volcanos.

    Remove the getting of lava source content id in mgvalleys.

    Remove the getting of lava source content id in mgvalleys.

    Client handlers: Remove useless stringstream usage in two handlers (#5510)

    [CSM] Add local node meta reference. (#5508)

    Cavegen/Mgv5/Mgv7: Add optional giant caverns

    

    Add to MapgenBasic for use by multiple mapgens.

    Add to mgv5 and mgv7, enabled by default.

    

    Similar to mgvalleys caverns but half the scale.

    Parameters for upper y limit, distance caverns taper to full size, and

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    Add to MapgenBasic for use by multiple mapgens.

    Add to mgv5 and mgv7, enabled by default.

    

    Similar to mgvalleys caverns but half the scale.

    Parameters for upper y limit, distance caverns taper to full size, and

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    Add to mgv5 and mgv7, enabled by default.

    

    Similar to mgvalleys caverns but half the scale.

    Parameters for upper y limit, distance caverns taper to full size, and

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    Similar to mgvalleys caverns but half the scale.

    Parameters for upper y limit, distance caverns taper to full size, and

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    Parameters for upper y limit, distance caverns taper to full size, and

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    noise threshold (full cavern size).

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    As with mgvalleys caverns are generated first and classic caves are

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    disabled in any mapchunk containing a cavern, to avoid excessive

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    spreading volumes of liquids.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    This also avoids floating blobs of liquid where a large classic cave

    has overgenerated out into a neighbouring previously-generated mapchunk.

    has overgenerated out into a neighbouring previously-generated mapchunk.

    Update embedded jsoncpp from unk version to 0.10.6 + move libs to lib/ instead of src/ (#5473)

    

    * Update embedded jsoncpp from unk version to 0.10.6

    

    0.10.6 is last release without c++11

    

    * Make jsoncpp more compliant with its amalgamate

    

    Jsoncpp cpp file should be upper, make the library like it does in amalgamate

    

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    * Update embedded jsoncpp from unk version to 0.10.6

    

    0.10.6 is last release without c++11

    

    * Make jsoncpp more compliant with its amalgamate

    

    Jsoncpp cpp file should be upper, make the library like it does in amalgamate

    

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    0.10.6 is last release without c++11

    

    * Make jsoncpp more compliant with its amalgamate

    

    Jsoncpp cpp file should be upper, make the library like it does in amalgamate

    

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    * Make jsoncpp more compliant with its amalgamate

    

    Jsoncpp cpp file should be upper, make the library like it does in amalgamate

    

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    Jsoncpp cpp file should be upper, make the library like it does in amalgamate

    

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    * Reorganization: move minetest embedded libs outside of source tree to /lib

    

    * Fix a dead grep in LINT

    * Fix a dead grep in LINT

    minetest.after(): simplify further, pause in singleplayer (#5500)

    

    Using the `dtime` value entirely, this will stop the clock

    if the game is paused in singleplayer. Since most of the

    clocks were fixed a long time ago, this should again be

    safe to use.

    Using the `dtime` value entirely, this will stop the clock

    if the game is paused in singleplayer. Since most of the

    clocks were fixed a long time ago, this should again be

    safe to use.

    if the game is paused in singleplayer. Since most of the

    clocks were fixed a long time ago, this should again be

    safe to use.

    clocks were fixed a long time ago, this should again be

    safe to use.

    safe to use.

    First commit for fine pointed (#5485)

    Add missing source to android build (#5496)

    Clang-format: trivial fix on some headers (#5495)

    

    Fix some headers style and remove them from whitelist

    Fix some headers style and remove them from whitelist

    [CSM] Add function and chat command to disconnect from server. (#5487)

    Signlike, glasslike drawtypes: Fix inverted textures

    mapgen: Fix segfault when selecting invalid mapgen (#5491)

    Fix clang-format Columns Width

    

    Also fix l_client.cpp/h and remove them from whitelist

    Also fix l_client.cpp/h and remove them from whitelist

    Wieldmesh: Natural orientation depending on pitch (#5490)

    Windows: Set window icon (#5486)

    Paramtype2: Add missing type CPT2_GLASSLIKE_LIQUID_LEVEL

    

    Add the missing paramtype2 for param2 controlling the liquid level

    inside the glasslike_framed drawtype.

    Add missing documentation of the feature to lua_api.txt.

    Update and improve comments for drawtype enumerations in nodedef.h.

    Add the missing paramtype2 for param2 controlling the liquid level

    inside the glasslike_framed drawtype.

    Add missing documentation of the feature to lua_api.txt.

    Update and improve comments for drawtype enumerations in nodedef.h.

    inside the glasslike_framed drawtype.

    Add missing documentation of the feature to lua_api.txt.

    Update and improve comments for drawtype enumerations in nodedef.h.

    Add missing documentation of the feature to lua_api.txt.

    Update and improve comments for drawtype enumerations in nodedef.h.

    Update and improve comments for drawtype enumerations in nodedef.h.

    l_minimap: don't show minimap if configuration doesn't allow it

    Add CPP11 header to define nullptr & constexpr (#5471)

    

    This header permit to use nullptr & constexpr keywords in portable code segments and benefit from nullptr & constexpr when using C++11 and greater

    This header permit to use nullptr & constexpr keywords in portable code segments and benefit from nullptr & constexpr when using C++11 and greater

    Sneak: Fix sneaking on free-floating lower-half slabs

    Sneak: Fix stair lower step bug and ladder in 1x1 hole bugs

    Add functions to strip color information. (#5472)

    Fix a type bug in colorize function

    

    This bug was introduced by dd2f1d7551bfd70357ad4f3fb180704194272147 and reported by @kilbith

    This bug was introduced by dd2f1d7551bfd70357ad4f3fb180704194272147 and reported by @kilbith

    [CSM] Fix errors in and improve the CSM documentation. (#5467)

    clang-format: add a whitelist (#5459)

    

    If file is in the whitelist, softfail, else hard failure

    

    Some files are not in whitelist and marked as normal:

    * src/content_mapnode.h

    * src/cguittfont/xCGUITTFont.cpp

    * src/gameparams.h

    * src/profiler.cpp

    If file is in the whitelist, softfail, else hard failure

    

    Some files are not in whitelist and marked as normal:

    * src/content_mapnode.h

    * src/cguittfont/xCGUITTFont.cpp

    * src/gameparams.h

    * src/profiler.cpp

    Some files are not in whitelist and marked as normal:

    * src/content_mapnode.h

    * src/cguittfont/xCGUITTFont.cpp

    * src/gameparams.h

    * src/profiler.cpp

    * src/content_mapnode.h

    * src/cguittfont/xCGUITTFont.cpp

    * src/gameparams.h

    * src/profiler.cpp

    * src/cguittfont/xCGUITTFont.cpp

    * src/gameparams.h

    * src/profiler.cpp

    * src/gameparams.h

    * src/profiler.cpp

    * src/profiler.cpp

    PostgreSQL: fix delete block

    Typo fix: we are doing select on delete block.

    

    This fix issue #5426

    Typo fix: we are doing select on delete block.

    

    This fix issue #5426

    This fix issue #5426

    Map generation limit: Make per-world

    

    The setting limits map generation but affects nothing else.

    Add 'mapgen_limit' to global mapgen parameters.

    Move 'blockpos_over_mapgen_limit()' to the only place it is called

    from: map.cpp.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    The setting limits map generation but affects nothing else.

    Add 'mapgen_limit' to global mapgen parameters.

    Move 'blockpos_over_mapgen_limit()' to the only place it is called

    from: map.cpp.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    Add 'mapgen_limit' to global mapgen parameters.

    Move 'blockpos_over_mapgen_limit()' to the only place it is called

    from: map.cpp.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    Move 'blockpos_over_mapgen_limit()' to the only place it is called

    from: map.cpp.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    from: map.cpp.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    Allow teleportation to any part of the world even if over the set

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    mapgen limit.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    Simplify the reading of this limit in mgvalleys.

    Remove the 'map_generation_limit' setting.

    Remove the 'map_generation_limit' setting.

    Pathfinder: Send errors to `warningstream`.

    

    Avoids spamming the chat about several errors.

    Avoids spamming the chat about several errors.

    Fix mismatch struct/class for GameUIFlags

    clang-format: fix counter increment & output (#5456)

    

    clang-format: fix bash syntax on increment

    clang-format: fix bash syntax on increment

    clang-format: limit diff to 50 files to prevent exceding the maximum travis output (4MB) (#5455)

    Sneak: Replicate sneak ladder in new code, is optional

    

    Enabled using the existing 'sneak_glitch' physics override.

    Enabled using the existing 'sneak_glitch' physics override.

    Change command prefix to "." and add "help" command.

    Add mesh generation delay

    Add clang format & skip build if no source file modified (#5433)

    

    * [BUILD] Add clang format + build skipping

    

    * Add clang-format tool to check codestyle.

    Warning: it check the whole modified file, not the diff part, it's why it's lazy. Please also look if rules are perfect, i take the Linux codestyle from LLVM site

    

    Fix issue #5415

    

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * [BUILD] Add clang format + build skipping

    

    * Add clang-format tool to check codestyle.

    Warning: it check the whole modified file, not the diff part, it's why it's lazy. Please also look if rules are perfect, i take the Linux codestyle from LLVM site

    

    Fix issue #5415

    

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Add clang-format tool to check codestyle.

    Warning: it check the whole modified file, not the diff part, it's why it's lazy. Please also look if rules are perfect, i take the Linux codestyle from LLVM site

    

    Fix issue #5415

    

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    Warning: it check the whole modified file, not the diff part, it's why it's lazy. Please also look if rules are perfect, i take the Linux codestyle from LLVM site

    

    Fix issue #5415

    

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    Fix issue #5415

    

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Skip building project if no file is modified

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Fix a wrong brace to trigger LINT

    

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Make lint step outside of unix build scope

    

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Add AccessModifierOffset: -8

    

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Typo fix & needs compile fix

    

    * Fix header priorities

    * Fix header priorities

    Tile.cpp: Fix MSVC build broken by 072bbba

    Typo fix

    Add multiline support to colorize. (#5444)

    Some performance optimizations (#5424)

    

    * Some performance optimizations

    

    This is globally removing some memory useless copy

    

    * use a const ref return on std::string Settings::get to prevent data copy on getters which doesn't need to copy it

     * pass some stack created strings to static const as they are not modified anywhere

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

    * Some performance optimizations

    

    This is globally removing some memory useless copy

    

    * use a const ref return on std::string Settings::get to prevent data copy on getters which doesn't need to copy it

     * pass some stack created strings to static const as they are not modified anywhere

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

    This is globally removing some memory useless copy

    

    * use a const ref return on std::string Settings::get to prevent data copy on getters which doesn't need to copy it

     * pass some stack created strings to static const as they are not modified anywhere

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

    * use a const ref return on std::string Settings::get to prevent data copy on getters which doesn't need to copy it

     * pass some stack created strings to static const as they are not modified anywhere

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * pass some stack created strings to static const as they are not modified anywhere

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * Camera: return nametags per const ref instead of a list pointer, we only need to read it

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * INodeDefManager: getAll should be a result ref writer instead of a return copy

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * INodeDefManager: getAlias should return a const std::string ref

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * Minimap: unroll a Scolor creation in blitMinimapPixersToImageRadar to prvent many variable construct/destruct which are unneeded (we rewrite the content in the loop)

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * CNodeDefManager::updateAliases: prevent a idef getall copy

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * Profiler: constness

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * rollback_interface: create real_name later, and use const ref

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * MapBlockMesh updateFastFaceRow: unroll TileSpec next_tile, which has a cost of 1.8% CPU due to variable allocation/destruction,

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * MapBlockMesh updateFastFaceRow: copy next_tile to tile only if it's a different tilespec

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

     * MapBlockMesh updateFastFaceRow: use memcpy to copy next_lights to lights to do it in a single cpu operation

    [CSM] Add function to get player names in range (#5435)

    

    * [CSM] Add function to get currently connected player names

    * [CSM] Add function to get currently connected player names

    Firelike drawtype: Add missing docs for visual_scale in lua_api.txt (#5434)

    Content_mapblock.cpp: Refactor

    Refactored client event if-else cascade to switch statement

    Map generation limit: Rewrite

    

    The previous implementation applied the setting to blockpos_over_limit(),

    objectpos_over_limit() and in createSector(), causing many bugs near the

    world edge.

    

    First revert the previous implementation.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    The previous implementation applied the setting to blockpos_over_limit(),

    objectpos_over_limit() and in createSector(), causing many bugs near the

    world edge.

    

    First revert the previous implementation.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    objectpos_over_limit() and in createSector(), causing many bugs near the

    world edge.

    

    First revert the previous implementation.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    world edge.

    

    First revert the previous implementation.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    First revert the previous implementation.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    Rename blockpos_over_limit() to blockpos_over_max_limit() for clarity.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    Add a new function to mapblock.h called blockpos_over_mapgen_limit() that

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    checks against the map_generation_limit setting, and call this only from

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    the code that decides where mapgen stops.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    Use MAX_MAP_GENERATION_LIMIT in objectpos_over_limit() to reduce the

    chance of bugs, there is no need to use map_generation_limit here.

    chance of bugs, there is no need to use map_generation_limit here.

    Fix /shutdown or ^C no longer causing server exit

    

    Broken since b8484ef24e8e1ec90a2967372808ab2bea538c7c

    Broken since b8484ef24e8e1ec90a2967372808ab2bea538c7c

    Refactor Game class (part 2) (#5422)

    

    * showPauseMenu is now part of game

    * remove many flags parameters passed to game functions, use the member.

    * rename VolatileRunFlags to GameUIFlags (this will permit to share structure with client and CSM

    * updatePointedThing: remove pointer ref, we already have the pointer in rundata

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * showPauseMenu is now part of game

    * remove many flags parameters passed to game functions, use the member.

    * rename VolatileRunFlags to GameUIFlags (this will permit to share structure with client and CSM

    * updatePointedThing: remove pointer ref, we already have the pointer in rundata

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * remove many flags parameters passed to game functions, use the member.

    * rename VolatileRunFlags to GameUIFlags (this will permit to share structure with client and CSM

    * updatePointedThing: remove pointer ref, we already have the pointer in rundata

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * rename VolatileRunFlags to GameUIFlags (this will permit to share structure with client and CSM

    * updatePointedThing: remove pointer ref, we already have the pointer in rundata

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * updatePointedThing: remove pointer ref, we already have the pointer in rundata

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * move some attributes outside of VolatileRunFlags after renaming, to game class

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * rename statustext to m_statustext

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * make some const variables static

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * All those changes permit to reduce a little bit function class cost and will permit to interface CSM with some interesting Game flags

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * Expose GameUIFlags to client

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * Client now have GameUIFlags parameter and setters for other classes

    * Fix minimap show/hide in Lua because we now have access to the real flag

    * Fix minimap show/hide in Lua because we now have access to the real flag

    Block access to the `io` library

    Update server min protocol version to v24 (#5411)

    

    * Update server min protocol version to v24

    

    It's based on @sfan5 stats. See https://kitsunemimi.pw/tmp/serverlist_stats_2017-03-17.txt

    

    v24 was bumped 25/08/14 and 0.4.11 was released 25/12/14

    

    * Drop protocol v23 and lesser code

    * Update server min protocol version to v24

    

    It's based on @sfan5 stats. See https://kitsunemimi.pw/tmp/serverlist_stats_2017-03-17.txt

    

    v24 was bumped 25/08/14 and 0.4.11 was released 25/12/14

    

    * Drop protocol v23 and lesser code

    It's based on @sfan5 stats. See https://kitsunemimi.pw/tmp/serverlist_stats_2017-03-17.txt

    

    v24 was bumped 25/08/14 and 0.4.11 was released 25/12/14

    

    * Drop protocol v23 and lesser code

    v24 was bumped 25/08/14 and 0.4.11 was released 25/12/14

    

    * Drop protocol v23 and lesser code

    * Drop protocol v23 and lesser code

    Server list cleanup

    

    This removes the hacky server_dedicated pseudo-setting.

    This removes the hacky server_dedicated pseudo-setting.

    Show itemstring as tooltip if no item description

    TOGGLE_CHAT keymap should togglechat not HUD

    

    Fixes #5413

    Fixes #5413

    Reduce memory & function cost of Game class functions (#5406)

    

    GameRunData is passed on many game functions, or one of its attributes whereas it's a member of the class. Remove it from functions arguments and call object directly from concerned functions.

    This will reduce a little bit the Game class loop usage & very little bit the memory usage (due to non creation of pointer/references)

    GameRunData is passed on many game functions, or one of its attributes whereas it's a member of the class. Remove it from functions arguments and call object directly from concerned functions.

    This will reduce a little bit the Game class loop usage & very little bit the memory usage (due to non creation of pointer/references)

    This will reduce a little bit the Game class loop usage & very little bit the memory usage (due to non creation of pointer/references)

    avoid crashing when accessing mapgen early (#5384)

    Give CSM access to use `core.colorize()` (#5113)

    [CSM] Fix minimap problems (#5405)

    

    This fixes issue #5404

    This fixes issue #5404

    [CSM] Add core.get_timeofday & core.get_day_count env calls (#5401)

    

    * [CSM] Add core.get_timeofday & core.get_day_count env calls

    

    * [CSM] Add core.get_node_level, core.get_node_max_level, core.find_node_near

    * [CSM] Add core.get_timeofday & core.get_day_count env calls

    

    * [CSM] Add core.get_node_level, core.get_node_max_level, core.find_node_near

    * [CSM] Add core.get_node_level, core.get_node_max_level, core.find_node_near

    Fix indentation problem since merge resolution

    

    Github merge conflict resolution is not the best with indent

    Github merge conflict resolution is not the best with indent

    [CSM] Add minimap API modifiers (#5399)

    

    * Rename Mapper (too generic) to Minimap

    * Add lua functions to get/set position, angle, mode for minimap

    * Client: rename m_mapper to m_minimap

    * Add minimap to core.ui namespace (core.ui.minimap)

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Rename Mapper (too generic) to Minimap

    * Add lua functions to get/set position, angle, mode for minimap

    * Client: rename m_mapper to m_minimap

    * Add minimap to core.ui namespace (core.ui.minimap)

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Add lua functions to get/set position, angle, mode for minimap

    * Client: rename m_mapper to m_minimap

    * Add minimap to core.ui namespace (core.ui.minimap)

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Client: rename m_mapper to m_minimap

    * Add minimap to core.ui namespace (core.ui.minimap)

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Add minimap to core.ui namespace (core.ui.minimap)

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Add various functions to manage minimap (show, hide, toggle_shape)

    * Cleanup trivial declaration in client

    * Cleanup trivial declaration in client

    Add ModStorageAPI to client side modding (#5396)

    

    mod storage is located into user_path / client / mod_storage

    mod storage is located into user_path / client / mod_storage

    Get biome list: Downgrade missing biome message to infostream

    

    It is harmless for a biome listed in an ore or decoration registration

    to be missing.

    Now that we are registering certain biomes or not based on options

    (such as floatland biomes), the biome lists in ore and decoration

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    It is harmless for a biome listed in an ore or decoration registration

    to be missing.

    Now that we are registering certain biomes or not based on options

    (such as floatland biomes), the biome lists in ore and decoration

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    to be missing.

    Now that we are registering certain biomes or not based on options

    (such as floatland biomes), the biome lists in ore and decoration

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    Now that we are registering certain biomes or not based on options

    (such as floatland biomes), the biome lists in ore and decoration

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    (such as floatland biomes), the biome lists in ore and decoration

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    registrations trigger these error messages, avoiding these error

    messages would need a large amount of duplication of ore and decoration

    registrations.

    messages would need a large amount of duplication of ore and decoration

    registrations.

    registrations.

    Sneak: Fix various problems with sneaking

    

    Sneaking won't actually hover you in the air, releasing shift guarantees not

    falling down (same as in MC).

    Sneak-jump no longer goes higher than a normal jump (^ was required for this).

    Sneaking no longer avoids fall damage.

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    Sneaking won't actually hover you in the air, releasing shift guarantees not

    falling down (same as in MC).

    Sneak-jump no longer goes higher than a normal jump (^ was required for this).

    Sneaking no longer avoids fall damage.

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    falling down (same as in MC).

    Sneak-jump no longer goes higher than a normal jump (^ was required for this).

    Sneaking no longer avoids fall damage.

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    Sneak-jump no longer goes higher than a normal jump (^ was required for this).

    Sneaking no longer avoids fall damage.

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    Sneaking no longer avoids fall damage.

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    You can sneak on partial nodes (slabs, sideways slabs) correctly.

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    Sneaking doesn't "go out" as far anymore (0.29 instead of 0.4).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    Can't jump when sneaking out as far as possible (breaks the sneak ladder).

    lua_api: Document minetest.features (#5311)

    Use true distance for block priority.

    Fix undefined references (#5400)

    Fix two nul deref if digging unknown nodes. (#5398)

    

    Introduced by d785456b3fa35faf47cb972fde9e8668382c5e22 (#5162)

    Introduced by d785456b3fa35faf47cb972fde9e8668382c5e22 (#5162)

    Add disclaimer to client_lua_api.txt (#5391)

    Add `get_wielded_item`

    [CSM] Add enable_client_modding param (default: false)

    [CSM] Add `on_punchnode` callback

    [CSM] Add `get_node` and `get_node_or_nil`

    [CSM] Add `on_dignode` callback (#5140)

    [CSM] storage + fixes

    [CSM] Improve security for client-sided mods (#5100)

    [CSM] implement client side mod loading (#5123)

    

    * client side mods are located in clientmods/

    * move builtin/preview.lua to clientmods/preview/init.lua as a preview mod

    * refactor ModConfiguration class to work properly with client and server using child objects

    * move some Server constructor mod load code to ModConfiguration to reduce code duplication between client and server

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * client side mods are located in clientmods/

    * move builtin/preview.lua to clientmods/preview/init.lua as a preview mod

    * refactor ModConfiguration class to work properly with client and server using child objects

    * move some Server constructor mod load code to ModConfiguration to reduce code duplication between client and server

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * move builtin/preview.lua to clientmods/preview/init.lua as a preview mod

    * refactor ModConfiguration class to work properly with client and server using child objects

    * move some Server constructor mod load code to ModConfiguration to reduce code duplication between client and server

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * refactor ModConfiguration class to work properly with client and server using child objects

    * move some Server constructor mod load code to ModConfiguration to reduce code duplication between client and server

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * move some Server constructor mod load code to ModConfiguration to reduce code duplication between client and server

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * remove mods.{cpp,h} unused functions

    * use UNORDERED_SET instead of std::set in some modspec storages

    * use UNORDERED_SET instead of std::set in some modspec storages

    [CSM] Add local formspecs. (#5094)

    [CSM] sound_play & sound_stop support + client_lua_api doc (#5096)

    

    * squashed: CSM: Implement register_globalstep

      * Re-use fatal error mechanism from server to disconnect client on CSM error

      * Little client functions cleanups

    

    * squashed: CSM: add core.after function

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

    * squashed: CSM: Implement register_globalstep

      * Re-use fatal error mechanism from server to disconnect client on CSM error

      * Little client functions cleanups

    

    * squashed: CSM: add core.after function

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

      * Re-use fatal error mechanism from server to disconnect client on CSM error

      * Little client functions cleanups

    

    * squashed: CSM: add core.after function

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

      * Little client functions cleanups

    

    * squashed: CSM: add core.after function

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

    * squashed: CSM: add core.after function

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

      * core.after is shared code between client & server

      * ModApiUtil get_us_time feature enabled for client

      * ModApiUtil get_us_time feature enabled for client

    [CSM] Add client-sided chat commands (#5092)

    [CSM] Add on_death, on_hp_modification & oh_damage_taken callbacks (#5093)

    

    * Add on_death callback

    * Add on_hp_modification & on_damage_taken callbacks

    * move preview code to preview.lua

    * Add on_death callback

    * Add on_hp_modification & on_damage_taken callbacks

    * move preview code to preview.lua

    * Add on_hp_modification & on_damage_taken callbacks

    * move preview code to preview.lua

    * move preview code to preview.lua

    [CSM] Add method that display chat to client-sided lua. (#5089) (#5091)

    

    * squashed: [Client-sided scripting] Don't register functions that don't work. (#5091)

    * squashed: [Client-sided scripting] Don't register functions that don't work. (#5091)

    [CSM] Client side modding

    

    * rename GameScripting to ServerScripting

    * Make getBuiltinLuaPath static serverside

    * Add on_shutdown callback

    * Add on_receiving_chat_message & on_sending_chat_message callbacks

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * rename GameScripting to ServerScripting

    * Make getBuiltinLuaPath static serverside

    * Add on_shutdown callback

    * Add on_receiving_chat_message & on_sending_chat_message callbacks

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * Make getBuiltinLuaPath static serverside

    * Add on_shutdown callback

    * Add on_receiving_chat_message & on_sending_chat_message callbacks

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * Add on_shutdown callback

    * Add on_receiving_chat_message & on_sending_chat_message callbacks

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * Add on_receiving_chat_message & on_sending_chat_message callbacks

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * ScriptApiBase: use IGameDef instead of Server

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

      This permits to share common attribute between client & server

    * Enable mod security in client side modding without conditions

    * Enable mod security in client side modding without conditions

    GUI: Allow texture packs to customize the progress bar (#5368)

    Save metainfo for falling nodes

    Enable server side occlusion culling by default.

    Allow server side occlusion culling.

    Do not increase breath if at full breath.

    

    Prevents the server from sending TOCLIENT_BREATH packets

    every 0.5seconds, if there is no reason to.

    Prevents the server from sending TOCLIENT_BREATH packets

    every 0.5seconds, if there is no reason to.

    every 0.5seconds, if there is no reason to.

    database-redis: Support password authentication

    Climb speed: Increase default setting from 2 to 3

    Minimap: Optimise

    Light calculation: New bulk node lighting code

    

    This commit introduces a new bulk node lighting algorithm to minimize

    lighting bugs during l-system tree generation, schematic placement and

    non-mapgen-object lua voxelmanip light calculation.

    

    If the block above the changed area is not loaded, it gets loaded to avoid

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    This commit introduces a new bulk node lighting algorithm to minimize

    lighting bugs during l-system tree generation, schematic placement and

    non-mapgen-object lua voxelmanip light calculation.

    

    If the block above the changed area is not loaded, it gets loaded to avoid

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    lighting bugs during l-system tree generation, schematic placement and

    non-mapgen-object lua voxelmanip light calculation.

    

    If the block above the changed area is not loaded, it gets loaded to avoid

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    non-mapgen-object lua voxelmanip light calculation.

    

    If the block above the changed area is not loaded, it gets loaded to avoid

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    If the block above the changed area is not loaded, it gets loaded to avoid

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    lighting bugs.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    Light is updated as soon as write_to_map is called on a voxel manipulator,

    therefore update_map does nothing.

    therefore update_map does nothing.

    Optimize item.lua

    Replace slow ItemStack get_definitions with registered_nodes one's and cached playername as it's used multiple times.  Also removed local item = itemstack:peek_item() as it is never used.

    Replace slow ItemStack get_definitions with registered_nodes one's and cached playername as it's used multiple times.  Also removed local item = itemstack:peek_item() as it is never used.

    GUI: Convert loading screen's progress bar to image (#5362)

    CI: Add memleak checking using valgrind (#5350)

    

    Add a new step to check memleaks on our current unit tests suite

    Add a new step to check memleaks on our current unit tests suite

    Update .appdata and .desktop files

    Dungeons: Use 'block' instead of 'brick' for nodebox stairs

    

    Affects only sandstone dungeons. Nodebox stairs made from

    'sandstone_block' look better because every step is undivided.

    Affects only sandstone dungeons. Nodebox stairs made from

    'sandstone_block' look better because every step is undivided.

    'sandstone_block' look better because every step is undivided.

    Font: attempt fallback font, abort if no fonts found.

    

    If you happen to have a font_path setting that is incorrect,

    minetest will just attempt to start the gui without a valid

    font which leads to a segfault later on.

    

    We can attempt to load the fallback font path fairly easy,

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    If you happen to have a font_path setting that is incorrect,

    minetest will just attempt to start the gui without a valid

    font which leads to a segfault later on.

    

    We can attempt to load the fallback font path fairly easy,

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    minetest will just attempt to start the gui without a valid

    font which leads to a segfault later on.

    

    We can attempt to load the fallback font path fairly easy,

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    font which leads to a segfault later on.

    

    We can attempt to load the fallback font path fairly easy,

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    We can attempt to load the fallback font path fairly easy,

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    but if that fails we should give up with a proper error message

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    and not a weird segfault later. This forces an abort() if

    the fallback fails as well, and prints a useful error

    message to the console.

    the fallback fails as well, and prints a useful error

    message to the console.

    message to the console.

    README.txt: Clarify loading of minetest.conf

    Add minetest.spawn_falling_node(pos) (#5339)

    

    * Add minetest.spawn_falling_node(pos)

    

    * lua_api.txt: Add minetest.spawn_falling_node(pos)

    

    * Update minetest.spawn_falling_node(pos)

    * Add minetest.spawn_falling_node(pos)

    

    * lua_api.txt: Add minetest.spawn_falling_node(pos)

    

    * Update minetest.spawn_falling_node(pos)

    * lua_api.txt: Add minetest.spawn_falling_node(pos)

    

    * Update minetest.spawn_falling_node(pos)

    * Update minetest.spawn_falling_node(pos)

    FormSpec: Add position and anchor elements (#5284)

    Fixed spelling mistakes (#5312)

    Dungeongen: Add and improve parameters

    

    Add:

    Bool for 'only_in_ground'.

    Min and max corridor length.

    Min and max room size with X, Y, Z components.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Add:

    Bool for 'only_in_ground'.

    Min and max corridor length.

    Min and max room size with X, Y, Z components.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Bool for 'only_in_ground'.

    Min and max corridor length.

    Min and max room size with X, Y, Z components.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Min and max corridor length.

    Min and max room size with X, Y, Z components.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Min and max room size with X, Y, Z components.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Min and max large room size with X, Y, Z components.

    

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    'only_in_ground = false' allows core mapgens to create structures

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    in air and water using dungeongen.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Corridor length parameters replace a fixed random range.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Room size parameters replace the former system where one parameter

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    'roomsize' was added to fixed random ranges.

    

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    All parameters are set for no change to current dungeon behaviour.

    

    Remove some now-redundant and long-unused code.

    Remove some now-redundant and long-unused code.

    Fix crash that can be caused by the shutdown command. (#5292)

    Fix wrong meta key in item meta on ItemStack construction

    Fix the documentation for `minetest.is_yes` (#5276)

    Fixes for colorwallmounted and colorfacedir nodes

    

    Correct node placement prediction for attached colorwallmounted nodes.

    Correct placement direction for colorfacedir and colorwallmounted nodes.

    Correct detatch mechanism for attached colorwallmounted nodes.

    Correct node placement prediction for attached colorwallmounted nodes.

    Correct placement direction for colorfacedir and colorwallmounted nodes.

    Correct detatch mechanism for attached colorwallmounted nodes.

    Correct placement direction for colorfacedir and colorwallmounted nodes.

    Correct detatch mechanism for attached colorwallmounted nodes.

    Correct detatch mechanism for attached colorwallmounted nodes.

    Voxelmanip: Do not emerge or blit to blocks over map gen limit

    

    Placing a structure that extends into mapblocks that extend past

    map_gen_limit causes a crash. For example a sapling growing at the

    world edge which adds leaves beyond the edge, or placing a structure

    using the lua voxelmanip, or placing a schematic or l-system tree.

    

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    Placing a structure that extends into mapblocks that extend past

    map_gen_limit causes a crash. For example a sapling growing at the

    world edge which adds leaves beyond the edge, or placing a structure

    using the lua voxelmanip, or placing a schematic or l-system tree.

    

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    map_gen_limit causes a crash. For example a sapling growing at the

    world edge which adds leaves beyond the edge, or placing a structure

    using the lua voxelmanip, or placing a schematic or l-system tree.

    

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    world edge which adds leaves beyond the edge, or placing a structure

    using the lua voxelmanip, or placing a schematic or l-system tree.

    

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    using the lua voxelmanip, or placing a schematic or l-system tree.

    

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    Do not run the 'load_if_inexistent' block of code if the mapblock

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    is over limit, this also marks the mapblock with the flag

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    VMANIP_BLOCK_DATA_INEXIST which later prevents blitting back those

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    mapblocks.

    

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    This fix therefore uses existing functionality by having the same

    effect as the 'load_if_inexistent' bool being false.

    effect as the 'load_if_inexistent' bool being false.

    Multiplayer menu: fix attempt to open nonexistant image

    

    Since local servers and local favorites have no ping value (these

    are only provided by the server) we shouldn't load a broken

    image filename.

    

    Fixes #5238

    Since local servers and local favorites have no ping value (these

    are only provided by the server) we shouldn't load a broken

    image filename.

    

    Fixes #5238

    are only provided by the server) we shouldn't load a broken

    image filename.

    

    Fixes #5238

    image filename.

    

    Fixes #5238

    Fixes #5238

    Statbars.lua: Cache enable_damage setting

    Fix not being able to damage players in minimal (#5266)

    Use the `ARRLEN` macro in more places and remove an unused macro. (#5260)

    Add support for the new arguments of `request_shutdown` to the `/shutdown` chatcommand. (#5252)

    Revert part of eb49009d023e6e3b5d59a97b8fb5fed5eee83296 (#5230)

    

    This reverts the removal of Droid Sans as fallback font. The

    license for this font used to be GPL2. I've updated the font

    files to Liberation 2.00, which are SIL, and do not require

    us to ship source code.

    

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    This reverts the removal of Droid Sans as fallback font. The

    license for this font used to be GPL2. I've updated the font

    files to Liberation 2.00, which are SIL, and do not require

    us to ship source code.

    

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    license for this font used to be GPL2. I've updated the font

    files to Liberation 2.00, which are SIL, and do not require

    us to ship source code.

    

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    files to Liberation 2.00, which are SIL, and do not require

    us to ship source code.

    

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    us to ship source code.

    

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    I've attempted to fix all the attribution and license strings,

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    and used the strings as provided by redhat for attribution

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    to make sure they're correct.

    

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    Last, I've removed a bunch of executable bits on files that do

    not need them.

    

    Fixes #5231

    not need them.

    

    Fixes #5231

    Fixes #5231

    Cavegen: Place correct biome surface in tunnel entrances

    

    Previously in tunnel entrance floors only a single biome 'top' node was

    placed and 'filler' nodes were missing.

    

    Place 'top' and 'filler' nodes in tunnel entrance floors with depths

    defined by the biome.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    Previously in tunnel entrance floors only a single biome 'top' node was

    placed and 'filler' nodes were missing.

    

    Place 'top' and 'filler' nodes in tunnel entrance floors with depths

    defined by the biome.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    placed and 'filler' nodes were missing.

    

    Place 'top' and 'filler' nodes in tunnel entrance floors with depths

    defined by the biome.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    Place 'top' and 'filler' nodes in tunnel entrance floors with depths

    defined by the biome.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    defined by the biome.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    In tunnel entrances under rivers 'riverbed' nodes are placed to the

    biome-defined depth.

    biome-defined depth.

    Objectpos over limit: Avoid crash caused by sector over limit

    

    Reduce the object limit by mapblock size, to avoid objects being

    added just inside the map generation limit but in a block and sector

    that extend beyond the map generation limit.

    

    Change notification of 'objectpos over limit' from red in-chat ERROR

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    Reduce the object limit by mapblock size, to avoid objects being

    added just inside the map generation limit but in a block and sector

    that extend beyond the map generation limit.

    

    Change notification of 'objectpos over limit' from red in-chat ERROR

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    added just inside the map generation limit but in a block and sector

    that extend beyond the map generation limit.

    

    Change notification of 'objectpos over limit' from red in-chat ERROR

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    that extend beyond the map generation limit.

    

    Change notification of 'objectpos over limit' from red in-chat ERROR

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    Change notification of 'objectpos over limit' from red in-chat ERROR

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    to in-terminal only WARNING, since this will happen often using mob

    mods near the world's edge.

    mods near the world's edge.

    Fix a small regression caused by e2ad76f.

    Fix >5 year old PlayerSAO deletion bug

    

    force_delete=true is usually set at shutdown in order to

    also remove PlayerSAOs, however when too many objects

    per block are detected force_delete is also set to true.

    This was intended only for the current loop iteration but

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    force_delete=true is usually set at shutdown in order to

    also remove PlayerSAOs, however when too many objects

    per block are detected force_delete is also set to true.

    This was intended only for the current loop iteration but

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    also remove PlayerSAOs, however when too many objects

    per block are detected force_delete is also set to true.

    This was intended only for the current loop iteration but

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    per block are detected force_delete is also set to true.

    This was intended only for the current loop iteration but

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    This was intended only for the current loop iteration but

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    obviously persisted to the next iterations thereby

    deleting all other remaining SAOs.

    deleting all other remaining SAOs.

    FreeType: address font license issues (#5230)

    

    It appears we were shipping font files without license text, and I

    had my doubts about the bitmap fonts being usable directly.

    

    This replaces existing TTF fonts with Apache-2.0 licensed fonts from

    chome core (Cousine, Arimo, Tinos). Include the full license file

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    It appears we were shipping font files without license text, and I

    had my doubts about the bitmap fonts being usable directly.

    

    This replaces existing TTF fonts with Apache-2.0 licensed fonts from

    chome core (Cousine, Arimo, Tinos). Include the full license file

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    had my doubts about the bitmap fonts being usable directly.

    

    This replaces existing TTF fonts with Apache-2.0 licensed fonts from

    chome core (Cousine, Arimo, Tinos). Include the full license file

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    This replaces existing TTF fonts with Apache-2.0 licensed fonts from

    chome core (Cousine, Arimo, Tinos). Include the full license file

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    chome core (Cousine, Arimo, Tinos). Include the full license file

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    for all three fonts.

    

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    The Lucida Sans font bitmap is removed entirely for non-freetype

    builds. There is therefore only mono fonts for non-freetype builds.

    builds. There is therefore only mono fonts for non-freetype builds.

    Lighting: Update lighting at block loading

    

    This commit updates mapblocks' light if necessary when they are loaded.

    This removes ghost lighting.

    This commit updates mapblocks' light if necessary when they are loaded.

    This removes ghost lighting.

    This removes ghost lighting.

    Mainmenu: Brighter text colours for readability

    Footsteps: Fix offset footstep and shallow water sound bugs

    

    Fix footstep sounds coming from nodes to either side when walking on a

    1 node wide row of nodebox slabs such as default:snow.

    Fix sand footsteps when swimming in 1 node deep water.

    

    Use a new function 'getFootstepNodePos()' instead of 'getStandingNodePos()'

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    Fix footstep sounds coming from nodes to either side when walking on a

    1 node wide row of nodebox slabs such as default:snow.

    Fix sand footsteps when swimming in 1 node deep water.

    

    Use a new function 'getFootstepNodePos()' instead of 'getStandingNodePos()'

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    1 node wide row of nodebox slabs such as default:snow.

    Fix sand footsteps when swimming in 1 node deep water.

    

    Use a new function 'getFootstepNodePos()' instead of 'getStandingNodePos()'

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    Fix sand footsteps when swimming in 1 node deep water.

    

    Use a new function 'getFootstepNodePos()' instead of 'getStandingNodePos()'

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    Use a new function 'getFootstepNodePos()' instead of 'getStandingNodePos()'

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    to avoid using a horizontally-offset 'sneak node' for sounds.

    

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    Sound is selected from the node BS * 0.05 below the player's feet, so

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    that 1/16th slabs will play the slab sound but 1/32nd slabs will not.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    If the player is not 'touching ground' the node detection position is

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    changed to BS * 0.5 below to preserve footstep sounds when landing after

    a jump or fall.

    a jump or fall.

    Plantlike: Fix visual_scale being applied squared

    

    This re-applies 2 commits that were reverted.

    

    Visual_scale was applied twice to plantlike by accident sometime between

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    This re-applies 2 commits that were reverted.

    

    Visual_scale was applied twice to plantlike by accident sometime between

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Visual_scale was applied twice to plantlike by accident sometime between

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    updated to a new value.

    Use tree to list mods rather than textlist

    Revert "Plantlike: Fix visual_scale being applied squared (#5115)"

    

    This reverts commit 953cbb3b15997a0e7c7c32af2365cb5046a9e476.

    This reverts commit 953cbb3b15997a0e7c7c32af2365cb5046a9e476.

    Revert "Plantlike visual scale: Send sqrt(visual_scale) to old clients"

    

    This reverts commit cdc538e0a242167cd7031d40670d2d4464b87f2c.

    This reverts commit cdc538e0a242167cd7031d40670d2d4464b87f2c.

    Add textures for air and ignore items (#5196)

    Correct lua_api.txt docs related to meta (#5198)

    Change default nodetimer_interval to 0.2s. (#5193)

    

    We want to reduce the chance that we get lots and lots of node

    timers all happening once a second, because we're better off doing

    small bits of work as they are available.

    

    Reducing this to 0.2 seconds will greatly reduce the total amount

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    We want to reduce the chance that we get lots and lots of node

    timers all happening once a second, because we're better off doing

    small bits of work as they are available.

    

    Reducing this to 0.2 seconds will greatly reduce the total amount

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    timers all happening once a second, because we're better off doing

    small bits of work as they are available.

    

    Reducing this to 0.2 seconds will greatly reduce the total amount

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    small bits of work as they are available.

    

    Reducing this to 0.2 seconds will greatly reduce the total amount

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    Reducing this to 0.2 seconds will greatly reduce the total amount

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    of nodetimers that elapse at the same instance, while not effecting

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    total work load. This results in a far better chance of the server

    keeping up with work loads.

    keeping up with work loads.

    Perform mesh animation only once per frame.

    OpenAL sound: Use a simpler distance model

    

    In createPlayingSoundAt(), AL_ROLLOFF_FACTOR is not set, so it has

    the default value of 1.0, this makes the equation of the currently

    used AL_EXPONENT_DISTANCE distance model identical to the equation

    of the simpler AL_INVERSE_DISTANCE distance model.

    

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    In createPlayingSoundAt(), AL_ROLLOFF_FACTOR is not set, so it has

    the default value of 1.0, this makes the equation of the currently

    used AL_EXPONENT_DISTANCE distance model identical to the equation

    of the simpler AL_INVERSE_DISTANCE distance model.

    

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    the default value of 1.0, this makes the equation of the currently

    used AL_EXPONENT_DISTANCE distance model identical to the equation

    of the simpler AL_INVERSE_DISTANCE distance model.

    

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    used AL_EXPONENT_DISTANCE distance model identical to the equation

    of the simpler AL_INVERSE_DISTANCE distance model.

    

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    of the simpler AL_INVERSE_DISTANCE distance model.

    

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    Using AL_INVERSE_DISTANCE means an exponent is not processed,

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    exponents are quite intensive to process.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    There is no change in sound attenuation behaviour.

    

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    The commented-out AL_ROLLOFF_FACTOR value is removed as it would

    now have a different effect if used.

    now have a different effect if used.

    No longer auto-generate a 'guest####' player name when name is empty

    

    You can't join most servers with a 'guest####' player name anyway so

    it's only logical to remove them.

    You can't join most servers with a 'guest####' player name anyway so

    it's only logical to remove them.

    it's only logical to remove them.

    Fix android build

    This fixes #5190

    Add ModMetadata API (#5131)

    

    * mod can create a ModMetadata object where store its values and retrieve it.

    * Modmetadata object can only be fetched at mod loading

    * Save when modified using same time as map interval or at server stop

    * add helper function to get mod storage path

    * ModMetadata has exactly same calls than all every other Metadata

    * mod can create a ModMetadata object where store its values and retrieve it.

    * Modmetadata object can only be fetched at mod loading

    * Save when modified using same time as map interval or at server stop

    * add helper function to get mod storage path

    * ModMetadata has exactly same calls than all every other Metadata

    * Modmetadata object can only be fetched at mod loading

    * Save when modified using same time as map interval or at server stop

    * add helper function to get mod storage path

    * ModMetadata has exactly same calls than all every other Metadata

    * Save when modified using same time as map interval or at server stop

    * add helper function to get mod storage path

    * ModMetadata has exactly same calls than all every other Metadata

    * add helper function to get mod storage path

    * ModMetadata has exactly same calls than all every other Metadata

    * ModMetadata has exactly same calls than all every other Metadata

    Fix incompatibility of ItemStack.to_table() introduced by stack meta

    Face shading: Add shade factor comments

    Add support for unix socket connection to redis (#5179)

    Prevent SIGFPE on entity tile loading issue. (#5178)

    

    While experimenting with entities I ran into this unresolvable

    error where the server is sending some texture that the client

    crashes on. The crash prevents the client from ever reconnecting,

    resulting in a server that has to use clearobjects.

    

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    While experimenting with entities I ran into this unresolvable

    error where the server is sending some texture that the client

    crashes on. The crash prevents the client from ever reconnecting,

    resulting in a server that has to use clearobjects.

    

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    error where the server is sending some texture that the client

    crashes on. The crash prevents the client from ever reconnecting,

    resulting in a server that has to use clearobjects.

    

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    crashes on. The crash prevents the client from ever reconnecting,

    resulting in a server that has to use clearobjects.

    

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    resulting in a server that has to use clearobjects.

    

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    We shouldn't crash but just ignore the object and move on.

    

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

        baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

        1744                                        u32 xscale = scaleto / dim.Width;

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

        (gdb) bt

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

        #0  0x00000000004dc0de in TextureSource::generateImagePart (this=this@entry=0x7118eb0, part_of_name="[applyfiltersformesh",

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

            baseimg=@0x7fffffffbe98: 0x9f1b010) at /home/sofar/git/minetest/src/client/tile.cpp:1744

    ```

    

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    After reconnecting, the client now can connect without issues

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    and displays an error message:

    

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    ERROR[Main]: generateImagePart(): Illegal 0 dimension for part_of_name="[applyfiltersformesh", cancelling.

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    ERROR[Main]: generateImage(): Failed to generate "[applyfiltersformesh"

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    ERROR[Main]: Irrlicht: Invalid size of image for OpenGL Texture.

    ```

    Improve mesh shading (#5172)

    Add per-stack descriptions using ItemStack Metadata

    Add ItemStack key-value meta storage

    Derive NodeMetaRef from MetaDataRef

    Make NodeMetaRef::getmeta a non-static member

    Derive NodeMetadata from Metadata

    Fix PlayerSAO deletion warning (0eede97af2927dcda3545192403b0a44f30bcd1f)

    Mgv6: Add fallback node for gravel

    

    Gravel now falls back to stone.

    Gravel is not a particularly fundamental node, allowing it to fall back

    to stone frees up subgames from having to include a gravel node.

    Non-blob-ore gravel is only present in mgv6 as extremely rare 'gravel

    biomes'.

    Gravel now falls back to stone.

    Gravel is not a particularly fundamental node, allowing it to fall back

    to stone frees up subgames from having to include a gravel node.

    Non-blob-ore gravel is only present in mgv6 as extremely rare 'gravel

    biomes'.

    Gravel is not a particularly fundamental node, allowing it to fall back

    to stone frees up subgames from having to include a gravel node.

    Non-blob-ore gravel is only present in mgv6 as extremely rare 'gravel

    biomes'.

    to stone frees up subgames from having to include a gravel node.

    Non-blob-ore gravel is only present in mgv6 as extremely rare 'gravel

    biomes'.

    Non-blob-ore gravel is only present in mgv6 as extremely rare 'gravel

    biomes'.

    biomes'.

    Mgv6: Add stairs to desert stone dungeons

    

    As with the other mapgens, now that wide stairs in dungeons are

    possible we can now finally add stairs to desert stone dungeons.

    Re-order some lines.

    As with the other mapgens, now that wide stairs in dungeons are

    possible we can now finally add stairs to desert stone dungeons.

    Re-order some lines.

    possible we can now finally add stairs to desert stone dungeons.

    Re-order some lines.

    Re-order some lines.

    MapgenBasic node resolver: Various fixes

    

    Add a fallback node for stair_desert_stone to avoid ignore placed

    in Minimal subgame desert dungeons.

    Don't allow river_water_source to fallback to water_source as river

    water needs to be non-renewable and have a short flow range.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    Add a fallback node for stair_desert_stone to avoid ignore placed

    in Minimal subgame desert dungeons.

    Don't allow river_water_source to fallback to water_source as river

    water needs to be non-renewable and have a short flow range.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    in Minimal subgame desert dungeons.

    Don't allow river_water_source to fallback to water_source as river

    water needs to be non-renewable and have a short flow range.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    Don't allow river_water_source to fallback to water_source as river

    water needs to be non-renewable and have a short flow range.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    water needs to be non-renewable and have a short flow range.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    Make stair_sandstonebrick fall back to sandstonebrick instead of

    sandstone.

    

    Re-order some lines.

    Add a comment.

    sandstone.

    

    Re-order some lines.

    Add a comment.

    Re-order some lines.

    Add a comment.

    Serverlist: Add ping indicators (#5164)

    Tell on_punch to expect a return value

    

    The return value should be interpreted as a boolean saying whether

    the lua on_punch function handled damage or the system needs to.

    The return value should be interpreted as a boolean saying whether

    the lua on_punch function handled damage or the system needs to.

    the lua on_punch function handled damage or the system needs to.

    Mgvalleys: Fix missing decorations and incorrect function order

    

    Fix missing decorations at horizontal chunk borders by adding

    'updateHeightmap()' after terrain generation.

    

    Swap order of 'calculateNoise' and 'calcBiomeNoise' because

    'calculateNoise' modifies the heat and humidity maps created in

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    Fix missing decorations at horizontal chunk borders by adding

    'updateHeightmap()' after terrain generation.

    

    Swap order of 'calculateNoise' and 'calcBiomeNoise' because

    'calculateNoise' modifies the heat and humidity maps created in

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    'updateHeightmap()' after terrain generation.

    

    Swap order of 'calculateNoise' and 'calcBiomeNoise' because

    'calculateNoise' modifies the heat and humidity maps created in

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    Swap order of 'calculateNoise' and 'calcBiomeNoise' because

    'calculateNoise' modifies the heat and humidity maps created in

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    'calculateNoise' modifies the heat and humidity maps created in

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    'calcBiomeNoise'.

    

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    Remove confusing comment, code block is not just for mods and

    seems essential for correct mapgen behaviour.

    seems essential for correct mapgen behaviour.

    Fix anticheat resetting client position after the client is teleported

    

    Previously, m_move_pool could accomodate the client moving from the new

    position to the old one, and the server accepted the client to go back

    to its old position. However, it couldn't then accomodate the client

    moving from its old to its new position, and therefore would reset position

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    Previously, m_move_pool could accomodate the client moving from the new

    position to the old one, and the server accepted the client to go back

    to its old position. However, it couldn't then accomodate the client

    moving from its old to its new position, and therefore would reset position

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    position to the old one, and the server accepted the client to go back

    to its old position. However, it couldn't then accomodate the client

    moving from its old to its new position, and therefore would reset position

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    to its old position. However, it couldn't then accomodate the client

    moving from its old to its new position, and therefore would reset position

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    moving from its old to its new position, and therefore would reset position

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    to the old position. Thus, by emptying m_move_pool after a teleport, the

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    server no longer accepts the client to go back to its old position. A

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    drawback is however that a laggy client *will* trigger a few

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    "moved_too_fast" anticheats before being told about its new position.

    

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    Don't report player cheated if caused by lag.

    

    Fixes #5118

    Fixes #5118

    Make facedir_to_dir and wallmounted_to_dir work with coloured nodes as well. (#5153)

    Fix fog weirdness (#5146)

    Plantlike visual scale: Send sqrt(visual_scale) to old clients

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    updated to a new value.

    Add multiply texture modifier

    

    Allows colorizing of textures using a color multiplication method.

    Allows colorizing of textures using a color multiplication method.

    Use fabs() instead of abs() (#5141)

    Re-add halo highlight (#5130)

    

    Due to a rebase mistake halo highlighting was disabled. This commit

    re-adds that feature.

    Due to a rebase mistake halo highlighting was disabled. This commit

    re-adds that feature.

    re-adds that feature.

    Add console height setting (#5136)

    Rename height to scale for openConsole() (#5139)

    

    For Game::openConsole() and GUIChatConsole::openConsole() the

    parameter name 'height' is misleading because it's actually a

    percentage of the screen/window height.

    For Game::openConsole() and GUIChatConsole::openConsole() the

    parameter name 'height' is misleading because it's actually a

    percentage of the screen/window height.

    parameter name 'height' is misleading because it's actually a

    percentage of the screen/window height.

    percentage of the screen/window height.

    Fix AIX threading build

    Fix synchronization issue at thread start

    

    If a newly started thread immediately exits then m_running would

    immediately be set to false again and the caller would be stuck

    waiting for m_running to become true forever.

    Since a mutex for synchronizing startup already exists we can

    simply move the while loop into it.

    

    see also: #5134 which introduced m_start_finished_mutex

    If a newly spawned thread called getThreadId or getThreadHandle before

    the spawning thread finished saving the thread handle, then the

    handle/id would be used uninitialized.  This would cause the threading

    tests to fail since isCurrentThread would return false, and if Minetest

    is built with C++11 support the std::thread object pointer would be

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    the spawning thread finished saving the thread handle, then the

    handle/id would be used uninitialized.  This would cause the threading

    tests to fail since isCurrentThread would return false, and if Minetest

    is built with C++11 support the std::thread object pointer would be

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    handle/id would be used uninitialized.  This would cause the threading

    tests to fail since isCurrentThread would return false, and if Minetest

    is built with C++11 support the std::thread object pointer would be

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    tests to fail since isCurrentThread would return false, and if Minetest

    is built with C++11 support the std::thread object pointer would be

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    is built with C++11 support the std::thread object pointer would be

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    dereferenced while ininitialized, causing a segmentation fault.

    

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    This fixes the issue by using a mutex to force the spawned thread to

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    wait for the spawning thread to finish initializing the thread object.

    

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    An alternative way to handle this would be to also set the thread

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    handle/id in the started thread but this wouldn't work for C++11

    builds because there's no way to get the partially constructed object.

    builds because there's no way to get the partially constructed object.

    from_table: Fix crash for missing inventory or field

    Make entity on_punch have same signature and behaviour as player on_punch

    Plantlike: Fix visual_scale being applied squared (#5115)

    

    Visual_scale was applied twice to plantlike by accident sometime between

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    Visual_scale was applied twice to plantlike by accident sometime between

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    2011 and 2013, squaring the requested scale value. Visual_scale is

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    correctly applied once in it's other uses in signlike and torchlike.

    

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Two lines of code are removed, they also had no effect for the vast

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    majority of nodes with the default visual_scale of 1.0.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    The texture continues to have it's base at ground level.

    

    Send sqrt(visual_scale) to old clients.

    

    Keep compatibility with protocol < 30 clients now that visual_scale

    is no longer applied twice to plantlike drawtype and mods are being

    updated to a new value.

    Implement player attribute backend (#4155)

    

    * This backend permit mods to store extra players attributes to a common interface.

    * Add the obj:set_attribute(attr, value) Lua call

    * Add the obj:get_attribute(attr) Lua call

    

    Examples:

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    * This backend permit mods to store extra players attributes to a common interface.

    * Add the obj:set_attribute(attr, value) Lua call

    * Add the obj:get_attribute(attr) Lua call

    

    Examples:

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    * Add the obj:set_attribute(attr, value) Lua call

    * Add the obj:get_attribute(attr) Lua call

    

    Examples:

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    * Add the obj:get_attribute(attr) Lua call

    

    Examples:

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    Examples:

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    * player:set_attribute("home:home", "10,25,-78")

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    * player:get_attribute("default:mana")

    

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    Attributes are saved as a json in the player file in extended_attributes

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    key

    

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    They are saved only if a modification on the attributes occurs and loaded

    when emergePlayer is called (they are attached to PlayerSAO).

    when emergePlayer is called (they are attached to PlayerSAO).

    Dungeongen: Fix selection of diagonal corridors

    

    The do .. while loop is waiting for both dir.X and dir.Z to be non-zero,

    so should continue to loop if either dir.X or dir.Z are zero. The brackets

    present suggest this was intended to be OR not AND.

    The do .. while loop is waiting for both dir.X and dir.Z to be non-zero,

    so should continue to loop if either dir.X or dir.Z are zero. The brackets

    present suggest this was intended to be OR not AND.

    so should continue to loop if either dir.X or dir.Z are zero. The brackets

    present suggest this was intended to be OR not AND.

    present suggest this was intended to be OR not AND.

    Dungeons: Add nodebox stairs to desert and sandstone dungeons

    

    Desert and sandstone dungeons have 2 node wide corridors. Previously,

    nodebox stairs were disabled because dungeon generation code did not

    support nodebox stairs wider than 1 node, now it does.

    

    Add 'stair desert stone' content id to MappgenBasic.

    

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    Desert and sandstone dungeons have 2 node wide corridors. Previously,

    nodebox stairs were disabled because dungeon generation code did not

    support nodebox stairs wider than 1 node, now it does.

    

    Add 'stair desert stone' content id to MappgenBasic.

    

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    nodebox stairs were disabled because dungeon generation code did not

    support nodebox stairs wider than 1 node, now it does.

    

    Add 'stair desert stone' content id to MappgenBasic.

    

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    support nodebox stairs wider than 1 node, now it does.

    

    Add 'stair desert stone' content id to MappgenBasic.

    

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    Add 'stair desert stone' content id to MappgenBasic.

    

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    Requires 'mapgen stair desert stone' to be added to Minetest Game.

    Fix after hardware node coloring (#5114)

    Dungeongen: Fix out-of-voxelmanip access segfault

    

    My recent dungeon commit allowed stairs to be placed across the full

    width of corridors, but some of the new node positions accessed were

    missing checks for being within the voxelmanip, causing occasional

    segfaults near dungeons with corridors wider than 1 node.

    

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    My recent dungeon commit allowed stairs to be placed across the full

    width of corridors, but some of the new node positions accessed were

    missing checks for being within the voxelmanip, causing occasional

    segfaults near dungeons with corridors wider than 1 node.

    

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    width of corridors, but some of the new node positions accessed were

    missing checks for being within the voxelmanip, causing occasional

    segfaults near dungeons with corridors wider than 1 node.

    

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    missing checks for being within the voxelmanip, causing occasional

    segfaults near dungeons with corridors wider than 1 node.

    

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    segfaults near dungeons with corridors wider than 1 node.

    

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    Add 'vm->m_area.contains(pos)' checks just before stair position

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    voxelmanip access. This allows an earlier check to be removed as it

    is now redundant.

    is now redundant.

    Block spam messages before calling on_chatmessage callbacks (#4805)

    

    Fixes #4799

    Fixes #4799

    Add smooth lighting for all nodes

    

    Note: Smooth lighting disables the mesh cache.

    Note: Smooth lighting disables the mesh cache.

    Wrap to positive degree values (#5106)

    Initialize TileAnimationParams to prevent crashes/bugs for legacy invocations of add_particle{,spawner} (fixes #5108)

    Zoom FOV: Reduce minimum zoom FOV to 7 degrees

    

    The default of 15 is unchanged.

    7 degrees is x10 magnification which is common for binoculars.

    Alter hardcoded limits in camera.cpp:

    Minimum 7 degrees.

    Maximum 160 degrees to match upper limits in advanced settings.

    The default of 15 is unchanged.

    7 degrees is x10 magnification which is common for binoculars.

    Alter hardcoded limits in camera.cpp:

    Minimum 7 degrees.

    Maximum 160 degrees to match upper limits in advanced settings.

    7 degrees is x10 magnification which is common for binoculars.

    Alter hardcoded limits in camera.cpp:

    Minimum 7 degrees.

    Maximum 160 degrees to match upper limits in advanced settings.

    Alter hardcoded limits in camera.cpp:

    Minimum 7 degrees.

    Maximum 160 degrees to match upper limits in advanced settings.

    Minimum 7 degrees.

    Maximum 160 degrees to match upper limits in advanced settings.

    Maximum 160 degrees to match upper limits in advanced settings.

    Dungeons: Support nodebox stairs wider than 1 node

    

    Previously, code did not support stair nodeboxes in corridors wider

    than 1 node.

    Make stair nodeboxes full width even in corridors with different

    widths in X and Z directions.

    Previously, code did not support stair nodeboxes in corridors wider

    than 1 node.

    Make stair nodeboxes full width even in corridors with different

    widths in X and Z directions.

    than 1 node.

    Make stair nodeboxes full width even in corridors with different

    widths in X and Z directions.

    Make stair nodeboxes full width even in corridors with different

    widths in X and Z directions.

    widths in X and Z directions.

    core: Add dir_to_yaw and yaw_to_dir helpers

    

    These are needed to go from things like entity yaw to a vector

    and vice versa.

    These are needed to go from things like entity yaw to a vector

    and vice versa.

    and vice versa.

    Vector: Add vector.sort(a, b): return box edges

    

    This function returns the box corners of the smallest box

    that includes the two given coordinates.

    This function returns the box corners of the smallest box

    that includes the two given coordinates.

    that includes the two given coordinates.

    Add hardware node coloring. Includes:

    - Increase ContentFeatures serialization version

    - Color property and palettes for nodes

    - paramtype2 = "color", "colored facedir" or "colored wallmounted"

    - Increase ContentFeatures serialization version

    - Color property and palettes for nodes

    - paramtype2 = "color", "colored facedir" or "colored wallmounted"

    - Color property and palettes for nodes

    - paramtype2 = "color", "colored facedir" or "colored wallmounted"

    - paramtype2 = "color", "colored facedir" or "colored wallmounted"

    Fix potential crash in chat handling (since 2f56a00d9eef82052614e5854a07b39b087efd0b)

    Remove os.exit from the Lua secure sandbox (#5090)

    

    os.exit will exit not using proper resource liberation paths.

    

    Mods should call the proper exit mod using our API

    os.exit will exit not using proper resource liberation paths.

    

    Mods should call the proper exit mod using our API

    Mods should call the proper exit mod using our API

    Add show_statusline_on_connect setting (#5084)

    

    Add show_statusline_on_connect setting

    Add show_statusline_on_connect setting

    Revert "Detach the player from entities on death." (#5087)

    Fix unknown command message not providing number of cmd

    Add Entity get_texture_mod() to Lua API

    Send texture modifier to clients connecting later too

    Send texture modifier to clients connecting later too

    Detach the player from entities on death. (#5077)

    Warning fix for 2ea60156437962d7d29d20606bf5d9189059f76b (#5082)

    

    Neither flag as force delete nor show the warning when mapblock is full and object is a player

    Neither flag as force delete nor show the warning when mapblock is full and object is a player

    Do not force deletion of players when mapblock is full (#5081)

    

    This fixes #4067

    This fixes #4067

    Remove `mathconstants.h` and use the correct way to get `M_PI` in MSVC. (#5072)

    Add chatcommand unregister and override API (#5076)

    

    Introduces two functions to unregister and override chatcommands.

    minetest.unregister_chatcommand("<name>") and

    minetest.override_chatcommand("<name>", {<redifinition>})

    Introduces two functions to unregister and override chatcommands.

    minetest.unregister_chatcommand("<name>") and

    minetest.override_chatcommand("<name>", {<redifinition>})

    minetest.unregister_chatcommand("<name>") and

    minetest.override_chatcommand("<name>", {<redifinition>})

    minetest.override_chatcommand("<name>", {<redifinition>})

    Fix MSVC build Build broken by 98e36d7

    Add particle animation, glow

    

    This is implemented by reusing and extending the

    TileAnimation code for the methods used by particles.

    This is implemented by reusing and extending the

    TileAnimation code for the methods used by particles.

    TileAnimation code for the methods used by particles.

    Add minetest.player_exists() (#5064)

    Add search to advanced settings (#4806)

    

    * Add search to advanced settings

    

    * Press enter again to go to next result

    

    * Use keyword based search, auto select best option

    * Add search to advanced settings

    

    * Press enter again to go to next result

    

    * Use keyword based search, auto select best option

    * Press enter again to go to next result

    

    * Use keyword based search, auto select best option

    * Use keyword based search, auto select best option

    Fix typo in alias for deprecated settexturemod

    Improve priv descriptions (#5047)

    Remove client-side chat prediction. (#5055)

    

    Network lag isn't really a big issue with chat and chat prediction makes writing mods harder.

    Network lag isn't really a big issue with chat and chat prediction makes writing mods harder.

    Adjust formspec spacing on the Client tab of the mainmenu

    Rename ObjectRef methods to be consistent and predictable

    Add keyword based search to serverlist

    Added lua tracebacks to some errors where you have been blind to what… (#5043)

    

    * Added lua tracebacks to some errors where you have been blind to what actually went wrong

    * Added lua tracebacks to some errors where you have been blind to what actually went wrong

    Documentation: Correct biome heat / humidity noise parameters

    

    When the new set of biomes was added in MTGame the 'spread' for heat

    and humidity noise parameters was increased to 1000, i forgot to update

    settingtypes.txt and minetest.conf.

    When the new set of biomes was added in MTGame the 'spread' for heat

    and humidity noise parameters was increased to 1000, i forgot to update

    settingtypes.txt and minetest.conf.

    and humidity noise parameters was increased to 1000, i forgot to update

    settingtypes.txt and minetest.conf.

    settingtypes.txt and minetest.conf.

    Add color names from web page referenced in luaapi doc

    Only set material flag on rendered meshes (#5023)

    Fix build with freetype support disabled

    Fix another missing const reported by clang & @sfan5

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Fix missing const in ServerActiveObject::getStaticData

    

    This fixes #5033

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    This fixes #5033

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Organize defaultsettings.cpp

    Main menu tweaks

    Optimize SAO getStaticData by using std::string pointer instead of return copy

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Cleanup content_sao by factorizing similar code parts

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Enable mod security by default

    Meshes: Make object mesh face shading consistent

    

    Previously, object meshes had their North and South faces darker than

    East and West faces, the opposite of nodes and meshnodes. This commit

    corrects this.

    State constants as float-literals not double-literals.

    Simplify code.

    Add comment.

    Previously, object meshes had their North and South faces darker than

    East and West faces, the opposite of nodes and meshnodes. This commit

    corrects this.

    State constants as float-literals not double-literals.

    Simplify code.

    Add comment.

    East and West faces, the opposite of nodes and meshnodes. This commit

    corrects this.

    State constants as float-literals not double-literals.

    Simplify code.

    Add comment.

    corrects this.

    State constants as float-literals not double-literals.

    Simplify code.

    Add comment.

    State constants as float-literals not double-literals.

    Simplify code.

    Add comment.

    Simplify code.

    Add comment.

    Add comment.

    Make nametag removable with set_nametag_attributes (#5021)

    Cleanup some header inclusions to improve compilation times

    Performance fix + SAO factorization

    

    Original credits goes to @Rogier-5

    

    * Merge common attributes between LuaEntitySAO & PlayerSAO to UnitSAO

    * Make some functions const

    * Improve some lists performance by returning const ref

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Original credits goes to @Rogier-5

    

    * Merge common attributes between LuaEntitySAO & PlayerSAO to UnitSAO

    * Make some functions const

    * Improve some lists performance by returning const ref

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    * Merge common attributes between LuaEntitySAO & PlayerSAO to UnitSAO

    * Make some functions const

    * Improve some lists performance by returning const ref

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    * Make some functions const

    * Replace ClientMediaDownloader std::unordered_map with std::map

    * Improve some lists performance by returning const ref

    

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Signed-off-by: Loic Blot <loic.blot@unix-experience.fr>

    Add staticdata parameter to add_entity (#5009)

    

    * Add staticdata parameter to add_entity

    * Add add_entity_with_staticdata to core.features

    * Add staticdata parameter to add_entity

    * Add add_entity_with_staticdata to core.features

    * Add add_entity_with_staticdata to core.features

    Environment & IGameDef code refactoring (#4985)

    

    * Environment code refactoring

    * Cleanup includes & class declarations in client & server environment to improve build speed

    * ServerEnvironment::m_gamedef is now a pointer to Server instead of IGameDef, permitting to cleanup many casts.

    * Cleanup IGameDef

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Environment code refactoring

    * Cleanup includes & class declarations in client & server environment to improve build speed

    * ServerEnvironment::m_gamedef is now a pointer to Server instead of IGameDef, permitting to cleanup many casts.

    * Cleanup IGameDef

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Cleanup includes & class declarations in client & server environment to improve build speed

    * ServerEnvironment::m_gamedef is now a pointer to Server instead of IGameDef, permitting to cleanup many casts.

    * Cleanup IGameDef

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * ServerEnvironment::m_gamedef is now a pointer to Server instead of IGameDef, permitting to cleanup many casts.

    * Cleanup IGameDef

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Cleanup IGameDef

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

      * Move ITextureSource* IGameDef::getTextureSource() to Client only.

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

      * Also move ITextureSource *IGameDef::tsrc() helper

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

      * drop getShaderSource, getSceneManager, getSoundManager & getCamera abstract call

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

      * drop unused emerge() call

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

      * cleanup server unused functions (mentionned before)

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Drop one unused parameter from ContentFeatures::updateTextures

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * move checkLocalPrivilege to Client

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Remove some unnecessary casts

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * create_formspec_menu: remove IWritableTextureSource pointer, as client already knows it

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Fix some comments

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Change required IGameDef to Server/Client pointers

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Previous change that game.cpp sometimes calls functions with Client + InventoryManager + IGameDef in same functions but it's the same objects

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * Remove duplicate Client pointer in GUIFormSpecMenu::GUIFormSpecMenu

    * drop ClientMap::sectorWasDrawn which is unused

    * drop ClientMap::sectorWasDrawn which is unused

    support older PostGreSQL versions (#4999)

    

    * support older PostGreSQL versions

    * documentation accuracy

    

    * improve performance by affecting less rows in UPDATE queries

    * support older PostGreSQL versions

    * documentation accuracy

    

    * improve performance by affecting less rows in UPDATE queries

    * documentation accuracy

    

    * improve performance by affecting less rows in UPDATE queries

    * improve performance by affecting less rows in UPDATE queries

    builtin/.../falling.lua: Avoid crash when hitting unknown nodes

    Map generation limit: Cache as 'const' not 'const static'

    Map generation limit: Fix checks for block/sector over-limit

    

    Fix the maths that check if any part of a mapblock or sector is over the

    set map_generation_limit.

    Therefore avoid the loading of any over-limit blocks that were previously

    generated when map_generation_limit was larger. The set limit can vary

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    Fix the maths that check if any part of a mapblock or sector is over the

    set map_generation_limit.

    Therefore avoid the loading of any over-limit blocks that were previously

    generated when map_generation_limit was larger. The set limit can vary

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    set map_generation_limit.

    Therefore avoid the loading of any over-limit blocks that were previously

    generated when map_generation_limit was larger. The set limit can vary

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    Therefore avoid the loading of any over-limit blocks that were previously

    generated when map_generation_limit was larger. The set limit can vary

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    generated when map_generation_limit was larger. The set limit can vary

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    for a world because it is not yet a per-world mapgen parameter, even when

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    it is sometimes it will be changed deliberately.

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    Therefore avoid a player being returned to world centre if they re-enter

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    a world while being over-limit.

    

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    Fix the createSector() crash caused by a mob spawning over-limit in an

    over-limit mapblock

    over-limit mapblock

    Minor: Fix indentation in serverenvironment.cpp

    Move ServerEnvironment to dedicated cpp/header files

    

    * also cleanup some unneeded inclusions

    * also cleanup some unneeded inclusions

    Move ClientEnvironment to dedicated cpp/header files

    Get neighbor from same map block if possible in ABMHandler (#4998)

    Make column alignment consistent in advanced settings (#5004)

    Revert "Extend minetest.is_yes()"

    

    This reverts commit c435eabf3ffb77eab955d5faeb5450da1befc149.

    This reverts commit c435eabf3ffb77eab955d5faeb5450da1befc149.

    Extend minetest.is_yes()

    README.txt: Update the License to 2010-2017

    lua_api.txt: Add registered_chatcommands to global tables

    Add raycast.cpp and tileanimation.cpp to Android.mk

    Expose and document chatcommands as minetest.registered_chatcommands

    Fixes for using std:vector in ABMHander and further perf improvements

    Use std::vector instead of std::map in class ABMHandler

    Improve getPointedThing() (#4346)

    

    * Improved getPointedThing()

    

    The new algorithm checks every node exactly once.

    Now the point and normal vector of the collision is also returned in the

    PointedThing (currently they are not used outside of the function).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    * Improved getPointedThing()

    

    The new algorithm checks every node exactly once.

    Now the point and normal vector of the collision is also returned in the

    PointedThing (currently they are not used outside of the function).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    The new algorithm checks every node exactly once.

    Now the point and normal vector of the collision is also returned in the

    PointedThing (currently they are not used outside of the function).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    Now the point and normal vector of the collision is also returned in the

    PointedThing (currently they are not used outside of the function).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    PointedThing (currently they are not used outside of the function).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    Now the CNodeDefManager keeps the union of all possible nodeboxes, so

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    the raycast won't miss any nodes. Also if there are only small

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    nodeboxes, getPointedThing() is exceptionally fast.

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    Also adds unit test for VoxelLineIterator.

    

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    * Cleanup, code move

    

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    This commit moves getPointedThing() and

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    Client::getSelectedActiveObject() to ClientEnvironment.

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    The map nodes now can decide which neighbors they are connecting to

    (MapNode::getNeighbors()).

    (MapNode::getNeighbors()).

    Travis: Build server too for UNIX

    Pull occlusion check out of loop, and minor code cleanups.

    Fix display gamma documentation

    

    Overlooked in #4873

    Overlooked in #4873

    Add 2D sheet animation for nodes

    Added "[sheet" to the texture special commands.

    

    "[sheet:WxH:X,Y" assumes the base image is a tilesheet with W*H tiles

    on it and crops to the tile at position X,Y.  Basically it works

    like "[verticalframe" but in 2D.

    

    For testing, I combined the four default_chest images into one.

    "[sheet:WxH:X,Y" assumes the base image is a tilesheet with W*H tiles

    on it and crops to the tile at position X,Y.  Basically it works

    like "[verticalframe" but in 2D.

    

    For testing, I combined the four default_chest images into one.

    on it and crops to the tile at position X,Y.  Basically it works

    like "[verticalframe" but in 2D.

    

    For testing, I combined the four default_chest images into one.

    like "[verticalframe" but in 2D.

    

    For testing, I combined the four default_chest images into one.

    For testing, I combined the four default_chest images into one.

    Move TileAnimation code to seperate file

    Fix non reverted change on TOSERVER_BREATH compat

    Breath cheat fix: server side

    

    Breath is now handled server side. Changing this behaviour required some modifications to core:

    

    * Ignore TOSERVER_BREATH package, marking it as obsolete

    * Clients doesn't send the breath to server anymore

    * Use PlayerSAO pointer instead of peer_id in Server::SendPlayerBreath to prevent a useless lookup (little perf gain)

    * drop a useless static_cast in emergePlayer

    Breath is now handled server side. Changing this behaviour required some modifications to core:

    

    * Ignore TOSERVER_BREATH package, marking it as obsolete

    * Clients doesn't send the breath to server anymore

    * Use PlayerSAO pointer instead of peer_id in Server::SendPlayerBreath to prevent a useless lookup (little perf gain)

    * drop a useless static_cast in emergePlayer

    * Ignore TOSERVER_BREATH package, marking it as obsolete

    * Clients doesn't send the breath to server anymore

    * Use PlayerSAO pointer instead of peer_id in Server::SendPlayerBreath to prevent a useless lookup (little perf gain)

    * drop a useless static_cast in emergePlayer

    * Clients doesn't send the breath to server anymore

    * Use PlayerSAO pointer instead of peer_id in Server::SendPlayerBreath to prevent a useless lookup (little perf gain)

    * drop a useless static_cast in emergePlayer

    * Use PlayerSAO pointer instead of peer_id in Server::SendPlayerBreath to prevent a useless lookup (little perf gain)

    * drop a useless static_cast in emergePlayer

    * drop a useless static_cast in emergePlayer

    Fix /grant & /revoke not working with custom auth handler (#4974)

    

    core.auth_table is not supposed to be accessed directly.

    core.auth_table is not supposed to be accessed directly.

    Fix interact range check (thanks to @lhofhansl)

    Use the outgoing split sequence number for every outgoing packet (#4864)

    

    (instead of the last incoming sequence number...)

    

    Fixes #4848

    (instead of the last incoming sequence number...)

    

    Fixes #4848

    Fixes #4848

    Buildbot: Update Gettext version (#4971)

    Redo light.cpp.

    

    Remake the light_decode_table.

    

    The table starts out without pre-filled in values since those

    are always discarded by the code apparently. We calculate a

    pseudo curve with gamma power function, and then apply a new

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    Remake the light_decode_table.

    

    The table starts out without pre-filled in values since those

    are always discarded by the code apparently. We calculate a

    pseudo curve with gamma power function, and then apply a new

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    The table starts out without pre-filled in values since those

    are always discarded by the code apparently. We calculate a

    pseudo curve with gamma power function, and then apply a new

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    are always discarded by the code apparently. We calculate a

    pseudo curve with gamma power function, and then apply a new

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    pseudo curve with gamma power function, and then apply a new

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    adjustment table.

    

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    The adjustment table is setup to make the default gamma of 2.2

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    look decent: not too dark at light level 3 or so, but too dark

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    at 1 and below to be playable. The curve is much smoother than

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    before and looks reasonable at the whole range, offering a

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    pleasant decay of light levels away from lights.

    

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    The `display_gamma` setting now actually does something logical:

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    the game is darker at values below 2.2, and brighter at values

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    above 2.2. At 3.0, the game is very bright, but still has a good

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    light scale. At 1.1 or so, the bottom 5 light levels are virtually

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    black, but you can still see enough detail at light levels 7-8,

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    so the range and spread is adequate.

    

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    I must add that my monitor is somewhat dark to begin with, since

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    I have a `hc` screen that doesn't dynamic range colors or try to

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    pull up `black` pixels for me (it is tuned for accurate color and

    light levels), so this should look even better on more dynamic

    display tunings.

    light levels), so this should look even better on more dynamic

    display tunings.

    display tunings.

    Dont compare short with bool (#4963)

    

    Fixes a compiler warning on MSVC

    Fixes a compiler warning on MSVC

    Irrlicht 1.9 support

    Various anticheat improvements

    

    * Calculate maximum interact distance from wielded tool

    * New "interacted_while_dead" cheat_type for the Lua API

    * Disallow dropping items while dead

    * Move player to spawn before resurrecting them

    * Calculate maximum interact distance from wielded tool

    * New "interacted_while_dead" cheat_type for the Lua API

    * Disallow dropping items while dead

    * Move player to spawn before resurrecting them

    * New "interacted_while_dead" cheat_type for the Lua API

    * Disallow dropping items while dead

    * Move player to spawn before resurrecting them

    * Disallow dropping items while dead

    * Move player to spawn before resurrecting them

    * Move player to spawn before resurrecting them

    Add gradle wrapper (#4954)

    

    Gradle wrapper permit to use multiple gradle versions across OS versions

    Gradle wrapper permit to use multiple gradle versions across OS versions

    Update Android build tools to latest version (#4872)

    Minimal game: Use field 'tiles' instead of 'tile_images'

    Move PP() and PP2() macros to basic_macros.h

    

    Instead of redefining them everywhere.

    Instead of redefining them everywhere.

    Process ABMs in a spherical volume instead of cubic

    

    Increase active_block_range default to a 3 mapblock radius.

    Increase active_block_range default to a 3 mapblock radius.

    Shaders: Remove unnecessary 'if' statements

    

    Pull if GENERATE_NORMALMAPS == 1 into the template to avoid evaluating

    it for each fragment.

    Remove if (fogDistance != 0.0).

    Pull if GENERATE_NORMALMAPS == 1 into the template to avoid evaluating

    it for each fragment.

    Remove if (fogDistance != 0.0).

    it for each fragment.

    Remove if (fogDistance != 0.0).

    Remove if (fogDistance != 0.0).

    Make minetest abort on lua panic

    

    Currently, lua does a regular exit() after a lua panic, which can make

    a problem hard to debug. Invoking FATAL_ERROR() instead will print

    some useful information, and abort() minetest, so that a debugger can

    be used to analyze the situation.

    Currently, lua does a regular exit() after a lua panic, which can make

    a problem hard to debug. Invoking FATAL_ERROR() instead will print

    some useful information, and abort() minetest, so that a debugger can

    be used to analyze the situation.

    a problem hard to debug. Invoking FATAL_ERROR() instead will print

    some useful information, and abort() minetest, so that a debugger can

    be used to analyze the situation.

    some useful information, and abort() minetest, so that a debugger can

    be used to analyze the situation.

    be used to analyze the situation.

    Continue with 0.4.15-dev

    Bump version to 0.4.15

    Final update to credits before release

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 59.2% (544 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 99.5% (914 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 94.8% (871 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 84.5% (776 of 918 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 85.2% (783 of 918 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Android: Workarounds for Googles completely broken NDK

    Android: update curl and libgmp

    Builtin/../falling.lua: Avoid crash when object pos over limit

    

    If the object pos is over limit, 'add entity' will not add an entity,

    causing 'obj' to be nil.

    If the object pos is over limit, 'add entity' will not add an entity,

    causing 'obj' to be nil.

    causing 'obj' to be nil.

    Don't ship with broken languages (#4940)

    Disable mod security by default (closes #4944)

    Fix warning reported by clang (possible bug in Settings lua api)

    Correct Swahili translations (#4939)

    Limit drawing rect of selected item to viewport size (fixes #4341)

    Security: Fix resolving of some relative paths

    

    Trying to resolve a path with RemoveRelativePathComponents that can't

    be resolved without leaving leading parent components (e.g. "../worlds/foo"

    or "bar/../../worlds/foo") will fail.  To work around this, we leave

    the relative components and simply remove the trailing components one

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    Trying to resolve a path with RemoveRelativePathComponents that can't

    be resolved without leaving leading parent components (e.g. "../worlds/foo"

    or "bar/../../worlds/foo") will fail.  To work around this, we leave

    the relative components and simply remove the trailing components one

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    be resolved without leaving leading parent components (e.g. "../worlds/foo"

    or "bar/../../worlds/foo") will fail.  To work around this, we leave

    the relative components and simply remove the trailing components one

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    or "bar/../../worlds/foo") will fail.  To work around this, we leave

    the relative components and simply remove the trailing components one

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    the relative components and simply remove the trailing components one

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    at a time, and bail out when we find a parent component.  This will

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    still fail for paths like "worlds/foo/noexist/../auth.txt" (the path

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    before the last parent component must not exist), but this is fine

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    since you won't be able to open a file with a path like that anyways

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    (the O.S. will determine that the path doesn't exist.

    Try `cat /a/../etc/passwd`).

    Try `cat /a/../etc/passwd`).

    Fix RemoveRelatvePathComponents

    

    This used to return "/foo" for "../foo" when it should return the enpty

    string (i.e., error removing all relative components).

    This used to return "/foo" for "../foo" when it should return the enpty

    string (i.e., error removing all relative components).

    string (i.e., error removing all relative components).

    Mod security: Allow read-only access to all mod paths

    Fix occlusion culling, again (#4930)

    Fix occlusing counting (#4922)

    Fix unnecessary block loading (#4847)

    

    This commit makes the game load blocks only if they are not in the

    memory.

    This commit makes the game load blocks only if they are not in the

    memory.

    memory.

    Mapgen: Make mgv7 the default in UI

    

    The actual menu default comes from defaultsettings.cpp.

    The actual menu default comes from defaultsettings.cpp.

    Fix build with gettext enabled

    Cavegen: Wider tunnels in mgflat, mgfractal, mgvalleys

    

    As mgv7 is now the default mapgen i re-checked its tunnel width on request,

    discovered they needed to be wider, and have made this change.

    This commit widens the identical 3D noise tunnels in the other mapgens in

    exactly the same way.

    As mgv7 is now the default mapgen i re-checked its tunnel width on request,

    discovered they needed to be wider, and have made this change.

    This commit widens the identical 3D noise tunnels in the other mapgens in

    exactly the same way.

    discovered they needed to be wider, and have made this change.

    This commit widens the identical 3D noise tunnels in the other mapgens in

    exactly the same way.

    This commit widens the identical 3D noise tunnels in the other mapgens in

    exactly the same way.

    exactly the same way.

    Run updatepo.sh

    Update minetest.conf.example and settings_translation_file.cpp

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 38.1% (350 of 918 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (908 of 918 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 94.7% (870 of 918 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 26.2% (241 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 56.3% (517 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 56.2% (516 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 56.1% (515 of 918 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.4% (638 of 918 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 58.6% (538 of 918 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 58.6% (538 of 918 strings)

    

    This is a merger of 2 commits.

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 58.6% (538 of 918 strings)

    

    This is a merger of 2 commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (918 of 918 strings)

    This is a merger of 4 commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 97.7% (897 of 918 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 59.5% (547 of 918 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 41.6% (382 of 918 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 41.2% (379 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 53.8% (494 of 918 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 5.6% (52 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 5.6% (52 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 1.5% (14 of 918 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 1.5% (14 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 3.3% (31 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 2.8% (26 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 2.7% (25 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 1.7% (16 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 1.6% (15 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 1.5% (14 of 918 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 1.4% (13 of 918 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 51.0% (469 of 918 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 58.0% (533 of 918 strings)

    This is a merger of 2 commits.

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 100.0% (918 of 918 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 97.0% (891 of 918 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 46.0% (423 of 918 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 43.6% (401 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 57.8% (531 of 918 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 49.4% (454 of 918 strings)

    This is a merger of 2 commits.

    Translated using Weblate (Swahili)

    

    Currently translated at 99.8% (917 of 918 strings)

    

    This is a merger of 3 commits.

    Currently translated at 99.8% (917 of 918 strings)

    

    This is a merger of 3 commits.

    This is a merger of 3 commits.

    Added translation using Weblate (Swahili)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 66.7% (613 of 918 strings)

    

    There is no need to specify that a mod is an extra.

    There is no need to specify that a mod is an extra.

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 84.2% (773 of 918 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 73.0% (671 of 918 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 73.0% (671 of 918 strings)

    This is a merger of 3 commits.

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 29.5% (271 of 918 strings)

    Mgv7: Change default cave width to 0.09

    Fix segfault on startup error on Android

    Fix camera jumping on Android when panning past 0/360 mark

    Mod dependency lists: Should have platform-independent line breaking

    

    This fixes a bug existing in modmgr.lua as reported by @Wuzzy2 which

    caused the mod dependency list to glitch if input was using a line

    terminator different than the OS default.

    

    The C++ code does not need any changes as it already trims CR

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    This fixes a bug existing in modmgr.lua as reported by @Wuzzy2 which

    caused the mod dependency list to glitch if input was using a line

    terminator different than the OS default.

    

    The C++ code does not need any changes as it already trims CR

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    caused the mod dependency list to glitch if input was using a line

    terminator different than the OS default.

    

    The C++ code does not need any changes as it already trims CR

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    terminator different than the OS default.

    

    The C++ code does not need any changes as it already trims CR

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    The C++ code does not need any changes as it already trims CR

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    occurrences on platforms on which the line termination sequence is LF.

    

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    Taken into account the size of the depends.txt files used, this should

    not introduce a noticeable performance regression.

    

    Fixes #4720

    not introduce a noticeable performance regression.

    

    Fixes #4720

    Fixes #4720

    Setting limits: Fix message text in advanced settings tab

    

    It would complain that the value should be higher than the lower

    bound, when it should be higher than or equal to the lower bound.

    

    Similar issue for the upper bound.

    It would complain that the value should be higher than the lower

    bound, when it should be higher than or equal to the lower bound.

    

    Similar issue for the upper bound.

    bound, when it should be higher than or equal to the lower bound.

    

    Similar issue for the upper bound.

    Similar issue for the upper bound.

    View range: Set maximum to 4000 nodes

    

    The network protocol does not support larger than 255 mapblocks.

    The network protocol does not support larger than 255 mapblocks.

    Mapgen: Make mgv7 the default mapgen

    Fix computation of viewing range (in blocks) sent to server (#4882)

    

    Fixes #4878

    

    Also remove an artificial viewing range reduction that

    (presumably) was added to compensate for miscomputed

    viewing ranges, and that doesn't seem to be needed any

    more (thanks to lhofhansl).

    Fixes #4878

    

    Also remove an artificial viewing range reduction that

    (presumably) was added to compensate for miscomputed

    viewing ranges, and that doesn't seem to be needed any

    more (thanks to lhofhansl).

    Also remove an artificial viewing range reduction that

    (presumably) was added to compensate for miscomputed

    viewing ranges, and that doesn't seem to be needed any

    more (thanks to lhofhansl).

    (presumably) was added to compensate for miscomputed

    viewing ranges, and that doesn't seem to be needed any

    more (thanks to lhofhansl).

    viewing ranges, and that doesn't seem to be needed any

    more (thanks to lhofhansl).

    more (thanks to lhofhansl).

    Fix sqlite databases being read-only on 64bit Android by patching sqlite (#4871)

    

    Fixes #4121

    Fixes #4121

    Buildbot: Update LuaJIT version

    Simple decorations: Fix range check for deco->deco_param2

    

    Allow any int value, and properly range check it before casting.

    Allow any int value, and properly range check it before casting.

    Android: fix build and update deps

    Update credits (#4827)

    

    Update credits

    Update credits

    

    The following algorithm was used when selecting contributors:

    

    * Every non-trivial contributor from the current release,

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    Simple deco: Allow setting param2 value on placement

    

    Schematics can already be placed with a param2 value, but not

    simple 1-node plant decorations of the simple type.

    

    This adds a `param2` field to the simple deco type that is

    checked to be between 0 and 255, and put to the placed node

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    Schematics can already be placed with a param2 value, but not

    simple 1-node plant decorations of the simple type.

    

    This adds a `param2` field to the simple deco type that is

    checked to be between 0 and 255, and put to the placed node

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    simple 1-node plant decorations of the simple type.

    

    This adds a `param2` field to the simple deco type that is

    checked to be between 0 and 255, and put to the placed node

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    This adds a `param2` field to the simple deco type that is

    checked to be between 0 and 255, and put to the placed node

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    checked to be between 0 and 255, and put to the placed node

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    at mapgen.

    

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    This can be used to put a degrotate value in, or e.g. a fill

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    value for leveltype nodes, or a place_param2 value at mapgen

    placement, or vary the shape of meshoptions plantlike drawtype.

    placement, or vary the shape of meshoptions plantlike drawtype.

    Fog: Make fraction of visible distance at which fog starts configurable

    

    Optimise the fetching of global settings 'camera_smoothing',

    'cinematic' and 'cinematic_camera_smoothing'.

    Cache 'cam_smoothing'.

    Optimise the fetching of global settings 'camera_smoothing',

    'cinematic' and 'cinematic_camera_smoothing'.

    Cache 'cam_smoothing'.

    'cinematic' and 'cinematic_camera_smoothing'.

    Cache 'cam_smoothing'.

    Cache 'cam_smoothing'.

    Liquids: Update flow on block load

    

    When loading a block add liquid-nodes that might flow away or spread to

    neighbours to the transforming_liquid queue.

    When loading a block add liquid-nodes that might flow away or spread to

    neighbours to the transforming_liquid queue.

    neighbours to the transforming_liquid queue.

    Liquids: Preserve flow state if 'ignore' is a neighbour

    

    Prevent waterfalls from falling down or streams from flowing away when the

    source node is in an unloaded block - Nodes near a CONTENT_IGNORE node will

    be interpreted as if the ignored node is a liquid node that just supports

    the current state of the nodes in question.

    Prevent waterfalls from falling down or streams from flowing away when the

    source node is in an unloaded block - Nodes near a CONTENT_IGNORE node will

    be interpreted as if the ignored node is a liquid node that just supports

    the current state of the nodes in question.

    source node is in an unloaded block - Nodes near a CONTENT_IGNORE node will

    be interpreted as if the ignored node is a liquid node that just supports

    the current state of the nodes in question.

    be interpreted as if the ignored node is a liquid node that just supports

    the current state of the nodes in question.

    the current state of the nodes in question.

    Map::isValidPosition: Return false instead of throwing exception

    Optimize block sent: Fix rendering issue

    Biomes: Increase heat and humidity noise spread to 1000

    

    To avoid smaller biomes when extra biomes are added to MTGame.

    The addition of bushes in MTGame grasslands makes wood resources easier

    to find and less distant, so slightly larger biomes are now acceptable,

    but also desirable to encourage travel and create more sense of adventure.

    To avoid smaller biomes when extra biomes are added to MTGame.

    The addition of bushes in MTGame grasslands makes wood resources easier

    to find and less distant, so slightly larger biomes are now acceptable,

    but also desirable to encourage travel and create more sense of adventure.

    The addition of bushes in MTGame grasslands makes wood resources easier

    to find and less distant, so slightly larger biomes are now acceptable,

    but also desirable to encourage travel and create more sense of adventure.

    to find and less distant, so slightly larger biomes are now acceptable,

    but also desirable to encourage travel and create more sense of adventure.

    but also desirable to encourage travel and create more sense of adventure.

    Don't send a join message in singleplayer mode.

    Fix incorrect docs about minetest.hud_replace_builtin (#4833)

    

    Fixes https://github.com/minetest/minetest/issues/4832

    Fixes https://github.com/minetest/minetest/issues/4832

    Very small documentation fix. (#4830)

    Lua_api.txt: Clarify use of looping sounds

    Mgv7 floatlands: Various improvements

    

    Floatland base terrain underside was too thin, causing excessive water

    leakage through tunnels under lakes, now make it thicker.

    Floatland mountain terrain had a rim 1 node thick which made it bare

    stone, now make it 2 nodes thick to merge with the floatland base

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    Floatland base terrain underside was too thin, causing excessive water

    leakage through tunnels under lakes, now make it thicker.

    Floatland mountain terrain had a rim 1 node thick which made it bare

    stone, now make it 2 nodes thick to merge with the floatland base

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    leakage through tunnels under lakes, now make it thicker.

    Floatland mountain terrain had a rim 1 node thick which made it bare

    stone, now make it 2 nodes thick to merge with the floatland base

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    Floatland mountain terrain had a rim 1 node thick which made it bare

    stone, now make it 2 nodes thick to merge with the floatland base

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    stone, now make it 2 nodes thick to merge with the floatland base

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    terrain rim and to have a layer of biome material.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    Make mountain terrain more exponentially shaped by altering the

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    exponent.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    Remove unnecessary and potentially ugly MYMAX() applied to

    n_base_height.

    n_base_height.

    Optimize/adjust blocks/ActiveObjects sent at the server based on client settings. (#4811)

    

    Optimize/adjust blocks and active blocks sent at the server based on client settings.

    Optimize/adjust blocks and active blocks sent at the server based on client settings.

    Allow restricting detached inventories to one player

    

    This combats the problem of sending the hundreds of

    "creative" / "armor" or whatever detached invs that

    exist on popular servers to each and every player

    on join or on change of said invs.

    This combats the problem of sending the hundreds of

    "creative" / "armor" or whatever detached invs that

    exist on popular servers to each and every player

    on join or on change of said invs.

    "creative" / "armor" or whatever detached invs that

    exist on popular servers to each and every player

    on join or on change of said invs.

    exist on popular servers to each and every player

    on join or on change of said invs.

    on join or on change of said invs.

    Limit light_source in the engine (#4814)

    

    Since light_source>15 causes crash, it must be limited.

    Since light_source>15 causes crash, it must be limited.

    Fix filepath > RemoveRelativePathComponent unittest

    

    (was broken by e4ee6548afd01040046ee3780d0fbb121d141251)

    (was broken by e4ee6548afd01040046ee3780d0fbb121d141251)

    Wieldhand: Allow overriding the hand

    Fix fs::RemoveRelativePathComponents for paths with a leading dot component

    

    Previously, paths like ./worlds would be resolved to /worlds since the

    leading dot was considered just as irrelevant as a dot in the middle of

    the path.

    Previously, paths like ./worlds would be resolved to /worlds since the

    leading dot was considered just as irrelevant as a dot in the middle of

    the path.

    leading dot was considered just as irrelevant as a dot in the middle of

    the path.

    the path.

    Fix secure io.lines

    

    It used to drop all of the return values from the

    insecure version of the function.

    It used to drop all of the return values from the

    insecure version of the function.

    insecure version of the function.

    Fix secure io.open without mode

    Make supplying empty formspec strings close the formspec (#4737)

    

    This will only happen if the formname matches or if formname is "".

    This will only happen if the formname matches or if formname is "".

    No functional changes. Credit gcu

    

    This merge doesn't make any functional changes. It's a trivial style fix so that @gregorycu can be dual credited along with shadowninja for PR #4800

    This merge doesn't make any functional changes. It's a trivial style fix so that @gregorycu can be dual credited along with shadowninja for PR #4800

    Fix superflous shader setting updates (#4800)

    

    This improves rendering performance by ~40%

    This improves rendering performance by ~40%

    Tool break: Reduce gain of break sounds

    Particles: Make attached particle spawners respect the parent's yaw

    

    Position, velocity and acceleration vectors of particles are rotated

    by the yaw of the parent object so that they are truly relative to it.

    Clarify new attached particle spawner behavior in lua_api.txt.

    Position, velocity and acceleration vectors of particles are rotated

    by the yaw of the parent object so that they are truly relative to it.

    Clarify new attached particle spawner behavior in lua_api.txt.

    by the yaw of the parent object so that they are truly relative to it.

    Clarify new attached particle spawner behavior in lua_api.txt.

    Clarify new attached particle spawner behavior in lua_api.txt.

    Builtin/../item: Enable tool breaking sounds

    

    If a tool wears out and is destroyed, it's itemstack count

    goes to 0, and we can optionally play a breaking sound.

    

    This patch implements playing a breaking sound when this

    occurs. Sounds need to be added to the tool itemdef

    registration as the sound name string in the .sound.breaks

    member.

    If a tool wears out and is destroyed, it's itemstack count

    goes to 0, and we can optionally play a breaking sound.

    

    This patch implements playing a breaking sound when this

    occurs. Sounds need to be added to the tool itemdef

    registration as the sound name string in the .sound.breaks

    member.

    goes to 0, and we can optionally play a breaking sound.

    

    This patch implements playing a breaking sound when this

    occurs. Sounds need to be added to the tool itemdef

    registration as the sound name string in the .sound.breaks

    member.

    This patch implements playing a breaking sound when this

    occurs. Sounds need to be added to the tool itemdef

    registration as the sound name string in the .sound.breaks

    member.

    occurs. Sounds need to be added to the tool itemdef

    registration as the sound name string in the .sound.breaks

    member.

    registration as the sound name string in the .sound.breaks

    member.

    member.

    Introduce builtin_shared and use it to fix #4778

    

    Fixes #4778 which was about the error:

    

    ServerError: Lua: Runtime error from mod '' in callback item_OnPlace():

    /usr/local/share/minetest/builtin/game/item.lua:278: attempt to call global 'check_attached_node' (a nil value)

    

    The issue was a regression of commit 649448a2a91fbf3e944b2f2e739f4e2292af1df0

    

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    Fixes #4778 which was about the error:

    

    ServerError: Lua: Runtime error from mod '' in callback item_OnPlace():

    /usr/local/share/minetest/builtin/game/item.lua:278: attempt to call global 'check_attached_node' (a nil value)

    

    The issue was a regression of commit 649448a2a91fbf3e944b2f2e739f4e2292af1df0

    

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    ServerError: Lua: Runtime error from mod '' in callback item_OnPlace():

    /usr/local/share/minetest/builtin/game/item.lua:278: attempt to call global 'check_attached_node' (a nil value)

    

    The issue was a regression of commit 649448a2a91fbf3e944b2f2e739f4e2292af1df0

    

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    /usr/local/share/minetest/builtin/game/item.lua:278: attempt to call global 'check_attached_node' (a nil value)

    

    The issue was a regression of commit 649448a2a91fbf3e944b2f2e739f4e2292af1df0

    

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    The issue was a regression of commit 649448a2a91fbf3e944b2f2e739f4e2292af1df0

    

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    "Rename nodeupdate and nodeupdate_single and make them part of the official API"

    Fix unexplained shader issue (glsl compiler bug??) (#4757)

    Lua_api.txt: Naming convention for custom item/entity fields

    

    Custom (non-engine) field names of items and entities are allowed.

    This is now documented in lua_api.txt. Field names beginning with

    an underscore are now reserved for mod use, the engine must not

    introduce any fields beginning with an underscore.

    Custom (non-engine) field names of items and entities are allowed.

    This is now documented in lua_api.txt. Field names beginning with

    an underscore are now reserved for mod use, the engine must not

    introduce any fields beginning with an underscore.

    This is now documented in lua_api.txt. Field names beginning with

    an underscore are now reserved for mod use, the engine must not

    introduce any fields beginning with an underscore.

    an underscore are now reserved for mod use, the engine must not

    introduce any fields beginning with an underscore.

    introduce any fields beginning with an underscore.

    Mgv7: Add optional floatlands, disabled by default

    Revert "Adding particle blend, glow and animation (#4705)"

    

    This reverts commit 93e3555eae2deaeca69ee252cfa9cc9c3e0e49ef.

    This reverts commit 93e3555eae2deaeca69ee252cfa9cc9c3e0e49ef.

    Adding particle blend, glow and animation (#4705)

    Rename nodeupdate and nodeupdate_single and make them part of the official API

    

    Now, the renamed forms of nodeupdate and nodeupdate_single are part of the official API.

    

    As nodeupdate has been used by Minetest Game and in mods despite of not

    being part of the official API, we ease the transition by still supporting

    it for the 0.4.15 release. After the release, the two functions can be removed.

    

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    Now, the renamed forms of nodeupdate and nodeupdate_single are part of the official API.

    

    As nodeupdate has been used by Minetest Game and in mods despite of not

    being part of the official API, we ease the transition by still supporting

    it for the 0.4.15 release. After the release, the two functions can be removed.

    

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    As nodeupdate has been used by Minetest Game and in mods despite of not

    being part of the official API, we ease the transition by still supporting

    it for the 0.4.15 release. After the release, the two functions can be removed.

    

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    being part of the official API, we ease the transition by still supporting

    it for the 0.4.15 release. After the release, the two functions can be removed.

    

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    it for the 0.4.15 release. After the release, the two functions can be removed.

    

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    The removal will not violate the stability promise, as that promise only

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    includes the official and documented API.

    

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    Also, make some formerly global functions local. They most likely haven't

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    been used by mods, therefore they won't get stubs with deprecation warnings,

    hard erroring directly.

    hard erroring directly.

    Install texture_packs.txt to DOCDIR

    Fix crash when attached object no longer exists

    

    Active objects that are attached to other objects are not safe

    from deletion. As a result, the parent object may have a reference

    to an id of a child's that no longer exists.

    

    If at some point an attempt is made to manipulate the child,

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    Active objects that are attached to other objects are not safe

    from deletion. As a result, the parent object may have a reference

    to an id of a child's that no longer exists.

    

    If at some point an attempt is made to manipulate the child,

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    from deletion. As a result, the parent object may have a reference

    to an id of a child's that no longer exists.

    

    If at some point an attempt is made to manipulate the child,

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    to an id of a child's that no longer exists.

    

    If at some point an attempt is made to manipulate the child,

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    If at some point an attempt is made to manipulate the child,

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    enviromment->getActiveObject(child-id) returns NULL. Using the

    NULL pointer causes the crash...

    NULL pointer causes the crash...

    Add control information to player interacts (#4685)

    Nodeupdate: Remove documentation in lua_api.txt

    

    In preparation for nodeupdate being renamed and made official API

    in future.

    In preparation for nodeupdate being renamed and made official API

    in future.

    in future.

    Halo: Highlight selected face

    

    This is a slightly modified and cleaned up version of #3774 by RealBadAngel.

    By sofar: Remove color change (just make it lighter) and some minor cleanups.

    This is a slightly modified and cleaned up version of #3774 by RealBadAngel.

    By sofar: Remove color change (just make it lighter) and some minor cleanups.

    By sofar: Remove color change (just make it lighter) and some minor cleanups.

    Fixed tooltips not resizing with \n (#4766)

    

    * Fixed tooltips not resizing with \n

    

    * Fixed it for 1.8.4 too.

    

    * Fixed not working with Freetype disabled.

    

    * Modified it to use Zeno-'s solution.

    * Fixed tooltips not resizing with \n

    

    * Fixed it for 1.8.4 too.

    

    * Fixed not working with Freetype disabled.

    

    * Modified it to use Zeno-'s solution.

    * Fixed it for 1.8.4 too.

    

    * Fixed not working with Freetype disabled.

    

    * Modified it to use Zeno-'s solution.

    * Fixed not working with Freetype disabled.

    

    * Modified it to use Zeno-'s solution.

    * Modified it to use Zeno-'s solution.

    Fix incorrect distance computation for visible blocks (#4765)

    

    The client would not compute the distance from the camera to

    to a mapblock correctly. The result was that blocks that were in

    view (i.e. not beyond the fog limit) would not be rendered.

    

    With the improved distance computation, a range adjustment that

    existed in clientiface.cpp is no longer required.

    The client would not compute the distance from the camera to

    to a mapblock correctly. The result was that blocks that were in

    view (i.e. not beyond the fog limit) would not be rendered.

    

    With the improved distance computation, a range adjustment that

    existed in clientiface.cpp is no longer required.

    to a mapblock correctly. The result was that blocks that were in

    view (i.e. not beyond the fog limit) would not be rendered.

    

    With the improved distance computation, a range adjustment that

    existed in clientiface.cpp is no longer required.

    view (i.e. not beyond the fog limit) would not be rendered.

    

    With the improved distance computation, a range adjustment that

    existed in clientiface.cpp is no longer required.

    With the improved distance computation, a range adjustment that

    existed in clientiface.cpp is no longer required.

    existed in clientiface.cpp is no longer required.

    Fix mob deserialization errors in the client (#4743)

    

    The problem was seen while using the mobf mod package.

    

    The problem happens when the server serializes entity attachments.

    Sometimes, such attachments no longer exist. The serialization code

    skips those. However, the total number of attachments was serialized

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    The problem was seen while using the mobf mod package.

    

    The problem happens when the server serializes entity attachments.

    Sometimes, such attachments no longer exist. The serialization code

    skips those. However, the total number of attachments was serialized

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    The problem happens when the server serializes entity attachments.

    Sometimes, such attachments no longer exist. The serialization code

    skips those. However, the total number of attachments was serialized

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    Sometimes, such attachments no longer exist. The serialization code

    skips those. However, the total number of attachments was serialized

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    skips those. However, the total number of attachments was serialized

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    earlier.  Therefore the client expects more than it gets, and logs a

    serialization error.

    serialization error.

    Occlusion culling: Add comments, minor code improvements

    

    Remove unnecessary code.

    Use '/ 2.0f' because endoff is a float.

    Remove unnecessary code.

    Use '/ 2.0f' because endoff is a float.

    Use '/ 2.0f' because endoff is a float.

    Conf.example: Document block_send_optimize_distance

    

    Add missing documentation.

    Add missing documentation.

    Sky: Draw bottom of the sky box in 'cloudy fog color'

    

    To be identical to the lower half of the skybox sides.

    Now needed as the skybox base is often seen due to increasingly vertical

    mapgens.

    To be identical to the lower half of the skybox sides.

    Now needed as the skybox base is often seen due to increasingly vertical

    mapgens.

    Now needed as the skybox base is often seen due to increasingly vertical

    mapgens.

    mapgens.

    Retrieve mapblocks from the server in a sphere, not a cube

    

    Use unused range argument in 'isBlockInSight()' to limit mapblock sends

    to a sphere of radius 'max block send distance'.

    Use unused range argument in 'isBlockInSight()' to limit mapblock sends

    to a sphere of radius 'max block send distance'.

    to a sphere of radius 'max block send distance'.

    Occlusion culling: Fix 'end offset' distance, half this for centre point

    

    'endoff', the maximum diagonal of a mapblock, was incorrectly calculated.

    Half this value for the centre point of the mapblock.

    'endoff', the maximum diagonal of a mapblock, was incorrectly calculated.

    Half this value for the centre point of the mapblock.

    Half this value for the centre point of the mapblock.

    Don't use reduced vertical limits for mapblock send and generation

    Builtin/../falling: Fix bugs caused by 'ignore' nodes

    

    Original commit by t4im, rebased and developed by paramat.

    Fix CONTENT_IGNORE being replaced by falling nodes or causing large

    areas of sand to collapse into itself.

    Format some conditional code for clarity.

    Add and clarify some comments.

    Original commit by t4im, rebased and developed by paramat.

    Fix CONTENT_IGNORE being replaced by falling nodes or causing large

    areas of sand to collapse into itself.

    Format some conditional code for clarity.

    Add and clarify some comments.

    Fix CONTENT_IGNORE being replaced by falling nodes or causing large

    areas of sand to collapse into itself.

    Format some conditional code for clarity.

    Add and clarify some comments.

    areas of sand to collapse into itself.

    Format some conditional code for clarity.

    Add and clarify some comments.

    Format some conditional code for clarity.

    Add and clarify some comments.

    Add and clarify some comments.

    Privileges: Only give singleplayer 4 basic privs

    

    - interact

    - shout

    - privs

    - basic_privs

    - interact

    - shout

    - privs

    - basic_privs

    - shout

    - privs

    - basic_privs

    - privs

    - basic_privs

    - basic_privs

    Windows: Add manifest file and set "High DPI Aware" true

    

    This resolves washy font and incorrect mouse handling on Windows if

    a screen with high DPI is used.

    This resolves washy font and incorrect mouse handling on Windows if

    a screen with high DPI is used.

    a screen with high DPI is used.

    MSVC: Generate debug information for release builds (#4674)

    

    Replace parameters with the equivalent /Ox

    Replace parameters with the equivalent /Ox

    Separate optional from required mod dependencies in main menu (#4721)

    

    * Separate optional from require dep's in main menu

    

    * Simplify modmgr mod dependency listing code

    * Separate optional from require dep's in main menu

    

    * Simplify modmgr mod dependency listing code

    * Simplify modmgr mod dependency listing code

    PlayerSAO saving fix (#4734)

    

    PlayerSAO::disconnected() function was historical and remove the link between SAO and RemotePlayer session. With previous attributes linked to RemotePlayer saving was working. But now attributes are read from SAO not RemotePlayer and the current serialize function verify SAO exists to save the player attributes.

    

    Because PlayerSAO::disconnected marks playersao for removal, only mark playerSAO for removal and let PlayerSAO::removingFromEnvironment do the correct saving behaviour and all the disconnection process instead of doing a partial removal and let the server loop doing the RemotePlayer cleanup and remove some saved attributes...

    PlayerSAO::disconnected() function was historical and remove the link between SAO and RemotePlayer session. With previous attributes linked to RemotePlayer saving was working. But now attributes are read from SAO not RemotePlayer and the current serialize function verify SAO exists to save the player attributes.

    

    Because PlayerSAO::disconnected marks playersao for removal, only mark playerSAO for removal and let PlayerSAO::removingFromEnvironment do the correct saving behaviour and all the disconnection process instead of doing a partial removal and let the server loop doing the RemotePlayer cleanup and remove some saved attributes...

    Because PlayerSAO::disconnected marks playersao for removal, only mark playerSAO for removal and let PlayerSAO::removingFromEnvironment do the correct saving behaviour and all the disconnection process instead of doing a partial removal and let the server loop doing the RemotePlayer cleanup and remove some saved attributes...

    Fix memory leak in ::safeLoadFile (#4730)

    Remove unused shader matrices. (#4723)

    Cycle directly to nothing shown instead of showing the profiler graph again

    

    Fix for previous commit.

    Fix for previous commit.

    Add debug priv, and allow player to display the scene as wire-frame. (#4709)

    Add minetest.get_server_uptime() function to Lua API (#4702)

    

    Add minetest.get_server_uptime() function to Lua API

    Add minetest.get_server_uptime() function to Lua API

    Add version API

    Lua voxelmanip: Add optional buffer param for 'get param2 data'

    

    Update lua_api.txt.

    Update lua_api.txt.

    Core.rotate_and_place: Remove unused call to get_look_pitch()

    Optionally disable optimization that causes underwater and cave rendering glitches. (#4686)

    Fix overloading problems mentioned by clang

    PlayerSAO/LocalPlayer refactor: (#4612)

    

    * Create UnitSAO, a common part between PlayerSAO & LuaEntitySAO

    * Move breath to PlayerSAO & LocalPlayer

    * Migrate m_yaw from (Remote)Player & LuaEntitySAO to UnitSAO

    * Migrate m_yaw from Player to LocalPlayer for client

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Create UnitSAO, a common part between PlayerSAO & LuaEntitySAO

    * Move breath to PlayerSAO & LocalPlayer

    * Migrate m_yaw from (Remote)Player & LuaEntitySAO to UnitSAO

    * Migrate m_yaw from Player to LocalPlayer for client

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move breath to PlayerSAO & LocalPlayer

    * Migrate m_yaw from (Remote)Player & LuaEntitySAO to UnitSAO

    * Migrate m_yaw from Player to LocalPlayer for client

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Migrate m_yaw from (Remote)Player & LuaEntitySAO to UnitSAO

    * Migrate m_yaw from Player to LocalPlayer for client

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Migrate m_yaw from Player to LocalPlayer for client

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move some functions outside of player class to PlayerSAO/RemotePlayer or LocalPlayer depending on which class needs it

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move pitch to LocalPlayer & PlayerSAO

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move m_position from Player to LocalPlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move camera_barely_in_ceiling to LocalPlayer as it's used only there

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * use PlayerSAO::m_base_position for Server side positions

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * remove a unused variable

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * ServerActiveObject::setPos now uses const ref

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * use ServerEnv::loadPlayer unconditionnaly as it creates RemotePlayer only if it's not already loaded

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move hp from Player to LocalPlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Move m_hp from LuaEntitySAO to UnitSAO

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    * Use m_hp from PlayerSAO/UnitSAO instead of RemotePlayer

    Rename testsounds/ directory to sounds/ (#1984)

    Add missing keyname_to_keycode function (needed on Android)

    

    When rewriting keycode.cpp I overlooked this function, fixes #4683 completely

    When rewriting keycode.cpp I overlooked this function, fixes #4683 completely

    Add missing remoteplayer.cpp to Android build

    

    this should fix #4683

    this should fix #4683

    Add unittests to test player saving/loading (#4679)

    Cleanup

    Use node lighting for liquid spreading

    

    This commit modifies the liquid transforming procedure to light and

    unlight nodes instead of whole map blocks.

    This commit modifies the liquid transforming procedure to light and

    unlight nodes instead of whole map blocks.

    unlight nodes instead of whole map blocks.

    Improved lighting

    

    This commit rewrites the procedure that is responsible for light

    updating.

    

    this commit

    -provides iterative solutions for unlighting and light spreading

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    This commit rewrites the procedure that is responsible for light

    updating.

    

    this commit

    -provides iterative solutions for unlighting and light spreading

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    updating.

    

    this commit

    -provides iterative solutions for unlighting and light spreading

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    this commit

    -provides iterative solutions for unlighting and light spreading

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    -provides iterative solutions for unlighting and light spreading

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    -introduces a new priority queue-like container for the iteration

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    -creates per-node MapBlock caching to reduce retrieving MapBlocks from

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    the map

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    -calculates with map block positions and in-block relative node

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    coordinates

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    -skips light updating if it is not necessary since the node's new light

    will be the same as its old light was

    will be the same as its old light was

    Document item use callbacks (#4668)

    Shaders: Remove special handling for liquids. (#4670)

    Adding LuaError on attempt to assign vectors with values out of range

    ParticleSpawner: fix offset being added twice

    Windows: dont link to libraries that are already linked by cmake

    

    This solves the problem whith building where build fails if the libaries have different names.

    This solves the problem whith building where build fails if the libaries have different names.

    Shaders: Apply tone mapping before fog calculation.

    Shaders: Harmonize Irrlicht and shader fog calculations

    Lua_api.txt: Clarify 'override_meta' bool in 'set mapgen setting'

    Damage flash: Reduce maximum alpha. Avoid fade overload

    

    Flash alpha maximum is reduced from 180 to 127 to avoid player blindness

    in combat. Flash alpha minimum is unchanged.

    The 'damage_flash' value is now limited to max alpha, to avoid multiple

    hits creating a huge value that causes flash to stay at maximum alpha

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    Flash alpha maximum is reduced from 180 to 127 to avoid player blindness

    in combat. Flash alpha minimum is unchanged.

    The 'damage_flash' value is now limited to max alpha, to avoid multiple

    hits creating a huge value that causes flash to stay at maximum alpha

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    in combat. Flash alpha minimum is unchanged.

    The 'damage_flash' value is now limited to max alpha, to avoid multiple

    hits creating a huge value that causes flash to stay at maximum alpha

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    The 'damage_flash' value is now limited to max alpha, to avoid multiple

    hits creating a huge value that causes flash to stay at maximum alpha

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    hits creating a huge value that causes flash to stay at maximum alpha

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    for a long period. Now alpha always starts to fade immediately after

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    taking damage.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    Both problems can be seen in Minetest let's play videos.

    Simplify and optimise some code.

    Simplify and optimise some code.

    Changes to static object storage limit and error message

    

    Move static object storage force-delete message from errorstream to

    warningstream.

    Increase 'max objects per block' setting to 64.

    Add missing spaces in warning code.

    Move static object storage force-delete message from errorstream to

    warningstream.

    Increase 'max objects per block' setting to 64.

    Add missing spaces in warning code.

    warningstream.

    Increase 'max objects per block' setting to 64.

    Add missing spaces in warning code.

    Increase 'max objects per block' setting to 64.

    Add missing spaces in warning code.

    Add missing spaces in warning code.

    Chat commands: Trim whitespaces from input of `/privs` command

    Fix crash on attaching player to entity

    

    Rename "refresh" to "processInitData"

    Rename "refresh" to "processInitData"

    Builtin: Add vector.floor helper function

    Revert changes to toggleNoClip and toggleFreeMove

    Don't use day light sky unless noclip and free_move are enabled

    Enable mod security by default

    Builtin/../chatcommands: Add /grantme command

    Emergeblocks: Fix occasional crash

    

    Modification of the emergeblocks internal state was not protected

    by a lock, causing a race condition.

    This can be reproduced by repeatedly running emergeblocks for an

    already-generated section of the map (with multiple emerge threads).

    Modification of the emergeblocks internal state was not protected

    by a lock, causing a race condition.

    This can be reproduced by repeatedly running emergeblocks for an

    already-generated section of the map (with multiple emerge threads).

    by a lock, causing a race condition.

    This can be reproduced by repeatedly running emergeblocks for an

    already-generated section of the map (with multiple emerge threads).

    This can be reproduced by repeatedly running emergeblocks for an

    already-generated section of the map (with multiple emerge threads).

    already-generated section of the map (with multiple emerge threads).

    Travis: Only trigger a compile, when C/C++ related files were touched (#4284)

    Make documentation about ItemStack:set_{name,count,wear} clearer

    

            These methods do not actually fail but instead clear the item stack

            and return false if a value like e.g. "" is passed.

            These methods do not actually fail but instead clear the item stack

            and return false if a value like e.g. "" is passed.

            and return false if a value like e.g. "" is passed.

    Builtin/../falling.lua: Code optimisation

    Use range-based fog instead of z-plane based.

    Attached particle spawners

    Don't use unordered maps for ProfilerGraph (fixes flickering)

    Add a button for disabling all mods to world config. (#3900)

    Add missing languages to the settings

    Disable cmake message concerning WIN32 on non-windows systems

    A little cleanup since previous commit

    Environment cleanup

    

    * Move client list to ServerEnvironment and use RemotePlayer members instead of Player

    * ClientEnvironment only use setLocalPlayer to specify the current player

    * Remove ClientEnvironment dead code on player list (in fact other players are CAO not Player objects)

    * Drop LocalPlayer::getPlayer(xxx) functions which aren't used.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * Move client list to ServerEnvironment and use RemotePlayer members instead of Player

    * ClientEnvironment only use setLocalPlayer to specify the current player

    * Remove ClientEnvironment dead code on player list (in fact other players are CAO not Player objects)

    * Drop LocalPlayer::getPlayer(xxx) functions which aren't used.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * ClientEnvironment only use setLocalPlayer to specify the current player

    * Remove ClientEnvironment dead code on player list (in fact other players are CAO not Player objects)

    * Drop LocalPlayer::getPlayer(xxx) functions which aren't used.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * Remove ClientEnvironment dead code on player list (in fact other players are CAO not Player objects)

    * Drop LocalPlayer::getPlayer(xxx) functions which aren't used.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * Drop LocalPlayer::getPlayer(xxx) functions which aren't used.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * Improve a little bit performance by using const ref list for ClientEnvironment::getPlayerNames() & Client::getConnectedPlayerNames()

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    * Drop isLocal() function from (Local)Player which is not needed anymore because of previous changes

    

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    This change permits to cleanup shared client list which is very old code.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    ClientEnvironment doesn't use player list anymore, it only contains the local player, as addPlayer is only called from Client constructor client side.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    Clients are only CAO on client side, this cleanup permit to remove confusion about player list.

    Remove unused parameter of GUIVolumeChange

    Move RemotePlayer code to its own cpp/header

    RemotePlayer/LocalPlayer Player base class proper separation (code cleanup) (patch 3 of X)

    

    * remove IGameDef from Player class, only LocalPlayer has it now

    * move many attributes/functions only used by LocalPlayer from Player to LocalPlayer

    * move many attributes/functions only used by RemotePlayer from Player to RemotePlayer

    * make some functions const

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * remove IGameDef from Player class, only LocalPlayer has it now

    * move many attributes/functions only used by LocalPlayer from Player to LocalPlayer

    * move many attributes/functions only used by RemotePlayer from Player to RemotePlayer

    * make some functions const

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * move many attributes/functions only used by LocalPlayer from Player to LocalPlayer

    * move many attributes/functions only used by RemotePlayer from Player to RemotePlayer

    * make some functions const

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * move many attributes/functions only used by RemotePlayer from Player to RemotePlayer

    * make some functions const

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * make some functions const

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * hudGetHotbarSelectedImage now returns const ref

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * RemotePlayer getHotbarSelectedImage now returns const ref

    * various code style fixes

    * various code style fixes

    * use emplace_back instead of push_back when necessary

    * use auto on some iterators

    * use default operator when needed

    * unroll v3s16 creation on collisionMoveSimple

    Optimize ClientIface::getPlayerNames(): return const ref instead a copy of all names

    More code cleanup (UNORDERED + RemotePlayer/LocalPlayer)

    

    * ClientEnvironment now uses UNORDERED MAP for active objects

    * Use RemotePlayer and LocalPlayer everywhere it's possible

    * Minor code style fixes

    * Drop Client::getBreath() unused function

    * ClientEnvironment now uses UNORDERED MAP for active objects

    * Use RemotePlayer and LocalPlayer everywhere it's possible

    * Minor code style fixes

    * Drop Client::getBreath() unused function

    * Use RemotePlayer and LocalPlayer everywhere it's possible

    * Minor code style fixes

    * Drop Client::getBreath() unused function

    * Minor code style fixes

    * Drop Client::getBreath() unused function

    * Drop Client::getBreath() unused function

    Fix backwards compatibility issue introduced by close_on_enter

    Ensure std::unordered_ be used on MSVC 2010 too (#4600)

    Player/LocalPlayer/RemotePlayer inheritance cleanup (part 2 on X)

    

    * Server/Client Environments now have an helper to cast Player object in the right type to use it

    * Server: use RemotePlayer everywhere and remove previous added casts

    * Client: use LocalPlayer where needed

    * Environment: remove unused functions (getPlayers(), getRandomConnectedPlayer(), getNearestConnectedPlayer())

    * Server/Client Environments now have an helper to cast Player object in the right type to use it

    * Server: use RemotePlayer everywhere and remove previous added casts

    * Client: use LocalPlayer where needed

    * Environment: remove unused functions (getPlayers(), getRandomConnectedPlayer(), getNearestConnectedPlayer())

    * Server: use RemotePlayer everywhere and remove previous added casts

    * Client: use LocalPlayer where needed

    * Environment: remove unused functions (getPlayers(), getRandomConnectedPlayer(), getNearestConnectedPlayer())

    * Client: use LocalPlayer where needed

    * Environment: remove unused functions (getPlayers(), getRandomConnectedPlayer(), getNearestConnectedPlayer())

    * Environment: remove unused functions (getPlayers(), getRandomConnectedPlayer(), getNearestConnectedPlayer())

    Speed up emerge thread by using unordered map in a few places. Looking at 25% speedup in Emerge thread on Just Test.

    Ensure std::unordered_ will be used on supported MSVC compilers

    Prevent attached models from disappearing during parent reload (#4128)

    VoxelArea: faster iter function (#4490)

    Remove some unused attributes/class functions in server.cpp/h

    Player/LocalPlayer/RemotePlayer inheritance cleanup (part 1 on X)

    

    * LocalPlayer take ownership of maxHudId as it's the only caller

    * RemotePlayer take ownership of day night ratio as it's the only user

    * Pass getPlayerControl as const reference to prevent object copy on each call (perf improvement in ObjectRef::l_get_player_control call)

    * getPlayerSAO is now only RemotePlayer call

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * LocalPlayer take ownership of maxHudId as it's the only caller

    * RemotePlayer take ownership of day night ratio as it's the only user

    * Pass getPlayerControl as const reference to prevent object copy on each call (perf improvement in ObjectRef::l_get_player_control call)

    * getPlayerSAO is now only RemotePlayer call

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * RemotePlayer take ownership of day night ratio as it's the only user

    * Pass getPlayerControl as const reference to prevent object copy on each call (perf improvement in ObjectRef::l_get_player_control call)

    * getPlayerSAO is now only RemotePlayer call

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * Pass getPlayerControl as const reference to prevent object copy on each call (perf improvement in ObjectRef::l_get_player_control call)

    * getPlayerSAO is now only RemotePlayer call

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * getPlayerSAO is now only RemotePlayer call

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * get/setHotbarItemCount is now RemotePlayer owned

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * Server: Use RemotePlayer instead of Player object on concerned call to properly fix the object type

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * PlayerSAO now uses RemotePlayer instead of Player because it's only server side

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    * ObjectRef::getplayer also returns RemotePlayer as it's linked with PlayerSAO

    Lua_api.txt: Add biome and nodeupdate documentation

    

    Add missing documentation for 'register_biome' and

    'clear_registered_biomes'.

    Add documentation for 'nodeupdate_single'. 'nodeupdate'

    is not yet documented due to a bug it causes.

    Add missing documentation for 'register_biome' and

    'clear_registered_biomes'.

    Add documentation for 'nodeupdate_single'. 'nodeupdate'

    is not yet documented due to a bug it causes.

    'clear_registered_biomes'.

    Add documentation for 'nodeupdate_single'. 'nodeupdate'

    is not yet documented due to a bug it causes.

    Add documentation for 'nodeupdate_single'. 'nodeupdate'

    is not yet documented due to a bug it causes.

    is not yet documented due to a bug it causes.

    Textures: Ignore unknown node in override.txt

    Fix C++11 Windows build of threading code

    

            The initial problem was that mutex_auto_lock.h tries to use std::unique_lock<std::mutex>

            despite mutex.h not using C++11's std::mutex on Windows. The problem here is the mismatch

            between C++11 usage conditions of the two headers. This commit moves the decision logic

            to threads.h and makes sure mutex.h, mutex_auto_lock.h and event.h all use the same features.

            The initial problem was that mutex_auto_lock.h tries to use std::unique_lock<std::mutex>

            despite mutex.h not using C++11's std::mutex on Windows. The problem here is the mismatch

            between C++11 usage conditions of the two headers. This commit moves the decision logic

            to threads.h and makes sure mutex.h, mutex_auto_lock.h and event.h all use the same features.

            despite mutex.h not using C++11's std::mutex on Windows. The problem here is the mismatch

            between C++11 usage conditions of the two headers. This commit moves the decision logic

            to threads.h and makes sure mutex.h, mutex_auto_lock.h and event.h all use the same features.

            between C++11 usage conditions of the two headers. This commit moves the decision logic

            to threads.h and makes sure mutex.h, mutex_auto_lock.h and event.h all use the same features.

            to threads.h and makes sure mutex.h, mutex_auto_lock.h and event.h all use the same features.

    use unordered containers where possible (patch 4 on X)

    

    Also remove some unused parameters/functions

    Also remove some unused parameters/functions

    Fix narrow string compiling issue on MSVC2010

    Use more unordered_maps to improve performance in c++11 builds

    Use relative position for nametags

    Fix macosx build by disabling postgresql upgrade

    Fix crash regression when chatting in the ncurses console

    

    Fixes #4579, a regression introduced by commit

    

    d4c76258e37337ea585cf24d8e05b50a30fa307d "Chat: new settings to prevent spam"

    Fixes #4579, a regression introduced by commit

    

    d4c76258e37337ea585cf24d8e05b50a30fa307d "Chat: new settings to prevent spam"

    d4c76258e37337ea585cf24d8e05b50a30fa307d "Chat: new settings to prevent spam"

    Travis: build matrix improvements + CPP11 build

    Compilation fix

    Replace various std::map with UNORDERED_MAP + various cleanups

    

    This is part 2 for 5f084cd98d7b3326b51320455364337539710efd

    

    Other improvements:

    

    * Use the defined ItemGroupList when used

    * make Client::checkPrivilege const

    * inline some trivial functions

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    This is part 2 for 5f084cd98d7b3326b51320455364337539710efd

    

    Other improvements:

    

    * Use the defined ItemGroupList when used

    * make Client::checkPrivilege const

    * inline some trivial functions

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    Other improvements:

    * updateChat: more performance on error messages by remove string copies

    * Initialize all game class members in definition instead of constructor (with nullptr instead of NULL)

    * Drop unused Client::show{GameChat,GameHud,Profiler,GameFog}

    * Add GameUI unittests

    * Use the defined ItemGroupList when used

    * make Client::checkPrivilege const

    * inline some trivial functions

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    * make Client::checkPrivilege const

    * inline some trivial functions

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    * inline some trivial functions

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    * Add ActiveObjectMap typedef

    * Add SettingsEntries typedef

    * Add SettingsEntries typedef

    Make some maps unordered to improve performance

    * This permit to improve performance on C++11 builds

    * use some existing typedefs in tools maps

    * minor code style changes

    * This permit to improve performance on C++11 builds

    * use some existing typedefs in tools maps

    * minor code style changes

    * use some existing typedefs in tools maps

    * minor code style changes

    * minor code style changes

    Chat: new settings to prevent spam

    

    Added the following chat coreside features

    * Chat messages length limit

    * Message rate limiting

    * Message rate kicking

    

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    Added the following chat coreside features

    * Chat messages length limit

    * Message rate limiting

    * Message rate kicking

    

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    * Chat messages length limit

    * Message rate limiting

    * Message rate kicking

    

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    * Message rate limiting

    * Message rate kicking

    

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    * Message rate kicking

    

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    Note:

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

    * handleChat now takes RemotePlayer pointer instead of u16 to remove useless

      lookups

      lookups

    Mapblock_mesh_generate_special: Improve performance

    

    Remove uses of std::map.

    Make sure we use ContentFeatures reference not value.

    Original commit by gregorycu.

    Remove uses of std::map.

    Make sure we use ContentFeatures reference not value.

    Original commit by gregorycu.

    Make sure we use ContentFeatures reference not value.

    Original commit by gregorycu.

    Original commit by gregorycu.

    Textures: New 'smoke puff' texture from TNT mod

    Fix build/warning on non X11 platforms

    Builtin/falling: Add fallback vector in case of nil 'wallmounted to dir'

    

    The fallback vector is in case 'wallmounted to dir' is nil due

    to voxelmanip placing a wallmounted node without resetting a

    pre-existing param2 value that is out-of-range for wallmounted.

    The fallback vector corresponds to param2 = 0.

    The fallback vector is in case 'wallmounted to dir' is nil due

    to voxelmanip placing a wallmounted node without resetting a

    pre-existing param2 value that is out-of-range for wallmounted.

    The fallback vector corresponds to param2 = 0.

    to voxelmanip placing a wallmounted node without resetting a

    pre-existing param2 value that is out-of-range for wallmounted.

    The fallback vector corresponds to param2 = 0.

    pre-existing param2 value that is out-of-range for wallmounted.

    The fallback vector corresponds to param2 = 0.

    The fallback vector corresponds to param2 = 0.

    Forceloading: Transient forceloads

    

    Adds a flag to forceload_block which lets you turn off persistence for

    that forceload.

    Adds a flag to forceload_block which lets you turn off persistence for

    that forceload.

    that forceload.

    Formspec: Add container[] and container_end[] elements

    Allow nothing to be selected from formspec parameters

    Fix typo in core.after (#4560)

    Update default controls in README.txt

    Mgv7: Avoid mid-air spawn on disabled mountain terrain, optimise function

    

    'getSpawnLevelAtPoint()' did not account for disabled mountains, it

    was possible to be spawned in mid-air where a mountain surface would

    have been.

    

    Avoid check for river area if rivers are disabled.

    'getSpawnLevelAtPoint()' did not account for disabled mountains, it

    was possible to be spawned in mid-air where a mountain surface would

    have been.

    

    Avoid check for river area if rivers are disabled.

    was possible to be spawned in mid-air where a mountain surface would

    have been.

    

    Avoid check for river area if rivers are disabled.

    have been.

    

    Avoid check for river area if rivers are disabled.

    Avoid check for river area if rivers are disabled.

    Fix android build

    Fixes #4493.

    Only include keycode unittests in client build (fixes #4559)

    Add keycode.cpp unittests

    Rewrite keycode.cpp (Keycode handling & names)

    Conf.example: Re-add deleted noise parameter documentation

    

    Re-add documentation of noise parameter formats.

    Re-add 'mgv5_np_ground' noise parameters in group format.

    Both these were deleted through auto-generation of conf.example.

    Add note to builtin/mainmenu/dlg_settings_advanced.lua that this

    documentation must be preserved.

    Re-add documentation of noise parameter formats.

    Re-add 'mgv5_np_ground' noise parameters in group format.

    Both these were deleted through auto-generation of conf.example.

    Add note to builtin/mainmenu/dlg_settings_advanced.lua that this

    documentation must be preserved.

    Re-add 'mgv5_np_ground' noise parameters in group format.

    Both these were deleted through auto-generation of conf.example.

    Add note to builtin/mainmenu/dlg_settings_advanced.lua that this

    documentation must be preserved.

    Both these were deleted through auto-generation of conf.example.

    Add note to builtin/mainmenu/dlg_settings_advanced.lua that this

    documentation must be preserved.

    Add note to builtin/mainmenu/dlg_settings_advanced.lua that this

    documentation must be preserved.

    documentation must be preserved.

    Update library versions in buildbot

    

    The libraries updated in this commit were built with a set of scripts:

            https://gist.github.com/sfan5/780c24313c164d34634e18677683b9a3

    Building new library versions or just using a different MinGW version

    is now way easier. This means Windows builds no longer need to use

    ancient library versions just because nobody knows how to build them.

    The libraries updated in this commit were built with a set of scripts:

            https://gist.github.com/sfan5/780c24313c164d34634e18677683b9a3

    Building new library versions or just using a different MinGW version

    is now way easier. This means Windows builds no longer need to use

    ancient library versions just because nobody knows how to build them.

            https://gist.github.com/sfan5/780c24313c164d34634e18677683b9a3

    Building new library versions or just using a different MinGW version

    is now way easier. This means Windows builds no longer need to use

    ancient library versions just because nobody knows how to build them.

    Building new library versions or just using a different MinGW version

    is now way easier. This means Windows builds no longer need to use

    ancient library versions just because nobody knows how to build them.

    is now way easier. This means Windows builds no longer need to use

    ancient library versions just because nobody knows how to build them.

    ancient library versions just because nobody knows how to build them.

    Don't use ZLIB_WINAPI if the required DLL is not provided to CMake

    

    This allows you to use an stdcall zlib (zlib1.dll instead of zlibwapi.dll)

    when building Minetest for win32.

    This allows you to use an stdcall zlib (zlib1.dll instead of zlibwapi.dll)

    when building Minetest for win32.

    when building Minetest for win32.

    Do not serialize empty NodeMetadata

    

    This commit fixes #4516, though note that this will gradually fix MapBlocks

    as they are used/modified and thus re-serialized.

    This commit fixes #4516, though note that this will gradually fix MapBlocks

    as they are used/modified and thus re-serialized.

    as they are used/modified and thus re-serialized.

    Builtin: Change error to warning for light_source > 14

    Increase default font size by 1

    Fix a typo and use proper deprecation notification system

    

    Fix a typo pointed out by @thecow275.

    

    Also, use the deprecated notification system which respects the

    deprecated_lua_api_handling setting.

    Fix a typo pointed out by @thecow275.

    

    Also, use the deprecated notification system which respects the

    deprecated_lua_api_handling setting.

    Also, use the deprecated notification system which respects the

    deprecated_lua_api_handling setting.

    deprecated_lua_api_handling setting.

    Register.lua: Throw error if node 'light_source' > core.LIGHT_MAX

    

    Add 'core.LIGHT_MAX = 14' to builtin/game/constants.lua with the intention

    to replace misplaced 'default.LIGHT_MAX = 14' in Minetest Game.

    Add comment in light.h requiring the constant be changed in both places.

    Add lighting bug warning to note in lua_api.txt.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    Add 'core.LIGHT_MAX = 14' to builtin/game/constants.lua with the intention

    to replace misplaced 'default.LIGHT_MAX = 14' in Minetest Game.

    Add comment in light.h requiring the constant be changed in both places.

    Add lighting bug warning to note in lua_api.txt.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    to replace misplaced 'default.LIGHT_MAX = 14' in Minetest Game.

    Add comment in light.h requiring the constant be changed in both places.

    Add lighting bug warning to note in lua_api.txt.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    Add comment in light.h requiring the constant be changed in both places.

    Add lighting bug warning to note in lua_api.txt.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    Add lighting bug warning to note in lua_api.txt.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    There are hundreds of mod uses of 15 which causes a lighting bug.

    Lua_api.txt: Add note of maximum value for node 'light_source'

    

    Maximum is 14.

    A value of 15 (reserved for direct sunlight) causes a lighting bug.

    Maximum is 14.

    A value of 15 (reserved for direct sunlight) causes a lighting bug.

    A value of 15 (reserved for direct sunlight) causes a lighting bug.

    Add an [invert:<mode> texture modifier

    

    Inverts the given channels of the base image.

    Mode may contain the characters "r", "g", "b", "a".

    Only the channels that are mentioned in the mode string will be inverted.

    Inverts the given channels of the base image.

    Mode may contain the characters "r", "g", "b", "a".

    Only the channels that are mentioned in the mode string will be inverted.

    Mode may contain the characters "r", "g", "b", "a".

    Only the channels that are mentioned in the mode string will be inverted.

    Only the channels that are mentioned in the mode string will be inverted.

    Collision: Improve performance by combining 6 vectors into 1 using a struct

    Decorations: Generalise 'spawn by' to be used by all decoration types

    

    In lua_api.txt, make clear that 'place on' and 'spawn by' can be lists.

    In lua_api.txt, make clear that 'place on' and 'spawn by' can be lists.

    Allow escaping of texture names when passed as an argument to a modifier

    Fix "unknown CMake command "check_library_exists" (#4517)

    

    Adds CMakeLists.txt include to fix this issue:

    

    $ cmake . -DBUILD_SERVER=TRUE -DBUILD_CLIENT=FALSE \

       -DCMAKE_BUILD_TYPE=Release -DENABLE_CURL=TRUE -DENABLE_CURSES=FALSE \

       -DENABLE_FREETYPE=TRUE -DENABLE_GETTEXT=FALSE \

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

    Adds CMakeLists.txt include to fix this issue:

    

    $ cmake . -DBUILD_SERVER=TRUE -DBUILD_CLIENT=FALSE \

       -DCMAKE_BUILD_TYPE=Release -DENABLE_CURL=TRUE -DENABLE_CURSES=FALSE \

       -DENABLE_FREETYPE=TRUE -DENABLE_GETTEXT=FALSE \

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

    $ cmake . -DBUILD_SERVER=TRUE -DBUILD_CLIENT=FALSE \

       -DCMAKE_BUILD_TYPE=Release -DENABLE_CURL=TRUE -DENABLE_CURSES=FALSE \

       -DENABLE_FREETYPE=TRUE -DENABLE_GETTEXT=FALSE \

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

       -DCMAKE_BUILD_TYPE=Release -DENABLE_CURL=TRUE -DENABLE_CURSES=FALSE \

       -DENABLE_FREETYPE=TRUE -DENABLE_GETTEXT=FALSE \

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

       -DENABLE_FREETYPE=TRUE -DENABLE_GETTEXT=FALSE \

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

       -DENABLE_POSTGRESQL=FALSE -DENABLE_SOUND=FALSE -DENABLE_LUAJIT=TRUE \

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

       -DIRRLICHT_SOURCE_DIR=$HOME/irrlicht-1.8.4 -LH

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

    CMake Error at src/CMakeLists.txt:339 (check_library_exists):

      Unknown CMake command "check_library_exists".

    ...

      Unknown CMake command "check_library_exists".

    ...

    Plantlike meshoptions: fix degrotate. (#4512)

    

    This snuck in with the meshoptions patch and accidentally kills

    degrotate plants. Thanks to @hybriddog for finding this.

    This snuck in with the meshoptions patch and accidentally kills

    degrotate plants. Thanks to @hybriddog for finding this.

    degrotate plants. Thanks to @hybriddog for finding this.

    fix missing parameters in some mentions of entity callbacks

    Return nil on empty get_area() (#4508)

    Anticheat: Use the physics_override modifiers aswell

    Make getStackMax return the correct maximal stack size

    Add minetest.unregister_item and minetest.register_alias_force

    Run updatepo.sh

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 30.2% (271 of 895 strings)

    

    Don't end with '\n'.

    Don't end with '\n'.

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 50.0% (448 of 895 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 27.3% (245 of 895 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.5% (882 of 895 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 42.4% (380 of 895 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 42.4% (380 of 895 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 87.8% (786 of 895 strings)

    

    Enhancements

    Enhancements

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 64.9% (581 of 895 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 33.2% (298 of 895 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.5% (891 of 895 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.4% (890 of 895 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 100.0% (895 of 895 strings)

    Document keymap_autorun in settingtypes.txt and minetest.conf.example (#4486)

    Update minetest.conf.example and settings_translation_file.cpp

    Fix background formspec elements from interfering with each other

    

    Fixes #4397

    Fixes #4397

    Settingtypes.txt: Clarify comments, correct spelling

    Builtin: Disallow registering users with the same name

    

    Prevents duplicate names: 'NickName', 'nickname', 'NICKNAME'.

    Skips already registered users, so they can connect as usual.

    Prevents duplicate names: 'NickName', 'nickname', 'NICKNAME'.

    Skips already registered users, so they can connect as usual.

    Skips already registered users, so they can connect as usual.

    Allow fields to choose whether they close on enter press

    Submit name of field on enter key press

    Camera: Higher frequency limit for view/hand bobbing and footsteps

    

    Rebased and tuned version of Calinou's original pull request.

    

    'm_view_bobbing_speed' controls the frequency of view bobbing,

    hand bobbing and footsteps, it was limited to a maximum of 40 (walking

    frequency) so did not increase if player speed was modified by a

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    Rebased and tuned version of Calinou's original pull request.

    

    'm_view_bobbing_speed' controls the frequency of view bobbing,

    hand bobbing and footsteps, it was limited to a maximum of 40 (walking

    frequency) so did not increase if player speed was modified by a

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    'm_view_bobbing_speed' controls the frequency of view bobbing,

    hand bobbing and footsteps, it was limited to a maximum of 40 (walking

    frequency) so did not increase if player speed was modified by a

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    hand bobbing and footsteps, it was limited to a maximum of 40 (walking

    frequency) so did not increase if player speed was modified by a

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    frequency) so did not increase if player speed was modified by a

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    'speed buff', a sprinting mod or modified in .conf or advanced

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    settngs.

    

    This commit raises the limit to 70 which is suitable for sprinting.

    This commit raises the limit to 70 which is suitable for sprinting.

    Make plantlike drawtype more fun

    

    Adds several new ways that the plantlike drawtype mesh can be changed.

    

    This requires paramtype2 = "meshoptions" to be set in the node

    definition. The drawtype for these nodes should be "plantlike".

    

    These modifications are all done using param2. This field is now

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    Adds several new ways that the plantlike drawtype mesh can be changed.

    

    This requires paramtype2 = "meshoptions" to be set in the node

    definition. The drawtype for these nodes should be "plantlike".

    

    These modifications are all done using param2. This field is now

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    This requires paramtype2 = "meshoptions" to be set in the node

    definition. The drawtype for these nodes should be "plantlike".

    

    These modifications are all done using param2. This field is now

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    definition. The drawtype for these nodes should be "plantlike".

    

    These modifications are all done using param2. This field is now

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    These modifications are all done using param2. This field is now

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    a complex bitfield that allows some or more of the combinations to

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    be chosen, and the mesh draw code will choose the options based as

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    neeeded for each plantlike node.

    

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bit layout:

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bits 0, 1 and 2 (values 0x1 through 0x7) are for choosing the plant

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    mesh shape:

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      0 - ordinary plantlike plant ("x" shaped)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      1 - ordinary plant, but rotated 45 degrees ("+" shaped)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      2 - a plant with 3 faces ("*" shaped)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      3 - a plant with 4 faces ("#" shaped)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      4 - a plant with 4 faces ("#" shaped, leaning outwards)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

      5 through 7 are unused and reserved for future mesh shapes.

    

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bit 3 (0x8) causes the plant to be randomly offset in the x,z

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    plane. The plant should fall within the 1x1x1 nodebox if regularly

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    sized.

    

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bit 4 (0x10) causes the plant mesh to grow by sqrt(2), and will cause

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    the plant mesh to fill out 1x1x1, and appear slightly larger. Texture

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    makers will want to make their plant texture 23x16 pixels to have the

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    best visual fit in 1x1x1 size.

    

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bit 5 (0x20) causes each face of the plant to have a slight negative

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    Y offset in position, descending up to 0.125 downwards into the node

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    below. Because this is per face, this causes the plant model to be

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    less symmetric.

    

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    bit 6 (0x40) through bit 7 (0x80) are unused and reserved for

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    future use.

    

    !(https://youtu.be/qWuI664krsI)

    !(https://youtu.be/qWuI664krsI)

    Client: disable pre v25 init sending by default

    

    Disable the ability to connect to old servers by default to

    improve password security.

    

    If people still want to connect to old (0.4.12 and earlier)

    servers, they can flip the send_pre_v25_init setting.

    

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    Disable the ability to connect to old servers by default to

    improve password security.

    

    If people still want to connect to old (0.4.12 and earlier)

    servers, they can flip the send_pre_v25_init setting.

    

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    improve password security.

    

    If people still want to connect to old (0.4.12 and earlier)

    servers, they can flip the send_pre_v25_init setting.

    

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    If people still want to connect to old (0.4.12 and earlier)

    servers, they can flip the send_pre_v25_init setting.

    

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    servers, they can flip the send_pre_v25_init setting.

    

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    Add the ability to detect if we've tried to connect

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    to a server which only supports the pre v25 init protocol,

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    and show an apropriate error message. Most times the error

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    will already be catched at the serverlist level, the

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    detection mechanism only acts as last resort, because the

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    "Connection timed out" error message that would be shown

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    otherwise would be very confusing.

    

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    Automatic "fixing" of this condition is not desired,

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    as it would allow for downgrade attacks.

    

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    As already 161 of the 167 servers on the serverlist

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    support the new srp based auth protocol (> 96%),

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    the breakage should be minimal.

    

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    Follow up of commit

    

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    af30183124d40a969040d7de4b3a487feec466e4 "Add option to not send pre v25 init packet"

    

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    Also change the pessimistic assumption of masterlist

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    server versions to optimistic, in order to avoid buggy

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    behaviour (favourites not in the serverlist would be

    denied to connect to, etc).

    denied to connect to, etc).

    Move on join and on leave messages to lua (#4460)

    gettext.h: include <locale> before defining the gettext macro (#4452)

    

    Fixes #4446: a syntax error that happens if something else (such as

    <iomanip> or <locale> in certain libstdc++ versions) includes

    <libintl.h> later, which contains a function declaration for gettext

    that gets mangled by the macro.

    

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    Fixes #4446: a syntax error that happens if something else (such as

    <iomanip> or <locale> in certain libstdc++ versions) includes

    <libintl.h> later, which contains a function declaration for gettext

    that gets mangled by the macro.

    

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    <iomanip> or <locale> in certain libstdc++ versions) includes

    <libintl.h> later, which contains a function declaration for gettext

    that gets mangled by the macro.

    

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    <libintl.h> later, which contains a function declaration for gettext

    that gets mangled by the macro.

    

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    that gets mangled by the macro.

    

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    See the added comment in gettext.h and the discussion in #4446/#4452

    for details.

    for details.

    Also support X11 icon for minetest copies installed via make install (#4407)

    

    Fixes #4323.

    Fixes #4323.

    Tidy up generate_from_settingtypes.lua a bit.

    

    * Multiline strings

    * Table-concat instead of String-concats

    * string.rep instead of loop-concat

    * string.format %q instead of manual quotation by gsub

    * Assert writeable files

    * Generate new settings_translation_file

    * Multiline strings

    * Table-concat instead of String-concats

    * string.rep instead of loop-concat

    * string.format %q instead of manual quotation by gsub

    * Assert writeable files

    * Generate new settings_translation_file

    * Table-concat instead of String-concats

    * string.rep instead of loop-concat

    * string.format %q instead of manual quotation by gsub

    * Assert writeable files

    * Generate new settings_translation_file

    * string.rep instead of loop-concat

    * string.format %q instead of manual quotation by gsub

    * Assert writeable files

    * Generate new settings_translation_file

    * string.format %q instead of manual quotation by gsub

    * Assert writeable files

    * Generate new settings_translation_file

    * Assert writeable files

    * Generate new settings_translation_file

    * Generate new settings_translation_file

    Move generation from settingtypes out of dlg_settings_advanced

    

    Avoids unreachable code linter warning by moving generation code

    (of minetest.conf.example and settings_translation_file.cpp)

    out of dlg_settings_advanced.

    

    Due to passing the settings, also it avoids reading the settings file twice.

    

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    Avoids unreachable code linter warning by moving generation code

    (of minetest.conf.example and settings_translation_file.cpp)

    out of dlg_settings_advanced.

    

    Due to passing the settings, also it avoids reading the settings file twice.

    

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    (of minetest.conf.example and settings_translation_file.cpp)

    out of dlg_settings_advanced.

    

    Due to passing the settings, also it avoids reading the settings file twice.

    

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    out of dlg_settings_advanced.

    

    Due to passing the settings, also it avoids reading the settings file twice.

    

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    Due to passing the settings, also it avoids reading the settings file twice.

    

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    Instead of activating the code by changing the active if-clauses,

    its activation is now done by uncommenting the loadfile() statement.

    its activation is now done by uncommenting the loadfile() statement.

    Fix for failure to find jsoncpp in android build (#4456)

    

    Commit 4503b5 did not update the android build script.

    Commit 4503b5 did not update the android build script.

    Mapblock mesh: Fix updateFastFaceRow tiling issue

    

    Increase maximum length of tiled node rows from 2 to mapblock size.

    Increase maximum length of tiled node rows from 2 to mapblock size.

    Script API: Make the craft recipe field 'method' consistent

    Lua_api.txt: Change 'maxwear' to 'uses' in 'tool_capabilities'

    

    'maxwear' has been deprecated for over 3 years

    Add spaces around '=' nearby

    'maxwear' has been deprecated for over 3 years

    Add spaces around '=' nearby

    Add spaces around '=' nearby

    Add an [opacity:<r> texture modifier. Makes the base image transparent according to the given ratio. r must be between 0 and 255. 0 means totally transparent. 255 means totally opaque. Useful for texture overlaying.

    Update AppData file with more URLs and keywords

    Use the standard to_string() functions for C++11 (#4279)

    

    If compiling according to a C++ version before C++11, then define

    std::to_string ourselves.

    

    Add a to_wstring version as well

    

    As std::to_string() for floating point types uses %.6f as floating

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    If compiling according to a C++ version before C++11, then define

    std::to_string ourselves.

    

    Add a to_wstring version as well

    

    As std::to_string() for floating point types uses %.6f as floating

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    std::to_string ourselves.

    

    Add a to_wstring version as well

    

    As std::to_string() for floating point types uses %.6f as floating

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    Add a to_wstring version as well

    

    As std::to_string() for floating point types uses %.6f as floating

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    As std::to_string() for floating point types uses %.6f as floating

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    point format converter, instead of %G, it needs special care.

    

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    To preserve ftos() behavior (which is expected to use the %G format

    converter), it no longer uses to_string().

    converter), it no longer uses to_string().

    Add infotext containing entity type (e.g. mobs:cow) to unknown entities (#4431)

    

    If a mod is disabled, or upgraded without sufficient backward compatibility,

    then entities it has put into the world become unknown, and continue moving

    around, but are completely unrecognisable.

    

    This change allows the player to see their type, and therefore which mod is

    or was responsible.

    If a mod is disabled, or upgraded without sufficient backward compatibility,

    then entities it has put into the world become unknown, and continue moving

    around, but are completely unrecognisable.

    

    This change allows the player to see their type, and therefore which mod is

    or was responsible.

    then entities it has put into the world become unknown, and continue moving

    around, but are completely unrecognisable.

    

    This change allows the player to see their type, and therefore which mod is

    or was responsible.

    around, but are completely unrecognisable.

    

    This change allows the player to see their type, and therefore which mod is

    or was responsible.

    This change allows the player to see their type, and therefore which mod is

    or was responsible.

    or was responsible.

    couple of memory leaks fixes.

    Update the version of irrlicht to 1.8.3, add steps for Sqlite3

    

    Also add note for 64-bit Windows users

    Also add note for 64-bit Windows users

    Zooming the camera requires the 'zoom' privilege

    Document zoom_fov in settingtypes.txt and minetest.conf.example

    Add zoom, tweakable with zoom_fov, default key: Z (like optifine)

    Lua->C getintfield() use lua_tointeger (#4408)

    

    previously function used tonumber which returned float

    this caused errors in large numbers and resulted in

    obj-def-handlers being invalid when retrived from lua tables in c

    previously function used tonumber which returned float

    this caused errors in large numbers and resulted in

    obj-def-handlers being invalid when retrived from lua tables in c

    this caused errors in large numbers and resulted in

    obj-def-handlers being invalid when retrived from lua tables in c

    obj-def-handlers being invalid when retrived from lua tables in c

    Fixes for compiling with a newer (system) jsoncpp (#4429)

    

    * Move included json code to jsoncpp subdirectory

    

    This is needed to avoid having to specify the minetest src directory

    as a system include when fixing the json includes.

    

    * Fix json includes

    

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    * Move included json code to jsoncpp subdirectory

    

    This is needed to avoid having to specify the minetest src directory

    as a system include when fixing the json includes.

    

    * Fix json includes

    

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    This is needed to avoid having to specify the minetest src directory

    as a system include when fixing the json includes.

    

    * Fix json includes

    

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    as a system include when fixing the json includes.

    

    * Fix json includes

    

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    * Fix json includes

    

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    They used "", so that the compiler searches the project's directory

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    first. The result was that when compiling with a system jsoncpp,

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    the project's own version of json.h was still included, instead of

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    the system version.

    

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    The includes now use <>, so a system location, or one specified with

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    '-Ilocation' is searched only.

    

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    * Fix for jsoncpp deprecated function warning

    

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    When compiling with a newer version of jsoncpp (and

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    ENABLE_SYSTEM_JSONCPP=true), jsoncpp emits a warning

    about a deprecated function that minetest uses.

    about a deprecated function that minetest uses.

    Permit usage of std::unordered_map & std::unorderered_set on c++11 compilers (#4430)

    

    This fallback to std::map & std::set for older compilers

    

    Use UNORDERED_SET as an example in decoration and ore biome sets

    

    Use UNORDERED_MAP as an example in nameidmapping

    This fallback to std::map & std::set for older compilers

    

    Use UNORDERED_SET as an example in decoration and ore biome sets

    

    Use UNORDERED_MAP as an example in nameidmapping

    Use UNORDERED_SET as an example in decoration and ore biome sets

    

    Use UNORDERED_MAP as an example in nameidmapping

    Use UNORDERED_MAP as an example in nameidmapping

    Add simulation category

    Decorations: Fix decoration height check errors

    

    Fix height check comparison from '>=' to '>'.

    Fix getHeight() for schematic decorations to account for

    'deco place center y' flag and for how normal placement

    sinks schematic 1 node into the ground.

    

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    Fix height check comparison from '>=' to '>'.

    Fix getHeight() for schematic decorations to account for

    'deco place center y' flag and for how normal placement

    sinks schematic 1 node into the ground.

    

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    Fix getHeight() for schematic decorations to account for

    'deco place center y' flag and for how normal placement

    sinks schematic 1 node into the ground.

    

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    'deco place center y' flag and for how normal placement

    sinks schematic 1 node into the ground.

    

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    sinks schematic 1 node into the ground.

    

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    Jungletrees were not being placed at y = 46, y = 47 despite

    having an acceptable 16 nodes of height above ground surface.

    having an acceptable 16 nodes of height above ground surface.

    Mapgen: Remove unused 'flat' and 'trees' flags from mg_flags

    

    When the 'flat' and 'trees' flags were moved into mgv6_spflags they

    were left in mg_flags in an attempt to support old mgv6 worlds. However

    their appearence in mg_flags causes confusion, also, later, old-world

    support was found to be broken for mgv6 worlds with 'notrees'.

    

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    When the 'flat' and 'trees' flags were moved into mgv6_spflags they

    were left in mg_flags in an attempt to support old mgv6 worlds. However

    their appearence in mg_flags causes confusion, also, later, old-world

    support was found to be broken for mgv6 worlds with 'notrees'.

    

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    were left in mg_flags in an attempt to support old mgv6 worlds. However

    their appearence in mg_flags causes confusion, also, later, old-world

    support was found to be broken for mgv6 worlds with 'notrees'.

    

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    their appearence in mg_flags causes confusion, also, later, old-world

    support was found to be broken for mgv6 worlds with 'notrees'.

    

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    support was found to be broken for mgv6 worlds with 'notrees'.

    

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    This commit cleans up the mess and comes a month after a thread warning

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    of the change, and explaining the required action, was posted in the

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    news subforum. Only old mgv6 worlds with 'flat' or 'notrees' are

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    affected, a small minority of worlds, the required action being

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    correctly setting these flags in mgv6_spflags.

    

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    Disable a section of the 'map settings manager' unit test which is to

    be changed as it is causing problems for pull requests.

    be changed as it is causing problems for pull requests.

    Fix l_request_insecure_environment not ignoring all whitespace (#4395)

    

    l_request_insecure_environment didn't ignore all whitespace in the

    secure.trusted_mods config option.

    

    Replaces std::remove with std::remove_if and the isspace function.

    l_request_insecure_environment didn't ignore all whitespace in the

    secure.trusted_mods config option.

    

    Replaces std::remove with std::remove_if and the isspace function.

    secure.trusted_mods config option.

    

    Replaces std::remove with std::remove_if and the isspace function.

    Replaces std::remove with std::remove_if and the isspace function.

    test_map_settings_manager: Fix Wunused-result warning

    Porting: Fix endless loop if image format is not recognized

    texture_packs.txt: Document special textures

    Documentation: Create texture_packs.txt

    

    Combine texture_overrides.txt and sections of lua_api.txt

    Combine texture_overrides.txt and sections of lua_api.txt

    lua_api.txt: Document how to properly clear node metadata

    Update README.txt (#4368)

    

    * Update README.txt

    

    As of Ubuntu 16.10, libpng12-dev is replaced with libpng12-0, since libpng12-0 is available in 16.04 repositories, I think that needed to be changed.

    

    Also I changed 'git-core' to 'git' for fedora users, keep it consistent with the ubuntu/debian instructions.

    

    * Update README.txt

    * Update README.txt

    

    As of Ubuntu 16.10, libpng12-dev is replaced with libpng12-0, since libpng12-0 is available in 16.04 repositories, I think that needed to be changed.

    

    Also I changed 'git-core' to 'git' for fedora users, keep it consistent with the ubuntu/debian instructions.

    

    * Update README.txt

    As of Ubuntu 16.10, libpng12-dev is replaced with libpng12-0, since libpng12-0 is available in 16.04 repositories, I think that needed to be changed.

    

    Also I changed 'git-core' to 'git' for fedora users, keep it consistent with the ubuntu/debian instructions.

    

    * Update README.txt

    Also I changed 'git-core' to 'git' for fedora users, keep it consistent with the ubuntu/debian instructions.

    

    * Update README.txt

    * Update README.txt

    

    As of Ubuntu 16.10, libpng12-dev is replaced with libpng12-0, since libpng12-0 is available in 16.04 repositories, I think that needed to be changed.

    

    Also I changed 'git-core' to 'git' for fedora users, keep it consistent with the ubuntu/debian instructions.

    

    * Update README.txt

    buildbot: retrieve short commit hash properly

    

    Instead of trying to manually parse the output of 'git show' which can be different across different git configurations, properly use the 'git rev-parse' command that is intended for this purpose.

    Instead of trying to manually parse the output of 'git show' which can be different across different git configurations, properly use the 'git rev-parse' command that is intended for this purpose.

    Increase android versionCode (#4350)

    

    This little update is due to a packaging problem when uploading on play store. They don't permit to re upload an APK with same version code.

    This case was a fail on openssl packaged version which was old and rejected by Google but they don't remove the APK then i should increase the version code to permit having it on play store

    This little update is due to a packaging problem when uploading on play store. They don't permit to re upload an APK with same version code.

    This case was a fail on openssl packaged version which was old and rejected by Google but they don't remove the APK then i should increase the version code to permit having it on play store

    This case was a fail on openssl packaged version which was old and rejected by Google but they don't remove the APK then i should increase the version code to permit having it on play store

    Upright sprite objects: Horizontally flip the front image

    

    For consistent horizontal sprite structure when seen from front and back

    Fix code style

    For consistent horizontal sprite structure when seen from front and back

    Fix code style

    Fix code style

    Main menu, lua_api.txt: Fix mod/texture pack screenshot size issues

    

    Recommend mod screenshot size in lua_api.txt

    Adjust displayed screenshot size of texture packs

    Document texture pack files in lua_api.txt

    Recommend mod screenshot size in lua_api.txt

    Adjust displayed screenshot size of texture packs

    Document texture pack files in lua_api.txt

    Adjust displayed screenshot size of texture packs

    Document texture pack files in lua_api.txt

    Document texture pack files in lua_api.txt

    Builtin: Add core.MAP_BLOCKSIZE constant

    Builtin: Fix check for a player object in core.check_player_privs

    

    core.check_player_privs accepts as first argument a name or player object, but just tested for a string.

    This caused crashes inside builtin, when being passed any unexpected types.

    

    This provides a better (duck-typing like) test, better error reporting.

    core.check_player_privs accepts as first argument a name or player object, but just tested for a string.

    This caused crashes inside builtin, when being passed any unexpected types.

    

    This provides a better (duck-typing like) test, better error reporting.

    This caused crashes inside builtin, when being passed any unexpected types.

    

    This provides a better (duck-typing like) test, better error reporting.

    This provides a better (duck-typing like) test, better error reporting.

    Update minetest.conf.example and the settings translation file

    Mgvalleys / cavegen: Place riverbed nodes under river water

    

    When a CavesNoiseIntersection tunnel intersects a river place biome

    'riverbed' nodes in tunnel entrance instead of biome 'top' nodes.

    When a CavesNoiseIntersection tunnel intersects a river place biome

    'riverbed' nodes in tunnel entrance instead of biome 'top' nodes.

    'riverbed' nodes in tunnel entrance instead of biome 'top' nodes.

    lua_api.txt: Remove tooltip checkbox[] element

    HTTP lua API docs: correct some function references

    Builtin/profiler: Replace game profiler (#4245)

    

    Use the setting "profiler.load" to enable profiling.

    Other settings can be found in settingtypes.txt.

    

    * /profiler print [filter] - report statistics to in-game console

    * /profiler dump [filter] - report statistics to STDOUT and debug.txt

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    Use the setting "profiler.load" to enable profiling.

    Other settings can be found in settingtypes.txt.

    

    * /profiler print [filter] - report statistics to in-game console

    * /profiler dump [filter] - report statistics to STDOUT and debug.txt

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    Other settings can be found in settingtypes.txt.

    

    * /profiler print [filter] - report statistics to in-game console

    * /profiler dump [filter] - report statistics to STDOUT and debug.txt

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * /profiler print [filter] - report statistics to in-game console

    * /profiler dump [filter] - report statistics to STDOUT and debug.txt

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * /profiler dump [filter] - report statistics to STDOUT and debug.txt

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * /profiler save [format [filter]] - saves statistics to a file in your worldpath

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            * txt (default) - same treetable format as used by the dump and print commands

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            * csv - ready for spreadsheet import

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            * json - useful for adhoc D3 visualizations

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            * json_pretty - line wrapped and intended json for humans

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            * lua - serialized lua table of the profile-data, for adhoc scripts

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * /profiler reset - reset all gathered profile data.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            This can be helpful to discard of any startup measurements that often spike during loading or to get more useful min-values.

    

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    [filter] allows limiting the output of the data via substring/pattern matching against the modname.

    

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    Note: Serialized data structures might be subject to change with changed or added measurements.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

            csv might be the most stable, due to flat structure.

    

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    Changes to the previous version include:

    

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Updated and extended API monitoring

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Correct calculation of average (mean) values (undistorted by idleness)

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Reduce instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Fix crashes related to missing parameters for the future and occasional DIV/0's.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Prevent issues caused by timetravel (overflow, timejump, NTP corrections)

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Prevent modname clashes with internal names.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Measure each instrumentation individually and label based on registration order.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Labeling of ABM's and LBM's for easier classification.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

      Giving several ABM's or LBM's the same label will treat them as one.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

      Missing labels will be autogenerated based on name or registration order.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Configurable instrumentation and reporting. Skip e.g. builtin if you don't need it.

    * Profile the profiler to measure instrumentation overhead.

    * Profile the profiler to measure instrumentation overhead.

    Lua_api.txt: Fix description of node drop behaviour

    Treegen: Improve use of signed vs. unsigned integers

    

    To fix GCC 6.1.1 compilation warning:

    'assuming signed overflow does not occur when assuming

    that (X - c) > X is always false'

    To fix GCC 6.1.1 compilation warning:

    'assuming signed overflow does not occur when assuming

    that (X - c) > X is always false'

    'assuming signed overflow does not occur when assuming

    that (X - c) > X is always false'

    that (X - c) > X is always false'

    Run updatepo.sh

    Update minetest.conf.example, and settings_translation_file.cpp

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (887 of 887 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 89.6% (795 of 887 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 55.8% (495 of 887 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 59.0% (524 of 887 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 91.2% (809 of 887 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 75.1% (667 of 887 strings)

    Translated using Weblate (Serbian (cyrillic))

    

    Currently translated at 30.2% (429 of 1416 strings)

    Currently translated at 31.5% (280 of 887 strings)

    Added translation using Weblate (Serbian (cyrillic))

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 32.2% (286 of 887 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 74.1% (658 of 887 strings)

    Fix typos (#4298)

    Ubuntu build HOWTO: Suggest to install git instead of git-core

    

    The package docs for the git-core Ubuntu package in all supported

    Ubuntu versions, including 12.04 say:

    

    This is a transitional dummy package.  The 'git-core' package has been

    renamed to 'git', which has been installed automatically.  This git-core

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    The package docs for the git-core Ubuntu package in all supported

    Ubuntu versions, including 12.04 say:

    

    This is a transitional dummy package.  The 'git-core' package has been

    renamed to 'git', which has been installed automatically.  This git-core

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    Ubuntu versions, including 12.04 say:

    

    This is a transitional dummy package.  The 'git-core' package has been

    renamed to 'git', which has been installed automatically.  This git-core

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    This is a transitional dummy package.  The 'git-core' package has been

    renamed to 'git', which has been installed automatically.  This git-core

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    renamed to 'git', which has been installed automatically.  This git-core

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    package is now obsolete, and can safely be removed from the system if no

    other package depends on it.

    

    Fixes #4109

    other package depends on it.

    

    Fixes #4109

    Fixes #4109

    Fix -Wterminate warnings in rollback.cpp as well

    

    Fix #4137 for rollback.cpp as well.

    Fix #4137 for rollback.cpp as well.

    Fix -Wterminate warning on GCC 6

    

    Fixes #4137

    Fixes #4137

    Fix warning in porting::setXorgWindowIcon when building without X11 (#4288)

    Adding minetest.clear_craft

    

    Modifications by est31: grammar fixes in doc + error messages and

    a little style fix, no functional change.

    Modifications by est31: grammar fixes in doc + error messages and

    a little style fix, no functional change.

    a little style fix, no functional change.

    Use mathematical function to determine yaw direction

    Fix for cropped text "Toggle Cinematic"

    Remove cinematic toggle on F8

    

    Also update cinematic mode's description to include mouse

    Also update cinematic mode's description to include mouse

    Finally set a window icon on X11

    

    Since the creation of minetest, it had no window icon on X11.

    Now we have one.

    

    The misc/minetest-xorg-icon-128.png file is a rendering of the

    misc/minetest.svg file with inkscape, created with something like:

    

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    Since the creation of minetest, it had no window icon on X11.

    Now we have one.

    

    The misc/minetest-xorg-icon-128.png file is a rendering of the

    misc/minetest.svg file with inkscape, created with something like:

    

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    Now we have one.

    

    The misc/minetest-xorg-icon-128.png file is a rendering of the

    misc/minetest.svg file with inkscape, created with something like:

    

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    The misc/minetest-xorg-icon-128.png file is a rendering of the

    misc/minetest.svg file with inkscape, created with something like:

    

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    misc/minetest.svg file with inkscape, created with something like:

    

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    inkscape -z -e misc/minetest-xorg-icon-128.png -w 128 -h 128 misc/minetest.svg

    Temporarily disable "testStartStopWait" Threading unit test on mac

    

    The "testStartStopWait" unit test is unreliably failing on mac,

    for some time already. See bug #3786.

    

    Having the unittest fail unreliably doesn't help anybody but mostly

    inhibits the main feature of travis builds: to test PRs for regressions.

    

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    The "testStartStopWait" unit test is unreliably failing on mac,

    for some time already. See bug #3786.

    

    Having the unittest fail unreliably doesn't help anybody but mostly

    inhibits the main feature of travis builds: to test PRs for regressions.

    

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    for some time already. See bug #3786.

    

    Having the unittest fail unreliably doesn't help anybody but mostly

    inhibits the main feature of travis builds: to test PRs for regressions.

    

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    Having the unittest fail unreliably doesn't help anybody but mostly

    inhibits the main feature of travis builds: to test PRs for regressions.

    

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    inhibits the main feature of travis builds: to test PRs for regressions.

    

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    Therefore, disable the specific unit test for until bug #3786

    is fixed.

    is fixed.

    Fix & make linux conditionals uniform (#4278)

    

    The source used a hodge-podge of different combinations of different

    macros to check for linux: 'linux', '__linux', '__linux__'.

    

    As '__linux__' is standard (Posix), and the others are not, the source

    now uniformly uses __linux__. If either linux or __linux are defined,

    it is made sure that __linux__ is defined as well.

    The source used a hodge-podge of different combinations of different

    macros to check for linux: 'linux', '__linux', '__linux__'.

    

    As '__linux__' is standard (Posix), and the others are not, the source

    now uniformly uses __linux__. If either linux or __linux are defined,

    it is made sure that __linux__ is defined as well.

    macros to check for linux: 'linux', '__linux', '__linux__'.

    

    As '__linux__' is standard (Posix), and the others are not, the source

    now uniformly uses __linux__. If either linux or __linux are defined,

    it is made sure that __linux__ is defined as well.

    As '__linux__' is standard (Posix), and the others are not, the source

    now uniformly uses __linux__. If either linux or __linux are defined,

    it is made sure that __linux__ is defined as well.

    now uniformly uses __linux__. If either linux or __linux are defined,

    it is made sure that __linux__ is defined as well.

    it is made sure that __linux__ is defined as well.

    Disable joysticks per default for now

    

    It seems that various different devices register as

    Joysticks on linux, and their presence has caused

    lots of confusion amongst minetest users.

    

    Therefore, disable the joystick feature.

    

    Closes #4261

    Closes #4221

    It seems that various different devices register as

    Joysticks on linux, and their presence has caused

    lots of confusion amongst minetest users.

    

    Therefore, disable the joystick feature.

    

    Closes #4261

    Closes #4221

    Joysticks on linux, and their presence has caused

    lots of confusion amongst minetest users.

    

    Therefore, disable the joystick feature.

    

    Closes #4261

    Closes #4221

    lots of confusion amongst minetest users.

    

    Therefore, disable the joystick feature.

    

    Closes #4261

    Closes #4221

    Therefore, disable the joystick feature.

    

    Closes #4261

    Closes #4221

    Closes #4261

    Closes #4221

    Closes #4221

    Remove top left minetest watermark

    

    Move version information into the window caption.

    

    On popular player request.

    

    Fixes #4209.

    Move version information into the window caption.

    

    On popular player request.

    

    Fixes #4209.

    On popular player request.

    

    Fixes #4209.

    Fixes #4209.

    Add MapSettingsManager and new mapgen setting script API functions

    

    This commit refactors the majority of the Mapgen settings system.

    - MapgenParams is now owned by MapSettingsManager, itself a part of ServerMap,

      instead of the EmergeManager.

    - New Script API functions added:

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    This commit refactors the majority of the Mapgen settings system.

    - MapgenParams is now owned by MapSettingsManager, itself a part of ServerMap,

      instead of the EmergeManager.

    - New Script API functions added:

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    - MapgenParams is now owned by MapSettingsManager, itself a part of ServerMap,

      instead of the EmergeManager.

    - New Script API functions added:

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

      instead of the EmergeManager.

    - New Script API functions added:

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    - New Script API functions added:

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

        core.get_mapgen_setting

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

        core.get_mapgen_setting_noiseparams,

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

        core.set_mapgen_setting, and

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

        core.set_mapgen_setting_noiseparams.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    - minetest.get/set_mapgen_params are deprecated by the above new functions.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    - It is now possible to view and modify any arbitrary mapgen setting from a mod,

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

      rather than the base MapgenParams structure.

    - MapgenSpecificParams has been removed.

    - MapgenSpecificParams has been removed.

    Mapgen: Refactor mapgen creation and management

    

    - Move mapgen creation logic out of EmergeManager and into Mapgen

    - Internally represent mapgen type as an enum value, instead of a string

    - Remove the need for a MapgenFactory per mapgen

    - Move mapgen creation logic out of EmergeManager and into Mapgen

    - Internally represent mapgen type as an enum value, instead of a string

    - Remove the need for a MapgenFactory per mapgen

    - Internally represent mapgen type as an enum value, instead of a string

    - Remove the need for a MapgenFactory per mapgen

    - Remove the need for a MapgenFactory per mapgen

    Remove old docs. We have VCS history anyways. (#4266)

    openbsd's port fix for non Linux systems w/o libRT

    

    X11 headers are not always in expected locations, add them to include list.

    

    Modifications by est31: indentation fixes, commit message improved

    X11 headers are not always in expected locations, add them to include list.

    

    Modifications by est31: indentation fixes, commit message improved

    Modifications by est31: indentation fixes, commit message improved

    Only allow strings to be passed to minetest.global_exists (#4253)

    

    Sometimes you accidentally forget the quotes when using global_exists, this makes minetest abort if you did so.

    

    M  builtin/common/strict.lua

    Sometimes you accidentally forget the quotes when using global_exists, this makes minetest abort if you did so.

    

    M  builtin/common/strict.lua

    M  builtin/common/strict.lua

    Also shut down when SIGTERM was received

    

    Fixes #4251

    Fixes #4251

    Mgflat/fractal/v7/valleys: Denser 3D noise tunnels

    

    Reduce spread from 96 to primes 61 and 67 (either side of 64)

    Prime spreads help to keep 3D noise periodic features unaligned

    'cave width' 0.2 to preserve tunnel width

    Reduce octaves to 3 to improve network structure

    Reduce spread from 96 to primes 61 and 67 (either side of 64)

    Prime spreads help to keep 3D noise periodic features unaligned

    'cave width' 0.2 to preserve tunnel width

    Reduce octaves to 3 to improve network structure

    Prime spreads help to keep 3D noise periodic features unaligned

    'cave width' 0.2 to preserve tunnel width

    Reduce octaves to 3 to improve network structure

    'cave width' 0.2 to preserve tunnel width

    Reduce octaves to 3 to improve network structure

    Reduce octaves to 3 to improve network structure

    Player: New get_look, set_look API

    

    Deprecate get_look / set_look pitch / yaw

    Deprecate get_look / set_look pitch / yaw

    Dungeons: Generalise use, add capabilities, various modifications

    

    - Generalise node names to c_wall and c_alt_wall

    - Remove 'mossratio' and instead disable alt_wall loop if

      c_alt_wall == CONTENT_IGNORE

    - Use one generalised 3D noise for alternative wall nodes and in

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Generalise node names to c_wall and c_alt_wall

    - Remove 'mossratio' and instead disable alt_wall loop if

      c_alt_wall == CONTENT_IGNORE

    - Use one generalised 3D noise for alternative wall nodes and in

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Remove 'mossratio' and instead disable alt_wall loop if

      c_alt_wall == CONTENT_IGNORE

    - Use one generalised 3D noise for alternative wall nodes and in

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

      c_alt_wall == CONTENT_IGNORE

    - Use one generalised 3D noise for alternative wall nodes and in

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Use one generalised 3D noise for alternative wall nodes and in

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

      mgv6 create moss distribution similar to the previous

    

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Rename rarity noise to density noise and enable the option of multiple

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

      dungeons per chunk determined by the value. Recreate previous distribution

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Add parameters for min and max rooms per dungeon

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Add dungeon y limits

    

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    - Integrate river water properly

    

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    Generalisation is needed now that we have sandstone and desert stone

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    dungeons by default and can choose any node for alternative structure.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    The current code is based around cobble dungeons with mossycobble

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    alternative nodes, the 2 noises controlling the alternative nodes

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    are based on wetness.

    

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    Enabling multiple dungeons per chunk with definable number of rooms

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    allows the option of very dense and complex underground structures

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    that could interconnect to create megastructures.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    Y limits are added to be consistent with other mapgen elements, and

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    enable locaton of dungeon or megastructure realms as part of our

    'stacked realms' philosophy.

    'stacked realms' philosophy.

    Builtin/game/item: Add `place_param2` nodedef field

    

    This allows a nodedef to specify a fixed value for param2 to be

    used for all normal placements.

    

    There are several uses for this:

    

    - nodes that require param2 to be set to a non-zero value for

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    This allows a nodedef to specify a fixed value for param2 to be

    used for all normal placements.

    

    There are several uses for this:

    

    - nodes that require param2 to be set to a non-zero value for

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    used for all normal placements.

    

    There are several uses for this:

    

    - nodes that require param2 to be set to a non-zero value for

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    There are several uses for this:

    

    - nodes that require param2 to be set to a non-zero value for

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    - nodes that require param2 to be set to a non-zero value for

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

      internal mod use. E.g. leafdecay could use this to detect that

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

      leaves are played by players.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    - force wallmounted or facedir value at placement at placement

    

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    This overrides any player look direction or other on-the-fly

    param2 setting during placement.

    param2 setting during placement.

    Move unknown node message when applying texture overrides to infostream (#4218)

    

    Texture packs have no way to know what nodes are available, so this shouldn't be a error message.

    Texture packs have no way to know what nodes are available, so this shouldn't be a error message.

    Sky.cpp: Improve code style. Define sky colours as SColor

    Make node timers more efficient

    Random misc. warning fixes and cleanups

    

     - Fix unused c_sand member warning in Valleys Mapgen

     - Fix some code style

     - Make some std::string params const ref

     - Fix unused c_sand member warning in Valleys Mapgen

     - Fix some code style

     - Make some std::string params const ref

     - Fix some code style

     - Make some std::string params const ref

     - Make some std::string params const ref

    Settings: Clean up settings changed callback code

    Fix android build

    Thanks to @Wayward1 for reporting the bug.

    

    Fixes #4212.

    Fixes #4212.

    Server: Add reason for leave to `on_leaveplayer` callbacks

    Sky: Darker, bluer sky and improved horizon haze at night

    

    Add new colours 'skycolour_bright_night', 'bgcolour_bright_night'

    and enable these between sunset end and sunrise start

    Night sky has same hue as day sky but is darker and more saturated

    Night horizon haze (bgcolour) is slightly less saturated and

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    Add new colours 'skycolour_bright_night', 'bgcolour_bright_night'

    and enable these between sunset end and sunrise start

    Night sky has same hue as day sky but is darker and more saturated

    Night horizon haze (bgcolour) is slightly less saturated and

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    and enable these between sunset end and sunrise start

    Night sky has same hue as day sky but is darker and more saturated

    Night horizon haze (bgcolour) is slightly less saturated and

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    Night sky has same hue as day sky but is darker and more saturated

    Night horizon haze (bgcolour) is slightly less saturated and

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    Night horizon haze (bgcolour) is slightly less saturated and

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    slightly brighter than night sky, to be consistent with daytime

    horizon haze

    horizon haze

    Sky: Fix sunrisebg texture motion (#4199)

    

    Top of texture no longer shows above horizon during night and day

    Top of texture no longer shows above horizon during night and day

    Lua_api.txt: Split long lines. Capitalise 'Biome API'. Minor edits

    Mapgen: Optimize biomemap creation by combining with generateBiomes

    Biome API: Add per-biome riverbed material and depth

    

    Mgvalleys: Remove riverbed sand placement from base terrain generation

    Riverbed material placement moved to MapgenBasic::generateBiomes()

    Document fields and add note that the biome API is still unstable

    Mgvalleys: Remove riverbed sand placement from base terrain generation

    Riverbed material placement moved to MapgenBasic::generateBiomes()

    Document fields and add note that the biome API is still unstable

    Riverbed material placement moved to MapgenBasic::generateBiomes()

    Document fields and add note that the biome API is still unstable

    Document fields and add note that the biome API is still unstable

    Mapgen: Performance improvement and fixes for updateLiquid (#4065)

    

    - Adds only ~100 nodes per chunk to trans_liquid with similar processing time

    - Adds liquid nodes themselves instead of potential solid nodes below them

    - CONTENT_IGNORE nodes are interpreted as if they continue their neighborhood

    - This allows liquid columns to span multiple chunks without being interrupted

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    - Adds only ~100 nodes per chunk to trans_liquid with similar processing time

    - Adds liquid nodes themselves instead of potential solid nodes below them

    - CONTENT_IGNORE nodes are interpreted as if they continue their neighborhood

    - This allows liquid columns to span multiple chunks without being interrupted

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    - Adds liquid nodes themselves instead of potential solid nodes below them

    - CONTENT_IGNORE nodes are interpreted as if they continue their neighborhood

    - This allows liquid columns to span multiple chunks without being interrupted

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    - CONTENT_IGNORE nodes are interpreted as if they continue their neighborhood

    - This allows liquid columns to span multiple chunks without being interrupted

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    - This allows liquid columns to span multiple chunks without being interrupted

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    - NOTE: Expects an one-node border in generation chunk without liquid changes

    Biomes:  Define and use biome_t for biome IDs

    PcgRandom: Fix/improve documentation

    Change internal type for seeds to s32

    

    This fixes value truncation (and therefore incompatibility) on platforms

    with an LP32 data model, such as VAX or MS-DOS.

    This fixes value truncation (and therefore incompatibility) on platforms

    with an LP32 data model, such as VAX or MS-DOS.

    with an LP32 data model, such as VAX or MS-DOS.

    Initial Gamepad support

    

    Adds initial ingame gamepad support to minetest.

    

    Full Formspec support is not implemented yet and

    can be added by a later change.

    Adds initial ingame gamepad support to minetest.

    

    Full Formspec support is not implemented yet and

    can be added by a later change.

    Full Formspec support is not implemented yet and

    can be added by a later change.

    can be added by a later change.

    Input related generalisations

    

    * Move key types into own file

    * Use Generalized input methods in game.cpp

    * Move key types into own file

    * Use Generalized input methods in game.cpp

    * Use Generalized input methods in game.cpp

    Sapier's fix for the RESEND RELIABLE problem (#4170)

    Mgv7: Always carve river channels in mountain terrain

    

    Previously, rivers were sometimes blocked by vertical walls

    of mountain terrain due to river carving being disabled

    when base terrain height was below water_level - 16

    Remove now unused base terrain heightmap created in

    generateTerrain()

    Previously, rivers were sometimes blocked by vertical walls

    of mountain terrain due to river carving being disabled

    when base terrain height was below water_level - 16

    Remove now unused base terrain heightmap created in

    generateTerrain()

    of mountain terrain due to river carving being disabled

    when base terrain height was below water_level - 16

    Remove now unused base terrain heightmap created in

    generateTerrain()

    when base terrain height was below water_level - 16

    Remove now unused base terrain heightmap created in

    generateTerrain()

    Remove now unused base terrain heightmap created in

    generateTerrain()

    generateTerrain()

    Add colored text (not only colored chat).

    

    Add documentation, move files to a proper place and avoid memory leaks.

    Make it work with most kind of texts, and allow backgrounds too.

    Add documentation, move files to a proper place and avoid memory leaks.

    Make it work with most kind of texts, and allow backgrounds too.

    Make it work with most kind of texts, and allow backgrounds too.

    Colored chat working as expected for both freetype and non-freetype builds. @nerzhul improvements * Add unit tests * Fix coding style * move guiChatConsole.hpp to client/

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 7.8% (70 of 887 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 57.2% (508 of 887 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (887 of 887 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 39.3% (349 of 887 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 57.0% (506 of 887 strings)

    

    This is a merger of three commits.

    This is a merger of three commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 57.1% (507 of 887 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (887 of 887 strings)

    Add minetest.check_password_entry callback

    

    Gives a convenient way to check a player's password.

    

    This entirely bypasses the SRP protocol, so should be used

    with great care.

    

    This function is not intended to be used

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    Gives a convenient way to check a player's password.

    

    This entirely bypasses the SRP protocol, so should be used

    with great care.

    

    This function is not intended to be used

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    This entirely bypasses the SRP protocol, so should be used

    with great care.

    

    This function is not intended to be used

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    with great care.

    

    This function is not intended to be used

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    This function is not intended to be used

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    in-game, but solely by external protocols, where no

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    authentication of the minetest engine is provided, and

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    also only for protocols, in which the user already gives the

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    server the plaintext password.

    

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    Examples for good use are the classical http form, or irc,

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    an example for a bad use is a password change dialog inside

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    formspec.

    

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    Users should be aware that they lose the advantages of the SRP

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    protocol if they enter their passwords for servers outside the

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    normal entry box, like in in-game formspec menus,

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    or through irc /msg s,

    

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    This patch also fixes an auth.h mistake which has mixed up the

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    order of params inside the decode_srp_verifier_and_salt function.

    

    Zeno-: Added errorstream message for invalid format when I committed

    Zeno-: Added errorstream message for invalid format when I committed

    protection_bypass priv can now be revoked in singleplayer (#4169)

    Remove unused code in s_security.cpp (#4172)

    

    Note that the macro CHECK_FILE_ERR implements the code removed

    Note that the macro CHECK_FILE_ERR implements the code removed

    Particles: Add option to remove particles on collision

    

    Adds the particle option `collision_removal = bool`

    

    Some particles are hard to use right now since they either go through

    solid blocks (without collision detection), and with collision

    detection enabled they (e.g. raindrops) would just stop dead on the

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    Adds the particle option `collision_removal = bool`

    

    Some particles are hard to use right now since they either go through

    solid blocks (without collision detection), and with collision

    detection enabled they (e.g. raindrops) would just stop dead on the

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    Some particles are hard to use right now since they either go through

    solid blocks (without collision detection), and with collision

    detection enabled they (e.g. raindrops) would just stop dead on the

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    solid blocks (without collision detection), and with collision

    detection enabled they (e.g. raindrops) would just stop dead on the

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    detection enabled they (e.g. raindrops) would just stop dead on the

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    floor and sit there until they expire, or worse, scrape along a wall

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    or ceiling.

    

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    We can solve the problem by adding a boolean flag that tells the

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    particle to be removed if it ever collides with something. This will

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    make it easier to add rain that doesn't fall through your roof or stick

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    on the top of it. Or clouds and smoke that don't go through trees.

    

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    Particles that collide with this flag are marked expired

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    unconditionally, causing them to be treated like normal expired

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    particles and cleaned up normally.

    

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    Documentation is adjusted accordingly.

    

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    An added bonus of this patch is that particles can potentially collide

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    many times with nodes, and this reduces the amount of collisions to 1

    (max), which may end up reducing particle load on the client.

    (max), which may end up reducing particle load on the client.

    Add base64 encoding and decoding to the lua api. (#3919)

    Disallow external linkage for default Cavegen NoiseParams

    Dungeongen: Remove dependency on Mapgen

    Mapgen: Combine dungeon generation code

    Mapgen: Deduplicate common constructor code

    Mapgen: Remove calculateNoise from most mapgens

    

    This commit moves noise calculation to the functions where the noise is

    actually required, increasing the separation of concerns and level of

    interdependency for each mapgen method.  Valleys Mapgen is left unmodified.

    This commit moves noise calculation to the functions where the noise is

    actually required, increasing the separation of concerns and level of

    interdependency for each mapgen method.  Valleys Mapgen is left unmodified.

    actually required, increasing the separation of concerns and level of

    interdependency for each mapgen method.  Valleys Mapgen is left unmodified.

    interdependency for each mapgen method.  Valleys Mapgen is left unmodified.

    Mapgen V7: Remove now-unused ridge heightmap

    Cavegen: Move V5-style caves to CavesNoiseIntersection

    Cavegen: Minor misc. fixes

    

    - Convert instances of numeric literal doubles to floats

    - Move dswitchint to a local variable now that being a member is unnecessary

    - Improve const correctness

    - Indentation fixes

    - Convert instances of numeric literal doubles to floats

    - Move dswitchint to a local variable now that being a member is unnecessary

    - Improve const correctness

    - Indentation fixes

    - Move dswitchint to a local variable now that being a member is unnecessary

    - Improve const correctness

    - Indentation fixes

    - Improve const correctness

    - Indentation fixes

    - Indentation fixes

    Fix undefined evaluation order when constructing random vectors

    

    MSVC and GCC evaluate parameters in right-to-left order, whereas Clang

    evaluates in left-to-right order, and of course, an optimization could

    leave the order of evaluation completely indeterminate.

    

    This commit fixes all instances of the error by explicitly assigning the

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    MSVC and GCC evaluate parameters in right-to-left order, whereas Clang

    evaluates in left-to-right order, and of course, an optimization could

    leave the order of evaluation completely indeterminate.

    

    This commit fixes all instances of the error by explicitly assigning the

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    evaluates in left-to-right order, and of course, an optimization could

    leave the order of evaluation completely indeterminate.

    

    This commit fixes all instances of the error by explicitly assigning the

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    leave the order of evaluation completely indeterminate.

    

    This commit fixes all instances of the error by explicitly assigning the

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    This commit fixes all instances of the error by explicitly assigning the

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    results of expressions that use PseudoRandom::next() or range() to their

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    respective vector components.

    

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    The right-to-left evaluation behavior is preserved since Clang is much less

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    commonly used to compile Minetest than GCC and MSVC combined, and would

    therefore cause the least harm.

    therefore cause the least harm.

    Cavegen: Re-add small caves to CavesRandomWalk

    Cavegen: Remove CavesRandomWalk dependency on Mapgen

    Cavegen: Merge instances of repetitive surface level-finding code

    Cavegen: Remove CavesV6 dependency on Mapgen

    Cavegen: Rename CaveV6 to CavesV6

    

    - Add comment explaining why it exists

    - Remove unused 'flooded' variable

    - Rename shadowed variable

    - Fix some code style

    - Add comment explaining why it exists

    - Remove unused 'flooded' variable

    - Rename shadowed variable

    - Fix some code style

    - Remove unused 'flooded' variable

    - Rename shadowed variable

    - Fix some code style

    - Rename shadowed variable

    - Fix some code style

    - Fix some code style

    Cavegen: Merge CaveV5 and CaveV7 into CavesRandomWalk

    Fix MgStoneType and BiomeType enum names

    Mapgen: Combine generateBiomes, dustTopNodes, and generateCaves

    

    This commit condenses the above methods into a single implementation used by

    V7, V5, Flat, Fractal, and Valleys mapgens and introduces MapgenBasic.

    This commit condenses the above methods into a single implementation used by

    V7, V5, Flat, Fractal, and Valleys mapgens and introduces MapgenBasic.

    V7, V5, Flat, Fractal, and Valleys mapgens and introduces MapgenBasic.

    Move biome calculation to BiomeGen

    

    BiomeGen defines an interface that, given a set of BiomeParams, computes biomes

    for a given area using the algorithm implemented by that specific BiomeGen.

    This abstracts away the old system where each mapgen supplied the noises

    required for biome generation.

    BiomeGen defines an interface that, given a set of BiomeParams, computes biomes

    for a given area using the algorithm implemented by that specific BiomeGen.

    This abstracts away the old system where each mapgen supplied the noises

    required for biome generation.

    for a given area using the algorithm implemented by that specific BiomeGen.

    This abstracts away the old system where each mapgen supplied the noises

    required for biome generation.

    This abstracts away the old system where each mapgen supplied the noises

    required for biome generation.

    required for biome generation.

    Tell irrlicht if we handle a key or not.

    

    We can remove the function in MtNativeActivity now

    as it serves precisely that purpose: to tell irrlicht

    that we handled the esc key.

    

    TODO for later:

     * Perhaps try to find a more performant container than KeyList

    We can remove the function in MtNativeActivity now

    as it serves precisely that purpose: to tell irrlicht

    that we handled the esc key.

    

    TODO for later:

     * Perhaps try to find a more performant container than KeyList

    as it serves precisely that purpose: to tell irrlicht

    that we handled the esc key.

    

    TODO for later:

     * Perhaps try to find a more performant container than KeyList

    that we handled the esc key.

    

    TODO for later:

     * Perhaps try to find a more performant container than KeyList

    TODO for later:

     * Perhaps try to find a more performant container than KeyList

     * Perhaps try to find a more performant container than KeyList

    Fix rollback.txt migration

    

    Broken by b1965ac20922e3722392114bd63a22b403dcbe98.

    This also prepares the begin and commit statements only once.

    Broken by b1965ac20922e3722392114bd63a22b403dcbe98.

    This also prepares the begin and commit statements only once.

    This also prepares the begin and commit statements only once.

    Fix irrlicht version checking macro for tooltip_height calculation

    Move updateTextures and fillTileAttribs to ContentFeatures

    Tolerate packet reordering in the early init process

    

    Fixes a bug where packet reordering made the server give the

    client two peer ids instead of one. This in turn confused

    reliable packet sending and made connecting to the server fail.

    

    The client usually sends three packets at init: one "dummy"

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    Fixes a bug where packet reordering made the server give the

    client two peer ids instead of one. This in turn confused

    reliable packet sending and made connecting to the server fail.

    

    The client usually sends three packets at init: one "dummy"

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    client two peer ids instead of one. This in turn confused

    reliable packet sending and made connecting to the server fail.

    

    The client usually sends three packets at init: one "dummy"

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    reliable packet sending and made connecting to the server fail.

    

    The client usually sends three packets at init: one "dummy"

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    The client usually sends three packets at init: one "dummy"

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    packet consisting of two 0 bytes, and the init packet as well as

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    its legacy counterpart. The last one can be turned off since commit

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    af30183124d40a969040d7de4b3a487feec466e4, but this is of lower

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    relevance for the bug. The relevant part here is that network

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    packet reorder (which is a normal occurence) can make the packets

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    reach the server in different order.

    

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    If reorder puts the dummy packet further behind, the following

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    would happen before the patch:

    

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    1. The server will get one of the init packets on channel 1 and

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       assign the client a peer id, as the packet will have zero as

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       peer id.

    

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    2. The server sends a CONTROLTYPE_SET_PEER_ID packet to inform

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       the client of the peer id.

    

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    3. The next packet from the client will contain the peer id set by

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       the server.

    

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    4. The server sets the m_has_sent_with_id member for the client's

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       peer structure to true.

    

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    5. Now the dummy packet arrives. It has a peer id of zero, therefore

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       the server searches whether it already has a peer id for the

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       address the packet was sent from. The search fails because

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       m_has_sent_with_id was set to true and the server only searched

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       for peers with m_has_sent_with_id set to false.

    

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    6. In a working setup, the server would assign the dummy packet to

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       the correct peer id. However the server instead now assigns a

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       second peer id and peer structure to the peer, and assign the

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       packet to that new peer.

    

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    7. In order to inform the peer of its peer id, the server sends a

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       CONTROLTYPE_SET_PEER_ID command packet, reliably, to the peer.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       This packet uses the new peer id.

    

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    8. The client sends an ack to that packet, not with the new peer id

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       but with the peer id sent in 2.

    

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    9. This packet reaches the server, but it drops the ACK as the peer

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       id does not map to any un-ACK-ed packets with that seqnum. The

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       same time, the server still waits for an ACK with the new peer

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       id, which of course won't come. This causes the server to

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       periodically re-try sending that packet, and the client ACKing it

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

       each time.

    

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    Steps 7-9 cause annoyances and erroneous output, but don't cause

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    the connection failure itself.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    The actual mistake that causes the connection failure happens in 6:

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    The server does not assign the dummy packet to the correct peer, but

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    to a newly created one.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    Therefore, all further packets sent by the client on channel 0 are

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    now buffered by the server as it waits for the dummy packet to reach

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    the peer, which of course doesn't happen as the server assigned

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    that packet to the second peer it created for the client.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    This makes the connection code indefinitely buffer the

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    TOSERVER_CLIENT_READY packet, not passing it to higher level code,

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    which stalls the continuation of the further init process

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    indefinitely and causes the actual bug.

    

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    Maybe this can be caused by reordered init packets as well, the only

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    studied case was where network has reliably reordered the dummy

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    packet to get sent after the init packets.

    

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    The patch fixes the bug by not ignoring peers where

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    m_has_sent_with_id has been set anymore. The other changes of the

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    patch are just cleanups of unused methods and fields and additional

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    explanatory comments.

    

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    One could think of alternate ways to fix the bug:

    

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    * The client could simply take the new peer id and continue

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      communicating with that. This is however worse than the fix as

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      it requires the peer id set command to be sent reliably (which

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      currently happens, but it cant be changed anymore). Also, such a

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      change would require both server and client to be patched in order

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      for the bug to be fixed, as right now the client ignores peer id

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      set commands after the peer id is different from

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      PEER_ID_INEXISTENT and the server requires modification too to

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      change the peer id internally.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      And, most importantly, right now we guarantee higher level server

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      code that the peer id for a certain peer does not change. This

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      guarantee would have to be broken, and it would require much

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      larger changes to the server than this patch means.

    

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    * One could stop sending the dummy packet. One may be unsure whether

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      this is a good idea, as the meaning of the dummy packet is not

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      known (it might be there for something important), and as it is

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      possible that the init packets may cause this problem as well

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

      (although it may be possible too that they can't cause this).

    

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    Thanks to @auouymous who had originally reported this bug and who

    has helped patiently in finding its cause.

    has helped patiently in finding its cause.

    Fix a m_camera not used warning fix pointed by clang

    Implement a PostgreSQL backend

    Gitignore: ignore idea and ninja files

    Item entities: Don't show description as infotext

    

    Partially reverts #3547

    Infotext remains optional for objects, empty by default

    Partially reverts #3547

    Infotext remains optional for objects, empty by default

    Infotext remains optional for objects, empty by default

    Fix tooltip height for versions of irrlicht < 1.8.2

    

    Version 1.8.2 of irrlicht changed the way that IGUIStaticText::getTextHeight() works and since that release properly deals with newlines.

    

    From irrlicht changes.txt for 1.8.2, "IGUIStaticText::getTextHeight returns now the correct height for texts with newlines even WordWrap is not set."

    Version 1.8.2 of irrlicht changed the way that IGUIStaticText::getTextHeight() works and since that release properly deals with newlines.

    

    From irrlicht changes.txt for 1.8.2, "IGUIStaticText::getTextHeight returns now the correct height for texts with newlines even WordWrap is not set."

    From irrlicht changes.txt for 1.8.2, "IGUIStaticText::getTextHeight returns now the correct height for texts with newlines even WordWrap is not set."

    Implement DatabaseException for databases

    Add on_punchnode callback

    DB::loadBlock copy removal & DB backend cleanup

    * Remove the copy from db::loadBlock by using a pointer to the destination

    * cleanup db backend, the child backend doesn't have to set their functions as virtual

    * Remove the copy from db::loadBlock by using a pointer to the destination

    * cleanup db backend, the child backend doesn't have to set their functions as virtual

    * cleanup db backend, the child backend doesn't have to set their functions as virtual

    Really fix ncurses lookup on Arch Linux

    

    Commit 27ee8d8943080a5dd735c9faa47c726604bafdff forgot to add the paths

    without ncursesw/ to the find_path() call

    Commit 27ee8d8943080a5dd735c9faa47c726604bafdff forgot to add the paths

    without ncursesw/ to the find_path() call

    without ncursesw/ to the find_path() call

    Android: enable parallelism for main target too

    

    This adds to the changes that commit

    

    98d16e0d9a945f5f48462c05f26ae4bde2db5731 "Android: Tell make about sub-makes to speed up build"

    

    did, and enables parallel builds for minetest

    itself as well.

    This adds to the changes that commit

    

    98d16e0d9a945f5f48462c05f26ae4bde2db5731 "Android: Tell make about sub-makes to speed up build"

    

    did, and enables parallel builds for minetest

    itself as well.

    98d16e0d9a945f5f48462c05f26ae4bde2db5731 "Android: Tell make about sub-makes to speed up build"

    

    did, and enables parallel builds for minetest

    itself as well.

    did, and enables parallel builds for minetest

    itself as well.

    itself as well.

    Documentation: Remove incorrect and excessive mapgen flags text

    Continue with 0.4.14-dev

    Bump version to 0.4.14

    Android: Re-add button to remove singleplayer world

    

    Fixes #4120.

    Fixes #4120.

    Fix android build by fixing patch line endings

    Fix locked hardware buttons on Android

    

    Fixes #2122

    Fixes #1454

    

    Addendum (est31)

    According from its docs in android_native_app_glue.h (from the NDK), the

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    Fixes #2122

    Fixes #1454

    

    Addendum (est31)

    According from its docs in android_native_app_glue.h (from the NDK), the

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    Fixes #1454

    

    Addendum (est31)

    According from its docs in android_native_app_glue.h (from the NDK), the

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    Addendum (est31)

    According from its docs in android_native_app_glue.h (from the NDK), the

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    According from its docs in android_native_app_glue.h (from the NDK), the

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    onInputEvent should "Return 1 if you have handled the event, 0 for any

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    default dispatching". Before, we always returned 1, meaning we blocked

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    all hardware keys to be given to the OS.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    This broke the volume keys and has caused #2122 and #1454.

    

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    Although it bases on lots of guesswork, it can probably safely be said that

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    CGUIEnvironment::postEventFromUser returns true if the event was handled,

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    and false if not. Therefore, set the status variable depending on what

    postEventFromUser returned.

    postEventFromUser returned.

    Mainmenu: don't show change keys dialog on android

    

    The change keys dialog can't be left. It doesn't make

    much sense to show it on Android in the first place,

    therefore disable it, just like commit

    

    aed70cb0b652d6cb2272e7b94cd56671b3df6239 'Disable sound and key binding settings in "pause" menu on android'

    

    has disabled it for the esc menu.

    

    Fixes #4115.

    The change keys dialog can't be left. It doesn't make

    much sense to show it on Android in the first place,

    therefore disable it, just like commit

    

    aed70cb0b652d6cb2272e7b94cd56671b3df6239 'Disable sound and key binding settings in "pause" menu on android'

    

    has disabled it for the esc menu.

    

    Fixes #4115.

    much sense to show it on Android in the first place,

    therefore disable it, just like commit

    

    aed70cb0b652d6cb2272e7b94cd56671b3df6239 'Disable sound and key binding settings in "pause" menu on android'

    

    has disabled it for the esc menu.

    

    Fixes #4115.

    therefore disable it, just like commit

    

    aed70cb0b652d6cb2272e7b94cd56671b3df6239 'Disable sound and key binding settings in "pause" menu on android'

    

    has disabled it for the esc menu.

    

    Fixes #4115.

    aed70cb0b652d6cb2272e7b94cd56671b3df6239 'Disable sound and key binding settings in "pause" menu on android'

    

    has disabled it for the esc menu.

    

    Fixes #4115.

    has disabled it for the esc menu.

    

    Fixes #4115.

    Fixes #4115.

    Fix #4111 ("Provided world path doesn't exist" if choosing singleplayer on first run")

    

    Bug and whitespace error fixed (Zeno)

    Bug and whitespace error fixed (Zeno)

    Android: download deps using https

    

    Its more secure, and some pages even redirect to the https version.

    Its more secure, and some pages even redirect to the https version.

    Android: update openssl to 1.0.2h

    Fix typo in the info printed by --version

    Add platform name to --version information

    Mapgen V6: Synchronize spflags with defaultsettings

    

    This fixes an issue where trees are omitted from Mapgen V6 maps on

    configurations that explicitly defined the mgv6_spflags setting.

    This fixes an issue where trees are omitted from Mapgen V6 maps on

    configurations that explicitly defined the mgv6_spflags setting.

    configurations that explicitly defined the mgv6_spflags setting.

    README: Update Fedora dependencies list

    

    Edited packages to reflect correct packages

    Edited packages to reflect correct packages

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 56.8% (504 of 887 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 51.5% (457 of 887 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 51.5% (457 of 887 strings)

    

    This is a merger of two commits.

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 38.4% (341 of 887 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 10.5% (94 of 887 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (887 of 887 strings)

    This is a merger of three commits.

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 51.5% (457 of 887 strings)

    

    This is a merger of two commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 90.7% (805 of 887 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 50.6% (449 of 887 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 75.7% (672 of 887 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 27.6% (245 of 887 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 73.9% (656 of 887 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (887 of 887 strings)

    This is a merger of three commits.

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 89.6% (795 of 887 strings)

    This is a merger of three commits.

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 85.6% (760 of 887 strings)

    Lua_api.txt: Fix documentation for facedir rotation

    Add [resize texture modifier Resizes the texture to the given dimensions.

    Update credits tab

    Defaultsettings/Android: Increase 'max block generate distance' to 3

    Fixes #4098 ce8a9ed didn't quite go far enough, and left this bug in

    Chat: Keep scroll position constant in ChatBuffer::deleteOldest()

    Optimize default settings for Android build

    Run unescape_enriched *after* unescape_string.

    

    Doing it the other way round was a mistake, since it breaks

    minetest.formspec_escape with escape sequences that contain

    special characters.

    Doing it the other way round was a mistake, since it breaks

    minetest.formspec_escape with escape sequences that contain

    special characters.

    minetest.formspec_escape with escape sequences that contain

    special characters.

    special characters.

    Make dropdowns show the string that was their argument.

    

    This makes it work even if it contains escape sequences,

    which didn't work before.

    This makes it work even if it contains escape sequences,

    which didn't work before.

    which didn't work before.

    Android: Increase player_stepheight for thicker snow nodebox

    Lua_api.txt: Add warnings of l-system lighting bug

    Run updatepo.sh

    Update settings translation file and minetest.conf.example

    Fix holding down F10 (open console) causing GUI to freeze

    Settings_translation_file: Update mapgen with cave width parameter

    Fix Windows build

    

    Fixes the issue introduced by c1a0ebb (Fix use of uninitialised variable

    in class Event) causing Windows builds to fail

    Fixes the issue introduced by c1a0ebb (Fix use of uninitialised variable

    in class Event) causing Windows builds to fail

    in class Event) causing Windows builds to fail

    FileSelectMenu: Fix formspec parsing broken by Irrlicht file-chooser

    find_path: consider walkable instead of CONTENT_AIR

    

    The path finding code works fairly well except that it considers

    anythin not CONTENT_AIR to be "above the surface". This results in

    paths that are unwalkable for entities since e.g. plants are not

    walkable. The path would force them to jump on top of grass plants,

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    The path finding code works fairly well except that it considers

    anythin not CONTENT_AIR to be "above the surface". This results in

    paths that are unwalkable for entities since e.g. plants are not

    walkable. The path would force them to jump on top of grass plants,

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    anythin not CONTENT_AIR to be "above the surface". This results in

    paths that are unwalkable for entities since e.g. plants are not

    walkable. The path would force them to jump on top of grass plants,

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    paths that are unwalkable for entities since e.g. plants are not

    walkable. The path would force them to jump on top of grass plants,

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    walkable. The path would force them to jump on top of grass plants,

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    etc..

    

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    The obvious solution is not to use CONTENT_AIR as a criteria, but

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    instead distinguish between walkable and non-walkable nodes. This

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    results in paths that properly walk through grass nodes.

    

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    This was extensively tested by a flock of electric sheep.

    

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    Note that for underwater purposes this changes the behaviour from

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    "the surface is walkable" to "ignore water entirely" making the

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    path go across the water bottom, and pathing fail likely from the

    water surface. This is intentional.

    water surface. This is intentional.

    Pathfinder: improve GridNode storage

    

    Before, the GridNodes were stored in vector<vector<vector<T>>>,

    and initialized in advance. Putting three vectors inside each other

    puts lots of unneccessary stress onto the allocator, costs more memory,

    and has worse cache locality than a flat vector<T>.

    

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    Before, the GridNodes were stored in vector<vector<vector<T>>>,

    and initialized in advance. Putting three vectors inside each other

    puts lots of unneccessary stress onto the allocator, costs more memory,

    and has worse cache locality than a flat vector<T>.

    

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    and initialized in advance. Putting three vectors inside each other

    puts lots of unneccessary stress onto the allocator, costs more memory,

    and has worse cache locality than a flat vector<T>.

    

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    puts lots of unneccessary stress onto the allocator, costs more memory,

    and has worse cache locality than a flat vector<T>.

    

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    and has worse cache locality than a flat vector<T>.

    

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    For larger search distances, an the array getting initialized means

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    essentially O(distance^3) complexity in both time and memory,

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    which makes the current path search a joke. In order to really

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    profit from the dijkstra/A* algorithms, other data structures

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    need to be used for larger distances.

    

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    For shorter distances, a map based GridNode storage may be slow as

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    it requires lots of levels of indirection, which is bad for things like

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    cache locality, and an array based storage may be faster.

    

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    This commit does:

    

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    1. remove the vector<vector<vector<T>>> based GridNodes storage that

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            is allocated and initialized in advance and for the whole

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            possible area.

    

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    2. Add a vector<T> based GridNodes storage that is allocated and

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            initialized in advance for the whole possible area.

    

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    3. Add a map<P,T> based GridNodes storage whose elements are

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            allocated and initialized, when the path search code

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            demands it.

    

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    4. Add code to decide between approach 2 and 3,

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            based on the length of the path.

    

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

    5. Remove the unused "surfaces" member of the PathGridnode class.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            Setting this isn't as easy anymore for the

            map based GridNodes storage.

            map based GridNodes storage.

    Pathfinder: use core::aabbox3d instead of own type

    

    There is no need to reinvent the wheel here, we have

    great classes from irrlicht.

    There is no need to reinvent the wheel here, we have

    great classes from irrlicht.

    great classes from irrlicht.

    Pathfinder: Fix style

    

    * Fix naming style for methods and classes:

            Use camelCase for methods and PascalCase for classes as

            code style demands it. And use sneak_case for methods that

            are not member of a class.

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

    * Fix naming style for methods and classes:

            Use camelCase for methods and PascalCase for classes as

            code style demands it. And use sneak_case for methods that

            are not member of a class.

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

            Use camelCase for methods and PascalCase for classes as

            code style demands it. And use sneak_case for methods that

            are not member of a class.

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

            code style demands it. And use sneak_case for methods that

            are not member of a class.

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

            are not member of a class.

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

    * Replace "* " with " *" for Pointers

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

    * Same for references

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

    * Put function body opening braces on new line

    * Other misc minor non functional style improvements

    * Other misc minor non functional style improvements

    Move pathfinder classes to cpp file

    

    There is no need to put them into the header, they are solely used

    inside the pathfinder.

    

    Another advantage of this change is that only the pathfinder.cpp has

    to be compiled if PATHFINDER_DEBUG gets defined or undefined, not

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    There is no need to put them into the header, they are solely used

    inside the pathfinder.

    

    Another advantage of this change is that only the pathfinder.cpp has

    to be compiled if PATHFINDER_DEBUG gets defined or undefined, not

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    inside the pathfinder.

    

    Another advantage of this change is that only the pathfinder.cpp has

    to be compiled if PATHFINDER_DEBUG gets defined or undefined, not

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    Another advantage of this change is that only the pathfinder.cpp has

    to be compiled if PATHFINDER_DEBUG gets defined or undefined, not

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    to be compiled if PATHFINDER_DEBUG gets defined or undefined, not

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    all files including the .h.

    

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    This commit moves the pathfinder classes to the cpp file without

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    modifications.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    Also, the PATHFINDER_DEBUG macro gets moved to the cpp file and

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    the PATHFINDER_CALC_TIME macro gets moved to a plce where it

    actually does work.

    actually does work.

    Fix use of uninitialised variable in class Event

    Use MoveFileEx to rename files on Windows (not rename)

    Mainmenu: Remove space under mod list

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 51.7% (448 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 100.0% (865 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 75.4% (653 of 865 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 46.5% (403 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 28.7% (249 of 865 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 57.4% (497 of 865 strings)

    

    This is a merger of three commits.

    This is a merger of three commits.

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 21.8% (189 of 865 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 67.5% (584 of 865 strings)

    

    This is a merger of 5 commits.

    This is a merger of 5 commits.

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (865 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 75.3% (652 of 865 strings)

    

    This is a merger of 3 commits.

    This is a merger of 3 commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 59.3% (513 of 865 strings)

    

    This is a merger of 5 commits.

    This is a merger of 5 commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 58.9% (510 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 58.9% (510 of 865 strings)

    

    This is a merger of two commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 58.9% (510 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 58.9% (510 of 865 strings)

    

    This is a merger of two commits.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 46.2% (400 of 865 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 71.3% (617 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 94.1% (814 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of two commits.

    Fix POSIX C++11 build

    

    I broke this in 46fd114e9a4e05b74576dce682e24357363298e7.

    I broke this in 46fd114e9a4e05b74576dce682e24357363298e7.

    Fix prepreprocessor error in thread.h (related to C++11 threads)

    Mapgen: Make 3D noise tunnels' width settable

    

    Correct parameter names mg_valleys to mgvalleys

    Remove biome NoiseParams from MapgenValleysParams

    Improve format of parameter code

    Correct parameter names mg_valleys to mgvalleys

    Remove biome NoiseParams from MapgenValleysParams

    Improve format of parameter code

    Remove biome NoiseParams from MapgenValleysParams

    Improve format of parameter code

    Improve format of parameter code

    Fix race on thread creation

    

    This often broke the threading tests on OSX.

    This often broke the threading tests on OSX.

    Upgrade Android build to Gradle build system

    

    The old Ant build system has been deprecated for a while and new development is focused on Gradle.

    I also removed a hardcoded string that lint caught and moved the patch files to a subdirectory.

    I left the JNI files in the root directory.

    The old Ant build system has been deprecated for a while and new development is focused on Gradle.

    I also removed a hardcoded string that lint caught and moved the patch files to a subdirectory.

    I left the JNI files in the root directory.

    I also removed a hardcoded string that lint caught and moved the patch files to a subdirectory.

    I left the JNI files in the root directory.

    I left the JNI files in the root directory.

    Avoid teleporting player if /teleport coords are out-of-range

    Android menu: Unified serverlist

    Builtin: Add basic_privs setting

    Mainmenu: Standardize the menu button order and sizes

    Handle particle spawners in env and delete expired ids

    

    Rebased by Zeno (2016-04-2016)

    Rebased by Zeno (2016-04-2016)

    Android: Update dependencies, GMP was required as a dependency

    Inventory: Make ItemStack with different metadata not stackable

    tile.cpp: Automatically upscale lower resolution texture

    Make GUIEngine use pause_fps_max not fps_max

    Escape more strings: formspecs, item descriptions, infotexts...

    

    Also, change the escape character to the more standard \x1b

    Thus, it can be used in the future for translation or colored text,

    for example.

    Also, change the escape character to the more standard \x1b

    Thus, it can be used in the future for translation or colored text,

    for example.

    Thus, it can be used in the future for translation or colored text,

    for example.

    for example.

    Fix bug that was leading to oversized tooltips containing multiline text when it have multiple lines

    Fix mainmenu code downloading the public serverlist twice.

    

    Also, fix a nil error that can happen sometimes in

    menu_handle_key_up_down

    Also, fix a nil error that can happen sometimes in

    menu_handle_key_up_down

    menu_handle_key_up_down

    CONTRIBUTING: disallow signed git commits

    

    They break bzr-git, and bzr-git breaks the Minetest PPAs.

    They break bzr-git, and bzr-git breaks the Minetest PPAs.

    Make logging use a fixed-length buffer to avoid race conditions.

    

    Previously, race conditions occurred inside logging, that caused

    segfaults because a thread was trying to use an old pointer that

    was freed when the string was reallocated. Using a fixed-length buffer

    avoids this, at the cost of cutting too long messages over seveal lines.

    Previously, race conditions occurred inside logging, that caused

    segfaults because a thread was trying to use an old pointer that

    was freed when the string was reallocated. Using a fixed-length buffer

    avoids this, at the cost of cutting too long messages over seveal lines.

    segfaults because a thread was trying to use an old pointer that

    was freed when the string was reallocated. Using a fixed-length buffer

    avoids this, at the cost of cutting too long messages over seveal lines.

    was freed when the string was reallocated. Using a fixed-length buffer

    avoids this, at the cost of cutting too long messages over seveal lines.

    avoids this, at the cost of cutting too long messages over seveal lines.

    Biomes: Make dust fallback 'ignore' to fix y = 63 lighting

    

    The shadow bug at y = 63 was caused by dark air being placed as dust,

    when the biome dust was unspecified it was falling back to 'air'

    In dustTopNodes only dust == 'ignore' will disable dust placement

    The shadow bug at y = 63 was caused by dark air being placed as dust,

    when the biome dust was unspecified it was falling back to 'air'

    In dustTopNodes only dust == 'ignore' will disable dust placement

    when the biome dust was unspecified it was falling back to 'air'

    In dustTopNodes only dust == 'ignore' will disable dust placement

    In dustTopNodes only dust == 'ignore' will disable dust placement

    Textures: Replace menu background fallback dirt_bg.png with empty sky texture

    Fix timer initialization.

    

    This fixes the problem that the first timer tick is an

    overrun and causes all timers to expire immediately.

    

    replaces #4003

    This fixes the problem that the first timer tick is an

    overrun and causes all timers to expire immediately.

    

    replaces #4003

    overrun and causes all timers to expire immediately.

    

    replaces #4003

    replaces #4003

    Mainmenu: Code cleaning

    Mainmenu: Unify favorite servers with main serverlist

    Mgv7: Combine mountain terrain generation with base terrain generation

    

    Previous mountain terrain generation was by necessity placing

    stone in air, this was removing air from any overgenerated

    structures such as tunnels, dungeons and large caves

    Moving it into the base terrain generation loop ensures that

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    Previous mountain terrain generation was by necessity placing

    stone in air, this was removing air from any overgenerated

    structures such as tunnels, dungeons and large caves

    Moving it into the base terrain generation loop ensures that

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    stone in air, this was removing air from any overgenerated

    structures such as tunnels, dungeons and large caves

    Moving it into the base terrain generation loop ensures that

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    structures such as tunnels, dungeons and large caves

    Moving it into the base terrain generation loop ensures that

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    Moving it into the base terrain generation loop ensures that

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    only 'ignore' is replaced

    

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    generateRidgeTerrain: only return if node_max.Y < water_level - 16

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    Previously, if water level was set a few nodes above a mapchunk

    border the river channel was only partially excavated

    border the river channel was only partially excavated

    falling: walk 4 additional diagonally down directions.

    

    This seems very little cost and matches the old behavior more

    closely. This will cause some more falling nodes to get added

    to falling clusters. With the efficiency of the algorithm, this

    really doesn't do much damage.

    This seems very little cost and matches the old behavior more

    closely. This will cause some more falling nodes to get added

    to falling clusters. With the efficiency of the algorithm, this

    really doesn't do much damage.

    closely. This will cause some more falling nodes to get added

    to falling clusters. With the efficiency of the algorithm, this

    really doesn't do much damage.

    to falling clusters. With the efficiency of the algorithm, this

    really doesn't do much damage.

    really doesn't do much damage.

    Mainmenu: Still support favorites if send_pre_v25_init is disabled

    

    @SmallJoker has noted a bug that servers from the (local) main menu

    favorites list can't be opened.

    

    This commit fixes the bug by disabling any main menu based protocol

    checks for servers from the favorite list.

    

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    @SmallJoker has noted a bug that servers from the (local) main menu

    favorites list can't be opened.

    

    This commit fixes the bug by disabling any main menu based protocol

    checks for servers from the favorite list.

    

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    favorites list can't be opened.

    

    This commit fixes the bug by disabling any main menu based protocol

    checks for servers from the favorite list.

    

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    This commit fixes the bug by disabling any main menu based protocol

    checks for servers from the favorite list.

    

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    checks for servers from the favorite list.

    

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    Also, it fixes a second bug that happens when a server from the

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    public serverlist doesn't send its supported protocol versions,

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    most likely because its running a minetest older than commit [1].

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    Then we have shown an error msg that the server has enforced

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    one specific protocol version. This was most likely not the case.

    

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    Of course, we can't do anything better than do an assumption on

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    the protocol versions if they are not known. That assumption

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    should however be closest to the most often occuring case as

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    possible.

    

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    Also, some little cleanups.

    

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    [1]: 5a0ed780f56a5225b3d7c5f64099586e390e5f39 "Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist"

    mainmenu: Tidy up logic in is_server_protocol_compat() (#3997)

    

    Apply de morgan to simplify the logic.

    Apply de morgan to simplify the logic.

    Add option to disable entity selectionboxes. (#3992)

    

    Setting only loaded once, default value is to enable them.

    Setting only loaded once, default value is to enable them.

    Fix inventory hud scaling

    Mgv7, mgflat, mgfractal: Tunnel generation code optimisation

    Mgv5: Optimise tunnels, add biome material in entrances

    

    Place biome top node on tunnel entrance floor

    Instead of doing nothing at node_max.Y + 1 use 1-down

    overgeneration for tunnel generation and noisemaps

    Place biome top node on tunnel entrance floor

    Instead of doing nothing at node_max.Y + 1 use 1-down

    overgeneration for tunnel generation and noisemaps

    Instead of doing nothing at node_max.Y + 1 use 1-down

    overgeneration for tunnel generation and noisemaps

    overgeneration for tunnel generation and noisemaps

    Mgvalleys: Don't let cavegen place biome nodes everywhere

    

    Fix use of 'air_above' bool so that biome

    nodes are only placed in tunnel floors

    Minor code improvements

    'Continue' when massive cave air is placed

    Fix use of 'air_above' bool so that biome

    nodes are only placed in tunnel floors

    Minor code improvements

    'Continue' when massive cave air is placed

    nodes are only placed in tunnel floors

    Minor code improvements

    'Continue' when massive cave air is placed

    Minor code improvements

    'Continue' when massive cave air is placed

    'Continue' when massive cave air is placed

    Fix hotbar placement on displays with low screen density

    Minimap: revert change from RGBA to Indexed

    

    @kilbith spotted correctly that I had accidentally removed the

    "soft" edging on the minimap overlay by converting it from RGBA

    to Indexed, which killed the transparent pixels on the edging.

    @kilbith spotted correctly that I had accidentally removed the

    "soft" edging on the minimap overlay by converting it from RGBA

    to Indexed, which killed the transparent pixels on the edging.

    "soft" edging on the minimap overlay by converting it from RGBA

    to Indexed, which killed the transparent pixels on the edging.

    to Indexed, which killed the transparent pixels on the edging.

    Convert nodeupdate to non-recursive

    

    This took me a while to figure out. We no longer visit all 9 block

    around and with the touched node, but instead visit adjacent plus

    self. We then walk -non- recursively through all neigbors and if

    they cause a nodeupdate, we just keep walking until it ends. On

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    This took me a while to figure out. We no longer visit all 9 block

    around and with the touched node, but instead visit adjacent plus

    self. We then walk -non- recursively through all neigbors and if

    they cause a nodeupdate, we just keep walking until it ends. On

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    around and with the touched node, but instead visit adjacent plus

    self. We then walk -non- recursively through all neigbors and if

    they cause a nodeupdate, we just keep walking until it ends. On

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    self. We then walk -non- recursively through all neigbors and if

    they cause a nodeupdate, we just keep walking until it ends. On

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    they cause a nodeupdate, we just keep walking until it ends. On

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    the way back we prune the tail.

    

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    I've tested this with 8000+ sand nodes. Video result is here:

    

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

      https://youtu.be/liKKgLefhFQ

    

    Took ~ 10 seconds to process and return to normal.

    Took ~ 10 seconds to process and return to normal.

    Hud: Cache hud_scaling, fix minor style issues

    Hud: Fix offset being ignored by inventory bar

    Update CSRP-GMP to commit deaa11a7c29a73008

    

    Backports 10 commits, with 8 commits

    actually affecting source code:

    

    https://github.com/est31/csrp-gmp/compare/695822e45d9ca48b75b4ec1af1b4eea19139f8b1...deaa11a7c29a730087380da231e785909ad21630

    Backports 10 commits, with 8 commits

    actually affecting source code:

    

    https://github.com/est31/csrp-gmp/compare/695822e45d9ca48b75b4ec1af1b4eea19139f8b1...deaa11a7c29a730087380da231e785909ad21630

    actually affecting source code:

    

    https://github.com/est31/csrp-gmp/compare/695822e45d9ca48b75b4ec1af1b4eea19139f8b1...deaa11a7c29a730087380da231e785909ad21630

    https://github.com/est31/csrp-gmp/compare/695822e45d9ca48b75b4ec1af1b4eea19139f8b1...deaa11a7c29a730087380da231e785909ad21630

    Document hpchange callback ordering thing (#3981)

    

    Document hpchange callback ordering thing

    

    Callbacks registered by register_on_player_hpchange are ordered so that non-modifiers are called after modifiers are called. Credit to @TeTpaAka who mentioned this previously-undocumented feature in #3799.

    

    See also commit

    

    aa13baa30a45b0f834c23bd5c0407895eb8ec0ee "Add minetest.register_on_player_hpchange"

    Document hpchange callback ordering thing

    

    Callbacks registered by register_on_player_hpchange are ordered so that non-modifiers are called after modifiers are called. Credit to @TeTpaAka who mentioned this previously-undocumented feature in #3799.

    

    See also commit

    

    aa13baa30a45b0f834c23bd5c0407895eb8ec0ee "Add minetest.register_on_player_hpchange"

    Callbacks registered by register_on_player_hpchange are ordered so that non-modifiers are called after modifiers are called. Credit to @TeTpaAka who mentioned this previously-undocumented feature in #3799.

    

    See also commit

    

    aa13baa30a45b0f834c23bd5c0407895eb8ec0ee "Add minetest.register_on_player_hpchange"

    See also commit

    

    aa13baa30a45b0f834c23bd5c0407895eb8ec0ee "Add minetest.register_on_player_hpchange"

    aa13baa30a45b0f834c23bd5c0407895eb8ec0ee "Add minetest.register_on_player_hpchange"

    Minimap: "North" indicator arrow for circle minimap

    

    Related: #3730

    

    This adds a simple, and small "North" indicator to the circular

    minimap. The indicator is in a classical triangle-like arrow with a

    little bit of shading to accentuate the shape and give it a little

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    Related: #3730

    

    This adds a simple, and small "North" indicator to the circular

    minimap. The indicator is in a classical triangle-like arrow with a

    little bit of shading to accentuate the shape and give it a little

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    This adds a simple, and small "North" indicator to the circular

    minimap. The indicator is in a classical triangle-like arrow with a

    little bit of shading to accentuate the shape and give it a little

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    minimap. The indicator is in a classical triangle-like arrow with a

    little bit of shading to accentuate the shape and give it a little

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    little bit of shading to accentuate the shape and give it a little

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    bit depth. The indicator is stuck exactly at the edge as far outwards

    as possible, and is not too intrusive but still easy enough to spot.

    as possible, and is not too intrusive but still easy enough to spot.

    Mainmenu: Refactor tab UI code

    

     - Use local variables for tabs in place of globals

     - Merge together if statements where possible

     - Replace manual table searching code with indexof where possible

     - Use local variables for tabs in place of globals

     - Merge together if statements where possible

     - Replace manual table searching code with indexof where possible

     - Merge together if statements where possible

     - Replace manual table searching code with indexof where possible

     - Replace manual table searching code with indexof where possible

    Fix ncurses lookup on Arch Linux

    

    Arch Linux doesn't put it's ncursesw includes inside an ncursesw

    directory.  This script ends up setting USE_CURSES as true, but

    doesn't pick up any of the headers.

    

    https://bugs.archlinux.org/task/13994

    Arch Linux doesn't put it's ncursesw includes inside an ncursesw

    directory.  This script ends up setting USE_CURSES as true, but

    doesn't pick up any of the headers.

    

    https://bugs.archlinux.org/task/13994

    directory.  This script ends up setting USE_CURSES as true, but

    doesn't pick up any of the headers.

    

    https://bugs.archlinux.org/task/13994

    doesn't pick up any of the headers.

    

    https://bugs.archlinux.org/task/13994

    https://bugs.archlinux.org/task/13994

    Mapgen: Optimise cave noises and tunnel excavation

    

    Instead of doing nothing at node_max.Y + 1 use 1-down

    overgeneration for tunnel generation and noisemaps

    Move some old unused code in mgv7 to end of file

    Instead of doing nothing at node_max.Y + 1 use 1-down

    overgeneration for tunnel generation and noisemaps

    overgeneration for tunnel generation and noisemaps

    Move some old unused code in mgv7 to end of file

    Re-add and disable blit_with_interpolate_overlay

    Clearer explanation of [colorize with alpha

    Fix #3955 (player dying on login).

    

    It was caused by player not moving because fall was prevented, but their

    velocity still increasing, causing fatal fall damage when world was

    finally loaded. This commit fixes it by setting player velocity to zero

    when the world around them is not loaded.

    It was caused by player not moving because fall was prevented, but their

    velocity still increasing, causing fatal fall damage when world was

    finally loaded. This commit fixes it by setting player velocity to zero

    when the world around them is not loaded.

    velocity still increasing, causing fatal fall damage when world was

    finally loaded. This commit fixes it by setting player velocity to zero

    when the world around them is not loaded.

    finally loaded. This commit fixes it by setting player velocity to zero

    when the world around them is not loaded.

    when the world around them is not loaded.

    Fix compiler warnings from "Add an option to colorize to respect the destination alpha"

    

    Fix warnings added by commit 01ae43c48009f816f4649fae2f7f6997452aa6cf

    

    Fixes #3952

    Fix warnings added by commit 01ae43c48009f816f4649fae2f7f6997452aa6cf

    

    Fixes #3952

    Fixes #3952

    Add an option to colorize to respect the destination alpha

    

    Also, rework the colorizing code to be more efficient.

    Also, rework the colorizing code to be more efficient.

    Dungeongen: Update disabled torch placement code

    Fix nametag hiding

    

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    has added a regression to still display

    a shadow if their alpha got set to 0.

    a shadow if their alpha got set to 0.

    Mainmenu: Move description.txt textbox down

    

    Additionally, fix misc. code style issues

    Additionally, fix misc. code style issues

    Remove expensive copy of ContentFeatures

    ParticleManager::handleParticleEvent: use switch

    

    Use a proper switch with breaks.

    Use a proper switch with breaks.

    mg_schematic: fix leak in lua API, and small cleanup

    

    * Fix leak like behaviour if you load multiple schematics in a loop.

    

    * Cleanup check in for, fixing theoretical out of bounds read if

            Schematic::deserializeFromMts reduced the number of elements

            in m_nodenames. A != check may need an overflow of the counter

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

    * Fix leak like behaviour if you load multiple schematics in a loop.

    

    * Cleanup check in for, fixing theoretical out of bounds read if

            Schematic::deserializeFromMts reduced the number of elements

            in m_nodenames. A != check may need an overflow of the counter

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

    * Cleanup check in for, fixing theoretical out of bounds read if

            Schematic::deserializeFromMts reduced the number of elements

            in m_nodenames. A != check may need an overflow of the counter

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

            Schematic::deserializeFromMts reduced the number of elements

            in m_nodenames. A != check may need an overflow of the counter

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

            in m_nodenames. A != check may need an overflow of the counter

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

            before it hits, if origsize is larger than m_nodenames.size().

    

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

    * Fix function name passed to errorstream: it was wrong. Also use

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

            __FUNCTION__ instead of manually using the method name at other

            places in the function.

    

    * Don't shadow the name member in the loop.

            places in the function.

    

    * Don't shadow the name member in the loop.

    * Don't shadow the name member in the loop.

    Mapgen: Don't spread light of nodes outside the desired area

    

    This fixes #3935, a regression from 0338c2e.

    An 'optimization' was performed where an index for the VoxelManip being

    operated on was mistakenly used for bounds checking within the incorrect

    VoxelArea, namely, the area wherein light should be spread.

    This fixes #3935, a regression from 0338c2e.

    An 'optimization' was performed where an index for the VoxelManip being

    operated on was mistakenly used for bounds checking within the incorrect

    VoxelArea, namely, the area wherein light should be spread.

    An 'optimization' was performed where an index for the VoxelManip being

    operated on was mistakenly used for bounds checking within the incorrect

    VoxelArea, namely, the area wherein light should be spread.

    operated on was mistakenly used for bounds checking within the incorrect

    VoxelArea, namely, the area wherein light should be spread.

    VoxelArea, namely, the area wherein light should be spread.

    Nodes shader: Decrease amplitude of waving leaves and plants

    

    Fix initialisation of variable 'disp'

    Fix a few minor code style issues

    Add independent X motion combining 2 prime frequencies

    Fix initialisation of variable 'disp'

    Fix a few minor code style issues

    Add independent X motion combining 2 prime frequencies

    Fix a few minor code style issues

    Add independent X motion combining 2 prime frequencies

    Add independent X motion combining 2 prime frequencies

    Mgv7: Decrease cliff steepness

    stop falling.lua error

    

    2016-03-27 15:47:01: ERROR[Main]: ServerError: Lua: Runtime error from mod '*builtin*' in callback luaentity_Step(): Node name is not set or is not a string!

    2016-03-27 15:47:01: ERROR[Main]: stack traceback:

    2016-03-27 15:47:01: ERROR[Main]:       [C]: in function 'add_node'

    2016-03-27 15:47:01: ERROR[Main]:       /usr/share/minetest/builtin/game/falling.lua:96: in function </usr/share/minetest/builtin/game/falling.lua:43>

    2016-03-27 15:47:01: ERROR[Main]: ServerError: Lua: Runtime error from mod '*builtin*' in callback luaentity_Step(): Node name is not set or is not a string!

    2016-03-27 15:47:01: ERROR[Main]: stack traceback:

    2016-03-27 15:47:01: ERROR[Main]:       [C]: in function 'add_node'

    2016-03-27 15:47:01: ERROR[Main]:       /usr/share/minetest/builtin/game/falling.lua:96: in function </usr/share/minetest/builtin/game/falling.lua:43>

    2016-03-27 15:47:01: ERROR[Main]: stack traceback:

    2016-03-27 15:47:01: ERROR[Main]:       [C]: in function 'add_node'

    2016-03-27 15:47:01: ERROR[Main]:       /usr/share/minetest/builtin/game/falling.lua:96: in function </usr/share/minetest/builtin/game/falling.lua:43>

    2016-03-27 15:47:01: ERROR[Main]:       [C]: in function 'add_node'

    2016-03-27 15:47:01: ERROR[Main]:       /usr/share/minetest/builtin/game/falling.lua:96: in function </usr/share/minetest/builtin/game/falling.lua:43>

    2016-03-27 15:47:01: ERROR[Main]:       /usr/share/minetest/builtin/game/falling.lua:96: in function </usr/share/minetest/builtin/game/falling.lua:43>

    Mapgen: Spread both night and day light banks in spreadLight

    Fix small formatting issue in SRP debug output

    

    Writing an u8 to verbosestream writes a char, not it's numeric value.

    Writing an u8 to verbosestream writes a char, not it's numeric value.

    Revert "Translated using Weblate (German)"

    

    This reverts commit 25da0594eb09bb0e72816aaf8280573a668af00c.

    This reverts commit 25da0594eb09bb0e72816aaf8280573a668af00c.

    Add CONTRIBUTING.md

    Replace CRLF with LF in shader files

    Falling: Set acceleration on step again

    

    Commit

    

    65c09a96f41705bb8e75fc5ff4276342be91ed11 "Set acceleration only once in falling node"

    

    has made the acceleration being set only once.

    But this has introduced a regression.

    

    Fix #3884.

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    65c09a96f41705bb8e75fc5ff4276342be91ed11 "Set acceleration only once in falling node"

    

    has made the acceleration being set only once.

    But this has introduced a regression.

    

    Fix #3884.

    has made the acceleration being set only once.

    But this has introduced a regression.

    

    Fix #3884.

    But this has introduced a regression.

    

    Fix #3884.

    Fix #3884.

    Update menu header image

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 34.5% (299 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 33.7% (292 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 93.0% (805 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 70.6% (611 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 92.4% (800 of 865 strings)

    

    This is a merger of 3 commits.

    This is a merger of 3 commits.

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 34.4% (298 of 865 strings)

    

    This is a merger of 6 commits.

    This is a merger of 6 commits.

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 89.1% (771 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 36.6% (317 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 51.2% (443 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 46.1% (399 of 865 strings)

    

    This is a merger of 3 commits.

    This is a merger of 3 commits.

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 23.2% (201 of 865 strings)

    

    This is a merger of 2 commits.

    This is a merger of 2 commits.

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 47.9% (415 of 865 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 47.9% (415 of 865 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 100.0% (865 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of 2 commits.

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 74.9% (648 of 865 strings)

    

    This is a merger of 3 commits.

    This is a merger of 3 commits.

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 54.1% (468 of 865 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 45.3% (392 of 865 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (865 of 865 strings)

    

    This is a merger of two commits.

    This is a merger of 3 commits.

    Credits: Make that easy to add/remove

    Make `options` local here.

    

    Undoubtably this may cause problems later if unchecked.

    

    ```

    2016-03-22 21:57:52: WARNING[Server]: Assignment to undeclared global "options" inside a function at .../sofar/git/minetest/bin/../builtin/game/chatcommands.lua:862.

    ```

    Undoubtably this may cause problems later if unchecked.

    

    ```

    2016-03-22 21:57:52: WARNING[Server]: Assignment to undeclared global "options" inside a function at .../sofar/git/minetest/bin/../builtin/game/chatcommands.lua:862.

    ```

    2016-03-22 21:57:52: WARNING[Server]: Assignment to undeclared global "options" inside a function at .../sofar/git/minetest/bin/../builtin/game/chatcommands.lua:862.

    ```

    Fix connected nodes' selection boxes.

    

    This allows the player to more easily target and punch connected

    nodeboxes, especially if they have a fixed nodebox that is very

    small, like technic cabling, or xpanes. Tried it on fences and

    my xpane conversion, and happy with the result.

    This allows the player to more easily target and punch connected

    nodeboxes, especially if they have a fixed nodebox that is very

    small, like technic cabling, or xpanes. Tried it on fences and

    my xpane conversion, and happy with the result.

    nodeboxes, especially if they have a fixed nodebox that is very

    small, like technic cabling, or xpanes. Tried it on fences and

    my xpane conversion, and happy with the result.

    small, like technic cabling, or xpanes. Tried it on fences and

    my xpane conversion, and happy with the result.

    my xpane conversion, and happy with the result.

    Mgv7/flat/fractal: Stop tunnel-floor biome nodes being placed everywhere

    

    A bool for 'in or under tunnel' was missing

    1-node-deep stone ledges were being

    replaced with biome surface material

    A bool for 'in or under tunnel' was missing

    1-node-deep stone ledges were being

    replaced with biome surface material

    1-node-deep stone ledges were being

    replaced with biome surface material

    replaced with biome surface material

    Clean up Strfnd

    

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Move to util.

      * Other miscellaneous style fixes.

      * Other miscellaneous style fixes.

    Tweak travis script

    

    Exit if cd fails and don't insert '\' in string.

    Exit if cd fails and don't insert '\' in string.

    Builtin/game/falling: Re-add comma removed by recent commit

    Set acceleration only once in falling node

    Mgv7: Limit pseudorandom caves to surface mapchunk or below

    

    To avoid bright caves at mapchunk borders when generating mapchunks upwards

    To avoid bright caves at mapchunk borders when generating mapchunks upwards

    Allow NodeTimer, ABM and block mgmt interval changes.

    

    ABM's are hardcoded to run every 1.0s, NodeTimers are hard coded to

    run at every 1.0s. Block mgmt is running every 2.0sec.

    

    However, these timers can be better tuned for both higher and lower

    values by server owners. Some server owners want to, and have the

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    ABM's are hardcoded to run every 1.0s, NodeTimers are hard coded to

    run at every 1.0s. Block mgmt is running every 2.0sec.

    

    However, these timers can be better tuned for both higher and lower

    values by server owners. Some server owners want to, and have the

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    run at every 1.0s. Block mgmt is running every 2.0sec.

    

    However, these timers can be better tuned for both higher and lower

    values by server owners. Some server owners want to, and have the

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    However, these timers can be better tuned for both higher and lower

    values by server owners. Some server owners want to, and have the

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    values by server owners. Some server owners want to, and have the

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    resources to send more packets per second to clients, and so they

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    may wish to send smaller updates sooner. Right now all ABM's are

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    coalesced into 1.0 second intervals, resulting in large send queues

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    to all clients. By reducing the amount of possible timers, one can

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    get a far better response rate and lower the perception of lag.

    

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    On the other side of the camp, some servers may want to increase

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    these values, which again isn't easily doable.

    

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    The global settings abm_interval and nodetimer_interval are set to

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    current values by default. I've tested with 0.2/0.5 type values

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    and noticed a greatly improved response and better scattering of

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    nodetimers, as well as enjoying not faceplanting into doors with

    pressure plates anymore.

    pressure plates anymore.

    lua_api.txt: improve vector documentation

    

    Before it rendered very badly in HTML.

    Also point out what vector.round does.

    Before it rendered very badly in HTML.

    Also point out what vector.round does.

    Also point out what vector.round does.

    Set EXAMPLE_CONF_DIR to DOCDIR if DOCDIR gets customized

    

    Before, customisation of DOCDIR did not lead to

    changes of the EXAMPLE_CONF_DIR default value.

    This was inconsistent with expected behaviour

    if you didn't know of the existence of the

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    Before, customisation of DOCDIR did not lead to

    changes of the EXAMPLE_CONF_DIR default value.

    This was inconsistent with expected behaviour

    if you didn't know of the existence of the

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    changes of the EXAMPLE_CONF_DIR default value.

    This was inconsistent with expected behaviour

    if you didn't know of the existence of the

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    This was inconsistent with expected behaviour

    if you didn't know of the existence of the

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    if you didn't know of the existence of the

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    EXAMPLE_CONF_DIR variable. The confusion is

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    very strong, as (for not in place builds) both

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    DOCDIR and EXAMPLE_CONF_DIR share the same

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    default value, it is unexpected that setting

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    CUSTOM_DOCDIR changes the location of all

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    documentation files but one.

    

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    The best meaning of EXAMPLE_CONF_DIR is to

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    further allow customization of the mt.conf.example

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    storage place, but otherwise keep defaulting to

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    whatever DOCDIR is set to, at least for not in

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    place builds. This patch implements that

    behaviour.

    

    Fixes #3863.

    behaviour.

    Fixes #3863.

    Remove chat escape sequences from chat messages, for future colored chat.

    Add option to not send pre v25 init packet

    

    The legacy init packet (pre v25) sends information about the client's

    password that a server could use to log in to other servers if the

    username and password are the same. All the other benefits of SRP of

    protocol v25 are missed if the legacy init packet is still sent during

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    The legacy init packet (pre v25) sends information about the client's

    password that a server could use to log in to other servers if the

    username and password are the same. All the other benefits of SRP of

    protocol v25 are missed if the legacy init packet is still sent during

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    password that a server could use to log in to other servers if the

    username and password are the same. All the other benefits of SRP of

    protocol v25 are missed if the legacy init packet is still sent during

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    username and password are the same. All the other benefits of SRP of

    protocol v25 are missed if the legacy init packet is still sent during

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    protocol v25 are missed if the legacy init packet is still sent during

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    connection creation.

    

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    This patch adds an option to not send the v25 init packet. Not sending

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    the v25 packet means breaking compat with pre v25 servers, but as the

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    option is not enabled by default, no servers are affected unless the

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    user explicitly flips the switch. More than 90% of the servers on the

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    serverlist support post v25 protocols.

    

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    The patch also fixes a bug with greying out of non compliant servers

    being done wrongly, the min and max params were mixed.

    being done wrongly, the min and max params were mixed.

    Fix two reconnect bugs

    

    Fix two bugs related to the reconnect feature

    introduced by commit

    

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    Fix two bugs related to the reconnect feature

    introduced by commit

    

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    introduced by commit

    

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    to the main menu will look like the server had

    requested a reconnect.

    requested a reconnect.

    Much better API for auth.{cpp, h}

    

    * No function overloading

    * Adhere coding style and with method names following

      lowercase_underscore_style

    * Use std::string in external API, handling these is

      much more fun

    * No function overloading

    * Adhere coding style and with method names following

      lowercase_underscore_style

    * Use std::string in external API, handling these is

      much more fun

    * Adhere coding style and with method names following

      lowercase_underscore_style

    * Use std::string in external API, handling these is

      much more fun

      lowercase_underscore_style

    * Use std::string in external API, handling these is

      much more fun

    * Use std::string in external API, handling these is

      much more fun

      much more fun

    Mapgen: Fix light in tunnels at mapchunk borders

    

    Don't excavate the overgenerated stone at node_max.Y + 1,

    this creates a 'roof' over the tunnel, preventing light in

    tunnels at mapchunk borders when generating mapchunks upwards.

    Don't excavate the overgenerated stone at node_max.Y + 1,

    this creates a 'roof' over the tunnel, preventing light in

    tunnels at mapchunk borders when generating mapchunks upwards.

    this creates a 'roof' over the tunnel, preventing light in

    tunnels at mapchunk borders when generating mapchunks upwards.

    tunnels at mapchunk borders when generating mapchunks upwards.

    Fix player teleportation bug whilst sneaking

    

    Only set back position when sneaking if player wasn't teleported by adding and using a bool "got_teleported" to player

    it fixes #2876

    Only set back position when sneaking if player wasn't teleported by adding and using a bool "got_teleported" to player

    it fixes #2876

    it fixes #2876

    Connected nodes: fix 2 minor bugs

    

    1. Copy-paste error: properly test for back-connection.

    

    In the case of two different connected nodebox types, we want to

    assure that if A connects to B, that B also connects to A. This test

    was accidentally not implemented correctly.

    

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    1. Copy-paste error: properly test for back-connection.

    

    In the case of two different connected nodebox types, we want to

    assure that if A connects to B, that B also connects to A. This test

    was accidentally not implemented correctly.

    

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    In the case of two different connected nodebox types, we want to

    assure that if A connects to B, that B also connects to A. This test

    was accidentally not implemented correctly.

    

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    assure that if A connects to B, that B also connects to A. This test

    was accidentally not implemented correctly.

    

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    was accidentally not implemented correctly.

    

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    2. Clear the connects_to_ids before deserializing.

    

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    With each new connected node, the deserialization code added more

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    and more targets to the map, since the map wasn't cleared in between

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    deserialization steps. This caused e.g. wall blocks to connect to

    things in the fence connects_to map.

    things in the fence connects_to map.

    Resend blocks when modified while sending to client

    Add options for screenshot format and quality

    Allow nodes to specify which sides to connect to.

    

    NDT_CONNECTED attempts to connect to any side of nodes that it can

    connect to, which is troublesome for FACEDIR type nodes that generally

    may only have one usable face, and can be rotated.

    

    We introduce a node parameter `connect_sides` that is valid for

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    NDT_CONNECTED attempts to connect to any side of nodes that it can

    connect to, which is troublesome for FACEDIR type nodes that generally

    may only have one usable face, and can be rotated.

    

    We introduce a node parameter `connect_sides` that is valid for

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    connect to, which is troublesome for FACEDIR type nodes that generally

    may only have one usable face, and can be rotated.

    

    We introduce a node parameter `connect_sides` that is valid for

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    may only have one usable face, and can be rotated.

    

    We introduce a node parameter `connect_sides` that is valid for

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    We introduce a node parameter `connect_sides` that is valid for

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    any node type. If specified, it lists faces of the node (in "top",

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    "bottom", "front", "left", "back", "right", form, as array) that

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    connecting nodeboxes can connect to. "front" corresponds to the south

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    facing side of a node with facedir = 0.

    

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    If the node is rotatable using *simple* FACEDIR, then the attached

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    face is properly rotated before checking. This allows e.g. a chest

    to be attached to only from the rear side.

    to be attached to only from the rear side.

    Nodebox: Allow nodeboxes to "connect"

    

    We introduce a new nodebox type "connected", and allow these nodes to

    have optional nodeboxes that connect it to other connecting nodeboxes.

    

    This is all done at scenedraw time in the client. The client will

    inspect the surrounding nodes and if they are to be connected to,

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    We introduce a new nodebox type "connected", and allow these nodes to

    have optional nodeboxes that connect it to other connecting nodeboxes.

    

    This is all done at scenedraw time in the client. The client will

    inspect the surrounding nodes and if they are to be connected to,

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    have optional nodeboxes that connect it to other connecting nodeboxes.

    

    This is all done at scenedraw time in the client. The client will

    inspect the surrounding nodes and if they are to be connected to,

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    This is all done at scenedraw time in the client. The client will

    inspect the surrounding nodes and if they are to be connected to,

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    inspect the surrounding nodes and if they are to be connected to,

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    it will draw the appropriate connecting nodeboxes to make those

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    connections.

    

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    In the node_box definition, we have to specify separate nodeboxes for

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    each valid connection. This allows us to make nodes that connect only

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    horizontally (the common case) by providing optional nodeboxes for +x,

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    -x, +z, -z directions. Or this allows us to make wires that can connect

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    up and down, by providing nodeboxes that connect it up and down (+y,

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    -y) as well.

    

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    The optional nodeboxes can be arrays. They are named "connect_top,

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    "connect_bottom", "connect_front", "connect_left", "connect_back" and

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    "connect_right". Here, "front" means the south facing side of the node

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    that has facedir = 0.

    

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    Additionally, a "fixed" nodebox list present will always be drawn,

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    so one can make a central post, for instance. This "fixed" nodebox

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    can be omitted, or it can be an array of nodeboxes.

    

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    Collision boxes are also updated in exactly the same fashion, which

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    allows you to walk over the upper extremities of the individual

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    node boxes, or stand really close to them. You can also walk up

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    node noxes that are small in height, all as expected, and unlike the

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    NDT_FENCELIKE nodes.

    

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    I've posted a screenshot demonstrating the flexibility at

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

        http://i.imgur.com/zaJq8jo.png

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    In the screenshot, all connecting nodes are of this new subtype.

    

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    Transparent textures render incorrectly, Which I don't think is

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    related to this text, as other nodeboxes also have issues with this.

    

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    A protocol bump is performed in order to be able to send older clients

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    a nodeblock that is usable for them. In order to avoid abuse of users

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    we send older clients a "full-size" node, so that it's impossible for

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    them to try and walk through a fence or wall that's created in this

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    fashion. This was tested with a pre-bump client connected against a

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    server running the new protocol.

    

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    These nodes connect to other nodes, and you can select which ones

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    those are by specifying node names (or group names) in the

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    connects_to string array:

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

          connects_to = { "group:fence", "default:wood" }

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    By default, nodes do not connect to anything, allowing you to create

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    nodes that always have to be paired in order to connect. lua_api.txt

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    is updated to reflect the extension to the node_box API.

    

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    Example lua code needed to generate these nodes can be found here:

        https://gist.github.com/sofar/b381c8c192c8e53e6062

        https://gist.github.com/sofar/b381c8c192c8e53e6062

    Fix chat console not opening after formspec opened over it

    

    The MainMenuManager set the console invisible when a

    formspec opened over it, but didn't properly close it,

    and the chat console never set itself visible again.

    The MainMenuManager set the console invisible when a

    formspec opened over it, but didn't properly close it,

    and the chat console never set itself visible again.

    formspec opened over it, but didn't properly close it,

    and the chat console never set itself visible again.

    and the chat console never set itself visible again.

    Documentation: Auto-update conf.example and settings_translation_file.cpp

    Fix ask_reconnect_on_crash option being ignored

    

    Since commit

    

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    there is a config option named ask_reconnect_on_crash.

    It asks the client to reconnect to the server if the server crashed.

    It has been implemeted and works, but due to a function parameter not

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    Since commit

    

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    there is a config option named ask_reconnect_on_crash.

    It asks the client to reconnect to the server if the server crashed.

    It has been implemeted and works, but due to a function parameter not

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    3b50b2766aeb09c9fc0ad0ea07426bb2187df3d7 "Optional reconnect functionality"

    

    1. Set the password to the stored one

    

    Before, we have done the reconnect attempt with a

    cleared password, so using the feature would only

    work if you had an empty password.

    Thanks to @orwell96 for reporting the bug.

    

    2. Reset the reconnect_requested flag after its use

    

    the_game only writes to the reconect_requested flag

    if it sets it to true. It never sets it to false.

    If the flag is not reset after its use, all "reset"s

    to the main menu will look like the server had

    requested a reconnect.

    there is a config option named ask_reconnect_on_crash.

    It asks the client to reconnect to the server if the server crashed.

    It has been implemeted and works, but due to a function parameter not

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    It asks the client to reconnect to the server if the server crashed.

    It has been implemeted and works, but due to a function parameter not

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    It has been implemeted and works, but due to a function parameter not

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    being passed it never showed effect. This patch adds the parameter

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    and fixes the bug.

    

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    Also fixes the `reconnect` option of minetest.request_shutdown being ignored.

    Documentation: Clarify global and mapgen-specific mapgen flags

    Introduce "protection_bypass" privilege.

    

    This privilege allows map protection bypassing for server operators

    and world moderators.

    

    Initially I had thought that bypassing protection mods would have been

    something that could entirely be done inside mods and minetest_game,

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    This privilege allows map protection bypassing for server operators

    and world moderators.

    

    Initially I had thought that bypassing protection mods would have been

    something that could entirely be done inside mods and minetest_game,

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    and world moderators.

    

    Initially I had thought that bypassing protection mods would have been

    something that could entirely be done inside mods and minetest_game,

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    Initially I had thought that bypassing protection mods would have been

    something that could entirely be done inside mods and minetest_game,

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    something that could entirely be done inside mods and minetest_game,

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    but the concept of protection is defined in core, in the code of

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    core.is_protected().

    

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    I don't feel that it would be logical to introduce a protection

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    concept in core, but not some way around that for server operators

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    to maintain map parts that need fixing, de-griefing or cleanup.

    

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    Others had noticed the same problems, and proposed a patch to

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    minetest_game. That patch is fine by itself, but it fails to add

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    protection bypass functionality for digging normal nodes and placing

    nodes.

    

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    nodes.

    The new flag disables those operations.

    So, instead, we indroduce the new priv "protection_bypass" in core,

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    and modify 'on_place_node' and 'node_dig' to allow bypassing node

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    protections if the player holds this priv.

    

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    This priv was tested with protector redo by tenplus1.

    

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    A followup patch to Minetest Game will include allowing special checks

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    for doors, trapdoors, chests in Minetest Game.

    

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    Protection mods will likely want to mimic the changes in their relevant

    code sections.

    code sections.

    Avoid try/catch for settings.

    

    We can just test for the presence of these settings nicely here,

    no need to use a try / catch construct.

    We can just test for the presence of these settings nicely here,

    no need to use a try / catch construct.

    no need to use a try / catch construct.

    Add consistent monotonic day counter - get_day_count()

    

    I've written several experimental bits of code that revolve around the

    need for a consistent calendar, but implementing one is extremely hard

    in mods due to time changes and mods overriding core.get_timeofday(),

    which will conflict.

    

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    I've written several experimental bits of code that revolve around the

    need for a consistent calendar, but implementing one is extremely hard

    in mods due to time changes and mods overriding core.get_timeofday(),

    which will conflict.

    

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    need for a consistent calendar, but implementing one is extremely hard

    in mods due to time changes and mods overriding core.get_timeofday(),

    which will conflict.

    

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    in mods due to time changes and mods overriding core.get_timeofday(),

    which will conflict.

    

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    which will conflict.

    

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    The second part of the problem is that doing this from a mod requires

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    constant maintenance of a settings file.

    

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    An implementation in core is trivial, however, and solves all of

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    these problems at virtually no cost: No extra branches in server

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    steps, and a single branch when minetest.set_time_of_day(), which is

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    entirely reasonable.

    

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    We store the day_count value in env_meta.txt.

    

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    The use case is obvious: This change allows mods to create an actual

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    virtual calendar, or properly account for seasonal changes, etc..

    

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    We add a "/days" chatcommand that displays the current day count. No

    permissions are needed. It can only retrieve the day count, not

    modify it.

    permissions are needed. It can only retrieve the day count, not

    modify it.

    modify it.

    Add AreaStore custom ID API

    Implement AreaStore serialization

    Fix SpatialAreaStore not freeing removed areas

    Add basic AreaStore method documentation

    Sort AreaStore header

    Clean up VectorAreaStore

    Move AreaStore container selection logic into getOptimalImplementation

    Move AreaStore to util

    Make AreaStore cache setting private

    Simplify AreaStore ID management

    s_env.{cpp, h} cleanups

    

    * Replace string by-val passing with const reference

    * Fix code style

    * Remove redundant `int table` definition and indentation level

    * Replace string by-val passing with const reference

    * Fix code style

    * Remove redundant `int table` definition and indentation level

    * Fix code style

    

    * Document changes

    * Remove redundant `int table` definition and indentation level

    Add minetest.register_lbm() to run code on block load only

    Use LuaErrors in security check macros

    

    Throwing a LuaError calls destructors as it propagates up the stack,

    wheres lua_error just executes a longjmp.

    Throwing a LuaError calls destructors as it propagates up the stack,

    wheres lua_error just executes a longjmp.

    wheres lua_error just executes a longjmp.

    Settings Tab: Regroup dropdown datas in tables

    Faster insertion into table

    Add forgotten valleys mapgen in mapgen name

    

    Missing `valleys` in `settingtypes.txt` and `minetest.conf.example`.

    Missing `valleys` in `settingtypes.txt` and `minetest.conf.example`.

    Update settings tab + some misc. clean-up

    Update Android dependencies, -O3 optimization, remove old ARMv5 config

    

    * Update OpenSSL (thanks @sapier, i use his patch!), Curl and SQLite3.

    * Remove old arm config. Almost all phones that use ARMv5 have 1 core and 256-512 RAM, it's about 2-5 FPS.

    * Do -O3 optimization for libs and remove -fexpensive-optimizations for Minetest (-O3 includes this! Read gcc docs).

    * OpenSSL fix - thanks @sapier, again.

    * Update OpenSSL (thanks @sapier, i use his patch!), Curl and SQLite3.

    * Remove old arm config. Almost all phones that use ARMv5 have 1 core and 256-512 RAM, it's about 2-5 FPS.

    * Do -O3 optimization for libs and remove -fexpensive-optimizations for Minetest (-O3 includes this! Read gcc docs).

    * OpenSSL fix - thanks @sapier, again.

    * Remove old arm config. Almost all phones that use ARMv5 have 1 core and 256-512 RAM, it's about 2-5 FPS.

    * Do -O3 optimization for libs and remove -fexpensive-optimizations for Minetest (-O3 includes this! Read gcc docs).

    * OpenSSL fix - thanks @sapier, again.

    * Do -O3 optimization for libs and remove -fexpensive-optimizations for Minetest (-O3 includes this! Read gcc docs).

    * OpenSSL fix - thanks @sapier, again.

    * OpenSSL fix - thanks @sapier, again.

    Mgvalleys: Correct spawn problems

    

    Increase maximum spawn altitude to reduce spawn issues.

    Increase maximum spawn altitude to reduce spawn issues.

    Decoration API: Allow force_placement of simple decorations

    Require minetest.request_http_api to be called from the mod's main scope

    

    Fixes #3764

    Fixes #3764

    Fix main menu being unable to set secure settings

    Remove debug.getupvalue from the Lua sandbox whitelist

    

    This function could be used to steal insecure environments from trusted mods.

    This function could be used to steal insecure environments from trusted mods.

    Add support for non-ASCII characters to chat console

    

    This still only supports 256 characters, but that's because

    Irrlicht's clipboard handlers don't support wide characters.

    This still only supports 256 characters, but that's because

    Irrlicht's clipboard handlers don't support wide characters.

    Irrlicht's clipboard handlers don't support wide characters.

    Add Android chat form

    Add text selection and copying to console

    Unlock cursor when opening console

    Use the console instead of a dedicated window when pressing keymap_chat/cmd

    

    keymap_console opens a full window for chat history browsing.

    keymap_console opens a full window for chat history browsing.

    Fix a mistake in the world format documentation

    

    Fixed a minor mistake that made it appear as if the inventory

    is serialized multiple times - once per each variable. In fact

    it is serialized once per each node.

    Fixed a minor mistake that made it appear as if the inventory

    is serialized multiple times - once per each variable. In fact

    it is serialized once per each node.

    is serialized multiple times - once per each variable. In fact

    it is serialized once per each node.

    it is serialized once per each node.

    Revert "Fix jumping at node edge"

    

    This reverts commit 60dc01dc258db842e229351b871d0989e3e7d62c.

    

    This fixes issue #3773

    This reverts commit 60dc01dc258db842e229351b871d0989e3e7d62c.

    

    This fixes issue #3773

    This fixes issue #3773

    Resize object_marker_red.png to 16x16

    

    Having a non-power-of-two image broke the Android app.

    Having a non-power-of-two image broke the Android app.

    Nodedef: Restore smooth lighting to water

    Mgvalleys: Add Dry Riverbeds

    

    Lower water table where base humidity is low.

    Alter heat and humidity to compensate for river humidity and altitude

    chill.

    Correct misuse of surface_max_y in generateTerrain.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Lower water table where base humidity is low.

    Alter heat and humidity to compensate for river humidity and altitude

    chill.

    Correct misuse of surface_max_y in generateTerrain.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Alter heat and humidity to compensate for river humidity and altitude

    chill.

    Correct misuse of surface_max_y in generateTerrain.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    chill.

    Correct misuse of surface_max_y in generateTerrain.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Correct misuse of surface_max_y in generateTerrain.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Remove sand trails in the water at river mouths.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Remove river water below water_level.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Correct heat/humidity calculations where noises are less than zero.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Correct heightmap errors as much as possible.

    Make humidity calculations more readable.

    Make humidity calculations more readable.

    Update po files, minetest.conf.example and settings_translation_file.cpp

    Don't generate trailing spaces in minetest.conf.example

    

    If the default value of a setting was empty,

    it previously generated a trailing space.

    If the default value of a setting was empty,

    it previously generated a trailing space.

    it previously generated a trailing space.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 61.3% (483 of 787 strings)

    

    (Merger of five commits)

    (Merger of five commits)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 49.5% (390 of 787 strings)

    

    (Merger of three commits)

    (Merger of three commits)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 47.0% (370 of 787 strings)

    

    (Merger of two commits from the same author)

    (Merger of two commits from the same author)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 37.3% (294 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 46.6% (367 of 787 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 65.5% (516 of 787 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 33.9% (267 of 787 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 30.4% (240 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 45.9% (362 of 787 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 52.7% (415 of 787 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 42.4% (334 of 787 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 69.1% (544 of 787 strings)

    

    (Merger of three commits)

    (Merger of three commits)

    Fix minetest.request_insecure_environment() always returning nil

    

    Fixes #3765

    Fixes #3765

    Mapblock mesh: Allow to use VBO

    Remove new_style_water

    Cache some settings

    Add dependencies for Fedora systems

    Shaders: fix fog not affecting opaque liquids

    Sheet Ore: Eliminate crash caused by PcgRandom range max < min

    

    In the calculation of y_start,

    when 'column height max' was large it caused

    nmin.Y + max_height > nmax.Y - max_height

    Now, in this situation y_start is set to the

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    In the calculation of y_start,

    when 'column height max' was large it caused

    nmin.Y + max_height > nmax.Y - max_height

    Now, in this situation y_start is set to the

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    when 'column height max' was large it caused

    nmin.Y + max_height > nmax.Y - max_height

    Now, in this situation y_start is set to the

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    nmin.Y + max_height > nmax.Y - max_height

    Now, in this situation y_start is set to the

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    Now, in this situation y_start is set to the

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    midpoint between nmin.Y and nmax.Y

    

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    Limit y0 and y1 to between nmin.Y and nmax.Y,

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    otherwise index calculation, which has no checks for limits,

    places them at unwanted locations in the voxelmanip

    places them at unwanted locations in the voxelmanip

    GOTBLOCKS & DELETEBLOCKS: test packet size only once

    Fix android build

    Android had a linker error since commit:

    

    31e0667a4a53a238d0321194b57b083bd74c0a5b "Add Lua interface to HTTPFetchRequest"

    

    Fixes #3766. Thanks to @MoNTE48 for reporting the bug.

    31e0667a4a53a238d0321194b57b083bd74c0a5b "Add Lua interface to HTTPFetchRequest"

    

    Fixes #3766. Thanks to @MoNTE48 for reporting the bug.

    Fixes #3766. Thanks to @MoNTE48 for reporting the bug.

    Reset block send timer when invoking setBlock(s)NotSent()

    

    As stated in this forum thread [1], I noticed that there is a

    2 second interval in which inventory changes are shown on the

    client. @yyt16384 found the source of these 2 seconds:

    m_nothing_to_send_pause_timer is set to 2.0 every time there

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    As stated in this forum thread [1], I noticed that there is a

    2 second interval in which inventory changes are shown on the

    client. @yyt16384 found the source of these 2 seconds:

    m_nothing_to_send_pause_timer is set to 2.0 every time there

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    2 second interval in which inventory changes are shown on the

    client. @yyt16384 found the source of these 2 seconds:

    m_nothing_to_send_pause_timer is set to 2.0 every time there

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    client. @yyt16384 found the source of these 2 seconds:

    m_nothing_to_send_pause_timer is set to 2.0 every time there

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    m_nothing_to_send_pause_timer is set to 2.0 every time there

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    are no changes to make, but this timer is not reset when

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    SetBlockNotSent or setBlocksNotSent are invoked. So in worst

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    case, the changed block will be sent over 2 seconds too late.

    

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    With this change, changed inventories are updated almost

    immediately, but it causes additional connection load.

    immediately, but it causes additional connection load.

    Android: hardcode leveldb revision

    

    Newest leveldb commit breaks build.

    With no fix in sight, there is no other way

    than to fall back to the last working leveldb

    revision, and hardcode it.

    

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    Newest leveldb commit breaks build.

    With no fix in sight, there is no other way

    than to fall back to the last working leveldb

    revision, and hardcode it.

    

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    With no fix in sight, there is no other way

    than to fall back to the last working leveldb

    revision, and hardcode it.

    

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    than to fall back to the last working leveldb

    revision, and hardcode it.

    

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    revision, and hardcode it.

    

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    Workaround for upstream bug

    

    https://github.com/google/leveldb/issues/340

    https://github.com/google/leveldb/issues/340

    Fix getting pointed node

    

    Fixes #3719

    Closes #3753

    Fixes #3719

    Closes #3753

    Closes #3753

    Add Lua interface to HTTPFetchRequest

    

    This allows mods to perform both asynchronous and synchronous HTTP

    requests. Mods are only granted access to HTTP APIs if either mod

    security is disabled or if they are whitelisted in any of the

    the secure.http_mods and secure.trusted_mods settings.

    

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    This allows mods to perform both asynchronous and synchronous HTTP

    requests. Mods are only granted access to HTTP APIs if either mod

    security is disabled or if they are whitelisted in any of the

    the secure.http_mods and secure.trusted_mods settings.

    

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    requests. Mods are only granted access to HTTP APIs if either mod

    security is disabled or if they are whitelisted in any of the

    the secure.http_mods and secure.trusted_mods settings.

    

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    security is disabled or if they are whitelisted in any of the

    the secure.http_mods and secure.trusted_mods settings.

    

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    the secure.http_mods and secure.trusted_mods settings.

    

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    Adds httpfetch_caller_alloc_secure to generate random, non-predictable

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    caller IDs so that lua mods cannot spy on each others HTTP queries.

    Fix HTTPFetchRequest performing a GET request if post_data is supplied

    

    Instead, perform a POST request with post_data.

    Instead, perform a POST request with post_data.

    Camera: remove auto tune FPS, single view range setting

    Remove preload_item_visuals code

    

    Closes #3748

    Closes #3748

    Dont make fastface if tile is not seamless

    

    Fixes #3378

    Closes #3751

    Fixes #3378

    Closes #3751

    Closes #3751

    Restore simple settings tab and add advanced settings as dialog

    Little collision.cpp cleanups

    Fix jumping at node edge

    Don't print locale directory error message when GetText is disabled

    

    Also, downgrade the error to a warning.

    Also, downgrade the error to a warning.

    Ignore spaces in secure.trusted_mods setting

    Minimap: show player markers

    Camera: Don't count camera offset twice for Nametagged CAOs

    Require request_insecure_environment to be called from the mod's main scope

    

    Previously you could steal a secure environment from a trusted mod by wrapping

    request_insecure_environment with some code like this:

    

    local rie_cp = minetest.request_insecure_environment

    local stolen_ie

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

    Previously you could steal a secure environment from a trusted mod by wrapping

    request_insecure_environment with some code like this:

    

    local rie_cp = minetest.request_insecure_environment

    local stolen_ie

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

    request_insecure_environment with some code like this:

    

    local rie_cp = minetest.request_insecure_environment

    local stolen_ie

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

    local rie_cp = minetest.request_insecure_environment

    local stolen_ie

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

    local stolen_ie

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

    function minetest.request_insecure_environment()

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

            local ie = rie_cp()

            stolen_ie = stolen_ie or ie

            return ie

    end

            stolen_ie = stolen_ie or ie

            return ie

    end

            return ie

    end

    end

    Clientmap: Define p_nodes_min/max as v3s32 instead of v3s16

    

    'cam_pos_nodes -/+ box_nodes_d' can exceed the range of v3s16

    when a player is near the world edge using a large view range

    This previously caused world to disappear

    Create new function getBlocksInViewRange() called from

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    'cam_pos_nodes -/+ box_nodes_d' can exceed the range of v3s16

    when a player is near the world edge using a large view range

    This previously caused world to disappear

    Create new function getBlocksInViewRange() called from

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    when a player is near the world edge using a large view range

    This previously caused world to disappear

    Create new function getBlocksInViewRange() called from

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    This previously caused world to disappear

    Create new function getBlocksInViewRange() called from

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    Create new function getBlocksInViewRange() called from

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    Correct code style throughout updateDrawList() and renderMap()

    HOTFIX: fix too agressive block culling

    Move object nametags to camera

    Clientiface: remove "value is dummy" from docs

    

    Commit

    

    6a1670dbc31cc0e44178bbd9ad34ff0d5981a060 "Migrate to STL containers/algorithms."

    

    has replaced core::map<T, bool> with std::set<T>, but didn't update

    the accompanying comment saying "value is dummy". This happened at

    two places.

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    6a1670dbc31cc0e44178bbd9ad34ff0d5981a060 "Migrate to STL containers/algorithms."

    

    has replaced core::map<T, bool> with std::set<T>, but didn't update

    the accompanying comment saying "value is dummy". This happened at

    two places.

    has replaced core::map<T, bool> with std::set<T>, but didn't update

    the accompanying comment saying "value is dummy". This happened at

    two places.

    the accompanying comment saying "value is dummy". This happened at

    two places.

    two places.

    Mapblock mesh: Eliminate meshgen lags

    Use vertices with tangents only when its needed.

    Player::accelerateHorizontal/Vertical should be member of LocalPlayer

    Use proper variable types for uniform sampler layers

    Formspec: fix broken irrlicht 1.7 build

    

    Fixes #3701.

    Fixes #3701.

    Formspec: recreate item_image_button pressed state for its image and label

    Remove unused 'm_selection_active' field

    

    Thanks @ExcaliburZero for noticing. Fixes #3698.

    Thanks @ExcaliburZero for noticing. Fixes #3698.

    v2d & aabbox3d<f32> & sky cleanups

    

    * Sky: rename Box => m_box and inline getBoundingBox

    * Uniformize aabbox3d<f32> to aabb3f

    * Sky: rename Box => m_box and inline getBoundingBox

    * Uniformize aabbox3d<f32> to aabb3f

    * Uniformize aabbox3d<f32> to aabb3f

    Drop luaentity_common.h which is not included anywhere

    Use single box for halo mesh

    Set proper GLSL pixel shader version

    Dump shader programs on compile errors

    Documentation: Remove now unused 'vertical spawn range'

    Initialize facedir and wallmounted tables only once.

    

    This makes the functions a bit faster since they don't

    have to recreate the tables every invocation, and makes

    the code more readable.

    

    Also, document `wallmounted_to_dir`.

    

    The function was implemented but not documented in `lua_api.txt`.

    This makes the functions a bit faster since they don't

    have to recreate the tables every invocation, and makes

    the code more readable.

    

    Also, document `wallmounted_to_dir`.

    

    The function was implemented but not documented in `lua_api.txt`.

    have to recreate the tables every invocation, and makes

    the code more readable.

    

    Also, document `wallmounted_to_dir`.

    

    The function was implemented but not documented in `lua_api.txt`.

    the code more readable.

    

    Also, document `wallmounted_to_dir`.

    

    The function was implemented but not documented in `lua_api.txt`.

    Also, document `wallmounted_to_dir`.

    

    The function was implemented but not documented in `lua_api.txt`.

    The function was implemented but not documented in `lua_api.txt`.

    Log /clearobjects mode

    Add '/clearobjects quick'

    Fix backface culling when connecting to new servers.

    

    Introduce a new contentfeatures version (8). When clients

    connect using v27 protocol version, they can assume that

    the tiledef.backface_culling is trustable, but if clients

    connect to servers providing contentfeatures version 7,

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    Introduce a new contentfeatures version (8). When clients

    connect using v27 protocol version, they can assume that

    the tiledef.backface_culling is trustable, but if clients

    connect to servers providing contentfeatures version 7,

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    connect using v27 protocol version, they can assume that

    the tiledef.backface_culling is trustable, but if clients

    connect to servers providing contentfeatures version 7,

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    the tiledef.backface_culling is trustable, but if clients

    connect to servers providing contentfeatures version 7,

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    connect to servers providing contentfeatures version 7,

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    then the v27 clients know that backface culling settings

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    provided by the server in tiledefs are bogus for mesh,

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    plantlike, firelike or liquid drawtype nodes.

    

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    thanks to hmmmm, est31, nerzhul.

    

    Tested on new client - new server, new client - old server

    old client - new server.

    Tested on new client - new server, new client - old server

    old client - new server.

    old client - new server.

    Fix inverted conditions in shader.cpp

    shader.cpp: don't test twice if shader programs are present

    

    Also use string::empty method, it is better than comparing with empty strings.

    Also use string::empty method, it is better than comparing with empty strings.

    FormSpec: Add StaticTextSpec and superimpose over item image buttons

    Filmic HDR tone mapping

    Remove ClientMap::m_camera_mutex

    

    All places that lock this mutex are only called by the main thread:

    ClientMap::updateCamera(), ClientMap::updateDrawList(), ClientMap::renderMap(), ClientMap::renderPostFx().

    All places that lock this mutex are only called by the main thread:

    ClientMap::updateCamera(), ClientMap::updateDrawList(), ClientMap::renderMap(), ClientMap::renderPostFx().

    ClientMap::updateCamera(), ClientMap::updateDrawList(), ClientMap::renderMap(), ClientMap::renderPostFx().

    FindSpawnPos: Let mapgens decide what spawn altitude is suitable

    

    To avoid spawn search failing in new specialised mapgens

    Increase spawn search range to 4000 nodes

    Add getSpawnLevelAtPoint() functions to EmergeManager, class Mapgen

    and all mapgens

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    To avoid spawn search failing in new specialised mapgens

    Increase spawn search range to 4000 nodes

    Add getSpawnLevelAtPoint() functions to EmergeManager, class Mapgen

    and all mapgens

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    Increase spawn search range to 4000 nodes

    Add getSpawnLevelAtPoint() functions to EmergeManager, class Mapgen

    and all mapgens

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    Add getSpawnLevelAtPoint() functions to EmergeManager, class Mapgen

    and all mapgens

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    and all mapgens

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    Remove getGroundLevelAtPoint() functions from all mapgens except mgv6

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    (possibly to be re-added later in the correct form to return actual

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    ground level)

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    Make mgvalleys flag names consistent with other mapgens

    Remove now unused 'vertical spawn range' setting

    Remove now unused 'vertical spawn range' setting

    Use inventory_image in the first place for inventory item mesh

    Cleanup selection mesh code, add shaders for halo and selection boxes

    builtin: Fix `print` crashing on nil "holes".

    

    The engine implementation of `print` packs the varargs into a

    table and passes the table directly to `table.concat`. If you

    pass any value not supported by `table.concat` (particularly

    `nil`), the server crashes. This is unexpected behavior, as

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    The engine implementation of `print` packs the varargs into a

    table and passes the table directly to `table.concat`. If you

    pass any value not supported by `table.concat` (particularly

    `nil`), the server crashes. This is unexpected behavior, as

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    table and passes the table directly to `table.concat`. If you

    pass any value not supported by `table.concat` (particularly

    `nil`), the server crashes. This is unexpected behavior, as

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    pass any value not supported by `table.concat` (particularly

    `nil`), the server crashes. This is unexpected behavior, as

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    `nil`), the server crashes. This is unexpected behavior, as

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    `print` is supposed to be able to work with anything.

    

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    This patch changes the implementation so it first converts

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    all arguments using `tostring`, which fixes the issue and

    makes the custom `print` function compatible with the stock

    Lua behavior.

    makes the custom `print` function compatible with the stock

    Lua behavior.

    Lua behavior.

    small drawItemStack cleanup

    

    -> Replace the three bool params with an enum

    -> Add struct for the static content, leads to less repetition

    -> cache enable_animations setting

    -> Replace the three bool params with an enum

    -> Add struct for the static content, leads to less repetition

    -> cache enable_animations setting

    -> Add struct for the static content, leads to less repetition

    -> cache enable_animations setting

    -> cache enable_animations setting

    Use meshes to display inventory items

    Use tangent space meshes only when shaders are enabled

    Add admin command which says who the administator is for the server.

    Implement OSX Travis builds

    Mgvalleys: fix riverbeds below sea level

    

    Stop riverbeds from forming plateaus under sea. Minor corrections to

    random lava/water placement.

    Stop riverbeds from forming plateaus under sea. Minor corrections to

    random lava/water placement.

    random lava/water placement.

    Mgv5/v7/flat/fractal: Move tunnel noise calculation into generateCaves

    

    Tunnel 3D noises are only calculated when solid terrain is present

    in mapchunk, avoiding large amounts of unnecessary calculations

    Change 'int' to 's16' in calculateNoise

    Change 'i' to 'vi' for voxelmanip indexes for consistency

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Tunnel 3D noises are only calculated when solid terrain is present

    in mapchunk, avoiding large amounts of unnecessary calculations

    Change 'int' to 's16' in calculateNoise

    Change 'i' to 'vi' for voxelmanip indexes for consistency

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    in mapchunk, avoiding large amounts of unnecessary calculations

    Change 'int' to 's16' in calculateNoise

    Change 'i' to 'vi' for voxelmanip indexes for consistency

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Change 'int' to 's16' in calculateNoise

    Change 'i' to 'vi' for voxelmanip indexes for consistency

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Change 'i' to 'vi' for voxelmanip indexes for consistency

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Keep 'u32 index3d' local to a smaller part of tunnel code

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Mgv7: Don't call CaveV7 if no solid terrain in mapchunk

    Give 'open' bool a more descriptive name

    Give 'open' bool a more descriptive name

    Mgvalleys: use standard caves

    

    Replace simple caves with V5 caves, adding unpredictable water and lava

    settings and massive caves based on subterrain. Remove fast terrain mode

    and accompanying settings. Remove superfluous temperature/humidity

    settings. Remove lava/water height setting. Fix errors in humidity

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    Replace simple caves with V5 caves, adding unpredictable water and lava

    settings and massive caves based on subterrain. Remove fast terrain mode

    and accompanying settings. Remove superfluous temperature/humidity

    settings. Remove lava/water height setting. Fix errors in humidity

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    settings and massive caves based on subterrain. Remove fast terrain mode

    and accompanying settings. Remove superfluous temperature/humidity

    settings. Remove lava/water height setting. Fix errors in humidity

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    and accompanying settings. Remove superfluous temperature/humidity

    settings. Remove lava/water height setting. Fix errors in humidity

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    settings. Remove lava/water height setting. Fix errors in humidity

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    handling and remove humidity_break_point setting. Move cave noises to

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    generateCaves. Fix minor formatting/naming issues and use

    MYMAX/MYMIN/myround.

    MYMAX/MYMIN/myround.

    Fix OSX building issue caused by ad884f2

    Don't pass non-const references to collision methods

    

    Non const references cause a lot of confusion with behaviour of code,

    and are disallowed by minetest style guide.

    Non const references cause a lot of confusion with behaviour of code,

    and are disallowed by minetest style guide.

    and are disallowed by minetest style guide.

    New timer design.

    

    I could honestly not make much sense of the timer implementation

    that was here. Instead I've implemented the type of timer algorithm

    that I've used before, and tested it instead.

    

    The concept is extremely simple: all timers are put in an ordered

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    I could honestly not make much sense of the timer implementation

    that was here. Instead I've implemented the type of timer algorithm

    that I've used before, and tested it instead.

    

    The concept is extremely simple: all timers are put in an ordered

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    that was here. Instead I've implemented the type of timer algorithm

    that I've used before, and tested it instead.

    

    The concept is extremely simple: all timers are put in an ordered

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    that I've used before, and tested it instead.

    

    The concept is extremely simple: all timers are put in an ordered

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    The concept is extremely simple: all timers are put in an ordered

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    list. We check every server tick if any of the timers have

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    elapsed, and execute the function associated with this timer.

    

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    We know that many timers by themselves cause new timers to be

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    added to this list, so we iterate *backwards* over the timer

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    list. This means that new timers being added while timers are

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    being executed, can never be executed in the same function pass,

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    as they are always appended to the table *after* the end of

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    the table, which we will never reach in the current pass over

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    all the table elements.

    

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    We switch time keeping to minetest.get_us_time(). dtime is

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    likely unreliable and we have our own high-res timer that we

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    can fix if it is indeed broken. This removes the need to do

    any sort of time keeping.

    any sort of time keeping.

    Clocksource: use a better clock if available.

    

    clock_gettime() is a far better clock than gettimeofday().

    

    Even better than clock_gettime() is that you can select either

    CLOCK_MONOTONIC, or even CLOCK_MONOTONIC_RAW. These clocks offer

    high precision time. And the _RAW variant will never roll back

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    clock_gettime() is a far better clock than gettimeofday().

    

    Even better than clock_gettime() is that you can select either

    CLOCK_MONOTONIC, or even CLOCK_MONOTONIC_RAW. These clocks offer

    high precision time. And the _RAW variant will never roll back

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    Even better than clock_gettime() is that you can select either

    CLOCK_MONOTONIC, or even CLOCK_MONOTONIC_RAW. These clocks offer

    high precision time. And the _RAW variant will never roll back

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    CLOCK_MONOTONIC, or even CLOCK_MONOTONIC_RAW. These clocks offer

    high precision time. And the _RAW variant will never roll back

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    high precision time. And the _RAW variant will never roll back

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    due to NTP drift or daylight savings, or otherwise.

    

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    I've adjusted this code to select the right clock method auto-

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    matically based on what's available in the OS. This means that

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    if you're running a very old linux version, MacOS or other,

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    you will automatically get the best clocksource available.

    

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    I've tested all Linux clocksources by selectively compiling and

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    running a 10k+ timer test suite. In all cases I confirmed that

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    the 3 POSIX Linux clocksources worked properly, and were

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    selected properly.

    

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    I've modified the OS X compile path to use the high-res clock

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    source for all time functions, but I can't confirm it works or

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    that it compiles.

    

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    As for WIN32, I confirmed that the used clocksource is indeed

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    a Monotonic clocksource, so good news: that code section appears

    to be exactly what it should be.

    to be exactly what it should be.

    Don't print whole json data buffer to errorstream on error

    

    `errorstream` must not be overly verbose as clientside it is directly printed

    onto the ingame chat window. These days, the serverlist can contain > 200k bytes,

    so better print it to warningstream if the data buffer is too long.

    `errorstream` must not be overly verbose as clientside it is directly printed

    onto the ingame chat window. These days, the serverlist can contain > 200k bytes,

    so better print it to warningstream if the data buffer is too long.

    onto the ingame chat window. These days, the serverlist can contain > 200k bytes,

    so better print it to warningstream if the data buffer is too long.

    so better print it to warningstream if the data buffer is too long.

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 52.0% (410 of 787 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 32.4% (255 of 787 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 95.5% (752 of 787 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 41.6% (328 of 787 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 26.6% (210 of 787 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Currently translated at 23.6% (186 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 43.4% (342 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 42.0% (331 of 787 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Currently translated at 30.1% (237 of 787 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 34.8% (274 of 787 strings)

    Fix world config menu ignoring `name` in `mod.conf`.

    Backface culling: Ignore setting in tiledef from old servers.

    

    Outdated servers are always sending tiledefs with culling

    enabled no matter what, as the value was previously entirely

    ignored.

    

    To compensate, we must (1) detect that we're running against

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    Outdated servers are always sending tiledefs with culling

    enabled no matter what, as the value was previously entirely

    ignored.

    

    To compensate, we must (1) detect that we're running against

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    enabled no matter what, as the value was previously entirely

    ignored.

    

    To compensate, we must (1) detect that we're running against

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    ignored.

    

    To compensate, we must (1) detect that we're running against

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    To compensate, we must (1) detect that we're running against

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    an old server with a new client, and (2) disable culling for

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    mesh, plantlike, firelike and liquid draw types no matter what

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    the server is telling us.

    

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    In order to achieve this, we need to bump the protocol version

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    since we cannot rely on the tiledef version, and test for it

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    being older. I've bumped the protocol version, although that

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    should have likely happened in the actual change that introduced

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    the new backface_culling PR #3578. Fortunately that's only 2

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    commits back at this point.

    

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    We also explicitly test for the drawtype to assure we are not

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    changing the culling value for other nodes, where it should

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    remain enabled.

    

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    This was tested against various pub servers, including 0.4.13 and

    0.4.12.

    

    Fixes #3598

    Fixes #3598

    Fix compilation warning if compiling for android with c++11

    Fix texture tear issue

    Fix C++11 compilability

    

    Previous commits broke it... :(

    Previous commits broke it... :(

    Liquid flow: Prevent water spreading on ignore

    Allow per-tiles culling.

    

    Backface culling is enabled by default for all tiles, as this

    is how the lua parser initializes each tiledef. We revert to

    always using the value from the tiledef since it is always

    read and serialized.

    

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    Backface culling is enabled by default for all tiles, as this

    is how the lua parser initializes each tiledef. We revert to

    always using the value from the tiledef since it is always

    read and serialized.

    

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    is how the lua parser initializes each tiledef. We revert to

    always using the value from the tiledef since it is always

    read and serialized.

    

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    always using the value from the tiledef since it is always

    read and serialized.

    

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    read and serialized.

    

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    Mods that wish to enable culling for e.g. mesh nodes, now can

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    specify the following to enable backface culling:

    

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

        tiles = {{ name = "tex.png", backface_culling = true }},

    

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    Note the double '{' and use of 'name' key here! In the same

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    fashion, backface_culling can be disabled for any node now.

    

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    I've tested this against the new door models and this properly

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    allows me to disable culling per node. I've also tested this

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    against my crops mod which uses mesh nodes where culling needs

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    to be disabled, and tested also with plantlike drawtype nodes

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    where we want this to continue to be disabled.

    

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    No default setting has changed. The defaults are just migrated

    from nodedef.cpp to c_content.cpp.

    from nodedef.cpp to c_content.cpp.

    EmergeManager: Do not queue duplicate block requests

    Fix Settings::remove() always returning true

    Show infotext with description for item entities

    Correct overflowing rivers in Valleys mapgen.

    Fix wield item glitch

    corrected minetest.pos_to_string()

    

    corrected this bit reflect the function properly.

    corrected this bit reflect the function properly.

    Fix error message in settings tab overlapping 'save' button

    

    The save button is now fully functional again when an error message

    is shown.

    

    After an invalid value is entered in the settings tab dialog, the GUI

    label for the error message that is shown was partly overlapping the

    'save' button, so that the top half of the button could not be clicked

    on.

    The save button is now fully functional again when an error message

    is shown.

    

    After an invalid value is entered in the settings tab dialog, the GUI

    label for the error message that is shown was partly overlapping the

    'save' button, so that the top half of the button could not be clicked

    on.

    is shown.

    

    After an invalid value is entered in the settings tab dialog, the GUI

    label for the error message that is shown was partly overlapping the

    'save' button, so that the top half of the button could not be clicked

    on.

    After an invalid value is entered in the settings tab dialog, the GUI

    label for the error message that is shown was partly overlapping the

    'save' button, so that the top half of the button could not be clicked

    on.

    label for the error message that is shown was partly overlapping the

    'save' button, so that the top half of the button could not be clicked

    on.

    'save' button, so that the top half of the button could not be clicked

    on.

    on.

    Prevent spawning in rivers with valleys mapgen. Remove unecessary whitespace.

    Make ItemStack:set_count(0) clear the item stack

    

    fixes minetest/minetest_game#786

    fixes minetest/minetest_game#786

    Make all mesh manipulators in mesh.cpp work with any vertex type

    

    cloneMesh() has to use a switch in order to create a different

    mesh buffer type depending on vertex type. (Credit: the new cloneMesh

    was written by RealBadAngel.)

    

    To avoid repetitive code, all other methods use getVertexPitchFromType()

    to automatically adapt the indexing to the vertex type at runtime.

    cloneMesh() has to use a switch in order to create a different

    mesh buffer type depending on vertex type. (Credit: the new cloneMesh

    was written by RealBadAngel.)

    

    To avoid repetitive code, all other methods use getVertexPitchFromType()

    to automatically adapt the indexing to the vertex type at runtime.

    mesh buffer type depending on vertex type. (Credit: the new cloneMesh

    was written by RealBadAngel.)

    

    To avoid repetitive code, all other methods use getVertexPitchFromType()

    to automatically adapt the indexing to the vertex type at runtime.

    was written by RealBadAngel.)

    

    To avoid repetitive code, all other methods use getVertexPitchFromType()

    to automatically adapt the indexing to the vertex type at runtime.

    To avoid repetitive code, all other methods use getVertexPitchFromType()

    to automatically adapt the indexing to the vertex type at runtime.

    to automatically adapt the indexing to the vertex type at runtime.

    Add Valleys mapgen.

    Mgv7/flat/fractal: Place biome top node on tunnel entrance floor

    Mapgen: Various fixes and improvements

    

    Lua_api.txt: Document 'minetest.registered_biomes'

    Minimal: Remove 'mapgen_air' alias

    Cavegen: Add fallback node for 'mapgen_ice'

    Dungeongen: Add fallback node for 'mapgen_river_water_source'

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Lua_api.txt: Document 'minetest.registered_biomes'

    Minimal: Remove 'mapgen_air' alias

    Cavegen: Add fallback node for 'mapgen_ice'

    Dungeongen: Add fallback node for 'mapgen_river_water_source'

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Minimal: Remove 'mapgen_air' alias

    Cavegen: Add fallback node for 'mapgen_ice'

    Dungeongen: Add fallback node for 'mapgen_river_water_source'

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Cavegen: Add fallback node for 'mapgen_ice'

    Dungeongen: Add fallback node for 'mapgen_river_water_source'

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Dungeongen: Add fallback node for 'mapgen_river_water_source'

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Mgv5: Remove unnecessary '#include util/directiontables.h'

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Add missing 'this->'s in makeChunk()

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Mgv6: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Remove leading spaces in makeChunk()

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Add missing spaces after 'for' and 'if'

    Mgv7: Edit empty line formatting

    Mgv7: Edit empty line formatting

    Mgflat: Set blank default spflags. Unhide

    Fix the checking of flags values in the settings tab

    

    Changes:

    - Accept setting an empty flags-type value in the settings tab

      if the variable specification permits it

    - Don't accept substrings of flag values

      E.g. with values: 'one,two,three', 'hree', 'w', etc. used to

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

    - Accept setting an empty flags-type value in the settings tab

      if the variable specification permits it

    - Don't accept substrings of flag values

      E.g. with values: 'one,two,three', 'hree', 'w', etc. used to

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

      if the variable specification permits it

    - Don't accept substrings of flag values

      E.g. with values: 'one,two,three', 'hree', 'w', etc. used to

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

    - Don't accept substrings of flag values

      E.g. with values: 'one,two,three', 'hree', 'w', etc. used to

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

      E.g. with values: 'one,two,three', 'hree', 'w', etc. used to

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

      be accepted. Not any more

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

    - Don't accept flags with random pattern-matching special characters

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

      E.g. with values: 'one,two,three', 'on.', '(o)[n]e*' etc. used

      to be accepted. Not any more.

      to be accepted. Not any more.

    Improve parsing of setting types from settingtypes.txt for settings tab

    

    - Accept numbers prefixed with '+'

    - Accept multiple spaces instead of just a single one where spaces are expected

    - Allow flags to have an empty default value

    - Accept numbers prefixed with '+'

    - Accept multiple spaces instead of just a single one where spaces are expected

    - Allow flags to have an empty default value

    - Accept multiple spaces instead of just a single one where spaces are expected

    - Allow flags to have an empty default value

    - Allow flags to have an empty default value

    Cache disable_anticheat and check it for "interacted_too_far"

    Actually add Doxygen main page

    

    I apparently forgot to add this file in my previous commit (bd40ee2b95138139a8cfbef878b3461176688c15).

    I apparently forgot to add this file in my previous commit (bd40ee2b95138139a8cfbef878b3461176688c15).

    New 3D Mode: Pageflip

    

    The pageflip mode requires a stereo quadbuffer, and a modern graphic

    card. Patch tested with NVidia 3D Vision.

    

    The mini-map is not drawn, but that's what is done for topbottom and

    sidebyside modes as well.

    

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    The pageflip mode requires a stereo quadbuffer, and a modern graphic

    card. Patch tested with NVidia 3D Vision.

    

    The mini-map is not drawn, but that's what is done for topbottom and

    sidebyside modes as well.

    

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    card. Patch tested with NVidia 3D Vision.

    

    The mini-map is not drawn, but that's what is done for topbottom and

    sidebyside modes as well.

    

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    The mini-map is not drawn, but that's what is done for topbottom and

    sidebyside modes as well.

    

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    sidebyside modes as well.

    

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    Also most of the time the user would prefer the HUD to be off. That's

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    for the user to decide though, and toggle it manually.

    

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    Finally, the interocular distance (aka eye separation) is twice as much

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    as the "3d_paralax_strength" settings. I find this a strange design

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    decision. I didn't want to chance this though, since it's how the other

    3d modes interpret this settings.

    3d modes interpret this settings.

    Simplify custom games packaging

    Fix screenshot links in AppData file

    fixed spelling

    

    Fixed spelling mistake!

    Fixed spelling mistake!

    Replace instance of readsome with read in decompressZlib Make decompressZlib more robust

    Clarified what get_node does.

    Update lua_api.txt

    

    set_sky does work with on_joinplayer

    set_sky does work with on_joinplayer

    Fix redis error reporting

    

    Previously, we assumed that reply->str was NULL

    terminated. However, this turned out to be not true,

    as users reported crashes in strlen connected to

    where reply->str was appended to an std::string.

    

    Use the method recomended by the docs, to read the

    length separately.

    Previously, we assumed that reply->str was NULL

    terminated. However, this turned out to be not true,

    as users reported crashes in strlen connected to

    where reply->str was appended to an std::string.

    

    Use the method recomended by the docs, to read the

    length separately.

    terminated. However, this turned out to be not true,

    as users reported crashes in strlen connected to

    where reply->str was appended to an std::string.

    

    Use the method recomended by the docs, to read the

    length separately.

    as users reported crashes in strlen connected to

    where reply->str was appended to an std::string.

    

    Use the method recomended by the docs, to read the

    length separately.

    where reply->str was appended to an std::string.

    

    Use the method recomended by the docs, to read the

    length separately.

    Use the method recomended by the docs, to read the

    length separately.

    length separately.

    Liquids: Flow into and destroy 'floodable' nodes

    

    Add new node property 'floodable', default false

    Define "air" as floodable = true in C++ and lua

    Add new node property 'floodable', default false

    Define "air" as floodable = true in C++ and lua

    Define "air" as floodable = true in C++ and lua

    Improve Doxyfile

    

    * Add main page.

    * Organize into sections.

    * Add threading sources.

    * Include SpatialAreaStore, LevelDB/Redis, sound, FreeType, and cURL in output.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Add main page.

    * Organize into sections.

    * Add threading sources.

    * Include SpatialAreaStore, LevelDB/Redis, sound, FreeType, and cURL in output.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Organize into sections.

    * Add threading sources.

    * Include SpatialAreaStore, LevelDB/Redis, sound, FreeType, and cURL in output.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Add threading sources.

    * Include SpatialAreaStore, LevelDB/Redis, sound, FreeType, and cURL in output.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Include SpatialAreaStore, LevelDB/Redis, sound, FreeType, and cURL in output.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Add logo.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Fix project name hardcoding.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Remove PAPER_TYPE (only used when GENERATE_LATEX is enabled).

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Have dot render graphs as SVG (smaller, and works even if dot's text drawing functionality is broken).

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Enable built-in STL support.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Enable search bar.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Switch from header-bar based navigation to treeview based navigation.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Enable dynamic HTML (collapses graphs).

    * Enable generation timestamp.

    * Enable generation timestamp.

    Fix for commit 87dcee6 It uses the wrong variable and only covers some use cases. This change covers all use cases.

    Add MinSizeRel and RelWithDebInfo to MSVCBuildDir check

    Prevent technically unsafe access with empty vector

    Made it more clear that "[combine" does accept a list of files.

    filesys: safeWriteToFile(): Remove the target file before rename only on Windows

    

    Removing the target file on other platforms was enabled likely unintentionally

    by commit 5f1f1151d3a9c113902630adc16cc3f4845da7ba.

    

    This may be the reason why there has been corruption of files on Linux on hard

    shutdowns.

    

    Previously I described the problem and this fix in issue #3084.

    Removing the target file on other platforms was enabled likely unintentionally

    by commit 5f1f1151d3a9c113902630adc16cc3f4845da7ba.

    

    This may be the reason why there has been corruption of files on Linux on hard

    shutdowns.

    

    Previously I described the problem and this fix in issue #3084.

    by commit 5f1f1151d3a9c113902630adc16cc3f4845da7ba.

    

    This may be the reason why there has been corruption of files on Linux on hard

    shutdowns.

    

    Previously I described the problem and this fix in issue #3084.

    This may be the reason why there has been corruption of files on Linux on hard

    shutdowns.

    

    Previously I described the problem and this fix in issue #3084.

    shutdowns.

    

    Previously I described the problem and this fix in issue #3084.

    Previously I described the problem and this fix in issue #3084.

    Minimal: Add mapgen alias for air

    Fix client crashing when connecting to server

    

    My commit

    

    e2d54c9f9275e4f77ec33be8054621d42945f7a4 "shutdown when requested from lua in singleplayer too"

    

    broke minetest's feature to connect to servers. The client crashed

    after the connection init was complete.

    

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    My commit

    

    e2d54c9f9275e4f77ec33be8054621d42945f7a4 "shutdown when requested from lua in singleplayer too"

    

    broke minetest's feature to connect to servers. The client crashed

    after the connection init was complete.

    

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    e2d54c9f9275e4f77ec33be8054621d42945f7a4 "shutdown when requested from lua in singleplayer too"

    

    broke minetest's feature to connect to servers. The client crashed

    after the connection init was complete.

    

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    broke minetest's feature to connect to servers. The client crashed

    after the connection init was complete.

    

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    after the connection init was complete.

    

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    Thanks to @sofar for reporting the bug.

    

    Fixes #3498.

    Fixes #3498.

    Fix cache path with RUN_IN_PLACE

    

    If an `XDG_CACHE_HOME` can't be found or `RUN_IN_PLACE` is enabled,

    `path_cache` is left at its default of `$PATH_USER/cache`

    (at a time when `PATH_USER` is `..`), rather than being reset to

    `$PATH_USER/cache` after `PATH_USER` has been properly set.

    If an `XDG_CACHE_HOME` can't be found or `RUN_IN_PLACE` is enabled,

    `path_cache` is left at its default of `$PATH_USER/cache`

    (at a time when `PATH_USER` is `..`), rather than being reset to

    `$PATH_USER/cache` after `PATH_USER` has been properly set.

    `path_cache` is left at its default of `$PATH_USER/cache`

    (at a time when `PATH_USER` is `..`), rather than being reset to

    `$PATH_USER/cache` after `PATH_USER` has been properly set.

    (at a time when `PATH_USER` is `..`), rather than being reset to

    `$PATH_USER/cache` after `PATH_USER` has been properly set.

    `$PATH_USER/cache` after `PATH_USER` has been properly set.

    Include custom error message in all SQLite3 exceptions.

    

    And replace manual tests for error with SQLOK() where possible.

    And replace manual tests for error with SQLOK() where possible.

    Handle SQLITE_BUSY errors gracefully

    

    This allows other applications (e.g. minetestmapper) to interrogate

    the database while minetest is running, without causing an almost

    certain minetest crash.

    This allows other applications (e.g. minetestmapper) to interrogate

    the database while minetest is running, without causing an almost

    certain minetest crash.

    the database while minetest is running, without causing an almost

    certain minetest crash.

    certain minetest crash.

    Add macos/freebsd missing endian.h include and add win endianness info

    Revert "Refactoring and code style fixes in preparation of adding mesh typed items"

    

    This reverts commit f14e7bac54af65e3d3d99f89f23f114b17058e49.

    

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    This reverts commit f14e7bac54af65e3d3d99f89f23f114b17058e49.

    

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    Revert "Add support for using arbitrary meshes as items"

    

    This reverts commit 91bafceee6606fab79db1bde4cba01b84fed65c7.

    

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    This reverts commit 91bafceee6606fab79db1bde4cba01b84fed65c7.

    

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    Reverted due to missinterpretation of agreement, obvious dislike and me not interested in doing fights for feature I don't actually need

    Make collisionMoveSimple time overflow message written to log/show up at max once per step

    Add support for using arbitrary meshes as items

    Refactoring and code style fixes in preparation of adding mesh typed items

    shutdown when requested from lua in singleplayer too

    

    Before, minetest.request_shutdown didn't shut down

    singleplayer instances or server instances from the server tab.

    

    This commit fixes this. Fixes #3489.

    Before, minetest.request_shutdown didn't shut down

    singleplayer instances or server instances from the server tab.

    

    This commit fixes this. Fixes #3489.

    singleplayer instances or server instances from the server tab.

    

    This commit fixes this. Fixes #3489.

    This commit fixes this. Fixes #3489.

    Database backends: fix bug, and small speedup

    

    -> Redis backend: break from switch to fix bug

    -> Dummy and redis backends: reserve the count so that creating the list is faster

    -> Redis backend: break from switch to fix bug

    -> Dummy and redis backends: reserve the count so that creating the list is faster

    -> Dummy and redis backends: reserve the count so that creating the list is faster

    Alphabetical sorting of texture packs in menu (fixes #3487)

    Update URLs for buildbot & travis

    

    The freehoster these files were hosted on is shutting down soon-ish, they're now hosted on my VPS.

    The freehoster these files were hosted on is shutting down soon-ish, they're now hosted on my VPS.

    Add missing documentation of automatic_face_movement_max_rotation_per_sec entity parameter

    Android: shorten initial progress bar text way more simple

    Android: Tell make about sub-makes to speed up build

    

    Before, sub-makes called by make were called without make knowing they

    were sub-makes. This however led make's jobserver not do its tasks,

    and the build process ended up with inefficient parralelisation. This

    commit fixes this by applying the two ways the make manual tells

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    Before, sub-makes called by make were called without make knowing they

    were sub-makes. This however led make's jobserver not do its tasks,

    and the build process ended up with inefficient parralelisation. This

    commit fixes this by applying the two ways the make manual tells

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    were sub-makes. This however led make's jobserver not do its tasks,

    and the build process ended up with inefficient parralelisation. This

    commit fixes this by applying the two ways the make manual tells

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    and the build process ended up with inefficient parralelisation. This

    commit fixes this by applying the two ways the make manual tells

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    commit fixes this by applying the two ways the make manual tells

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    about: putting + to the start of the line (used when ndk-build is

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    invoked), and exchanging "make" with "$(MAKE)".

    

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    Before, make complained with messages like:

    

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    make[2]: warning: jobserver unavailable: using -j1.  Add `+' to parent make rule.

    

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    This complaint can now only been seen for openssl. openssl has issues

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    if make gets exchanged with $(MAKE): if exchanged, above error message

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    is multiplied for various subdirs of the openssl source tree.

    

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    On a 4 core box, "make -j 4" build time from "make clean_all" cleaned

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    source tree could be improved from 15:34 minutes to 10:45 minutes.

    This means a speedup of 45%.

    This means a speedup of 45%.

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 43.8% (345 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 40.0% (315 of 787 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 95.1% (749 of 787 strings)

    

    Squashed two translation commits to one

    Squashed two translation commits to one

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 48.7% (384 of 787 strings)

    

    Squashed two translation commits to one

    Squashed two translation commits to one

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 43.8% (345 of 787 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 56.6% (446 of 787 strings)

    

    Squashed two translation commits to one

    Squashed two translation commits to one

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 59.7% (470 of 787 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 3.1% (25 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 39.8% (314 of 787 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 49.0% (386 of 787 strings)

    

    Squashed two translation commits to one

    Squashed two translation commits to one

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 11.4% (90 of 787 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Currently translated at 30.7% (242 of 787 strings)

    

    Squashed two translation commits to one

    Squashed two translation commits to one

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 23.7% (187 of 787 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 42.0% (331 of 787 strings)

    Fix lua object:get_properties() being broken

    Fix missing localization for obj

    Android: Fix extra files being copied to the APK

    

    dcb91cf0c0c9a20622feeb4e5e8104ffbc9fa8ec hacked around the biggest issue

    this caused, but wasted a lot of CPU time and disk space  It also still

    included a lot of other unwanted files.  This removes all of `doc/` except

    the license, and also removes the server list.

    dcb91cf0c0c9a20622feeb4e5e8104ffbc9fa8ec hacked around the biggest issue

    this caused, but wasted a lot of CPU time and disk space  It also still

    included a lot of other unwanted files.  This removes all of `doc/` except

    the license, and also removes the server list.

    this caused, but wasted a lot of CPU time and disk space  It also still

    included a lot of other unwanted files.  This removes all of `doc/` except

    the license, and also removes the server list.

    included a lot of other unwanted files.  This removes all of `doc/` except

    the license, and also removes the server list.

    the license, and also removes the server list.

    Fix missing pop

    

    Previous commit

    

    70ea5d552e283bd5bce3278cbf3819bd87ba2602 "Add support for limiting rotation of automatic face movement dir entitys"

    

    by sapier has broken minetest's feature to open worlds. This was due to a

    missing stack pop operation.

    

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    Previous commit

    

    70ea5d552e283bd5bce3278cbf3819bd87ba2602 "Add support for limiting rotation of automatic face movement dir entitys"

    

    by sapier has broken minetest's feature to open worlds. This was due to a

    missing stack pop operation.

    

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    70ea5d552e283bd5bce3278cbf3819bd87ba2602 "Add support for limiting rotation of automatic face movement dir entitys"

    

    by sapier has broken minetest's feature to open worlds. This was due to a

    missing stack pop operation.

    

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    by sapier has broken minetest's feature to open worlds. This was due to a

    missing stack pop operation.

    

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    missing stack pop operation.

    

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    Thanks to @oleastre for reporting this bug and suggesting the fix.

    Add support for limiting rotation of automatic face movement dir entitys

    Android: Implement Autohiding button bars to cleanup screen

    Android: Remove unused build target curl_binary

    Android: Don't put html docs to apk

    Android: Remove non freetype fonts from apk

    Android: Fix pressed buttons not beeing cleared on opening menu

    Add option to give every object a nametag

    

    or change the nametag text of players

    or change the nametag text of players

    Get movement setting instead of hard coded value

    Mgfractal: Add 3D and 4D fractals

    

    3D Mandelbrot/Mandelbar

    3D Christmas Tree

    3D Mandelbulb

    3D Cosine Mandelbulb

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    3D Mandelbrot/Mandelbar

    3D Christmas Tree

    3D Mandelbulb

    3D Cosine Mandelbulb

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    3D Christmas Tree

    3D Mandelbulb

    3D Cosine Mandelbulb

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    3D Mandelbulb

    3D Cosine Mandelbulb

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    3D Cosine Mandelbulb

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    4D Mandelbulb

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    Plus corresponding julia set for each

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    Add credits for formulas

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    Rename parameter 'formula' to 'fractal'

    Speed optimisations

    Speed optimisations

    Fix events on Windows

    Fix android build

    Fix android build since commit

    

    696148e29889b2923f926b27f76979454676506d "Fix Event implementation"

    

    by @ShadowNinja.

    

    Fixes #3444. Thanks @kwolekr for pointing out the fix.

    696148e29889b2923f926b27f76979454676506d "Fix Event implementation"

    

    by @ShadowNinja.

    

    Fixes #3444. Thanks @kwolekr for pointing out the fix.

    by @ShadowNinja.

    

    Fixes #3444. Thanks @kwolekr for pointing out the fix.

    Fixes #3444. Thanks @kwolekr for pointing out the fix.

    Fix some setting documentation

    

    * Horizontal and vertical are used wrongly. Use height and width because

            horizontal/vertical describes different things. Thanks @kilbith for pointing out.

    * Update minetest.conf.example and settings_translation_file.cpp

    * Correct maximum/minimum copy paste mistake.

    * Horizontal and vertical are used wrongly. Use height and width because

            horizontal/vertical describes different things. Thanks @kilbith for pointing out.

    * Update minetest.conf.example and settings_translation_file.cpp

    * Correct maximum/minimum copy paste mistake.

            horizontal/vertical describes different things. Thanks @kilbith for pointing out.

    * Update minetest.conf.example and settings_translation_file.cpp

    * Correct maximum/minimum copy paste mistake.

    * Update minetest.conf.example and settings_translation_file.cpp

    * Correct maximum/minimum copy paste mistake.

    * Correct maximum/minimum copy paste mistake.

    Speed up and make more accurate relief mapping

    

    using linear + binary search.

    using linear + binary search.

    Fix Event implementation

    

    On non-windows platforms this just used a semaphore,

    which meant that multiple calls to signal() would

    result in wait() returning multiple times.

    On non-windows platforms this just used a semaphore,

    which meant that multiple calls to signal() would

    result in wait() returning multiple times.

    which meant that multiple calls to signal() would

    result in wait() returning multiple times.

    result in wait() returning multiple times.

    Add seperate cache path

    

    This is set to the XDG cache path where possible.

    It's set to the app's cache path on Android.

    This is set to the XDG cache path where possible.

    It's set to the app's cache path on Android.

    It's set to the app's cache path on Android.

    Fix threshold type

    

    Fix the type of the threshold value for mapgen.

    The commit

    

    a78dd7f2b6b0e1fefdbaa1ae21b722dd4459e4f4 "Fix spelling of noise_threshold"

    

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    Fix the type of the threshold value for mapgen.

    The commit

    

    a78dd7f2b6b0e1fefdbaa1ae21b722dd4459e4f4 "Fix spelling of noise_threshold"

    

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    The commit

    

    a78dd7f2b6b0e1fefdbaa1ae21b722dd4459e4f4 "Fix spelling of noise_threshold"

    

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    a78dd7f2b6b0e1fefdbaa1ae21b722dd4459e4f4 "Fix spelling of noise_threshold"

    

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    Thanks to @kwolekr for pointing this out.

    lua_api.txt: add blank lines before * lists

    

    If rendered as markdown, lists need a blank line before them

    so that they are recognized as such.

    If rendered as markdown, lists need a blank line before them

    so that they are recognized as such.

    so that they are recognized as such.

    Mapgen: Add propagate_shadow bool to calcLighting

    

    To terminate unwanted shadows from floatlands or realms above

    Also add to LuaVoxelManip calc_lighting for use in mapgen mods

    Remove the 2 argument calcLighting, mapgens now use the 5

    argument form to specify the volumes for propagateSunlight and

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    To terminate unwanted shadows from floatlands or realms above

    Also add to LuaVoxelManip calc_lighting for use in mapgen mods

    Remove the 2 argument calcLighting, mapgens now use the 5

    argument form to specify the volumes for propagateSunlight and

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    Also add to LuaVoxelManip calc_lighting for use in mapgen mods

    Remove the 2 argument calcLighting, mapgens now use the 5

    argument form to specify the volumes for propagateSunlight and

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    Remove the 2 argument calcLighting, mapgens now use the 5

    argument form to specify the volumes for propagateSunlight and

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    argument form to specify the volumes for propagateSunlight and

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    spreadLight

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    In mgsinglenode replace calcLighting with setLighting and

    clean-up use of tabs and spaces

    clean-up use of tabs and spaces

    Fix spelling of noise_threshold

    Improve LuaJIT detection

    

    On openSUSE luajit is not detected correctly.

    This is because openSUSE is using a lua version suffix, like other Linux distributions do it also.

    So the include directory is:

    include/luajit-5_1-2.0

    On openSUSE luajit is not detected correctly.

    This is because openSUSE is using a lua version suffix, like other Linux distributions do it also.

    So the include directory is:

    include/luajit-5_1-2.0

    This is because openSUSE is using a lua version suffix, like other Linux distributions do it also.

    So the include directory is:

    include/luajit-5_1-2.0

    So the include directory is:

    include/luajit-5_1-2.0

    include/luajit-5_1-2.0

    Make travis work again

    

    Now we do sudo apt-get update to download package sources.

    This fixes travis build with the new GCE based infrastructure.

    

    Closes #3427.

    Closes #3426.

    Now we do sudo apt-get update to download package sources.

    This fixes travis build with the new GCE based infrastructure.

    

    Closes #3427.

    Closes #3426.

    This fixes travis build with the new GCE based infrastructure.

    

    Closes #3427.

    Closes #3426.

    Closes #3427.

    Closes #3426.

    Closes #3426.

    Fix build if BUILD_SHARED_LIBS defaults to "ON"

    

    openSUSE sets that option to ON.

    

    Fixes #3420.

    openSUSE sets that option to ON.

    

    Fixes #3420.

    Fixes #3420.

    Document limitations of minetest.get_password_hash

    Mgv5/v7/flat/fractal: More large pseudorandom caves

    

    Mgv7/flat/fractal: Reduce tunnel noise spreads to 96

    Mgv7/flat/fractal: Reduce tunnel noise spreads to 96

    Add on_secondary_use when right clicking an item in the air

    Dungeongen: Fix rarely triggered segfault

    

    A segfault exposed a missing 'vm->m_area.contains()'

    check in makeCorridor that allowed the calculation

    of vm index for a node outside the vm area. The huge

    and invalid index number caused getContent to fail

    A segfault exposed a missing 'vm->m_area.contains()'

    check in makeCorridor that allowed the calculation

    of vm index for a node outside the vm area. The huge

    and invalid index number caused getContent to fail

    check in makeCorridor that allowed the calculation

    of vm index for a node outside the vm area. The huge

    and invalid index number caused getContent to fail

    of vm index for a node outside the vm area. The huge

    and invalid index number caused getContent to fail

    and invalid index number caused getContent to fail

    Remove unused OpenALSoundManager::m_can_vorbis and EXT_vorbis check

    Lua_api.txt: Add documentation for biome definition

    Dungeongen: Also preserve river water nodes

    

    For future river mapgens

    Dungeons will not generate in river water, to

    avoid dungeons filling and blocking river channels

    For future river mapgens

    Dungeons will not generate in river water, to

    avoid dungeons filling and blocking river channels

    Dungeons will not generate in river water, to

    avoid dungeons filling and blocking river channels

    avoid dungeons filling and blocking river channels

    Re-enable texture pre-filters on wielditems, fixing #3178.

    Simplify regex used in check_modname_prefix and other improvements.

    

    Simplified the regex used, added comments and changed the error message

    to contain the correct mod name.

    Simplified the regex used, added comments and changed the error message

    to contain the correct mod name.

    to contain the correct mod name.

    Mgfractal: Move julia set selection into formula parameter

    

    Improve default parameters

    Update and improve documentation

    Unhide mapgen, but is still unstable

    Improve default parameters

    Update and improve documentation

    Unhide mapgen, but is still unstable

    Update and improve documentation

    Unhide mapgen, but is still unstable

    Unhide mapgen, but is still unstable

    Update HUD flags on server like on client

    

    Fixes bug for which commit

    

    6c37e89f08f962eaba788a31f5d3c798ceaa65e6 "Fix old client showing duplicated health bar on new server"

    by @sapier

    

    laid the groundwork, where the server has

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    Fixes bug for which commit

    

    6c37e89f08f962eaba788a31f5d3c798ceaa65e6 "Fix old client showing duplicated health bar on new server"

    by @sapier

    

    laid the groundwork, where the server has

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    6c37e89f08f962eaba788a31f5d3c798ceaa65e6 "Fix old client showing duplicated health bar on new server"

    by @sapier

    

    laid the groundwork, where the server has

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    by @sapier

    

    laid the groundwork, where the server has

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    laid the groundwork, where the server has

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    updated its copy of the hud flags without

    respecting the mask.

    

    Fixes #3395.

    respecting the mask.

    

    Fixes #3395.

    Fixes #3395.

    Mapgen: Add global 'decorations' flag

    

    Flag is set by default in MapgenParams

    The global 'trees' flag remains but is now

    undocumented and unset by default in MapgenParams

    Add mgv6_spflag 'trees' set by default in

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    Flag is set by default in MapgenParams

    The global 'trees' flag remains but is now

    undocumented and unset by default in MapgenParams

    Add mgv6_spflag 'trees' set by default in

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    The global 'trees' flag remains but is now

    undocumented and unset by default in MapgenParams

    Add mgv6_spflag 'trees' set by default in

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    undocumented and unset by default in MapgenParams

    Add mgv6_spflag 'trees' set by default in

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    Add mgv6_spflag 'trees' set by default in

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    defaultsettings.cpp to affect new worlds only

    This is automatically backwards

    compatible for existing worlds

    This is automatically backwards

    compatible for existing worlds

    compatible for existing worlds

    Log static_spawn error only once

    Android: hardcode irrlicht revision, update other dependencies

    

    Recent irrlicht revisions break the build, hardcode the revision to a working one

    until upstream publishes a working version. See issue #3366 for

    a discussion about this.

    

    Also update dependencies to current versions.

    Recent irrlicht revisions break the build, hardcode the revision to a working one

    until upstream publishes a working version. See issue #3366 for

    a discussion about this.

    

    Also update dependencies to current versions.

    until upstream publishes a working version. See issue #3366 for

    a discussion about this.

    

    Also update dependencies to current versions.

    a discussion about this.

    

    Also update dependencies to current versions.

    Also update dependencies to current versions.

    Add a status text for autorun

    Allow craft replacements to use groups

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 42.0% (331 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 45.8% (361 of 787 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 32.4% (255 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 45.7% (360 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 45.6% (359 of 787 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (787 of 787 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 26.3% (207 of 787 strings)

    

    -

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 11.8% (93 of 787 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 31.6% (249 of 787 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 31.6% (249 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 41.4% (326 of 787 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (787 of 787 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 9.2% (73 of 787 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (787 of 787 strings)

    Translated using Weblate (Catalan)

    

    Currently translated at 46.0% (423 of 918 strings)

    Currently translated at 100% (0 of 0 strings)

    

    Created new translation.

    Created new translation.

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Currently translated at 21.4% (169 of 787 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 44.0% (347 of 787 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Currently translated at 25.4% (200 of 787 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 40.2% (317 of 787 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (787 of 787 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.8% (762 of 787 strings)

    Mgfractal: Revert unnecessary duplication of parameters

    sound_openal.cpp: remove unused header

    Load sound from memory

    

    * Remove trailing lines from src/sound_openal.cpp

    * Don't do a horribly ugly copy of the file's path, allocating and deallocating a

            10 kb buffer in the process. This copy was needed for backwards compatibility

            with libvorbis 1.3.1 and earlier, as the removed comment explains.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

    * Remove trailing lines from src/sound_openal.cpp

    * Don't do a horribly ugly copy of the file's path, allocating and deallocating a

            10 kb buffer in the process. This copy was needed for backwards compatibility

            with libvorbis 1.3.1 and earlier, as the removed comment explains.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

    * Don't do a horribly ugly copy of the file's path, allocating and deallocating a

            10 kb buffer in the process. This copy was needed for backwards compatibility

            with libvorbis 1.3.1 and earlier, as the removed comment explains.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

            10 kb buffer in the process. This copy was needed for backwards compatibility

            with libvorbis 1.3.1 and earlier, as the removed comment explains.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

            with libvorbis 1.3.1 and earlier, as the removed comment explains.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

            However, even Ubuntu precise has 1.3.2 already. Dropping support and sparing

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

            the ugly copy can therefore be considered safe.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

    * Actually load sounds from the memory, not caching them at the disk first,

            removing the old hack. This is the main motivation for the commit.

            removing the old hack. This is the main motivation for the commit.

    Decoration API: Fix missing low density decorations

    

    For a decoration count between 0 and 1 calculate a chance for 1

    For a decoration count between 0 and 1 calculate a chance for 1

    Mgfractal: Create a choice of 4 mandelbrot formulas

    Mgv6: Move global mapgen flag 'flat' into mgv6 spflags

    

    Add mgv6 spflag 'flat'

    Global flag is kept for backwards compatibility but is now undocumented

    Add mgv6 spflag 'flat'

    Global flag is kept for backwards compatibility but is now undocumented

    Global flag is kept for backwards compatibility but is now undocumented

    Only allow players with shout to chat

    

    Fix regression of commit

    

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    Fix regression of commit

    

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    Fixes #3362.

    Fix scrollbars

    Add the player name to dropped items

    

    The player name is now added in the field "dropped_by" on the created

    entity.

    The player name is now added in the field "dropped_by" on the created

    entity.

    entity.

    Mapgen: Add flat mapgen in hidden form

    Convert usages of PseudoRandom to PcgRandom for ore and deco placement

    

    In addition to being a better random, this fixes #3228

    In addition to being a better random, this fixes #3228

    Cavegen: Make mgfractal use mgv5 cavegen

    

    Remove CaveFractal

    Add a lava depth constant to CaveV5 to make it universal

    Remove CaveFractal

    Add a lava depth constant to CaveV5 to make it universal

    Add a lava depth constant to CaveV5 to make it universal

    Put ChatEvent handler into own function

    

    Comply with line limit.

    Comply with line limit.

    Abort compile when attempting to build client with Irrlicht 1.8.2

    Add errno to socket creation failed exception

    Write new line character sequence at end of print()

    

    Fix regression of commit

    

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    where no line termination character was printed after a

    lua print outside of terminal mode.

    

    Fixes #3350.

    Fix regression of commit

    

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    5e507c9829942c434a6f1ae7a4f3a488c7e50bef "Add server side ncurses terminal"

    

    which allowed all players, even those without a shout priv, to chat.

    

    Fixes #3362.

    where no line termination character was printed after a

    lua print outside of terminal mode.

    

    Fixes #3350.

    lua print outside of terminal mode.

    

    Fixes #3350.

    Fixes #3350.

    Fix misc. MinGW and Valgrind warnings

    Add LuaSecureRandom

    Run util/updatepo.sh

    Update minetest.conf.example and src/settings_translation_file.cpp

    Settings tab: add v3f type

    

    Add the v3f type, currently is just a nice placeholder for string.

    Currently undocumented, on wish of @PilzAdam, to support future changes.

    Add the v3f type, currently is just a nice placeholder for string.

    Currently undocumented, on wish of @PilzAdam, to support future changes.

    Currently undocumented, on wish of @PilzAdam, to support future changes.

    Some german translation improvements

    Russian translation: remove weird char

    

    Whatever that char is, it isn't a space.

    Whatever that char is, it isn't a space.

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 49.5% (373 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 58.0% (437 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 47.6% (359 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 47.4% (357 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 47.2% (356 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 47.0% (354 of 753 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Currently translated at 30.0% (226 of 753 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 43.0% (324 of 753 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 35.1% (265 of 753 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 35.1% (265 of 753 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 40.6% (306 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 56.3% (424 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 48.0% (362 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 46.7% (352 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 39.7% (299 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.3% (748 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 32.6% (246 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 32.2% (243 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (753 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (753 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.2% (740 of 753 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 33.0% (249 of 753 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 32.9% (248 of 753 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Currently translated at 25.8% (195 of 753 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 26.4% (199 of 753 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 28.2% (213 of 753 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 40.2% (303 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.8% (744 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.2% (740 of 753 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 31.3% (236 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 43.8% (330 of 753 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 32.5% (245 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.4% (726 of 753 strings)

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 33.0% (249 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.6% (743 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 84.1% (634 of 753 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 3.3% (25 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 75.5% (569 of 753 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 40.5% (305 of 753 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 32.1% (242 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.8% (744 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 56.3% (424 of 753 strings)

    Translated using Weblate (Hebrew)

    

    Currently translated at 44.3% (601 of 1356 strings)

    Currently translated at 100% (0 of 0 strings)

    

    Created new translation.

    Created new translation.

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 94.1% (709 of 753 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 32.5% (245 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 94.0% (708 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.1% (739 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.1% (739 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.0% (738 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 95.4% (719 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 43.8% (330 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 75.5% (569 of 753 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 40.2% (303 of 753 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 36.9% (278 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 61.6% (464 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 54.1% (408 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 52.3% (394 of 753 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 35.4% (267 of 753 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 36.2% (273 of 753 strings)

    Don't compile pcgrandom on Windows

    

    There it isn't needed.

    There it isn't needed.

    Improve LuaVoxelManip documentation

    Add support for audio feedback if placing node failed

    Document ENABLE_CURSES in README.txt

    Conf.example, settingtypes: Improve mgfractal documentation

    Add server side ncurses terminal

    

    This adds a chat console the server owner can use for administration

    or to talk with players.

    It runs in its own thread, which makes the user interface immune to

    the server's lag, behaving just like a client, except timeout.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    This adds a chat console the server owner can use for administration

    or to talk with players.

    It runs in its own thread, which makes the user interface immune to

    the server's lag, behaving just like a client, except timeout.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    or to talk with players.

    It runs in its own thread, which makes the user interface immune to

    the server's lag, behaving just like a client, except timeout.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    It runs in its own thread, which makes the user interface immune to

    the server's lag, behaving just like a client, except timeout.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    the server's lag, behaving just like a client, except timeout.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    As it uses the same console code as the f10 console, things like nick

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    completion or a scroll buffer basically come for free.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    The terminal itself is written in a general way so that adding a

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    client version later on is just about implementing an interface.

    

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    Fatal errors are printed after the console exists and the ncurses

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    terminal buffer gets cleaned up with endwin(), so that the error still

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    remains visible.

    

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    The server owner can chose their username their entered text will

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    have in chat and where players can send PMs to.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    Once the username is secured with a password to prevent anybody to

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    take over the server, the owner can execute admin tasks over the

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    console.

    

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    This change includes a contribution by @kahrl who has improved ncurses

    library detection.

    library detection.

    Schematics: Add core.place_schematic_on_vmanip API

    

    Fix memory leak in minetest.place_schematic

    Slightly refactor Schematic code

    Fix memory leak in minetest.place_schematic

    Slightly refactor Schematic code

    Slightly refactor Schematic code

    Settingtypes: Correct documentation for mgfractal

    

    Use type 'string' for v3fs and add comments

    Use type 'string' for v3fs and add comments

    Fix time progressing too fast

    

    Before, time progressed wrongly. This was due to a mistake in how m_time_of_day_f was calculated,

    and a regression of the last two commits.

    Before, time progressed wrongly. This was due to a mistake in how m_time_of_day_f was calculated,

    and a regression of the last two commits.

    and a regression of the last two commits.

    Mgfractal: Add documentation to conf.example and settingtypes

    Time: use locks again

    

    The Atomic implementation was only partially correct, and was very complex.

    Use locks for sake of simplicity, following KISS principle.

    Only remaining atomic operation use is time of day speed, because that

    really is only read + written.

    

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    The Atomic implementation was only partially correct, and was very complex.

    Use locks for sake of simplicity, following KISS principle.

    Only remaining atomic operation use is time of day speed, because that

    really is only read + written.

    

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    Use locks for sake of simplicity, following KISS principle.

    Only remaining atomic operation use is time of day speed, because that

    really is only read + written.

    

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    Only remaining atomic operation use is time of day speed, because that

    really is only read + written.

    

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    really is only read + written.

    

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    Also fixes a bug with m_time_conversion_skew only being decremented, never

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    incremented (Regresion from previous commit).

    

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

    atomic.h changes:

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

            * Add GenericAtomic<T> class for non-integral types like floats.

    

            * Remove some last remainders from atomic.h of the volatile use.

            * Remove some last remainders from atomic.h of the volatile use.

    Time: Remove serverside getter, and use atomic operations

    

    It isn't possible to use atomic operations for floats, so don't use them there.

    

    Having a lock is good out of other reasons too, because this way the float time

    and the integer time both match, and can't get different values in a race,

    e.g. when two setTimeofDay() get executed simultaneously.

    It isn't possible to use atomic operations for floats, so don't use them there.

    

    Having a lock is good out of other reasons too, because this way the float time

    and the integer time both match, and can't get different values in a race,

    e.g. when two setTimeofDay() get executed simultaneously.

    Having a lock is good out of other reasons too, because this way the float time

    and the integer time both match, and can't get different values in a race,

    e.g. when two setTimeofDay() get executed simultaneously.

    and the integer time both match, and can't get different values in a race,

    e.g. when two setTimeofDay() get executed simultaneously.

    e.g. when two setTimeofDay() get executed simultaneously.

    Atomic: cleanup and add more operations

    

    Cleanup:

            * Remove volatile keyword, it is of no use at all. [1]

            * Remove the enable_if stuff. It had no use either.

              The most likely explanation why the enable_if stuff was there is that it

              was used as something like a STATIC_ASSERT to verify that sizeof(T) is not larger

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

    Cleanup:

    * Drop unused Map::transforming_liquid_size()

    * NodeNeighbor must use const ref for v3s16

    * Add a missing default in a switch case

            * Remove volatile keyword, it is of no use at all. [1]

            * Remove the enable_if stuff. It had no use either.

              The most likely explanation why the enable_if stuff was there is that it

              was used as something like a STATIC_ASSERT to verify that sizeof(T) is not larger

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Remove the enable_if stuff. It had no use either.

              The most likely explanation why the enable_if stuff was there is that it

              was used as something like a STATIC_ASSERT to verify that sizeof(T) is not larger

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              The most likely explanation why the enable_if stuff was there is that it

              was used as something like a STATIC_ASSERT to verify that sizeof(T) is not larger

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              was used as something like a STATIC_ASSERT to verify that sizeof(T) is not larger

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              than sizeof(void *). This check however is not just misplaced in a place where we

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              already use a lock, it isn't needed at all, as gcc will just generate a call to

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              to the runtime if it compiles for platforms that don't support atomic instructions.

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

              The runtime will then most likely use locks.

    

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

    Code style fixes:

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Prefix name of the mutex

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Line everything up nicely, where it makes things look nice

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Filling \ continuations with spaces is code style rule

    

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

    Added operations on the atomic var:

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Compare and swap

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

            * Swap

    

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

    The second point of the cleanup also fixes the Android build of the next commit.

    

    [1]: http://stackoverflow.com/q/2484980

    [1]: http://stackoverflow.com/q/2484980

    Only go fast in autorun if fast move is enabled

    Silence 'unused typedef' warning for STATIC_ASSERT()

    Add callback parameter for core.emerge_area()

    Speed up saving of profiling data by 27x

    

    On Windows Release x64 bit build this changes:

    

    ProfilerGraph::put

    1.68% -> 0.061%

    

    ProfilerGraph::draw

    12% -> 17.%

    

    So yes, there is a tradeoff between saving profiling data

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    On Windows Release x64 bit build this changes:

    

    ProfilerGraph::put

    1.68% -> 0.061%

    

    ProfilerGraph::draw

    12% -> 17.%

    

    So yes, there is a tradeoff between saving profiling data

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    ProfilerGraph::put

    1.68% -> 0.061%

    

    ProfilerGraph::draw

    12% -> 17.%

    

    So yes, there is a tradeoff between saving profiling data

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    ProfilerGraph::draw

    12% -> 17.%

    

    So yes, there is a tradeoff between saving profiling data

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    So yes, there is a tradeoff between saving profiling data

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    (executed always) and drawing the profiler graph (executed very rarely).

    But usually you don't have the profiler graph open.

    But usually you don't have the profiler graph open.

    Rename and move basicmacros.h to util/basic_macros.h

    Print --videomodes response to standard output, too

    Print direct command line responses to standard output instead of using the log system

    

    Using logging for these just makes them bloated and hard to read and overally just not neat at all.

    Using logging for these just makes them bloated and hard to read and overally just not neat at all.

    Fix Lua scripting synchronization

    

    For several years now, the lua script lock has been completely broken.

    This commit fixes the main issue (creation of a temporary rather than

    scoped object), and fixes a subsequent deadlock issue caused by

    nested script API calls by adding support for recursive mutexes.

    For several years now, the lua script lock has been completely broken.

    This commit fixes the main issue (creation of a temporary rather than

    scoped object), and fixes a subsequent deadlock issue caused by

    nested script API calls by adding support for recursive mutexes.

    This commit fixes the main issue (creation of a temporary rather than

    scoped object), and fixes a subsequent deadlock issue caused by

    nested script API calls by adding support for recursive mutexes.

    scoped object), and fixes a subsequent deadlock issue caused by

    nested script API calls by adding support for recursive mutexes.

    nested script API calls by adding support for recursive mutexes.

    Fix Noise compiled under clang >= 3.7.x with -O2 or higher

    

    When compiled with optimizations, the most recent versions of clang seem

    to 'optimize' out a crucial "and %reg, 0x7FFFFFFF" instruction in noise2d(),

    probably because it somehow assumed the variable n would never become greater

    than that amount.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    When compiled with optimizations, the most recent versions of clang seem

    to 'optimize' out a crucial "and %reg, 0x7FFFFFFF" instruction in noise2d(),

    probably because it somehow assumed the variable n would never become greater

    than that amount.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    to 'optimize' out a crucial "and %reg, 0x7FFFFFFF" instruction in noise2d(),

    probably because it somehow assumed the variable n would never become greater

    than that amount.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    probably because it somehow assumed the variable n would never become greater

    than that amount.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    than that amount.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    Indeed, signed integer underflow is undefined behavior in C and C++, so while

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    this optimization is "correct" in that sense, it breaks lots of existing code.

    Solved by changing n to an unsigned type, making behavior well-defined.

    Solved by changing n to an unsigned type, making behavior well-defined.

    Fix server crashing on Lua errors

    

    Previously, the server called FATAL_ERROR when a Lua error occured.

    This caused a (mostly useless) core dump.

    The server now simply throws an exception, which is caught and printed before

    exiting with a non-zero return value.

    This also fixes a number of instances where errors were logged multiple times.

    Previously, the server called FATAL_ERROR when a Lua error occured.

    This caused a (mostly useless) core dump.

    The server now simply throws an exception, which is caught and printed before

    exiting with a non-zero return value.

    This also fixes a number of instances where errors were logged multiple times.

    This caused a (mostly useless) core dump.

    The server now simply throws an exception, which is caught and printed before

    exiting with a non-zero return value.

    This also fixes a number of instances where errors were logged multiple times.

    The server now simply throws an exception, which is caught and printed before

    exiting with a non-zero return value.

    This also fixes a number of instances where errors were logged multiple times.

    exiting with a non-zero return value.

    This also fixes a number of instances where errors were logged multiple times.

    This also fixes a number of instances where errors were logged multiple times.

    Fix clang warning

    Fix C++11 compatibility

    minetest. to core.

    WoW-style Autorun

    

    This allows the player to toggle continuous forward with a key (F by default),

    so we don't have to hold down the forward key endlessly.

    This allows the player to toggle continuous forward with a key (F by default),

    so we don't have to hold down the forward key endlessly.

    so we don't have to hold down the forward key endlessly.

    findSpawnPos: Add setting for max height above water level

    

    Increase default from 6 to 16 to help with mgv7 and mgfractal

    Large-scale or alternative mapgens can result in a lowland spawn point not

    being found, causing a spawn at (0, 0, 0) possibly buried underground

    The max height is now settable to allow correct player spawn

    in any mapgen or when using custom noise parameters

    Increase default from 6 to 16 to help with mgv7 and mgfractal

    Large-scale or alternative mapgens can result in a lowland spawn point not

    being found, causing a spawn at (0, 0, 0) possibly buried underground

    The max height is now settable to allow correct player spawn

    in any mapgen or when using custom noise parameters

    Large-scale or alternative mapgens can result in a lowland spawn point not

    being found, causing a spawn at (0, 0, 0) possibly buried underground

    The max height is now settable to allow correct player spawn

    in any mapgen or when using custom noise parameters

    being found, causing a spawn at (0, 0, 0) possibly buried underground

    The max height is now settable to allow correct player spawn

    in any mapgen or when using custom noise parameters

    The max height is now settable to allow correct player spawn

    in any mapgen or when using custom noise parameters

    in any mapgen or when using custom noise parameters

    Mgfractal: Add filler depth noise

    Add STATIC_ASSERT() macro and use it

    Add DISABLE_CLASS_COPY macro (and use it)

    

    Use this macro to disallow copying of an object using the assignment

    operator or copy constructor.  This catches otherwise silent-but-deadly

    mistakes such as "ServerMap map = env->getMap();" at compile time.

    

    If so desired, it is still possible to copy a class, but it now requires

    an explicit call to memcpy or std::copy.

    Use this macro to disallow copying of an object using the assignment

    operator or copy constructor.  This catches otherwise silent-but-deadly

    mistakes such as "ServerMap map = env->getMap();" at compile time.

    

    If so desired, it is still possible to copy a class, but it now requires

    an explicit call to memcpy or std::copy.

    operator or copy constructor.  This catches otherwise silent-but-deadly

    mistakes such as "ServerMap map = env->getMap();" at compile time.

    

    If so desired, it is still possible to copy a class, but it now requires

    an explicit call to memcpy or std::copy.

    mistakes such as "ServerMap map = env->getMap();" at compile time.

    

    If so desired, it is still possible to copy a class, but it now requires

    an explicit call to memcpy or std::copy.

    If so desired, it is still possible to copy a class, but it now requires

    an explicit call to memcpy or std::copy.

    an explicit call to memcpy or std::copy.

    Environment: Time of day fixes and add serverside getter

    

    -> Put access to time variables under the time lock.

    -> Merge both time locks, there is no point to have two locks.

    -> Fix the lock being released too early in Environment::setTimeOfDay

    -> Add serverside getter so that you don't have to get

            the environment if you only have the server

    -> Put access to time variables under the time lock.

    -> Merge both time locks, there is no point to have two locks.

    -> Fix the lock being released too early in Environment::setTimeOfDay

    -> Add serverside getter so that you don't have to get

            the environment if you only have the server

    -> Merge both time locks, there is no point to have two locks.

    -> Fix the lock being released too early in Environment::setTimeOfDay

    -> Add serverside getter so that you don't have to get

            the environment if you only have the server

    -> Fix the lock being released too early in Environment::setTimeOfDay

    -> Add serverside getter so that you don't have to get

            the environment if you only have the server

    -> Add serverside getter so that you don't have to get

            the environment if you only have the server

            the environment if you only have the server

    Fix missing #include

    Move basic, non-numeric macros from util/numeric.h to basicmacros.h

    Fix jittering sounds on entities (fixes #2974)

    Fix typo

    SAPI: Fix seed parameter truncation for LuaPseudoRandom constructor

    

    Also fix a potential seed truncation issue on platforms where the

    range of ptrdiff_t (the underlying type of lua_Integer) is too small.

    Also fix a potential seed truncation issue on platforms where the

    range of ptrdiff_t (the underlying type of lua_Integer) is too small.

    range of ptrdiff_t (the underlying type of lua_Integer) is too small.

    SAPI: Move core.get_us_time() to Util module

    Remove some abort() calls

    

    abort() doesn't benefit from the high level abstractions from FATAL_ERROR.

    abort() doesn't benefit from the high level abstractions from FATAL_ERROR.

    SAPI: Throw runtime error instead of if l_get_mapgen_object called in incorrect thread

    SAPI: Mark all Lua API functions requiring envlock

    Correct comment in l_util.cpp

    

    Remove outdated loglevel list from a l_util.cpp comment,

    and rather point to the updated code.

    Remove outdated loglevel list from a l_util.cpp comment,

    and rather point to the updated code.

    and rather point to the updated code.

    Fix parameter passing to gettext call

    Check if hitter has inventory when punching item

    

    Fixes #3280

    Fixes #3280

    Credits: Remove my name

    Add option to disable backface culling for models

    

    - Disabled by default (except players)

    - Fixes #2984

    - Disabled by default (except players)

    - Fixes #2984

    - Fixes #2984

    Escape " in generated settings_translation_file.cpp

    Fix out of bounds vector write in Logger::addOutput(ILogOutput *out)

    

    Previously, the invocation of Logger::addOutput(ILogOutput *out) led to

    an out of bounds write of the m_outputs vector, resulting in the

    m_silenced_levels array being modified.

    

    Fortunately, the only caller of that method was android system logging,

    and only since a few commits ago.

    Previously, the invocation of Logger::addOutput(ILogOutput *out) led to

    an out of bounds write of the m_outputs vector, resulting in the

    m_silenced_levels array being modified.

    

    Fortunately, the only caller of that method was android system logging,

    and only since a few commits ago.

    an out of bounds write of the m_outputs vector, resulting in the

    m_silenced_levels array being modified.

    

    Fortunately, the only caller of that method was android system logging,

    and only since a few commits ago.

    m_silenced_levels array being modified.

    

    Fortunately, the only caller of that method was android system logging,

    and only since a few commits ago.

    Fortunately, the only caller of that method was android system logging,

    and only since a few commits ago.

    and only since a few commits ago.

    Fix setting comments

    Don't allow games or mods to add secure. settings

    Mgfractal: Independent iterations and scale parameters

    

    Complete set of parameters for each of mandelbrot and julia sets

    The julia set structure often needs different iterations and scale

    Complete set of parameters for each of mandelbrot and julia sets

    The julia set structure often needs different iterations and scale

    The julia set structure often needs different iterations and scale

    Android: statically load iconv library

    

    Fixes #3291

    

    Thanks to @arpruss for reporting the bug, and suggesting the fix.

    

    Also, remove trailing whitespaces.

    Fixes #3291

    

    Thanks to @arpruss for reporting the bug, and suggesting the fix.

    

    Also, remove trailing whitespaces.

    Thanks to @arpruss for reporting the bug, and suggesting the fix.

    

    Also, remove trailing whitespaces.

    Also, remove trailing whitespaces.

    Run updatepo.sh

    Better gettext support for protocol version mismatch messages

    

    Previously, xgettext failed to resolve the dynamic call.

    Thanks to @JakubVanek for pointing this out.

    Previously, xgettext failed to resolve the dynamic call.

    Thanks to @JakubVanek for pointing this out.

    Thanks to @JakubVanek for pointing this out.

    Small logging refactor and additional options

    

    -> Get rid of Logger::logToSystem and use normal downstream output system for android instead

    

    -> Give the downstream output system more information: enrich the log function of ILogOutput

            with information and add ICombinedLogOutput for easier use.

    

    -> Make Logger::getLevelLabel() static and public so that it can be used by downstream log output.

    

    -> Add g_ and m_ prefixes where required

    -> Get rid of Logger::logToSystem and use normal downstream output system for android instead

    

    -> Give the downstream output system more information: enrich the log function of ILogOutput

            with information and add ICombinedLogOutput for easier use.

    

    -> Make Logger::getLevelLabel() static and public so that it can be used by downstream log output.

    

    -> Add g_ and m_ prefixes where required

    -> Give the downstream output system more information: enrich the log function of ILogOutput

            with information and add ICombinedLogOutput for easier use.

    

    -> Make Logger::getLevelLabel() static and public so that it can be used by downstream log output.

    

    -> Add g_ and m_ prefixes where required

            with information and add ICombinedLogOutput for easier use.

    

    -> Make Logger::getLevelLabel() static and public so that it can be used by downstream log output.

    

    -> Add g_ and m_ prefixes where required

    -> Make Logger::getLevelLabel() static and public so that it can be used by downstream log output.

    

    -> Add g_ and m_ prefixes where required

    -> Add g_ and m_ prefixes where required

    Improve Lua settings menu

    

    * Add key settings to setting table and ignore them later

      This way they are added to the auto-generated minetest.conf.example

    * Add flags type

    * Add input validation for int, float and flags

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Add key settings to setting table and ignore them later

      This way they are added to the auto-generated minetest.conf.example

    * Add flags type

    * Add input validation for int, float and flags

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

      This way they are added to the auto-generated minetest.conf.example

    * Add flags type

    * Add input validation for int, float and flags

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Add flags type

    * Add input validation for int, float and flags

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Add input validation for int, float and flags

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Break in-game graphic settings into multiple sections

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Parse settingtpes.txt in mods and games

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Improve description for a lot of settings

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Fix typos and wording in settingtypes.txt

    * Convert language setting to an enum

    * Convert language setting to an enum

    Fix compilation under MSVC and remove unnecessary conditional function prototype

    

    Thanks to SmallJoker for pointing this out.

    Thanks to SmallJoker for pointing this out.

    Fix on_rightclick() being called directly after placing node

    

    fixes https://github.com/minetest/minetest_game/issues/537

    fixes https://github.com/minetest/minetest_game/issues/537

    Improve rollback database indexing

    

    Index more columns in the action table of the rollback DB to improve the performance of /rollback_check

    Index more columns in the action table of the rollback DB to improve the performance of /rollback_check

    Flush rollback log more often

    

    Flushes the buffer of rollback actions that wait to get saved in two more situations:

    

    1. Flushes in the destructor of the rollback. This makes the server not

    forget the last < 500 rollback entries when it shuts down.

    

    2. Flushes the rollback when /rollback_check is invoked. This is neccessary

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    Flushes the buffer of rollback actions that wait to get saved in two more situations:

    

    1. Flushes in the destructor of the rollback. This makes the server not

    forget the last < 500 rollback entries when it shuts down.

    

    2. Flushes the rollback when /rollback_check is invoked. This is neccessary

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    1. Flushes in the destructor of the rollback. This makes the server not

    forget the last < 500 rollback entries when it shuts down.

    

    2. Flushes the rollback when /rollback_check is invoked. This is neccessary

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    forget the last < 500 rollback entries when it shuts down.

    

    2. Flushes the rollback when /rollback_check is invoked. This is neccessary

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    2. Flushes the rollback when /rollback_check is invoked. This is neccessary

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    as otherwise it leads to confusion if users want to test the rollback functionality

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    by placing a node and then executing the check on it, or if the actions were

    very recent out of other reasons.

    very recent out of other reasons.

    Fix some threading things and add additional thread unittests

    

    - Fix thread name reset on start()

    - Fully reset thread state on kill()

    - Add unittests to check for correct object states under various circumstances

    - Fix thread name reset on start()

    - Fully reset thread state on kill()

    - Add unittests to check for correct object states under various circumstances

    - Fully reset thread state on kill()

    - Add unittests to check for correct object states under various circumstances

    - Add unittests to check for correct object states under various circumstances

    Decoration API: Add flag for placement on liquid surface

    

    Add findLiquidSurface() function to mapgen.cpp

    Update lua_api.txt

    Add findLiquidSurface() function to mapgen.cpp

    Update lua_api.txt

    Update lua_api.txt

    

    set_sky does work with on_joinplayer

    Add more ways to pass data to check_player_privs

    

    The callback can now be invoked with either the player object or name as

    the first parameter, and with either a table or a list of strings, like

    this:

    

        minetest.check_player_privs(player_name, { shout = true, fly = true })

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

    The callback can now be invoked with either the player object or name as

    the first parameter, and with either a table or a list of strings, like

    this:

    

        minetest.check_player_privs(player_name, { shout = true, fly = true })

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

    the first parameter, and with either a table or a list of strings, like

    this:

    

        minetest.check_player_privs(player_name, { shout = true, fly = true })

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

    this:

    

        minetest.check_player_privs(player_name, { shout = true, fly = true })

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

        minetest.check_player_privs(player_name, { shout = true, fly = true })

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

        minetest.check_player_privs(player_name, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

        minetest.check_player_privs(player, { shout = true, fly = true })

        minetest.check_player_privs(player, "shout", "fly")

        minetest.check_player_privs(player, "shout", "fly")

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Currently translated at 72.6% (202 of 278 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    init_log_streams: check if log_filename is empty.

    

    Fixes #3262.

    Fixes #3262.

    ABMs: Make catch-up behaviour optional

    

    Default is true for backwards compatibility

    Update lua_api.txt

    Default is true for backwards compatibility

    Update lua_api.txt

    Update lua_api.txt

    

    set_sky does work with on_joinplayer

    Settings tab: double click opens/closes trees

    Settings tab: don't autoscroll when toggling "Show technical names"

    Remove wstrgettext

    

    Everywhere where wstrgettext was used, its output was converted back

    to utf8. As wstrgettext internally converts the return value

    from utf8 to wstring, it has been a waste. Remove the function, and

    use strgettext instead.

    Everywhere where wstrgettext was used, its output was converted back

    to utf8. As wstrgettext internally converts the return value

    from utf8 to wstring, it has been a waste. Remove the function, and

    use strgettext instead.

    to utf8. As wstrgettext internally converts the return value

    from utf8 to wstring, it has been a waste. Remove the function, and

    use strgettext instead.

    from utf8 to wstring, it has been a waste. Remove the function, and

    use strgettext instead.

    use strgettext instead.

    Display sane output for empty descriptions

    

    According to its man page, the function gettext(3)

    "may return a nonempty string" when msgid is "".

    

    This commit fixes a bug where the comment ""

    for some settings caused gettext to return a

    "nonempty string", in this case header info of the

    po file.

    According to its man page, the function gettext(3)

    "may return a nonempty string" when msgid is "".

    

    This commit fixes a bug where the comment ""

    for some settings caused gettext to return a

    "nonempty string", in this case header info of the

    po file.

    "may return a nonempty string" when msgid is "".

    

    This commit fixes a bug where the comment ""

    for some settings caused gettext to return a

    "nonempty string", in this case header info of the

    po file.

    This commit fixes a bug where the comment ""

    for some settings caused gettext to return a

    "nonempty string", in this case header info of the

    po file.

    for some settings caused gettext to return a

    "nonempty string", in this case header info of the

    po file.

    "nonempty string", in this case header info of the

    po file.

    po file.

    Fix GUITable selection issues with trees

    

    - setOpenedTrees(): this internal function was calling setSelected()

      to update m_selected. Since setSelected() calls autoScroll(),

      this caused the scrollbar to scroll back to the selected row

      in some cases when that shouldn't be done.

    

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

    - setOpenedTrees(): this internal function was calling setSelected()

      to update m_selected. Since setSelected() calls autoScroll(),

      this caused the scrollbar to scroll back to the selected row

      in some cases when that shouldn't be done.

    

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      to update m_selected. Since setSelected() calls autoScroll(),

      this caused the scrollbar to scroll back to the selected row

      in some cases when that shouldn't be done.

    

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      this caused the scrollbar to scroll back to the selected row

      in some cases when that shouldn't be done.

    

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      in some cases when that shouldn't be done.

    

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      For example, clicking the "+" to open a tree caused autoscroll.

    

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      Fix this by making setOpenedTrees() modify m_selected directly.

    

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

    - setDynamicData(): set scrollbar position after calling

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      setSelected(), not before. This avoids setSelected()'s autoscroll

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      messing up the scrollbar position again.

    

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

    - setSelected(): If an invisible row is selected, open all parents

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      of the selected row in order to make the selected row visible.

    

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      This fixes the issue where all the trees are closed again whenever

      you return from the setting edit dialog to the settings tab.

      you return from the setting edit dialog to the settings tab.

    Re-add "file" type for --add-location for xgettext call

    

    Passing line numbers in the comments is bad.

    

    References:

    

    * Commit 94961b3364f76d5861913af321e9be6200d080b3

    * Previous commit

    Passing line numbers in the comments is bad.

    

    References:

    

    * Commit 94961b3364f76d5861913af321e9be6200d080b3

    * Previous commit

    References:

    

    * Commit 94961b3364f76d5861913af321e9be6200d080b3

    * Previous commit

    * Commit 94961b3364f76d5861913af321e9be6200d080b3

    * Previous commit

    * Previous commit

    New settings tab contain all possible settings

    

    Settings are automatically parsed from builtin/settingtypes.txt

    The edit dialog automatically adjust based on the type of setting

    Settings are automatically parsed from builtin/settingtypes.txt

    The edit dialog automatically adjust based on the type of setting

    The edit dialog automatically adjust based on the type of setting

    Fix == to =

    Fix missing include on AIX

    Refactor Thread class to improve readability and portability

    

    - Fix some incompatibilities with obscure platforms (AIX and WinCE)

    - Clean up Thread class interface

    - Add m_ prefix to private member variables

    - Simplify platform-dependent logic, reducing preprocessor

      conditional clauses and improving readibility

    - Add Thread class documentation

    - Fix some incompatibilities with obscure platforms (AIX and WinCE)

    - Clean up Thread class interface

    - Add m_ prefix to private member variables

    - Simplify platform-dependent logic, reducing preprocessor

      conditional clauses and improving readibility

    - Add Thread class documentation

    - Clean up Thread class interface

    - Add m_ prefix to private member variables

    - Simplify platform-dependent logic, reducing preprocessor

      conditional clauses and improving readibility

    - Add Thread class documentation

    - Add m_ prefix to private member variables

    - Simplify platform-dependent logic, reducing preprocessor

      conditional clauses and improving readibility

    - Add Thread class documentation

    - Simplify platform-dependent logic, reducing preprocessor

      conditional clauses and improving readibility

    - Add Thread class documentation

      conditional clauses and improving readibility

    - Add Thread class documentation

    - Add Thread class documentation

    Refactor thread utility interface

    

    - Add "thr_" prefix to thread utility functions

    - Compare threadid_ts in a portable manner, where possible

    - Add "thr_" prefix to thread utility functions

    - Compare threadid_ts in a portable manner, where possible

    - Compare threadid_ts in a portable manner, where possible

    Fix crash regression when invsize formspec gets used

    

    The invsize formspec element is outdated. Even though,

    it is still supported, only a deprecation warning is shown,

    introduced by commit [1]. The lua context passed to the

    log_deprecated method added by commit [1] is NULL for the

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    The invsize formspec element is outdated. Even though,

    it is still supported, only a deprecation warning is shown,

    introduced by commit [1]. The lua context passed to the

    log_deprecated method added by commit [1] is NULL for the

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    it is still supported, only a deprecation warning is shown,

    introduced by commit [1]. The lua context passed to the

    log_deprecated method added by commit [1] is NULL for the

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    introduced by commit [1]. The lua context passed to the

    log_deprecated method added by commit [1] is NULL for the

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    log_deprecated method added by commit [1] is NULL for the

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    invsize deprecation warning, as its run on the client and not

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    the server.

    

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    Commit [1] has removed checks for NULL inside the log_deprecated

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    method, resulting in a crash when a formspec with an invsize

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    element is parsed. This commit puts the check back.

    

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    Fixes #3260.

    

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    Referenced commits:

    

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    [1]: b5acec0a3c5701c53854ff7afdf4008863e6e8df "Add proper lua api deprecated handling"

    

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    [2]: 7b8d372947aae232ddf598155e972bb4dda157a "Use warningstream for deprecated field messages and refactor log_deprecated"

    Fix enforcing of nametag hiding

    

    Commit

    

    d2ca662569427d36642660314668e416bf68f3c8 "Enforce hiding nametag"

    

    didn't fix the issue for "client" instances, where the nametag update

    was received before the object was added to the scene. This resulted

    in the grey shadow on the nametag that commit tried to fix.

    

    Thanks to @neoascetic for pointing out that there still is a shadow.

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    d2ca662569427d36642660314668e416bf68f3c8 "Enforce hiding nametag"

    

    didn't fix the issue for "client" instances, where the nametag update

    was received before the object was added to the scene. This resulted

    in the grey shadow on the nametag that commit tried to fix.

    

    Thanks to @neoascetic for pointing out that there still is a shadow.

    didn't fix the issue for "client" instances, where the nametag update

    was received before the object was added to the scene. This resulted

    in the grey shadow on the nametag that commit tried to fix.

    

    Thanks to @neoascetic for pointing out that there still is a shadow.

    was received before the object was added to the scene. This resulted

    in the grey shadow on the nametag that commit tried to fix.

    

    Thanks to @neoascetic for pointing out that there still is a shadow.

    in the grey shadow on the nametag that commit tried to fix.

    

    Thanks to @neoascetic for pointing out that there still is a shadow.

    Thanks to @neoascetic for pointing out that there still is a shadow.

    Compress textures and fonts

    

    Used PNGOUT, OptiPNG and DeflOpt.

    Removes ~350 KB without any loss in quality.

    Used PNGOUT, OptiPNG and DeflOpt.

    Removes ~350 KB without any loss in quality.

    Removes ~350 KB without any loss in quality.

    Add BufReader and vector-based serialization methods

    Clean up gettext initialization

    Use warningstream for deprecated field messages and refactor log_deprecated

    Remove explicit syslog printing for uncaught exceptions on Android

    

    All log operations are now added to the syslog implicitly.

    Also, pass along mutable string to argument vector for main().

    All log operations are now added to the syslog implicitly.

    Also, pass along mutable string to argument vector for main().

    Also, pass along mutable string to argument vector for main().

    Rename macros with two leading underscores

    

    These names are reserved for the compiler/library implementations.

    These names are reserved for the compiler/library implementations.

    Always use errorstream for DEBUG_EXCEPTION_HANDLER

    Lower log level for benign socket errors

    Use warningstream for log messages with WARNING

    

    Remove DTIME macro and its uses, too

    Remove DTIME macro and its uses, too

    Refactor logging

    

    - Add warning log level

    - Change debug_log_level setting to enumeration string

    - Map Irrlicht log events to MT log events

    - Encapsulate log_* functions and global variables into a class, Logger

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Add warning log level

    - Change debug_log_level setting to enumeration string

    - Map Irrlicht log events to MT log events

    - Encapsulate log_* functions and global variables into a class, Logger

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Change debug_log_level setting to enumeration string

    - Map Irrlicht log events to MT log events

    - Encapsulate log_* functions and global variables into a class, Logger

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Map Irrlicht log events to MT log events

    - Encapsulate log_* functions and global variables into a class, Logger

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Encapsulate log_* functions and global variables into a class, Logger

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Unify dstream with standard logging mechanism

    - Unify core.debug() with standard core.log() script API

    - Unify core.debug() with standard core.log() script API

    Fix how address is logged when a wrong password is supplied

    

    - SRP: print the address only once, not twice

    - Legacy: previously the address was not printed at all

    - Make both messages structurally the same, to facilitate log analyzers

    - SRP: print the address only once, not twice

    - Legacy: previously the address was not printed at all

    - Make both messages structurally the same, to facilitate log analyzers

    - Legacy: previously the address was not printed at all

    - Make both messages structurally the same, to facilitate log analyzers

    - Make both messages structurally the same, to facilitate log analyzers

    Localize digprop_err function

    Mgfractal: Independant offset and slice params for mandelbrot and julia

    

    Player now spawns on julia set due to julia offset

    Add commented-out '#include profiler.h' for timetaker use

    Use v3fs to reduce number of parameters

    Tune tunnel width to match mgv7

    Player now spawns on julia set due to julia offset

    Add commented-out '#include profiler.h' for timetaker use

    Use v3fs to reduce number of parameters

    Tune tunnel width to match mgv7

    Add commented-out '#include profiler.h' for timetaker use

    Use v3fs to reduce number of parameters

    Tune tunnel width to match mgv7

    Use v3fs to reduce number of parameters

    Tune tunnel width to match mgv7

    Tune tunnel width to match mgv7

    Fractal mapgen: Fix mysterious bug

    Clear list rings when loading a new formspec

    

    Fixes a bug where the old list ring remained when a new formspec

    was displayed over the old one. This created the list-ring of the new formspec

    to be partly ignored.

    

    Thanks to @VanessaE to report the bug, and @DonBatman to produce the code that

    exposed it.

    Fixes a bug where the old list ring remained when a new formspec

    was displayed over the old one. This created the list-ring of the new formspec

    to be partly ignored.

    

    Thanks to @VanessaE to report the bug, and @DonBatman to produce the code that

    exposed it.

    was displayed over the old one. This created the list-ring of the new formspec

    to be partly ignored.

    

    Thanks to @VanessaE to report the bug, and @DonBatman to produce the code that

    exposed it.

    to be partly ignored.

    

    Thanks to @VanessaE to report the bug, and @DonBatman to produce the code that

    exposed it.

    Thanks to @VanessaE to report the bug, and @DonBatman to produce the code that

    exposed it.

    exposed it.

    Mapgen: Use mapgen-specific names for constants in headers

    

    Update copyright years in all mapgens

    Add myself to copyright notices in mgv5 and mgv7

    Update copyright years in all mapgens

    Add myself to copyright notices in mgv5 and mgv7

    Add myself to copyright notices in mgv5 and mgv7

    Fractal mapgen: Add seabed and large pseudorandom caves

    Android/Mapgen: Add fractal mapgen file to android makefiles

    Correct SRP documentation

    

    Previous statements were wrong.

    Previous statements were wrong.

    Add viewing range GUI setting

    Mapgen: Add 4D fractal mapgen

    Mgv5: getGroundLevelAtPoint searches a larger range

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 99.6% (277 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 81.6% (227 of 278 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 78.0% (217 of 278 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Currently translated at 3.5% (10 of 278 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 92.8% (258 of 278 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 66.5% (185 of 278 strings)

    

    Maybe it is better to describe allowed symbols instead of writing regex?

    Maybe it is better to describe allowed symbols instead of writing regex?

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Currently translated at 46.4% (129 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.2% (276 of 278 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 100.0% (278 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (275 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (275 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (275 of 278 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 98.9% (275 of 278 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 0.0% (0 of 278 strings)

    Translated using Weblate (Chinese (Taiwan))

    

    Currently translated at 100.0% (918 of 918 strings)

    Currently translated at 100% (0 of 0 strings)

    

    Created new translation.

    Created new translation.

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 99.2% (276 of 278 strings)

    Add new ContentParamType2 "CPT2_DEGROTATE"

    

    This might break some mods, but it is important for all uses of the param2 to

    be documented.

    

    This doesn't need a serialisation version or network protocol version change,

    as old clients will still work on new servers, and it is bearable to have

    new clients getting non rotated plants on old servers.

    This might break some mods, but it is important for all uses of the param2 to

    be documented.

    

    This doesn't need a serialisation version or network protocol version change,

    as old clients will still work on new servers, and it is bearable to have

    new clients getting non rotated plants on old servers.

    be documented.

    

    This doesn't need a serialisation version or network protocol version change,

    as old clients will still work on new servers, and it is bearable to have

    new clients getting non rotated plants on old servers.

    This doesn't need a serialisation version or network protocol version change,

    as old clients will still work on new servers, and it is bearable to have

    new clients getting non rotated plants on old servers.

    as old clients will still work on new servers, and it is bearable to have

    new clients getting non rotated plants on old servers.

    new clients getting non rotated plants on old servers.

    Allow setting chunksize in core.set_mapgen_params

    Hide mapgens from main menu not intended for end users

    Add emerge completion callback mechanism

    

    Major refactor of emerge.cpp and Map::init/finishBlockMake

    Major refactor of emerge.cpp and Map::init/finishBlockMake

    doc: Update node callback documentation

    Remove redundant code in player interact handler

    Define and use limit constants for Irrlicht fixed-width types

    Added minetest.wallmounted_to_dir

    Fix MinGW 32-bit build

    Add get_biome_id(biome_name) callback

    

    It returns the index used in mg->biomemap for a given biome name.

    The biomemap is useless without this unless you re-register all existing biomes,

    which could cause problems for anyone else trying to use biomemap.

    With this, you can quickly create a lookup table of ids and names.

    It returns the index used in mg->biomemap for a given biome name.

    The biomemap is useless without this unless you re-register all existing biomes,

    which could cause problems for anyone else trying to use biomemap.

    With this, you can quickly create a lookup table of ids and names.

    The biomemap is useless without this unless you re-register all existing biomes,

    which could cause problems for anyone else trying to use biomemap.

    With this, you can quickly create a lookup table of ids and names.

    which could cause problems for anyone else trying to use biomemap.

    With this, you can quickly create a lookup table of ids and names.

    With this, you can quickly create a lookup table of ids and names.

    Add environment variable MINETEST_WORLD_PATH

    

    Also add PATH_DELIM for Windows compatibility.

    Also add PATH_DELIM for Windows compatibility.

    Mapnode: Replace rotateAlongYAxis with improved version

    

    Get facedir by using lowest 5 bits of param2 and limiting to 23

    More robust, frees up higher param2 bits for other uses

    Change lookup table and table index to u8

    Get facedir by using lowest 5 bits of param2 and limiting to 23

    More robust, frees up higher param2 bits for other uses

    Change lookup table and table index to u8

    More robust, frees up higher param2 bits for other uses

    Change lookup table and table index to u8

    Change lookup table and table index to u8

    Fix some SRP issues

    

    -> Remove memory allocation bugs

    -> Merge changes from upstream, enabling customizeable memory allocation

    -> Remove memory allocation bugs

    -> Merge changes from upstream, enabling customizeable memory allocation

    -> Merge changes from upstream, enabling customizeable memory allocation

    Some map border related fixes

    

    1. Check for entity addition success in spawn_item implementation

    2. Check for success in item_drop callback, so that the player

    doesn't lose the item if they are outside bounds and try to drop it.

    3. When existing player joins game, check that their position is inside

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    1. Check for entity addition success in spawn_item implementation

    2. Check for success in item_drop callback, so that the player

    doesn't lose the item if they are outside bounds and try to drop it.

    3. When existing player joins game, check that their position is inside

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    2. Check for success in item_drop callback, so that the player

    doesn't lose the item if they are outside bounds and try to drop it.

    3. When existing player joins game, check that their position is inside

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    doesn't lose the item if they are outside bounds and try to drop it.

    3. When existing player joins game, check that their position is inside

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    3. When existing player joins game, check that their position is inside

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    map bounds. If not, set their position to the return value of findSpawnPos().

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    4. Make findSpawnPos() respect the border

    

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    2 fixes a lua crash if a player drops an item outside map bounds.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    3 fixes an assertion crash if a player leaves when being outside map bounds,

    and then rejoins.

    and then rejoins.

    Don't serialize StaticObjectList with > 65535 objects

    

    Because the count is serialized as u16, this would cause overflow.

    

    If minetest later deserialized a mapblock with an incorrect

    static object count, it would be unable to find the NameIdMapping

    (which comes after the StaticObjectList) and abort with an error

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    Because the count is serialized as u16, this would cause overflow.

    

    If minetest later deserialized a mapblock with an incorrect

    static object count, it would be unable to find the NameIdMapping

    (which comes after the StaticObjectList) and abort with an error

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    If minetest later deserialized a mapblock with an incorrect

    static object count, it would be unable to find the NameIdMapping

    (which comes after the StaticObjectList) and abort with an error

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    static object count, it would be unable to find the NameIdMapping

    (which comes after the StaticObjectList) and abort with an error

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    (which comes after the StaticObjectList) and abort with an error

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    such as "Invalid block data in database: unsupported NameIdMapping

    version" (issue #2610).

    version" (issue #2610).

    Decorations: Remove error message 'chunksize not divisable by sidelen'

    

    Sidelen larger than 16 is essential for low density decorations

    With sidelen > 16 chunksize may not be divisable by sidelen if

    chunksize is changed, in this situation setting sidelen = chunksize

    is desirable and should not create error messages.

    Sidelen larger than 16 is essential for low density decorations

    With sidelen > 16 chunksize may not be divisable by sidelen if

    chunksize is changed, in this situation setting sidelen = chunksize

    is desirable and should not create error messages.

    With sidelen > 16 chunksize may not be divisable by sidelen if

    chunksize is changed, in this situation setting sidelen = chunksize

    is desirable and should not create error messages.

    chunksize is changed, in this situation setting sidelen = chunksize

    is desirable and should not create error messages.

    is desirable and should not create error messages.

    Abort at uncatched exceptions

    

    Change a remaining assert(0) call to FATAL_ERROR(msg).

    There was a regression since commit

    

    ced6d20295a8263757d57c02a07ffcb66688a163 "For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives"

    

    where when an "uncatched" exception is thrown inside a "side thread",

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    Change a remaining assert(0) call to FATAL_ERROR(msg).

    There was a regression since commit

    

    ced6d20295a8263757d57c02a07ffcb66688a163 "For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives"

    

    where when an "uncatched" exception is thrown inside a "side thread",

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    There was a regression since commit

    

    ced6d20295a8263757d57c02a07ffcb66688a163 "For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives"

    

    where when an "uncatched" exception is thrown inside a "side thread",

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    ced6d20295a8263757d57c02a07ffcb66688a163 "For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives"

    

    where when an "uncatched" exception is thrown inside a "side thread",

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    where when an "uncatched" exception is thrown inside a "side thread",

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    the program doesn't abort anymore.

    

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    This led to the problem @netinetwalker experienced where the emergethread

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    got an unhandled exception for loading a mapblock while redis was loading,

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    (see #3196) and then jmped outside its loop to work down its queue.

    This resulted in the server not doing any emerges anymore.

    This resulted in the server not doing any emerges anymore.

    Fix redis erroring on non found blocks

    

    Thanks to @netinetwalker for spotting the error, proposing a fix, and testing it.

    

    Error due to @est31's merging changes to PR #3202 to add more error reporting for invalid reply types, commit:

    

    524a7656e3e5cd671b05c13e2ad69cb84bad0423 "redis: throw error if block request failed"

    

    Now we branch out on the valid reply type "not found".

    Thanks to @netinetwalker for spotting the error, proposing a fix, and testing it.

    

    Error due to @est31's merging changes to PR #3202 to add more error reporting for invalid reply types, commit:

    

    524a7656e3e5cd671b05c13e2ad69cb84bad0423 "redis: throw error if block request failed"

    

    Now we branch out on the valid reply type "not found".

    Error due to @est31's merging changes to PR #3202 to add more error reporting for invalid reply types, commit:

    

    524a7656e3e5cd671b05c13e2ad69cb84bad0423 "redis: throw error if block request failed"

    

    Now we branch out on the valid reply type "not found".

    524a7656e3e5cd671b05c13e2ad69cb84bad0423 "redis: throw error if block request failed"

    

    Now we branch out on the valid reply type "not found".

    Now we branch out on the valid reply type "not found".

    FindJson: use PATH_SUFFIXES jsoncpp to find incdir

    

    For example, on Fedora systems jsoncpp headers is installed in `/usr/include/jsoncpp`.

    For example, on Fedora systems jsoncpp headers is installed in `/usr/include/jsoncpp`.

    Fix falling through nodes on world load (fixes #2784)

    

    On world load the collision code can not see node boxes, since the

    nodes have not been loaded. Thus it collided only at the next full

    node. However, standing on a slab on world load leaded to sinking into

    it until the world finished loading. Then one maybe fell further, if

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    On world load the collision code can not see node boxes, since the

    nodes have not been loaded. Thus it collided only at the next full

    node. However, standing on a slab on world load leaded to sinking into

    it until the world finished loading. Then one maybe fell further, if

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    nodes have not been loaded. Thus it collided only at the next full

    node. However, standing on a slab on world load leaded to sinking into

    it until the world finished loading. Then one maybe fell further, if

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    node. However, standing on a slab on world load leaded to sinking into

    it until the world finished loading. Then one maybe fell further, if

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    it until the world finished loading. Then one maybe fell further, if

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    the node below was not walkable.

    

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    Now, with this commit, when no node around the player has been loaded

    it simply does not move the player.

    it simply does not move the player.

    Clarify radii and distance types in documentation

    

    Because not all circles are round:

    * circles using an euclidean metric are what we usually call "round"

    * circles using a maximum metric look like euclidean rectangles with equal adjacent sides (squares)

    * circles using a manhattan metric look like an euclidean right angled rhombus (squares, but 45° rotated to the former one)

    

    [ci skip]

    Because not all circles are round:

    * circles using an euclidean metric are what we usually call "round"

    * circles using a maximum metric look like euclidean rectangles with equal adjacent sides (squares)

    * circles using a manhattan metric look like an euclidean right angled rhombus (squares, but 45° rotated to the former one)

    

    [ci skip]

    * circles using an euclidean metric are what we usually call "round"

    * circles using a maximum metric look like euclidean rectangles with equal adjacent sides (squares)

    * circles using a manhattan metric look like an euclidean right angled rhombus (squares, but 45° rotated to the former one)

    

    [ci skip]

    * circles using a maximum metric look like euclidean rectangles with equal adjacent sides (squares)

    * circles using a manhattan metric look like an euclidean right angled rhombus (squares, but 45° rotated to the former one)

    

    [ci skip]

    * circles using a manhattan metric look like an euclidean right angled rhombus (squares, but 45° rotated to the former one)

    

    [ci skip]

    [ci skip]

    Update .gitignore to ignore symlinks to non-static Minetest directories and sort into an editor section

    

    [ci skip]

    [ci skip]

    redis: throw error if block request failed

    

    Fixes #3196. Before, we didn't throw an error, and the engine thought the

    block isn't occupied. But in fact it might be that redis is still loading,

    and the block does exist in the database. The result was a cheesy map.

    Fixes #3196. Before, we didn't throw an error, and the engine thought the

    block isn't occupied. But in fact it might be that redis is still loading,

    and the block does exist in the database. The result was a cheesy map.

    block isn't occupied. But in fact it might be that redis is still loading,

    and the block does exist in the database. The result was a cheesy map.

    and the block does exist in the database. The result was a cheesy map.

    Add /emergeblocks command and core.emerge_area() Lua API

    Save and remove player by pointer

    

    Why doing things simple ? Use pointer instead of strings to save players and remove them.

    Saving players by name does a lookup to find pointer we already have ! Idem with removePlayer

    Also remove unused removePlayer(peer_id), it's never called

    Why doing things simple ? Use pointer instead of strings to save players and remove them.

    Saving players by name does a lookup to find pointer we already have ! Idem with removePlayer

    Also remove unused removePlayer(peer_id), it's never called

    Saving players by name does a lookup to find pointer we already have ! Idem with removePlayer

    Also remove unused removePlayer(peer_id), it's never called

    Also remove unused removePlayer(peer_id), it's never called

    Mapnode: Add rotateAlongYAxisFull supporting 24 facedirs

    Replace "self program" with "this program" in fstk boilerplates

    

    ... and remove trailing whitespace.

    ... and remove trailing whitespace.

    Fix another typo in doc/world_format.txt

    lua_api.txt: fix typo

    

    Thanks to @kaadmy (NeD) for pointing this out.

    Thanks to @kaadmy (NeD) for pointing this out.

    Various style cleanups + unused code removal

    

    -> Don't pass pointer to whole IGameDef to NodeMetadata constructors

            and deserializers, but only to IItemDefManager, which is needed

    -> Remove the unused content_mapnode_get_new_name() method

    -> Fix style for MapBlock::deSerialize and MapBlock::deSerialize_pre22,

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

    -> Don't pass pointer to whole IGameDef to NodeMetadata constructors

            and deserializers, but only to IItemDefManager, which is needed

    -> Remove the unused content_mapnode_get_new_name() method

    -> Fix style for MapBlock::deSerialize and MapBlock::deSerialize_pre22,

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

            and deserializers, but only to IItemDefManager, which is needed

    -> Remove the unused content_mapnode_get_new_name() method

    -> Fix style for MapBlock::deSerialize and MapBlock::deSerialize_pre22,

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

    -> Remove the unused content_mapnode_get_new_name() method

    -> Fix style for MapBlock::deSerialize and MapBlock::deSerialize_pre22,

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

    -> Fix style for MapBlock::deSerialize and MapBlock::deSerialize_pre22,

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

            improving accuracy of error messages a bit

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

    -> Fix style at other serialisation methods too

    -> Improve accuracy of some comments

    -> Improve accuracy of some comments

    Little optimization on getAdded/Removed activeobjects per player loop.

    

    Use std::queue instead of std::set, we don't need such a heavy container.

    Don't convert position to int to convert it back to float in the next function.

    Use std::queue instead of std::set, we don't need such a heavy container.

    Don't convert position to int to convert it back to float in the next function.

    Don't convert position to int to convert it back to float in the next function.

    Mgv5/6/7: Re-add #include profiler.h as commented-out option

    Blob ore: Fix partial blobs

    Document current node metadata format

    

    Document the node metadata changes of the commit (serialisation version >=23):

    

    704782c95b8a4194a9383da55d93f37fd0f7278f "WIP node metadata, node timers"

    Document the node metadata changes of the commit (serialisation version >=23):

    

    704782c95b8a4194a9383da55d93f37fd0f7278f "WIP node metadata, node timers"

    704782c95b8a4194a9383da55d93f37fd0f7278f "WIP node metadata, node timers"

    Send proper block to old clients for swap_node calls

    

    The legacy code added in commit

    

    d879a539cd19ddd1ee34afec2512fb2238de2822 - "Add minetest.swap_node"

    

    for sending the whole mapblock to older clients on the case of a node

    modification with swap_node, had the problem that the block chosen to be

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    The legacy code added in commit

    

    d879a539cd19ddd1ee34afec2512fb2238de2822 - "Add minetest.swap_node"

    

    for sending the whole mapblock to older clients on the case of a node

    modification with swap_node, had the problem that the block chosen to be

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    d879a539cd19ddd1ee34afec2512fb2238de2822 - "Add minetest.swap_node"

    

    for sending the whole mapblock to older clients on the case of a node

    modification with swap_node, had the problem that the block chosen to be

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    for sending the whole mapblock to older clients on the case of a node

    modification with swap_node, had the problem that the block chosen to be

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    modification with swap_node, had the problem that the block chosen to be

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    sent to the client was referenced with node coordinates and not with

    block coordinates, resulting in getting the wrong block sent to the client.

    block coordinates, resulting in getting the wrong block sent to the client.

    Ore: Add puff ore type

    Fix object position border checking

    

    Borders have to be converted into BS format in order to be accurately comparable to

    object positions.

    Borders have to be converted into BS format in order to be accurately comparable to

    object positions.

    object positions.

    Disallow placing entities outside safe boundaries

    

    Entity positions are serialized as F1000. Disallow placing

    entities outside safe borders with the minetest.add_entity

    call.

    

    Note that this patch only enforces those boundaries for

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    Entity positions are serialized as F1000. Disallow placing

    entities outside safe borders with the minetest.add_entity

    call.

    

    Note that this patch only enforces those boundaries for

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    entities outside safe borders with the minetest.add_entity

    call.

    

    Note that this patch only enforces those boundaries for

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    call.

    

    Note that this patch only enforces those boundaries for

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    Note that this patch only enforces those boundaries for

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    placing entities, moving entities that move outside boundaries

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    aren't affected.

    

    Thanks to @nanepiwo for pointing this out.

    Thanks to @nanepiwo for pointing this out.

    Firelike drawtype: Improve code

    

    Remove unusable fine rotation by param2

    Remove unused and redundant code

    Fix code style issues

    Remove unusable fine rotation by param2

    Remove unused and redundant code

    Fix code style issues

    Remove unused and redundant code

    Fix code style issues

    Fix code style issues

    Minor tweaks handle_settings_buttons

    Fix "make install" and add underscore to doc file name

    

    Fix regression since commit:

    

    915807f8db1f3721ad9ffc00a4863ad940010c45 "Rename doc/mapformat.txt and update doc to match SRP changes"

    

    And add an underscore to doc file name to make it more readable.

    Fix regression since commit:

    

    915807f8db1f3721ad9ffc00a4863ad940010c45 "Rename doc/mapformat.txt and update doc to match SRP changes"

    

    And add an underscore to doc file name to make it more readable.

    915807f8db1f3721ad9ffc00a4863ad940010c45 "Rename doc/mapformat.txt and update doc to match SRP changes"

    

    And add an underscore to doc file name to make it more readable.

    And add an underscore to doc file name to make it more readable.

    Serialisation: documentation fixes, clarifying renames and whitespace fixes

    

    1. Do two renames:

            * SER_FMT_CLIENT_VER_LOWEST -> SER_FMT_VER_LOWEST_WRITE

            * SER_FMT_VER_LOWEST -> SER_FMT_VER_LOWEST_READ

    Now the two define values are consistently named with the _WRITE defines

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    1. Do two renames:

            * SER_FMT_CLIENT_VER_LOWEST -> SER_FMT_VER_LOWEST_WRITE

            * SER_FMT_VER_LOWEST -> SER_FMT_VER_LOWEST_READ

    Now the two define values are consistently named with the _WRITE defines

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

            * SER_FMT_CLIENT_VER_LOWEST -> SER_FMT_VER_LOWEST_WRITE

            * SER_FMT_VER_LOWEST -> SER_FMT_VER_LOWEST_READ

    Now the two define values are consistently named with the _WRITE defines

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

            * SER_FMT_VER_LOWEST -> SER_FMT_VER_LOWEST_READ

    Now the two define values are consistently named with the _WRITE defines

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    Now the two define values are consistently named with the _WRITE defines

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    SER_FMT_VER_{HIGHEST,LOWEST}_WRITE, and to better point out what the two

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    serialisation versions actually are for.

    

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    2. wrap some lines in doc/worldformat.txt, and point out that the node

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    timers are serialized at a later point, as this can cause confusion about

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    what now happens (if one doesn't strictly read the if block's conditions).

    

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    3. some whitespace fixes in NodeTimerList::serialize, and one new comment.

    Rename doc/mapformat.txt and update doc to match SRP changes

    

    The documentation file contains not just information about the

    map itself, but also about further files inside the world's

    directory.

    

    Documentation didn't reflect recent SRP addition, now it does.

    The documentation file contains not just information about the

    map itself, but also about further files inside the world's

    directory.

    

    Documentation didn't reflect recent SRP addition, now it does.

    map itself, but also about further files inside the world's

    directory.

    

    Documentation didn't reflect recent SRP addition, now it does.

    directory.

    

    Documentation didn't reflect recent SRP addition, now it does.

    Documentation didn't reflect recent SRP addition, now it does.

    Ore: Add ore sheet column height range selection

    

    Modders are now able to select the range of ore column height,

    and the midpoint at which they 'grow' starting from.

    This commit adds three new parameters for the 'sheet' ore type:

    column_height_min, column_height_max, and column_midpoint_factor.

    clust_size is now deprecated for this ore type.

    Modders are now able to select the range of ore column height,

    and the midpoint at which they 'grow' starting from.

    This commit adds three new parameters for the 'sheet' ore type:

    column_height_min, column_height_max, and column_midpoint_factor.

    clust_size is now deprecated for this ore type.

    and the midpoint at which they 'grow' starting from.

    This commit adds three new parameters for the 'sheet' ore type:

    column_height_min, column_height_max, and column_midpoint_factor.

    clust_size is now deprecated for this ore type.

    This commit adds three new parameters for the 'sheet' ore type:

    column_height_min, column_height_max, and column_midpoint_factor.

    clust_size is now deprecated for this ore type.

    column_height_min, column_height_max, and column_midpoint_factor.

    clust_size is now deprecated for this ore type.

    clust_size is now deprecated for this ore type.

    Run updatepo.sh

    After this, it should hopefully not record line numbers anymore,

    so the diffs of updatepo.sh runs are smaller. Well, this is theory,

    lets see how it will turn out to be in practice.

    so the diffs of updatepo.sh runs are smaller. Well, this is theory,

    lets see how it will turn out to be in practice.

    lets see how it will turn out to be in practice.

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 91.1% (246 of 270 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 98.1% (265 of 270 strings)

    

    Penerjemahan

    Penerjemahan

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 97.0% (262 of 270 strings)

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 97.7% (264 of 270 strings)

    

    This is a combination of 9 consecutive commits by the same author.

    Their messages in chronological order are:

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 79.2% (214 of 270 strings)

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    This is a combination of 9 consecutive commits by the same author.

    Their messages in chronological order are:

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 79.2% (214 of 270 strings)

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Their messages in chronological order are:

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 79.2% (214 of 270 strings)

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 79.2% (214 of 270 strings)

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Penerjemahan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Penerjemahan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Penerjemahan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 97.0% (262 of 270 strings)

    Penerjemahan

    Translated using Weblate (Indonesian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 97.7% (264 of 270 strings)

    

    This is a combination of 9 consecutive commits by the same author.

    Their messages in chronological order are:

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 79.2% (214 of 270 strings)

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 80.0% (216 of 270 strings)

    

    Ini merupakan istilah dan tidak perlu diterjemahkan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 89.6% (242 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 94.8% (256 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 95.9% (259 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Istilah tidak diterjemahkan

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 73.7% (199 of 270 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Currently translated at 90.7% (245 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 44.8% (121 of 270 strings)

    Translated using Weblate (Esperanto)

    

    Currently translated at 97.2% (1357 of 1396 strings)

    Currently translated at 100% (0 of 0 strings)

    

    Created new translation.

    Created new translation.

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Currently translated at 95.5% (258 of 270 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 82.9% (224 of 270 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 80.7% (218 of 270 strings)

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 38.5% (104 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Lojban)

    

    Currently translated at 13.9% (189 of 1353 strings)

    Currently translated at 100% (0 of 0 strings)

    

    Created new translation.

    Created new translation.

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    networkprotocol.h: remove "u16 command" from doc

    

    Its obvious that "u16 command" is inside every packet, therefore this

    commit removes all mentions of the command, if non-array like notation

    is used. We already didn't add "u16 command" to new packets or removed

    it at packet changes, so now we remove it from existing packets.

    Its obvious that "u16 command" is inside every packet, therefore this

    commit removes all mentions of the command, if non-array like notation

    is used. We already didn't add "u16 command" to new packets or removed

    it at packet changes, so now we remove it from existing packets.

    commit removes all mentions of the command, if non-array like notation

    is used. We already didn't add "u16 command" to new packets or removed

    it at packet changes, so now we remove it from existing packets.

    is used. We already didn't add "u16 command" to new packets or removed

    it at packet changes, so now we remove it from existing packets.

    it at packet changes, so now we remove it from existing packets.

    Improve locale directory detection

    

    Use in-place locale directory if that exists, and

    static one (RUN_IN_PLACE or CUSTOM_LOCALEDIR) doesn't exist.

    Report to errorstream if neither static nor in-place locale

    dirs exist, and report successfully found paths to infostreem.

    

    Fixes two bugs:

    

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    Use in-place locale directory if that exists, and

    static one (RUN_IN_PLACE or CUSTOM_LOCALEDIR) doesn't exist.

    Report to errorstream if neither static nor in-place locale

    dirs exist, and report successfully found paths to infostreem.

    

    Fixes two bugs:

    

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    static one (RUN_IN_PLACE or CUSTOM_LOCALEDIR) doesn't exist.

    Report to errorstream if neither static nor in-place locale

    dirs exist, and report successfully found paths to infostreem.

    

    Fixes two bugs:

    

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    Report to errorstream if neither static nor in-place locale

    dirs exist, and report successfully found paths to infostreem.

    

    Fixes two bugs:

    

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    dirs exist, and report successfully found paths to infostreem.

    

    Fixes two bugs:

    

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    Fixes two bugs:

    

     * The camera offset was not applied to an object while detaching, briefly placing the irrlicht matrixnode in world space.

     *  When attaching, the matrixnode's absolute position was evaluated without evaluating the parent first, resulting in zeroed positions.

    -> Regression of commit [1] where if we use RUN_IN_PLACE=false,

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

            but don't make install, locales aren't found. One might

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

            think this is no regression, as its no bug, but all other

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

            paths (mainmenu, etc.) are detected properly.

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    -> Regression of commit [1] where locales don't work on windows.

    

    References:

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    References:

    

    * Commit 94961b3364f76d5861913af321e9be6200d080b3

    * Previous commit

    [1]: Commit 645e2086734e3d2d1ec95f50faa39f0f24304761 "Use CUSTOM_LOCALEDIR if specified" by @ShadowNinja

    Update leveldb git url

    

    Google code was shut down, project moved to github.

    Google code was shut down, project moved to github.

    Change m_client_event_queue's type to std::queue

    

    As indicated in its name, m_client_event_queue should be a queue.

    Change std::list to std::queue to improve the queue's performance.

    As indicated in its name, m_client_event_queue should be a queue.

    Change std::list to std::queue to improve the queue's performance.

    Change std::list to std::queue to improve the queue's performance.

    Add more information about how get_node_light works.

    Shaders: use triple-frequency waving for leaves and plants

    Mgv5/mgv7 biomes: Reduce heat and humidity noise spreads to former value of 750

    Use CUSTOM_LOCALEDIR if specified

    Fix occasionally failing travis builds

    

    We require sudo right now, tell this travis, so that they don't try to

    run it on their container based infrastructure.

    We require sudo right now, tell this travis, so that they don't try to

    run it on their container based infrastructure.

    run it on their container based infrastructure.

    Fix building on OSX, broken since "Clean up threading"

    

    Commit

    

    e4bff8be94c0db4f94e63ad448d0eeb869ccdbbd - Clean up threading

    

    by @ShadowNinja has broken the OSX build.

    

    Including things inside a namespace isn't good.

    

    Also fixes #3124.

    Commit

    

    c3b279750ece0b5144bf8e973d55108347462223 "Move object nametags to camera"

    

    has added a regression to still display

    a shadow if their alpha got set to 0.

    e4bff8be94c0db4f94e63ad448d0eeb869ccdbbd - Clean up threading

    

    by @ShadowNinja has broken the OSX build.

    

    Including things inside a namespace isn't good.

    

    Also fixes #3124.

    by @ShadowNinja has broken the OSX build.

    

    Including things inside a namespace isn't good.

    

    Also fixes #3124.

    Including things inside a namespace isn't good.

    

    Also fixes #3124.

    Also fixes #3124.

    Change my email

    Rename minetest-icon.svg to minetest.svg - Fixes #1564

    

    -Complies with the Linux standard freedesktop icon naming specs: http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html#guidelines

    -Ensures compatibility with icon themes

    -Edit minetest.desktop, CMakeLists.txt and README.md to reflect this change

    -Complies with the Linux standard freedesktop icon naming specs: http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html#guidelines

    -Ensures compatibility with icon themes

    -Edit minetest.desktop, CMakeLists.txt and README.md to reflect this change

    -Ensures compatibility with icon themes

    -Edit minetest.desktop, CMakeLists.txt and README.md to reflect this change

    -Edit minetest.desktop, CMakeLists.txt and README.md to reflect this change

    Areastore: fix "attempt to index a number value"

    

    Before, calling get_areas_in_area for an areastore with both

    include_borders and include_data would result in a lua error,

    if there was at least one area as result:

    attempt to index a number value in function 'get_areas_in_area'

    Before, calling get_areas_in_area for an areastore with both

    include_borders and include_data would result in a lua error,

    if there was at least one area as result:

    attempt to index a number value in function 'get_areas_in_area'

    include_borders and include_data would result in a lua error,

    if there was at least one area as result:

    attempt to index a number value in function 'get_areas_in_area'

    if there was at least one area as result:

    attempt to index a number value in function 'get_areas_in_area'

    attempt to index a number value in function 'get_areas_in_area'

    Small fixes of minetest.has_feature

    Add two missing directories to doxygen

    Don't add line number to comment when running updatepo.sh

    

    Otherwise, this updates all .po files for all line numbers that changed

    since the last time updatepo.sh was run. We still add the filename, but

    this information shouldn't change too often.

    

    xgettext beginning with 0.18.4 supports this feature.

    Otherwise, this updates all .po files for all line numbers that changed

    since the last time updatepo.sh was run. We still add the filename, but

    this information shouldn't change too often.

    

    xgettext beginning with 0.18.4 supports this feature.

    since the last time updatepo.sh was run. We still add the filename, but

    this information shouldn't change too often.

    

    xgettext beginning with 0.18.4 supports this feature.

    this information shouldn't change too often.

    

    xgettext beginning with 0.18.4 supports this feature.

    xgettext beginning with 0.18.4 supports this feature.

    Warn when building without cURL

    Enable server build when no builds are enabled

    Make example config more readable

    Minor tweaks __builtin:falling_node

    Hide minimap if it has been disabled by server

    gettext.cpp: Fix syntax error when using MSVC

    

    Also remove trailing whitespaces from the file

    Also remove trailing whitespaces from the file

    Credits tab: fix accidental merger of two contributors

    

    Fixes #3125

    Fixes #3125

    Make ClientInterface::statenames consistent with the state enum again

    

    Fixes minetest.get_player_information segfault due

    to out of bounds access problems, when compiled as debug build.

    Fixes minetest.get_player_information segfault due

    to out of bounds access problems, when compiled as debug build.

    to out of bounds access problems, when compiled as debug build.

    l_mainmenu.h: remove unused l_get_dirlist function

    

    The commit

    8f9af57314f71aae1cc77e13f9996e13015d776d "Add core.get_dir_list" by @ShadowNinja

    has removed the implementation of the l_get_dirlist function and all its usages

    from the l_mainmenu.cpp file, but hasn't removed it from the header file.

    

    The reason why this hasn't been detected earlier is that C++ has this interesting

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    The commit

    

    a78dd7f2b6b0e1fefdbaa1ae21b722dd4459e4f4 "Fix spelling of noise_threshold"

    

    has changed it to be read as int, but it can have non-integral values too.

    

    Thanks to @kwolekr for pointing this out.

    8f9af57314f71aae1cc77e13f9996e13015d776d "Add core.get_dir_list" by @ShadowNinja

    has removed the implementation of the l_get_dirlist function and all its usages

    from the l_mainmenu.cpp file, but hasn't removed it from the header file.

    

    The reason why this hasn't been detected earlier is that C++ has this interesting

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    has removed the implementation of the l_get_dirlist function and all its usages

    from the l_mainmenu.cpp file, but hasn't removed it from the header file.

    

    The reason why this hasn't been detected earlier is that C++ has this interesting

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    from the l_mainmenu.cpp file, but hasn't removed it from the header file.

    

    The reason why this hasn't been detected earlier is that C++ has this interesting

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    The reason why this hasn't been detected earlier is that C++ has this interesting

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    feature to still make it possible to create instances of classes whose never used

    private methods are declared but not defined.

    private methods are declared but not defined.

    Ores: change ore chance in clusters to better respect clust_num_ores for dense clusters

    Dungeongen: Remove floating frames

    

    Preserves the rare unbroken protruding dungeons

    Fix random range for first room roomplace

    Fix checked volume for first room 'fits' bool

    and check for 'untouchable' flag instead of 'inside'

    Remove 'enable floating dungeons' setting

    Preserves the rare unbroken protruding dungeons

    Fix random range for first room roomplace

    Fix checked volume for first room 'fits' bool

    and check for 'untouchable' flag instead of 'inside'

    Remove 'enable floating dungeons' setting

    Fix random range for first room roomplace

    Fix checked volume for first room 'fits' bool

    and check for 'untouchable' flag instead of 'inside'

    Remove 'enable floating dungeons' setting

    Fix checked volume for first room 'fits' bool

    and check for 'untouchable' flag instead of 'inside'

    Remove 'enable floating dungeons' setting

    and check for 'untouchable' flag instead of 'inside'

    Remove 'enable floating dungeons' setting

    Remove 'enable floating dungeons' setting

    Push error handler afresh each time lua_pcall is used

    

    Fixes "double fault" / "error in error handling" messages

    (issue #1423) and instead shows a complete backtrace.

    Fixes "double fault" / "error in error handling" messages

    (issue #1423) and instead shows a complete backtrace.

    (issue #1423) and instead shows a complete backtrace.

    Use numeric indices and raw table access with LUA_REGISTRYINDEX

    Change i++ to ++i

    Add fgettext_ne as keyword to updatepo.sh

    Use gettext to "None" of texture pack list

    Add setting for mods to copy to Android app

    Fix comment positioning in minetest.conf.example

    Fix Android build of threading sources

    Clean up threading

    

      * Rename everything.

        * Strip J prefix.

        * Change UpperCamelCase functions to lowerCamelCase.

      * Remove global (!) semaphore count mutex on OSX.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Rename everything.

        * Strip J prefix.

        * Change UpperCamelCase functions to lowerCamelCase.

      * Remove global (!) semaphore count mutex on OSX.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

        * Strip J prefix.

        * Change UpperCamelCase functions to lowerCamelCase.

      * Remove global (!) semaphore count mutex on OSX.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

        * Change UpperCamelCase functions to lowerCamelCase.

      * Remove global (!) semaphore count mutex on OSX.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Remove global (!) semaphore count mutex on OSX.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Remove semaphore count getter (unused, unsafe, depended on internal

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

        API functions on Windows, and used a hack on OSX).

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Add `Atomic<type>`.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Make `Thread` handle thread names.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Add support for C++11 multi-threading.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Combine pthread and win32 sources.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Remove `ThreadStarted` (unused, unneeded).

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Move some includes from the headers to the sources.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Move all of `Event` into its header (allows inlining with no new includes).

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Make `Event` use `Semaphore` (except on Windows).

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Move some porting functions into `Thread`.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Integrate logging with `Thread`.

      * Add threading test.

      * Add threading test.

    Fix wrong android versionName

    

    Before, android versionName was set to "...13", which made the f-droid build fail.

    Before, android versionName was set to "...13", which made the f-droid build fail.

    Continue with 0.4.13-dev

    Bump version to 0.4.13

    tileable flags are needed also without shaders because of filters

    Remove use of engine sent texture tiling flags - theyre no longer needed

    Remove some emails from credits tab

    Update credits tab

    Fix indianred and indigo of color-string

    Add Japanese translation of desktop file

    Client: disable mmdb modstore

    

    The service isn't online, and on the long term, mmdb will likekly be

    replaced with other services from the modding community.

    The service isn't online, and on the long term, mmdb will likekly be

    replaced with other services from the modding community.

    replaced with other services from the modding community.

    Android: bypass broken wide_to_utf8 with wide_to_narrow (again)

    

    This bypass had to be re-enabled as some users reported issues,

    even after the iconv build fix.

    

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason, and some devices (unrelated from build

    configuration).

    This bypass had to be re-enabled as some users reported issues,

    even after the iconv build fix.

    

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason, and some devices (unrelated from build

    configuration).

    even after the iconv build fix.

    

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason, and some devices (unrelated from build

    configuration).

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason, and some devices (unrelated from build

    configuration).

    on android, for some reason, and some devices (unrelated from build

    configuration).

    configuration).

    Fix inventory replace bug

    SAPI: Disable unlockable time profiling

    SEnv: Remove static_exists from ActiveObjects in deleted blocks

    Remove unused functions.

    Defaultsettings: Increase client_mapblock_limit to 5000

    Rollback: Fail on bad precondition instead of causing assertion error

    Fix sneaking (fixes #665 and #3045)

    Remove unused function from connection.{cpp,h}

    Don't do formspec escaping twice for loading description

    minimap: Add ability to disable from server

    game.cpp: Update cached settings

    Fix segfault caused by a8e238ed06ee8285ed4459e9deda3117419837f6

    Add count based unload limit for mapblocks

    SAPI: Track last executed mod and include in error messages

    Fix Lua PcgRandom

    

    Before, this lua code led to a crash:

    

    local pcg = PcgRandom(42)

    local value = pcg:next()

    

    This was because if you called s32 PcgRandom::range(min, max) with the

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    Before, this lua code led to a crash:

    

    local pcg = PcgRandom(42)

    local value = pcg:next()

    

    This was because if you called s32 PcgRandom::range(min, max) with the

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    local pcg = PcgRandom(42)

    local value = pcg:next()

    

    This was because if you called s32 PcgRandom::range(min, max) with the

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    local value = pcg:next()

    

    This was because if you called s32 PcgRandom::range(min, max) with the

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    This was because if you called s32 PcgRandom::range(min, max) with the

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    minimum and maximum possible values for s32 integers (which the lua

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    binding code did), u32 PcgRandom::range(bound) got called with 0 as the

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    bound. The bound however is one above the maximum value, so 0 is a "special"

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    value to pass to this function. This commit fixes the lua crash by

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    assigning the RNG's full range to the bound 0, which is also fits to the

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    "maximum is bound - 1" principle, as (u32)-1 is the maximum value in the

    u32 range.

    u32 range.

    Treegen: Rename pine tree mapgen alias

    Fix intlGUIEditBox leak and uninitialized value in Mapper (reported by valgrind)

    Make NetworkPacket respect serialized string size limits

    Display Lua memory usage at the time of Out-of-Memory error

    

    Also misc. minor cleanups

    Also misc. minor cleanups

    Fix segfaults caused by the Environment not being initialized yet

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Update Spanish translation.

    Remove unused file

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Currently translated at 91.1% (246 of 270 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (270 of 270 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.6% (269 of 270 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.6% (269 of 270 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 96.2% (260 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 96.6% (261 of 270 strings)

    

    Mencari persamaan makna

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.0% (262 of 270 strings)

    

    Penerjemahan

    

    Translated using Weblate (Indonesian)

    

    Currently translated at 97.7% (264 of 270 strings)

    

    Istilah tidak diterjemahkan

    Fix camera updates being toggled by N key in release mode (#2762)

    Fix detection of sneaking node

    This fixes bug 1551

    This fixes bug 1551

    Fix BufferedPacket race condition (fixes #2983)

    

    This was caused by the use the non-threadsafe SharedBuffer in a

    threaded context.

    This was caused by the use the non-threadsafe SharedBuffer in a

    threaded context.

    threaded context.

    Fix critical vulnerabilities and bugs with NetworkPacket

    Initialize random for verification key generation too

    Improve Script CPP API diagnostics

    connection: Make assertions non-fatal for received data

    Fix tiling issues for PLANTLIKE and FIRELIKE with FSAA

    Cavegen V6: Make all caves consistent with 0.4.12 stable

    

    When tunnels entirely above ground were avoided, the

    missing pseudorandom calls changed the allowed caves.

    Now, above ground tunnels are not placed while

    still running all previous pseudorandom calls.

    When tunnels entirely above ground were avoided, the

    missing pseudorandom calls changed the allowed caves.

    Now, above ground tunnels are not placed while

    still running all previous pseudorandom calls.

    missing pseudorandom calls changed the allowed caves.

    Now, above ground tunnels are not placed while

    still running all previous pseudorandom calls.

    Now, above ground tunnels are not placed while

    still running all previous pseudorandom calls.

    still running all previous pseudorandom calls.

    Biome API: Make fallback biome stone and water, disable filler

    src/util/numeric.{cpp,h}: Fix FacePositionCache data race

    Fix "bouncy" blocks

    

    Before players "bounced" too high. Now, while still allowing to bounce, higher speed bounces are throttled.

    Before players "bounced" too high. Now, while still allowing to bounce, higher speed bounces are throttled.

    src/client/tile.cpp: Fix reference counting

    Android: fix sound issue, and gitignore

    

    Previously, sound failed due to errors with hardfp abi build

    instructions. As the problem couldn't be found, the softfp

    compatible abi was chosen instead.

    

    This move will cause a small performance overhead, but due to the

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    Previously, sound failed due to errors with hardfp abi build

    instructions. As the problem couldn't be found, the softfp

    compatible abi was chosen instead.

    

    This move will cause a small performance overhead, but due to the

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    instructions. As the problem couldn't be found, the softfp

    compatible abi was chosen instead.

    

    This move will cause a small performance overhead, but due to the

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    compatible abi was chosen instead.

    

    This move will cause a small performance overhead, but due to the

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    This move will cause a small performance overhead, but due to the

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    abi being armeabi-v7a, the internal calculations will still be done

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    using the FPU.

    

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    We also fix some issues with ABI information passing. However, the

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    fixes aren't sufficient to get sound working.

    

    The patch also fixes an issue with the gitignore file.

    The patch also fixes an issue with the gitignore file.

    Actually document what minetest.is_protected should do

    Add map limit config option

    Prepend "Lua: " before lua exceptions

    src/server.cpp

    src/emerge.cpp

    src/server.cpp

    src/emerge.cpp

    src/emerge.cpp

    src/wieldmesh.cpp: Fix mesh extrusion memory leak

    src/client.cpp: Fix mapper memory leak

    Improve accuracy and safety of float serialization

    

    Multiplying by a factor of 1/1000.f (rather than dividing by 1000.f) directly

    introduces an error of 1 ULP.  With this patch, an exact comparison of a

    floating point literal with the deserialized F1000 form representing it is now

    guaranteed to be successful.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    Multiplying by a factor of 1/1000.f (rather than dividing by 1000.f) directly

    introduces an error of 1 ULP.  With this patch, an exact comparison of a

    floating point literal with the deserialized F1000 form representing it is now

    guaranteed to be successful.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    introduces an error of 1 ULP.  With this patch, an exact comparison of a

    floating point literal with the deserialized F1000 form representing it is now

    guaranteed to be successful.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    floating point literal with the deserialized F1000 form representing it is now

    guaranteed to be successful.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    guaranteed to be successful.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    In addition, the maxmium and minimum safely representible floating point

    numbers are now well-defined as constants.

    numbers are now well-defined as constants.

    Clean up util/serialization.{cpp,h} and add unit tests

    src/environment.cpp: Fix NULL pointer dereference

    src/network/connection.h: Fix race condition

    Android: Add githash header to spare rebuilds after new commits

    

    Before, android_version.h got changed at every new commit. Now, we

    only change it with new minetest releases. Analogous to how cmake

    does it,  we add an android_version_githash.h file that communicates

    the git hash to C++ code.

    

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    Before, android_version.h got changed at every new commit. Now, we

    only change it with new minetest releases. Analogous to how cmake

    does it,  we add an android_version_githash.h file that communicates

    the git hash to C++ code.

    

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    only change it with new minetest releases. Analogous to how cmake

    does it,  we add an android_version_githash.h file that communicates

    the git hash to C++ code.

    

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    does it,  we add an android_version_githash.h file that communicates

    the git hash to C++ code.

    

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    the git hash to C++ code.

    

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    Also, unify VERS_MAJOR, VERS_MINOR and VERS_PATCH variable

    calculation inside the whole makefile.

    calculation inside the whole makefile.

    tests: Log exceptions thrown inside of unit tests

    Dungeon generation: Fix code style issues in dungeongen.cpp

    Android: speed up rebuild, and prevent race condition fail

    

    Speeding up rebuild:

    

    Before, we've written the android_version.h file at every rebuild.

    As it thought the file's content has changed, make has rebuilt files

    in the source tree that depended on that header file during rebuild,

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Speeding up rebuild:

    

    Before, we've written the android_version.h file at every rebuild.

    As it thought the file's content has changed, make has rebuilt files

    in the source tree that depended on that header file during rebuild,

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Before, we've written the android_version.h file at every rebuild.

    As it thought the file's content has changed, make has rebuilt files

    in the source tree that depended on that header file during rebuild,

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    As it thought the file's content has changed, make has rebuilt files

    in the source tree that depended on that header file during rebuild,

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    in the source tree that depended on that header file during rebuild,

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    causing lots of files being rebuilt without there being a reason.

    

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    The reasoning of make can be observed by passing -d and V=1 params

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    to the ndk-build command. You then got logging entries like:

    

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Prerequisite `jni/src/android_version.h' is newer than target `obj/local/armeabi-v7a-hard/objs-debug/minetest/jni/src/areastore.o'.

    

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Preventing race condition build fail:

    

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Before, there was a race condition, where, if the prep_srcdir target

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    was executed in parallel with the $(ROOT)/jni/src/android_version.h

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    one, it could happen that the jni/src directory was nonexistent, and

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    we were trying to write into a file inside. This resulted in a build

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    failue:

    

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    /bin/sh: 1: cannot create [...]/jni/src/android_version.h: Directory nonexistent

    

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Additionally, we now don't remove the link to src/ needlessly anymore.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    Keeping this wouldn't have affected the rebuild, but this way its

    more proper.

    more proper.

    Fix 0.4.11 githash for android

    

    Also make only one >-redirection, sparing repetition.

    Also, use cut instead of awk, which is shorter and should be a bit faster.

    Also make only one >-redirection, sparing repetition.

    Also, use cut instead of awk, which is shorter and should be a bit faster.

    Also, use cut instead of awk, which is shorter and should be a bit faster.

    Small SendableMediaAnnouncement cleanup

    

    -> Remove the SendableMediaAnnouncement struct

    -> Forge the packet directly in the m_media loop, spare one loop and the construction of a vector

    -> Use preincrement to spare iterator copies

    -> Remove the SendableMediaAnnouncement struct

    -> Forge the packet directly in the m_media loop, spare one loop and the construction of a vector

    -> Use preincrement to spare iterator copies

    -> Forge the packet directly in the m_media loop, spare one loop and the construction of a vector

    -> Use preincrement to spare iterator copies

    -> Use preincrement to spare iterator copies

    Android: fix horrible libiconv build

    

    Before, our libiconv build was a joke. We first called configure for our own build host system,

    then called make, before we executed a Android.mk script we provided as patch. The first "native make"

    always failed, and the LIBICONV_LIB file setting in our Makefile didn't match the built one,

    resulting in an always-rebuild of iconv.

    

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    Before, our libiconv build was a joke. We first called configure for our own build host system,

    then called make, before we executed a Android.mk script we provided as patch. The first "native make"

    always failed, and the LIBICONV_LIB file setting in our Makefile didn't match the built one,

    resulting in an always-rebuild of iconv.

    

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    then called make, before we executed a Android.mk script we provided as patch. The first "native make"

    always failed, and the LIBICONV_LIB file setting in our Makefile didn't match the built one,

    resulting in an always-rebuild of iconv.

    

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    always failed, and the LIBICONV_LIB file setting in our Makefile didn't match the built one,

    resulting in an always-rebuild of iconv.

    

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    resulting in an always-rebuild of iconv.

    

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    This commit cleans up this total mess, removes the double-build, and the Android.mk, and properly calls

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    ./configure with the according target platform, and uses a built toolchain.

    

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    As we have to deal with the android bug "NDK: Support for prebuild libs with full sonames"

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    https://code.google.com/p/android/issues/detail?id=55868

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    as the 2013 patch

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    https://lists.gnu.org/archive/html/libtool-patches/2013-06/msg00002.html

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    by Google's David Turner wasn't inside the 2011 libtool, we pass -avoid-version to

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    libtool.

    

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    Thanks to the proper build, wide_to_utf8 works for android now, removing us of the need to disable it.

    Android: Fix minor makefile bugs

    

    Fix commenting happening thanks to missing quotes and dereference variable the right way,

    to get rid of a compile error.

    Fix commenting happening thanks to missing quotes and dereference variable the right way,

    to get rid of a compile error.

    to get rid of a compile error.

    Precalculate mapblock relative size. This permit to remove many s16 calculs on runtime

    Fixed minimap memory leak

    Extend CMake variable descriptions

    Fix srp.cpp:815 leak

    

    Thanks @Zeno-

    Thanks @Zeno-

    Add AreaStore data structure

    Fix MSVC number conversion warning

    Fix FSAA dropdown option reset after changing another dropdown option

    Fix minetest.get_(all)_craft_recipe(s) regression

    

    Since 03e0dd33a847a83d975282c6caf6b926306e7b57 the calls didn't return an output count

    for the recipes.

    Since 03e0dd33a847a83d975282c6caf6b926306e7b57 the calls didn't return an output count

    for the recipes.

    for the recipes.

    Cleanup server addparticle(spawner) by merge two identical functions.

    Remove drivers dropdown in the settings tab

    Fix documentation of dedicated_server_loop

    Check output of mpz_set_str and fix leak on error condition

    

    Also add static identifier as upstream did

    Also add static identifier as upstream did

    Remove some old dead code. Fix some Clang warnings in SRP (ng->N... will

    always evaluate to true.

    always evaluate to true.

    Bump protocol to 26

    

    This was needed due to the TileDef serialisation changes. Originally it has been planned

    to also add utf-8 based chat to 26, but chat changes aren't final yet, so they are done

    in one change, after the release, and not two small ones, causing us having to be compliant

    to three versions of the packet.

    This was needed due to the TileDef serialisation changes. Originally it has been planned

    to also add utf-8 based chat to 26, but chat changes aren't final yet, so they are done

    in one change, after the release, and not two small ones, causing us having to be compliant

    to three versions of the packet.

    to also add utf-8 based chat to 26, but chat changes aren't final yet, so they are done

    in one change, after the release, and not two small ones, causing us having to be compliant

    to three versions of the packet.

    in one change, after the release, and not two small ones, causing us having to be compliant

    to three versions of the packet.

    to three versions of the packet.

    Update my name

    Optional reconnect functionality

    

    Enable the server to request the client to reconnect.

    

    This can be done with the now extended minetest.request_shutdown([reason], [reconnect]) setting.

    Enable the server to request the client to reconnect.

    

    This can be done with the now extended minetest.request_shutdown([reason], [reconnect]) setting.

    This can be done with the now extended minetest.request_shutdown([reason], [reconnect]) setting.

    Fix issues with light of attached CAOs

    Add note that chat messages can be marked as handled.

    Conf.example: Update mgv7 noise parameters

    Mgv7: Use density noise + density gradient for mountain terrain

    

    Tune and optimise noise parameters

    Tune and optimise noise parameters

    Add wielded (and CAOs) shader

    Fix crash in mainmenu when loaded subgame does not have a "menu" directory

    Clarify docs for auth.cpp method

    Ask auth handler to create auth when a default password is set

    

    -> Fix server crash with protocol >=25 if a default password is set.

    -> Remove some useless and possibly confusion causing code for the TOCLIENT_FIRST_SRP packet handler

    -> Fix server crash with protocol >=25 if a default password is set.

    -> Remove some useless and possibly confusion causing code for the TOCLIENT_FIRST_SRP packet handler

    -> Remove some useless and possibly confusion causing code for the TOCLIENT_FIRST_SRP packet handler

    Document game main menu image system

    Allow random menu images for subgames

    Remove profiler.h include where it's not needed. Remove some unreachable and very old code

    Added get_player_velocity() method. Fixes #1176

    MoveItemSomewhere double bugfix

    

    -> Fix bug where MoveSomewhere from an infinite source would fill the destination inventory with copies of itself.

    -> Fix bug where MoveSomewhere would needlessly call callbacks.

    -> Remove trailing whitespaces

    -> Fix bug where MoveSomewhere from an infinite source would fill the destination inventory with copies of itself.

    -> Fix bug where MoveSomewhere would needlessly call callbacks.

    -> Remove trailing whitespaces

    -> Fix bug where MoveSomewhere would needlessly call callbacks.

    -> Remove trailing whitespaces

    -> Remove trailing whitespaces

    Cavegen: Mgv6: No small caves entirely above ground

    

    Mgv5/mgv7: Remove 'should make cave hole' feature

    Remove ravine code

    Mgv5/mgv7: Remove 'should make cave hole' feature

    Remove ravine code

    Remove ravine code

    Refactor particle code to remove the while loops

    

    Replaces while loops with proper getfield calls

    Replaces while loops with proper getfield calls

    Update toolchain_mingw64.cmake

    Add antialiasing UI setting

    

    The Irrlicht engine supports antialiasing, and Minetest already supports

    saving an antialiasing setting in its configuration file.  However,

    Minetest lacked UI elements to set this setting, and previously the only

    way to enable the feature was by hand-editing the configuration file.

    

    Add a drop-down menu that can enable antialiasing.

    The Irrlicht engine supports antialiasing, and Minetest already supports

    saving an antialiasing setting in its configuration file.  However,

    Minetest lacked UI elements to set this setting, and previously the only

    way to enable the feature was by hand-editing the configuration file.

    

    Add a drop-down menu that can enable antialiasing.

    saving an antialiasing setting in its configuration file.  However,

    Minetest lacked UI elements to set this setting, and previously the only

    way to enable the feature was by hand-editing the configuration file.

    

    Add a drop-down menu that can enable antialiasing.

    Minetest lacked UI elements to set this setting, and previously the only

    way to enable the feature was by hand-editing the configuration file.

    

    Add a drop-down menu that can enable antialiasing.

    way to enable the feature was by hand-editing the configuration file.

    

    Add a drop-down menu that can enable antialiasing.

    Add a drop-down menu that can enable antialiasing.

    Add ability to specify coordinates for /spawnentity

    Make acc and vel deprecated in add_particle and search for acceleration and velocity instead

    

    The doc and the actual behaviour differed.

    The doc and the actual behaviour differed.

    Fix a typo in comment of CMakeLists.txt

    Change texture pack description file name

    

    Change the name for texture pack description files from "info.txt" to "description.txt" in order to keep the naming consistent between description files for both mods and texture packs.

    

    Also add backwards compatibility for texture packs that use "info.txt", and note in the log that "info.txt" is depreciated.

    Change the name for texture pack description files from "info.txt" to "description.txt" in order to keep the naming consistent between description files for both mods and texture packs.

    

    Also add backwards compatibility for texture packs that use "info.txt", and note in the log that "info.txt" is depreciated.

    Also add backwards compatibility for texture packs that use "info.txt", and note in the log that "info.txt" is depreciated.

    Fix invisible player when the attached entity is removed

    Display an access denied message when client detects a server timeout

    Run updatepo.sh

    Translated using Weblate (Turkish)

    

    Currently translated at 98.2% (1391 of 1416 strings)

    Currently translated at 100.0% (269 of 269 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (264 of 264 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (264 of 264 strings)

    Translated using Weblate (Korean)

    

    Currently translated at 66.5% (943 of 1416 strings)

    Currently translated at 1.7% (4 of 235 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 100.0% (264 of 264 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Currently translated at 99.1% (233 of 235 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Currently translated at 82.5% (194 of 235 strings)

    Server kicks: make messages configurable, cache wstring

    Kick players when shutting down server and there is a crash due to a Lua stack exception

    Fix relief mapping issues

    Make serialization error message translatable

    

    Also don't show "probably running a different version" message in simple singleplayer mode

    Also don't show "probably running a different version" message in simple singleplayer mode

    connection.cpp: remove unused constructor

    Increase limit of serialized long strings

    Remove raw message output on AOM deserialization failure

    

    Improve TOCLIENT_ACTIVE_OBJECT_MESSAGES robustness for handling invalid data

    Improve TOCLIENT_ACTIVE_OBJECT_MESSAGES robustness for handling invalid data

    Add more robust error checking to deSerialize*String routines

    

    Add serializeHexString()

    Clean up util/serialize.cpp

    Add serializeHexString()

    Clean up util/serialize.cpp

    Clean up util/serialize.cpp

    Minimal: Remove recently added unnecessary nodes

    

    Fix 'is ground content' for some nodes

    Fix 'is ground content' for some nodes

    Mgv6/treegen: (Re)Add fallback nodes for compatibility with subgames

    Fix remnant bugs on mainmenu

    

    - Stop attempting to start a world when no world's created/selected in server tab

    - Better world's indexes handling between subgames lists

    - Stop attempting to start a world when no world's created/selected in server tab

    - Better world's indexes handling between subgames lists

    - Better world's indexes handling between subgames lists

    Fix damage flash when damage disabled

    Misc. minor fixes

    Little coding style fix on porting.h

    Settings: pass name to callbacks by reference

    

    Spare some copies.

    Spare some copies.

    Update clouds enable_3d_clouds when setting changed

    Windows: Fix some warnings.

    Biome API decorations: 'spawnby' searches a 3D neighbourhood

    

    The neighbours checked are the 8 nodes horizontally surrounding the decoration base

    and the 8 nodes horizontally surrounding the ground node below the decoration

    The neighbours checked are the 8 nodes horizontally surrounding the decoration base

    and the 8 nodes horizontally surrounding the ground node below the decoration

    and the 8 nodes horizontally surrounding the ground node below the decoration

    Add new leaves style - simple (glasslike drawtype)

    Use UTF-8 instead of narrow

    

    Use wide_to_utf8 and utf8_to_wide instead of wide_to_narrow and narrow_to_wide at almost all places.

    Only exceptions: test functions for narrow conversion, and chat, which is done in a separate commit.

    Use wide_to_utf8 and utf8_to_wide instead of wide_to_narrow and narrow_to_wide at almost all places.

    Only exceptions: test functions for narrow conversion, and chat, which is done in a separate commit.

    Only exceptions: test functions for narrow conversion, and chat, which is done in a separate commit.

    Clean-up Minimap code

    

    - Fixed race conditions

    - Fixed null dereference

    - Fixed out-of-bounds array access

    - MinimapMapblock is now allocated and added to update queue only when enabled

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Fixed race conditions

    - Fixed null dereference

    - Fixed out-of-bounds array access

    - MinimapMapblock is now allocated and added to update queue only when enabled

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Fixed null dereference

    - Fixed out-of-bounds array access

    - MinimapMapblock is now allocated and added to update queue only when enabled

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Fixed out-of-bounds array access

    - MinimapMapblock is now allocated and added to update queue only when enabled

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - MinimapMapblock is now allocated and added to update queue only when enabled

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Removed dependency on LocalPlayer

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Fixed code style

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Simplified expressions and program logic

    - Cleaned minimap object interfaces

    - Cleaned minimap object interfaces

    Mgv7: Auto-set lowest mountain generation level

    

    Lowest level of base terrain determines mountain generation in mapchunk

    Change some positional function arguments from int to s16

    Lowest level of base terrain determines mountain generation in mapchunk

    Change some positional function arguments from int to s16

    Change some positional function arguments from int to s16

    Client: better m_proto_ver initialisation

    

    Previously, m_proto_ver was set to the serialisation version

    inside the legacy init packet.

    

    Now, if the server doesn't send a protocol version (protocols < 25),

    we set m_proto_ver to some value < 25 and > 0.

    Previously, m_proto_ver was set to the serialisation version

    inside the legacy init packet.

    

    Now, if the server doesn't send a protocol version (protocols < 25),

    we set m_proto_ver to some value < 25 and > 0.

    inside the legacy init packet.

    

    Now, if the server doesn't send a protocol version (protocols < 25),

    we set m_proto_ver to some value < 25 and > 0.

    Now, if the server doesn't send a protocol version (protocols < 25),

    we set m_proto_ver to some value < 25 and > 0.

    we set m_proto_ver to some value < 25 and > 0.

    Use minetest logging facilities for irrlicht log output

    Mgv7: Lower base of mountain generation to -112 and define constant

    Fix endless loop since grandparent commit

    Fix attempt to start a world when no world is selected/created

    Craftdef: Use numbers instead of iterators

    

    Use numbers instead of iterators to traverse various vectors.

    Use numbers instead of iterators to traverse various vectors.

    Fix missing check for 0 in craft replacements

    Fix code style from recent commits and add misc. optimizations

    Set server_announce to world.mt and respect modes when changing subgame

    Shaders fixes and cleanup relief mapping code.

    Fix world.mt not written when selecting mode

    Inventory manager style cleanup and further checks

    Disable mesh cache by default

    Cavegen: Cleanup code. Define constant for MGV7_LAVA_DEPTH

    Add android tools environment to gitignore

    

    Previously, if you did `make envpaths` (as described in README.android), the new file got listed by git as new file.

    Previously, if you did `make envpaths` (as described in README.android), the new file got listed by git as new file.

    Make m_blocks_cache private

    

    @RealBadAngel has removed all outside access of the cache.

    @RealBadAngel has removed all outside access of the cache.

    Defer minimap update when shape changed

    Close keybind settings menu with esc

    Fix single click world select

    Fix bugs in mainmenu

    Biome API: Increase heat and humidity noise spreads to 1000

    Add UpdateThread and use it for minimap and mesh threads

    Fix *BSD build with GNU iconv

    Add Lua errors to error dialog

    Bugfix: variable type mismatch

    Bugfix: minimap was updated only with loading new blocks, allow forced updates with changing player pos

    Minimap update

    Remove busy polling inside minimap thread

    Mgv5/mgv7 caves: Remove sand found in underground tunnels

    

    Add missing check for max_stone_y to mgv5 cavegen

    Tunnels now carve through sand below water_level

    Add missing check for max_stone_y to mgv5 cavegen

    Tunnels now carve through sand below water_level

    Tunnels now carve through sand below water_level

    Add minimap feature

    Remove compile warning

    

    Thanks @TeTpaAka for pointing this out.

    Thanks @TeTpaAka for pointing this out.

    Return to ignore

    Use frame instead of words 'no screenshot available'

    Typo fix on previous @est31 commit

    Small TOCLIENT_HELLO logging fix

    

    Fix grammar error and missing number conversion for version.

    Also add deployed protocol to log line.

    Fix grammar error and missing number conversion for version.

    Also add deployed protocol to log line.

    Also add deployed protocol to log line.

    Add MoveSomewhere inventory action

    

    Improve shift+click experience

    Improve shift+click experience

    Use actionstream instead of errorstream when failing to emerge player

    Fix string conversion error message

    Fix bug when craft input isn't replaced

    Update Chinese translation

    Fix some issues with animations, and allow non-looped animations to be defined

    Mgv7: Edit noise parameters. Fewer octaves, larger spreads.

    Remove textures vertical offset. Fix for area enabling parallax.

    Android: use loop inside makefile to spare repetition

    Small CAO improvements

    

    -> remove the old parent as @kahrl suggested

    -> use indices no iterator as @kwolekr suggested

    -> remove the old parent as @kahrl suggested

    -> use indices no iterator as @kwolekr suggested

    -> use indices no iterator as @kwolekr suggested

    Mapgen objects: Enable heatmap and humidmap for all biome api mapgens

    More correct wrap_rows implementation

    Generic CAO cleanups and renames for clarification

    

    * Use enum for GENERIC_CMD_*

    * Rename m_attachements to attachement_parent_ids (public member and clearer name)

    * Rename GENERIC_CMD_SET_ATTACHMENT to GENERIC_CMD_ATTACH_TO

    * USHRT_MAX + 1 buffer sizes to prevent overflows as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    * Use enum for GENERIC_CMD_*

    * Rename m_attachements to attachement_parent_ids (public member and clearer name)

    * Rename GENERIC_CMD_SET_ATTACHMENT to GENERIC_CMD_ATTACH_TO

    * USHRT_MAX + 1 buffer sizes to prevent overflows as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    * Rename m_attachements to attachement_parent_ids (public member and clearer name)

    * Rename GENERIC_CMD_SET_ATTACHMENT to GENERIC_CMD_ATTACH_TO

    * USHRT_MAX + 1 buffer sizes to prevent overflows as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    * Rename GENERIC_CMD_SET_ATTACHMENT to GENERIC_CMD_ATTACH_TO

    * USHRT_MAX + 1 buffer sizes to prevent overflows as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    * USHRT_MAX + 1 buffer sizes to prevent overflows as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    * Remove unneccessary m_id from GenericCAO (shadowing protected superclass member for no reason) as @kahrl suggested

    Make attached objects visible in 3rd person view

    Fix wrap_rows at inner byte of multibyte sequence

    

    Also fix UTF-8 inner byte bounds and make unittest for case this fixes.

    Also fix UTF-8 inner byte bounds and make unittest for case this fixes.

    Biome API: Add noise defined biome blend

    Mgv6: Don't create air gap in tundra at y = 48 in custom high terrain

    Don't print an error for valid listring[] formspec

    Make wrap_rows not wrap inside utf-8 multibyte sequences

    

    Also count multibyte sequences as "one" character.

    Adds unittest for the bug reporter's case.

    Fixes #2796.

    Also count multibyte sequences as "one" character.

    Adds unittest for the bug reporter's case.

    Fixes #2796.

    Adds unittest for the bug reporter's case.

    Fixes #2796.

    Fixes #2796.

    Fail iconv call gracefully

    

    No freezing when inbuf_size doesn't decrease over time.

    No freezing when inbuf_size doesn't decrease over time.

    Simpler patch for saplings trying to grow on unknown nodes

    GUIFormSpecMenu::OnEvent code style update and small refactor

    

    * Make method (more) consistent with current code stlye

    * Move index into loop constructor after @rubenwardy's suggestion

    * Cache inv_s->getList(s.listname), which removes a possibly bad scenario

    of inv_s being null.

    * Properly check for validity

    * Make method (more) consistent with current code stlye

    * Move index into loop constructor after @rubenwardy's suggestion

    * Cache inv_s->getList(s.listname), which removes a possibly bad scenario

    of inv_s being null.

    * Properly check for validity

    * Move index into loop constructor after @rubenwardy's suggestion

    * Cache inv_s->getList(s.listname), which removes a possibly bad scenario

    of inv_s being null.

    * Properly check for validity

    * Cache inv_s->getList(s.listname), which removes a possibly bad scenario

    of inv_s being null.

    * Properly check for validity

    of inv_s being null.

    * Properly check for validity

    * Properly check for validity

    Update credits tab

    Add list-rings

    

    Adds list-rings, a method to implement item sending between inventories via shift-click.

    Nice insider feature: a ring consisting of a single inventory list serves as nice clean-up method.

    Also adds them to minimal game, and the standard inventory.

    Craft output slots are not supported.

    Adds list-rings, a method to implement item sending between inventories via shift-click.

    Nice insider feature: a ring consisting of a single inventory list serves as nice clean-up method.

    Also adds them to minimal game, and the standard inventory.

    Craft output slots are not supported.

    Nice insider feature: a ring consisting of a single inventory list serves as nice clean-up method.

    Also adds them to minimal game, and the standard inventory.

    Craft output slots are not supported.

    Also adds them to minimal game, and the standard inventory.

    Craft output slots are not supported.

    Craft output slots are not supported.

    Remove unneccessary space for tab completion

    Don't highlight entries in credits

    Don't crash when saplings try to grow on unknown nodes

    Biome API: Enable biome generation to lower world limit

    

    Decorations: Remove lower limit of water level for placement

    Decorations: Remove lower limit of water level for placement

    Ignore punches with no damage in the actionstream

    Remove reference to deprecated privilege

    Automated whitespace error fix for last commit

    Improved parallax mapping. Generate heightmaps on the fly.

    Add UTF and other utility unit tests

    Android: bypass broken wide_to_utf8 with wide_to_narrow

    

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason.

    While utf8_to_wide works well, wide_to_utf8 is quite broken

    on android, for some reason, and some devices (unrelated from build

    configuration).

    on android, for some reason.

    Use utf-8 in formspecs

    Add utf-8 conversion utilities and re-add intlGUIEditBox

    Add minetest.register_on_player_hpchange

    Add return list of individual counts to find_node_in_area

    dofile error reporting for syntax errors

    

    According to doc, dofile() raises an error when parsing failed due to syntax errors.

    Fixes #2775

    According to doc, dofile() raises an error when parsing failed due to syntax errors.

    Fixes #2775

    Fixes #2775

    Minimal: Add snow biome and jungleleaves nodes. Add mapgen aliases

    

    Treegen: Remove alias checks from jungletree generation for speed

    Treegen: Remove alias checks from jungletree generation for speed

    Reposition irrlicht timestamp in makefile

    More reliable serverlist behaviour

    

    -> remember the previously loaded serverlist, and use if new one failed

    -> show a "loading" serverlist

    -> remember the previously loaded serverlist, and use if new one failed

    -> show a "loading" serverlist

    -> show a "loading" serverlist

    Minimal: Edit mapgen aliases. Use blob ore for clay, update other ores. Update simple biomes. Cleanup code

    Decrease minetest.after globalstep lag

    

    * abort if theres no active timer

    * only reduce the timer.time of all timers when its necessary

    * move updating timers_to_add into a seperate function

    * abort if theres no active timer

    * only reduce the timer.time of all timers when its necessary

    * move updating timers_to_add into a seperate function

    * only reduce the timer.time of all timers when its necessary

    * move updating timers_to_add into a seperate function

    * move updating timers_to_add into a seperate function

    Mgv5/mgv7: Trigger biome recalculation at underwater surfaces

    Fix uninitialized variable error

    

    If you run minetest with valgrind, you'll quickly notice uninitialized jump

    depend error messages that point to s_base.cpp:131. This commit fixes those.

    If you run minetest with valgrind, you'll quickly notice uninitialized jump

    depend error messages that point to s_base.cpp:131. This commit fixes those.

    depend error messages that point to s_base.cpp:131. This commit fixes those.

    Nicer time setting logging

    

    Now logs

    

    ACTION[ServerThread]: player sets time to 6:03

    

    instead of

    

    ACTION[ServerThread]: player sets time to 6:3

    Now logs

    

    ACTION[ServerThread]: player sets time to 6:03

    

    instead of

    

    ACTION[ServerThread]: player sets time to 6:3

    ACTION[ServerThread]: player sets time to 6:03

    

    instead of

    

    ACTION[ServerThread]: player sets time to 6:3

    instead of

    

    ACTION[ServerThread]: player sets time to 6:3

    ACTION[ServerThread]: player sets time to 6:3

    Fix wrong replace from previous commit

    Localize inside whole misc_helpers.lua

    Make split method static

    Mapblock: nodecount refactor

    

    Spare direct multoplication, use constant MapBlock::nodecount instead of

    local nodecount variables.

    

    Also use strides at one place instead of multiplications.

    Spare direct multoplication, use constant MapBlock::nodecount instead of

    local nodecount variables.

    

    Also use strides at one place instead of multiplications.

    local nodecount variables.

    

    Also use strides at one place instead of multiplications.

    Also use strides at one place instead of multiplications.

    Only retrieve always_fly_fast setting once

    (Android) Only simulate holding down fast key if fast_move is toggled to true

    Make get_biome_list() error message more helpful

    Fix typo in variable name

    Add some missing getter functions to the lua API

    

    ObjectRef:

    get_properties

    get_armor_groups

    get_animation

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    ObjectRef:

    get_properties

    get_armor_groups

    get_animation

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_properties

    get_armor_groups

    get_animation

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_armor_groups

    get_animation

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_animation

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_attach

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_bone_position

    

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    Players:

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_physics_override

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    hud_get_hotbar_itemcount

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    hud_get_hotbar_image

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    hud_get_hotbar_selected_image

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_sky

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_day_night_ratio

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_local_animation

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    get_eye_offset

    

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    Global:

    minetest.get_gen_notify

    minetest.get_noiseparams

    minetest.get_gen_notify

    minetest.get_noiseparams

    minetest.get_noiseparams

    Consistent const string params

    

    Parent commit broke behaviour.

    Thanks @TeTpaAka for testing the fix.

    Parent commit broke behaviour.

    Thanks @TeTpaAka for testing the fix.

    Thanks @TeTpaAka for testing the fix.

    Spare some string copies

    Mgv6: Enable snowbiomes by default. Double biome noise spread. 3 octaves, 0.5 persistence for humidity

    Small clientiface ASCII art improvements

    

    Use v arrows except where there is only one line between two boxes,

    and other improvements

    (Yea could use ↓ but its an ASCII art not an Unicode art).

    Use v arrows except where there is only one line between two boxes,

    and other improvements

    (Yea could use ↓ but its an ASCII art not an Unicode art).

    and other improvements

    (Yea could use ↓ but its an ASCII art not an Unicode art).

    (Yea could use ↓ but its an ASCII art not an Unicode art).

    Biome API, mgv7: Increase heat/humidity spreads. Improve mgv7 noise parameters

    Mgv5/v7: Fix generateBiomes biome recalculation logic Biomegen down to y = -192 for mgv5 deep oceans. Improve code

    Fix Windows build, clean up included headers

    

    Also fix a startup error caused by s_security.cpp

    Also fix a startup error caused by s_security.cpp

    Deny empty username early in the protocol

    

    Thanks to @UltimateNate for pointing this out :)

    Thanks to @UltimateNate for pointing this out :)

    Don't ignore nametag attribute change message for newer versions

    

    This allows newer versions to add additional information that isn't

    read by us, but still in a backwards compatible manner.

    This allows newer versions to add additional information that isn't

    read by us, but still in a backwards compatible manner.

    read by us, but still in a backwards compatible manner.

    Fix documentation for texture override face selector behaviour

    Replace instances of std::map<std::string, std::string> with StringMap

    

    Also, clean up surrounding code style

    Replace by-value parameter passing with const refs when possible

    Fix post-increment of iterators

    Also, clean up surrounding code style

    Replace by-value parameter passing with const refs when possible

    Fix post-increment of iterators

    Replace by-value parameter passing with const refs when possible

    Fix post-increment of iterators

    Fix post-increment of iterators

    Add texture overriding

    Fix build with libstdc++

    

    libstdc++ doesn't include <cstring> inside of <string>, unlike libc++.

    libstdc++ doesn't include <cstring> inside of <string>, unlike libc++.

    Split ObjDef/ObjDefManager out to objdef.cpp

    Lower log level for unexpected behaviour

    

    Its a possible mistake to log in to a server with twice the same name.

    Before, it triggered a server wide error message, now it logs to actionstream.

    Its a possible mistake to log in to a server with twice the same name.

    Before, it triggered a server wide error message, now it logs to actionstream.

    Before, it triggered a server wide error message, now it logs to actionstream.

    Enforce hiding nametag

    

    Work around irrlicht bug and hide nametag if its alpha is set to 0.

    Thanks @TeTpaAka for pointing out workaround.

    Work around irrlicht bug and hide nametag if its alpha is set to 0.

    Thanks @TeTpaAka for pointing out workaround.

    Thanks @TeTpaAka for pointing out workaround.

    Add more swp files to gitignore

    

    Specifically, the added rule matches .kate-swp files.

    Specifically, the added rule matches .kate-swp files.

    Make nametags white again

    

    Commit 11a96e4901ce54c4646e47866f7a66cd9034c16b

    commented out version parsing, resulting in the version byte being parsed as part of the color,

    making nametags dark grey.

    Re-introduces version parsing and ignores the packet if the version is more recent than ours,

    fixing the unused variable warning (should have been done anyway).

    Commit 11a96e4901ce54c4646e47866f7a66cd9034c16b

    commented out version parsing, resulting in the version byte being parsed as part of the color,

    making nametags dark grey.

    Re-introduces version parsing and ignores the packet if the version is more recent than ours,

    fixing the unused variable warning (should have been done anyway).

    commented out version parsing, resulting in the version byte being parsed as part of the color,

    making nametags dark grey.

    Re-introduces version parsing and ignores the packet if the version is more recent than ours,

    fixing the unused variable warning (should have been done anyway).

    making nametags dark grey.

    Re-introduces version parsing and ignores the packet if the version is more recent than ours,

    fixing the unused variable warning (should have been done anyway).

    Re-introduces version parsing and ignores the packet if the version is more recent than ours,

    fixing the unused variable warning (should have been done anyway).

    fixing the unused variable warning (should have been done anyway).

    Fix null dereference when loading schematic from definition without a NodeDefManager

    Record MapBlock modification reasons as flags instead of strings

    

    This improves performance of MapBlock::raiseModified by a factor of 6.

    Also, clean up mapblock.h a bit and inline small functions.

    This improves performance of MapBlock::raiseModified by a factor of 6.

    Also, clean up mapblock.h a bit and inline small functions.

    Also, clean up mapblock.h a bit and inline small functions.

    SAPI/Noise: Add PerlinNoiseMap:getMapSlice() function

    

    This adds the ability to grab 'slices' of noise calculated by PerlinNoiseMap.

    Retrieving smaller slices of noise from the computation result as needed

    optimizes memory usage while maintaining a reasonable amount of CPU overhead.

    This adds the ability to grab 'slices' of noise calculated by PerlinNoiseMap.

    Retrieving smaller slices of noise from the computation result as needed

    optimizes memory usage while maintaining a reasonable amount of CPU overhead.

    Retrieving smaller slices of noise from the computation result as needed

    optimizes memory usage while maintaining a reasonable amount of CPU overhead.

    optimizes memory usage while maintaining a reasonable amount of CPU overhead.

    Mapgen v5/v7: Detect sandstone, enable sandstone brick dungeons

    Add optional buffer param for bulk data array writes in Lua

    Noise: Fix interpolation at negative coordinates

    Fix current mod name change missed during rebase

    Add -Wsign-compare for Clang builds and fix some signed/unsigned compiler warnings

    SAPI: Accept either ARGB8 table or ColorString to specify colors

    Add core.get_dir_list

    Add core.request_insecure_environment()

    Add core.mkdir

    Add mod security

    

    Due to compatibility concerns, this is temporarily disabled.

    Due to compatibility concerns, this is temporarily disabled.

    Added hour:minute format to time command

    

      * The time command now accepts parameters in the form <hour>:<minute>,

        and if invoked with no parameters returns the current time in said format.

      * The time command now accepts parameters in the form <hour>:<minute>,

        and if invoked with no parameters returns the current time in said format.

        and if invoked with no parameters returns the current time in said format.

    Fix build since last commit

    

    Also rename method to better match what it does.

    Also rename method to better match what it does.

    Finalize init packets and enable protocol v25

    

    This enables srp.

    This enables srp.

    Add push_ARGB8 to script/common/c_converter

    Generalize core.get/set_nametag_color into core.get/set_nametag_attributes

    Noise: Make buffer size parameters unsigned

    Schematics: Fix probability values for .mts version 1

    Add minetest.register_on_punchplayer

    Add get and set functions for the nametag color

    ANDROID: Do not limit situations where fast is enabled

    

    Before this commit autofast for Android was ignored if the user was sneaking, digging or building. There is no reason for this and it impedes movement control

    Before this commit autofast for Android was ignored if the user was sneaking, digging or building. There is no reason for this and it impedes movement control

    Fix libgmp for Android

    

    Android terminated immediately after start since commit

    181f7baa453c58d4070de7196fd74663110946a8

    because library wasn't loaded, and libminetest.so required

    libgmp.so.10 instead of libgmp.so.

    

    The second issue has been solved by the linker flags.

    Android terminated immediately after start since commit

    181f7baa453c58d4070de7196fd74663110946a8

    because library wasn't loaded, and libminetest.so required

    libgmp.so.10 instead of libgmp.so.

    

    The second issue has been solved by the linker flags.

    181f7baa453c58d4070de7196fd74663110946a8

    because library wasn't loaded, and libminetest.so required

    libgmp.so.10 instead of libgmp.so.

    

    The second issue has been solved by the linker flags.

    because library wasn't loaded, and libminetest.so required

    libgmp.so.10 instead of libgmp.so.

    

    The second issue has been solved by the linker flags.

    libgmp.so.10 instead of libgmp.so.

    

    The second issue has been solved by the linker flags.

    The second issue has been solved by the linker flags.

    Don't crash if an item gets dropped into unloaded space

    

    Items dropped into unloaded map space will crash game so here's a fix...

    Items dropped into unloaded map space will crash game so here's a fix...

    Item entity merging refactor

    

    Don't ident too much, and add a comment.

    Don't ident too much, and add a comment.

    Fix compiler warning about sign comparison

    Build and link gmp correctly on MSVC

    

    Also optimize json's library

    Also optimize json's library

    Add code to support raillike group names

    is_player() is no player-only function

    Mapgen v5/6/7: Cleanup node resolver and aliases

    Make early protocol auth mechanism generic, and add SRP

    

    Adds everything needed for SRP (and everything works too),

    but still deactivated, as protocol v25 init packets aren't final yet.

    Can be activated by changing the LATEST_PROTOCOL_VERSION header to 25

    inside networkprotocol.h.

    Adds everything needed for SRP (and everything works too),

    but still deactivated, as protocol v25 init packets aren't final yet.

    Can be activated by changing the LATEST_PROTOCOL_VERSION header to 25

    inside networkprotocol.h.

    but still deactivated, as protocol v25 init packets aren't final yet.

    Can be activated by changing the LATEST_PROTOCOL_VERSION header to 25

    inside networkprotocol.h.

    Can be activated by changing the LATEST_PROTOCOL_VERSION header to 25

    inside networkprotocol.h.

    inside networkprotocol.h.

    Add LibGMP

    

    Uses system provided libgmp if found, if not it falls back to mini-gmp.

    Uses system provided libgmp if found, if not it falls back to mini-gmp.

    Replaced libjpeg dependency on apt-get, it should be libjpeg-dev instead of libjpeg8-dev.

    

    On Debian 8...

    ```

    Package libjpeg8-dev is not available, but is referred to by another package.

    This may mean that the package is missing, has been obsoleted, or

    is only available from another source

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    On Debian 8...

    ```

    Package libjpeg8-dev is not available, but is referred to by another package.

    This may mean that the package is missing, has been obsoleted, or

    is only available from another source

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    Package libjpeg8-dev is not available, but is referred to by another package.

    This may mean that the package is missing, has been obsoleted, or

    is only available from another source

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    This may mean that the package is missing, has been obsoleted, or

    is only available from another source

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    is only available from another source

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    However the following packages replace it:

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

      libjpeg62-turbo-dev

    ```

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    Using libjpeg-dev should make the OS select the most appropriate lib to be installed.

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    These are the packages available on Debian 8.

    ```

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg-dev - Development files for the JPEG library [dummy package]

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg-turbo-progs - Programs for manipulating JPEG files

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg-turbo-progs-dbg - Programs for manipulating JPEG files (debugging symbols)

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg62-turbo - libjpeg-turbo JPEG runtime library

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg62-turbo-dbg - Debugging symbols for the libjpeg-turbo JPEG library

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg62-turbo-dev - Development files for the libjpeg-turbo JPEG library

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libturbojpeg1 - TurboJPEG runtime library - SIMD optimized

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libturbojpeg1-dbg - TurboJPEG runtime library - SIMD optimized (debugging symbols)

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libturbojpeg1-dev - Development files for the TurboJPEG library

    

    ```

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    This seems to work on all current Debian versions, Wheezy, Jessie and Sid.

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    https://packages.debian.org/wheezy/libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    https://packages.debian.org/jessie/libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    https://packages.debian.org/stretch/libjpeg-dev

    

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    Im not sure if Ubuntu has this dummy package.

    

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    http://packages.ubuntu.com/search?keywords=libjpeg-dev

    

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    Perhaps this should be further discussed.

    

    libjpeg8-dev -> libjpeg-dev

    libjpeg8-dev -> libjpeg-dev

    Change lower limit of display_gamma to 1.0 (linear light)

    

    Now matches function comment

    Now matches function comment

    Schematics: Add per-node force placement option

    Fix typo in WieldMesh::setItem()

    Ensure that Map::findNodesWithMetadata() reports nodes strictly within the node-granular area

    Replace Wieldmesh::setItem assertion that could be triggered by the server with an error

    Fix release build warning

    Fix compilation for non-client builds, and fix signed comparison warning

    Tests: Add schematic unittests

    

    Improve schematic file-saving interface

    Add ability to create temporary test files

    Improve schematic file-saving interface

    Add ability to create temporary test files

    Add ability to create temporary test files

    Gracefully handle PacketErrors

    Fix missing Y component assignment in check_v3f

    Conf.example: Update recommended maximum cloud radius to 26

    Remove duplicate lua_getfield() in c_converter.cpp

    

    Fixes #2678

    Fixes #2678

    Schematics: Add indent-with-space option for schematic Lua table serialization

    NodeResolver: Remove NodeResolveMethod

    

    This simplifies NodeResolver logic and makes some interfaces cleaner.

    This simplifies NodeResolver logic and makes some interfaces cleaner.

    Fix connection speed unit names

    Fix error messages for type-checking Lua reading functions

    Improve Redis error messages

    Fix build on Debian broken by b45df9d (missing include, somehow?)

    NodeDefManager: Improve const-correctness of interfaces

    

    - Add ability to explicitly reset NodeResolve state (useful for unittesting)

    - Remove non-essential NodeResolve methods modifying state from INodeDefManager

    - Add const qualifier to NodeDefManager and ContentFeatures serialize

    - Add ability to explicitly reset NodeResolve state (useful for unittesting)

    - Remove non-essential NodeResolve methods modifying state from INodeDefManager

    - Add const qualifier to NodeDefManager and ContentFeatures serialize

    - Remove non-essential NodeResolve methods modifying state from INodeDefManager

    - Add const qualifier to NodeDefManager and ContentFeatures serialize

    - Add const qualifier to NodeDefManager and ContentFeatures serialize

    Add core.find_nodes_with_meta() script API

    Tests: Add NodeResolver unittests

    

    Minor misc. NodeResolver cleanups

    Prefix faux content type constants for testing with t_ to avoid

    confusion or name collisions

    Minor misc. NodeResolver cleanups

    Prefix faux content type constants for testing with t_ to avoid

    confusion or name collisions

    Prefix faux content type constants for testing with t_ to avoid

    confusion or name collisions

    confusion or name collisions

    Make Git version detection use VERSION_STRING instead of tags

    

    This fixes the problem where 0.4.12-dev versions were erroneously shown as

    0.4.11-dev because the tag was added on a separate branch.  It also fixes a

    similar issue when builders didn't fetch new tags when updating.

    

    This also removes the number-of-commits-since-tag field, since it's

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    This fixes the problem where 0.4.12-dev versions were erroneously shown as

    0.4.11-dev because the tag was added on a separate branch.  It also fixes a

    similar issue when builders didn't fetch new tags when updating.

    

    This also removes the number-of-commits-since-tag field, since it's

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    0.4.11-dev because the tag was added on a separate branch.  It also fixes a

    similar issue when builders didn't fetch new tags when updating.

    

    This also removes the number-of-commits-since-tag field, since it's

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    similar issue when builders didn't fetch new tags when updating.

    

    This also removes the number-of-commits-since-tag field, since it's

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    This also removes the number-of-commits-since-tag field, since it's

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    incompatible with this.  Said field doesn't seem to be useful anyway if you

    have the commit hash.

    have the commit hash.

    Fix GCC compiler warning

    Stop NetworkPacket methods from producing bloated packets

    Update Turkish Language

    

    Added some new translations

    Fixed some overlenght lines

    Added some new translations

    Fixed some overlenght lines

    Fixed some overlenght lines

    Cache enable_3d_clouds flag

    

    Small improvement on clouds rendering performance

    Small improvement on clouds rendering performance

    Clouds: Make cloud area radius settable in .conf

    Add a check for animation when getting an extruded mesh

    

    Fixes issue #2667

    Fixes issue #2667

    Fix pathfinder to produce more useful paths

    

    - Fix unintended negation of condition

    - Remove line_of_sight 'optimization'

    - Fix unintended negation of condition

    - Remove line_of_sight 'optimization'

    - Remove line_of_sight 'optimization'

    Tests: Add ObjDef unittests

    ObjDefManager: Set replacement object's handle info after calling set()

    

    Make gamedef optional when constructing an ObjDefManager

    Add note about object ownership

    Make gamedef optional when constructing an ObjDefManager

    Add note about object ownership

    Add note about object ownership

    Better version detection for shallow clones

    RotateAlongYAxis: For facedir case, return if param2 >= 4

    Add .patch files to gitignore

    Fix several MSVC issues numeric.h

    

    -> Round negative numbers correctly CMakeLists.txt

    -> Link Json with the static run-time library

    -> Round negative numbers correctly CMakeLists.txt

    -> Link Json with the static run-time library

    -> Link Json with the static run-time library

    Fix MSVC compatibility

    

    Make sure to include random unittests in android builds, too

    Use SWAP() macro

    Ensure that negative ranges are tested as well in random unittests

    Make sure to include random unittests in android builds, too

    Use SWAP() macro

    Ensure that negative ranges are tested as well in random unittests

    Use SWAP() macro

    Ensure that negative ranges are tested as well in random unittests

    Ensure that negative ranges are tested as well in random unittests

    Tests: Add random unittests

    Add Russian comment translation to minetest.desktop

    Revert the upper-case PROJECT_NAME nonsense that was part of #2402

    Revert "Only lowercase project name at compile time"

    

    This reverts commit 3be9787e64362b8a5020746220c65abbe31f8097.

    This reverts commit 3be9787e64362b8a5020746220c65abbe31f8097.

    Noise: Fix PcgRandom::randNormalDist() when range contains negative numbers

    

    This fixes an issue with erroneous float-to-int rounding that resulted in

    truncation toward 0, causing a biased distribution.

    This fixes an issue with erroneous float-to-int rounding that resulted in

    truncation toward 0, causing a biased distribution.

    truncation toward 0, causing a biased distribution.

    Replace PRNG assertions with PrngException

    Fix minetest.clear_* creating new LOCAL table instead of clearing the existing one.

    

    On calling clear_redistered_biomes the registered_biomes table is cleared

    by creating a new empty table, but the pointer is not updated to point to

    the new one. So after calling more register_biome, the registered_biome

    table always contains 0 items, which is an error. Instead, the table is

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    On calling clear_redistered_biomes the registered_biomes table is cleared

    by creating a new empty table, but the pointer is not updated to point to

    the new one. So after calling more register_biome, the registered_biome

    table always contains 0 items, which is an error. Instead, the table is

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    by creating a new empty table, but the pointer is not updated to point to

    the new one. So after calling more register_biome, the registered_biome

    table always contains 0 items, which is an error. Instead, the table is

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    the new one. So after calling more register_biome, the registered_biome

    table always contains 0 items, which is an error. Instead, the table is

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    table always contains 0 items, which is an error. Instead, the table is

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    cleared by removing all its items so the pointer (minetest.registered_*)

    remains valid.

    remains valid.

    Update .gitignore

    Remove craftdef serialisation

    

    It isn't needed anymore, sending ICraftDefManager over the network has been obsoleted

    by protocol version 7.

    It isn't needed anymore, sending ICraftDefManager over the network has been obsoleted

    by protocol version 7.

    by protocol version 7.

    Craftdef refactor

    

    Fix style, refactor assert, use '"' instead of "\"",

    replace code duplicating craftGetItemName, rename iterators.

    Fix style, refactor assert, use '"' instead of "\"",

    replace code duplicating craftGetItemName, rename iterators.

    replace code duplicating craftGetItemName, rename iterators.

    Tests: Modularize unit testing

    

    Split unit tests into separate files under src/unittest/

    Give better unittest diagnostics

    Clean up some code

    Split unit tests into separate files under src/unittest/

    Give better unittest diagnostics

    Clean up some code

    Give better unittest diagnostics

    Clean up some code

    Clean up some code

    Update chinese translation

    

    fixed some mistakes and added in some new translations

    fixed some mistakes and added in some new translations

    Fix fast leaves with texture_clean_transparent enabled.

    Fix player pitch and yaw not being set properly

    Remove fly mode in simple main menu

    

    As the fly mode option is avaiable in-game, this is not used anymore.

    As the fly mode option is avaiable in-game, this is not used anymore.

    German translation: shorter setting name

    Remove unused variable Client::m_active_blocks

    DecoSchematic: Fix missing trees in rough terrain

    

    Move place_on check to before place_center_x/y/z displacement of p

    Reduce displacement of p by place_center_x/y/z flags

    to correctly position schematics

    Move place_on check to before place_center_x/y/z displacement of p

    Reduce displacement of p by place_center_x/y/z flags

    to correctly position schematics

    Reduce displacement of p by place_center_x/y/z flags

    to correctly position schematics

    to correctly position schematics

    Protocol 25: wstring -> string for custom access denial reasons

    

    Also fix std::logic_error when server::DenyAccess() is used with only two arguments.

    Also fix std::logic_error when server::DenyAccess() is used with only two arguments.

    Re-apply 972d17baea81ffe6d508b291ef97207a4822e1da...

    but not rename the container. Approved-By est31

    but not rename the container. Approved-By est31

    Fix crash on startup (Windows)

    Only lowercase project name at compile time

    Revert "m_active_object_messages is used like a queue. Use std::queue instead of std::list. Also rename to m_active_object_messages_queue"

    

    This reverts commit 972d17baea81ffe6d508b291ef97207a4822e1da.

    The commit being reverted was unauthorized.  There had been no discussion,

    review, or sign-off prior to submittal to upstream.

    This reverts commit 972d17baea81ffe6d508b291ef97207a4822e1da.

    The commit being reverted was unauthorized.  There had been no discussion,

    review, or sign-off prior to submittal to upstream.

    The commit being reverted was unauthorized.  There had been no discussion,

    review, or sign-off prior to submittal to upstream.

    review, or sign-off prior to submittal to upstream.

    m_active_object_messages is used like a queue. Use std::queue instead of std::list. Also rename to m_active_object_messages_queue

    Add minetest.global_exists()

    Noise: Add noise unittests

    

    Fix buffer size calculation for lacunarity < 1.0

    Add guard against absurd noise parameters

    Fix buffer size calculation for lacunarity < 1.0

    Add guard against absurd noise parameters

    Add guard against absurd noise parameters

    Fix sign-compare compiler warnings in mg_ore.cpp

    Fix mod store rating

    Ore: Add biomes parameter

    Fix build on OS X (Thanks neoascetic)

    Add 'persistence' alias for Lua noiseparams and validate more vector parameters

    Noise: Correct noise objects created with invalid dimensions

    Porting: Refactor initalizePaths()

    

    Add support for Solaris and HP-UX

    Search additional potential procfs locations for current executable

    Add support for Solaris and HP-UX

    Search additional potential procfs locations for current executable

    Search additional potential procfs locations for current executable

    Disable connection timeout for singleplayer and server tabs

    

    In worlds with many mods we can easily reach timeout, waiting for the server to start.

    In worlds with many mods we can easily reach timeout, waiting for the server to start.

    Biome API: Add biome-specific river water

    fix infinite spawners

    Schematics: Fix core.schematic_create()

    10s timeout when connecting to server

    Fix build since: "Remove referenced schematics from Decorations on clear"

    

    Fixes build, which has been broken for all platforms (except BSD?) since

    grandparent 406d9ba87b9f6e57b86c6282bf157e3341aa195c.

    Thanks to @SmallJoker for pointing out a solution.

    Fixes build, which has been broken for all platforms (except BSD?) since

    grandparent 406d9ba87b9f6e57b86c6282bf157e3341aa195c.

    Thanks to @SmallJoker for pointing out a solution.

    grandparent 406d9ba87b9f6e57b86c6282bf157e3341aa195c.

    Thanks to @SmallJoker for pointing out a solution.

    Thanks to @SmallJoker for pointing out a solution.

    Switch to check_v3s16 in l_mapgen.cpp and l_vmanip.cpp for type safety

    Schematics: Remove referenced schematics from Decorations on clear

    Refactor around translatePassword

    

    Change types for passed password from wstring to string, which removes converting

    back and forth in most cases. Move the narrow_to_wide conversion, where its neccessary,

    closer to irrlicht. Remove trailing spaces in guiPasswordChange.cpp. Make parameters for

    translatePassword passed as const reference.

    Change types for passed password from wstring to string, which removes converting

    back and forth in most cases. Move the narrow_to_wide conversion, where its neccessary,

    closer to irrlicht. Remove trailing spaces in guiPasswordChange.cpp. Make parameters for

    translatePassword passed as const reference.

    back and forth in most cases. Move the narrow_to_wide conversion, where its neccessary,

    closer to irrlicht. Remove trailing spaces in guiPasswordChange.cpp. Make parameters for

    translatePassword passed as const reference.

    closer to irrlicht. Remove trailing spaces in guiPasswordChange.cpp. Make parameters for

    translatePassword passed as const reference.

    translatePassword passed as const reference.

    Biomes: Remove referenced biomes from Decorations on clear

    Fix path detection with --std= parameter

    

    Fixes path detection when compilers have been told to follow a standard, e.g. with -DCMAKE_CXX_FLAGS=--std=c++98.

    To see the passed defines, try this with and without the --std parameter:

    gcc -E -dM --std=c99 - < /dev/null | grep linux

    Fixes path detection when compilers have been told to follow a standard, e.g. with -DCMAKE_CXX_FLAGS=--std=c++98.

    To see the passed defines, try this with and without the --std parameter:

    gcc -E -dM --std=c99 - < /dev/null | grep linux

    To see the passed defines, try this with and without the --std parameter:

    gcc -E -dM --std=c99 - < /dev/null | grep linux

    gcc -E -dM --std=c99 - < /dev/null | grep linux

    Fix build for < C++11 since last commit

    

    Build broke since last commit 479f38973e13680d6a39d9c2a7f29fd330b67d41 for compilers not supporting C++11.

    Pre C++11, the constructor of std::ifstream only allows C like strings.

    Build broke since last commit 479f38973e13680d6a39d9c2a7f29fd330b67d41 for compilers not supporting C++11.

    Pre C++11, the constructor of std::ifstream only allows C like strings.

    Pre C++11, the constructor of std::ifstream only allows C like strings.

    Schematics: Refactor NodeResolver and add NodeResolveMethod

    

    NodeResolver name lists now belong to the NodeResolver object instead of

    the associated NodeDefManager.  In addition to minimizing unnecessary

    abstraction and overhead, this move permits NodeResolvers to look up nodes

    that they had previously set pending for resolution.  So far, this

    functionality has been used in the case of schematics for

    serialization/deserialization.

    NodeResolver name lists now belong to the NodeResolver object instead of

    the associated NodeDefManager.  In addition to minimizing unnecessary

    abstraction and overhead, this move permits NodeResolvers to look up nodes

    that they had previously set pending for resolution.  So far, this

    functionality has been used in the case of schematics for

    serialization/deserialization.

    the associated NodeDefManager.  In addition to minimizing unnecessary

    abstraction and overhead, this move permits NodeResolvers to look up nodes

    that they had previously set pending for resolution.  So far, this

    functionality has been used in the case of schematics for

    serialization/deserialization.

    abstraction and overhead, this move permits NodeResolvers to look up nodes

    that they had previously set pending for resolution.  So far, this

    functionality has been used in the case of schematics for

    serialization/deserialization.

    that they had previously set pending for resolution.  So far, this

    functionality has been used in the case of schematics for

    serialization/deserialization.

    functionality has been used in the case of schematics for

    serialization/deserialization.

    serialization/deserialization.

    Use std::vector instead of std::set for Environment::getObjectsInsideRadius

    We are only iterating sequentially, we don't need a set here

    Also use a vector reference instead of a copy

    We are only iterating sequentially, we don't need a set here

    Also use a vector reference instead of a copy

    Also use a vector reference instead of a copy

    Mgv5: Fix above/below ground spawn when water level is altered

    Mgv5/v7: Add check for water for deciding biome node stability

    Defaultsettings: Add dungeons and jungles flags. Update conf.example

    Schematics: Reorganize (de)serialization and add Lua serialization API

    Conf.example: Update, fix and improve mapgen flags docs

    

    Remove dynamic weather year parameter

    Remove dynamic weather year parameter

    Add Spanish comment translation to minetest.desktop

    Mgv6: Fix taiga, allow pine tree spawning on snowblocks

    Mgv6: Add optional snow biomes

    Fix a rare crash case un SendPlayerHP

    

    If the player is disconnected while Lua API is doing a l_punch call, for example, the playersao is NULL and the server crash. Fix it.

    If the player is disconnected while Lua API is doing a l_punch call, for example, the playersao is NULL and the server crash. Fix it.

    Document for api functions that rely on current_modname, that it doesn't work when not loading mods

    Link against shlwapi.lib and unify linker input sources for Windows

    Fix freetype detection

    

    Don't reinvent freetype detection, use working one from cmake.

    Don't reinvent freetype detection, use working one from cmake.

    Schematics: Prepend mod path to relative schematic filepaths

    TOCLIENT_ACTIVE_OBJECT_MESSAGES: channel must be 1 for unreliable message

    Fix missing SQLite3 statement pointer initialization

    

    This fixes a segfault when the database is shut down

    before it finishes connecting and setting up.

    This fixes a segfault when the database is shut down

    before it finishes connecting and setting up.

    before it finishes connecting and setting up.

    Cavegen: Remove now unnecessary checks for water, lava, ice

    

    Remove large cave checks for air

    Mgv5/mgv7:Add is_ground_content checks to 3d noise tunnels

    More large caves

    Shorten lines

    Remove large cave checks for air

    Mgv5/mgv7:Add is_ground_content checks to 3d noise tunnels

    More large caves

    Shorten lines

    Mgv5/mgv7:Add is_ground_content checks to 3d noise tunnels

    More large caves

    Shorten lines

    More large caves

    Shorten lines

    Shorten lines

    Make comments consistent with TOSERVER_INIT -> TOSERVER_INIT_LEGACY rename

    Change screenshot filename to one likely to work on all modern filesystems

    Fixes #2603

    Fixes #2603

    TOCLIENT_ACTIVE_OBJECT_REMOVE_ADD can be unreliable, catch PacketError exception.

    Also set the packet size at creation not when pushing rawString, no functional change

    Also set the packet size at creation not when pushing rawString, no functional change

    craftdef.cpp: Return 0 after assert to make Clang happy

    Fix uninitialized variabled in ConnectionEvent

    Crafting speedup

    

    This greatly increases crafting performance, especially in worlds with many mods.

    

    Approved by @kwolekr.

    

    Introduces a hash-type-layered fall-through mechanism, where every layer specifies one hash algorithm,

    and the "deeper the fall", the more collisions to expect for the algorithm. One Craft definition

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    This greatly increases crafting performance, especially in worlds with many mods.

    

    Approved by @kwolekr.

    

    Introduces a hash-type-layered fall-through mechanism, where every layer specifies one hash algorithm,

    and the "deeper the fall", the more collisions to expect for the algorithm. One Craft definition

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    Approved by @kwolekr.

    

    Introduces a hash-type-layered fall-through mechanism, where every layer specifies one hash algorithm,

    and the "deeper the fall", the more collisions to expect for the algorithm. One Craft definition

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    Introduces a hash-type-layered fall-through mechanism, where every layer specifies one hash algorithm,

    and the "deeper the fall", the more collisions to expect for the algorithm. One Craft definition

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    and the "deeper the fall", the more collisions to expect for the algorithm. One Craft definition

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    only resides at one layer, which improves speed for lower layers (and a complete fail), due to most

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    craft definitions residing at high layers.

    

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    Due to the fall-through design, the undocumented behaviour that later craft recipes

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    override older ones had to be weaked up a bit, but craft recipes with the same hash and layer

    will still override.

    will still override.

    Add reason to kicked log message and use present tense

    Remove errorstream logging on password change

    

    This seems to be a debug message which has been forgotten to be removed.

    This seems to be a debug message which has been forgotten to be removed.

    Fix players spawned at (0,0,0) in some rare cases instead of static_spawnpoint, if set

    Approved by: @kwoelkr

    Approved by: @kwoelkr

    Create PacketError exception and use it with ACTIVEOBJECT_REMOVE_ADD handler which can be unreliable

    Fix crash caused by null texture in GUI formspec/HUD.

    Fix MSVC error caused by ed10005

    Treegen: Add pine tree. Force place trunks

    

    Speed-optimise leaves blits

    Use MMVManip for make_jungletree

    Use correct code style

    Speed-optimise leaves blits

    Use MMVManip for make_jungletree

    Use correct code style

    Use MMVManip for make_jungletree

    Use correct code style

    Use correct code style

    Move globals from main.cpp to more sane locations

    

    Move debug streams to log.cpp|h

    

    Move GUI-related globals to clientlauncher

    

    Move g_settings and g_settings_path to settings.cpp|h

    

    Move g_menuclouds to clouds.cpp|h

    

    Move g_profiler to profiler.cpp|h

    Move debug streams to log.cpp|h

    

    Move GUI-related globals to clientlauncher

    

    Move g_settings and g_settings_path to settings.cpp|h

    

    Move g_menuclouds to clouds.cpp|h

    

    Move g_profiler to profiler.cpp|h

    Move GUI-related globals to clientlauncher

    

    Move g_settings and g_settings_path to settings.cpp|h

    

    Move g_menuclouds to clouds.cpp|h

    

    Move g_profiler to profiler.cpp|h

    Move g_settings and g_settings_path to settings.cpp|h

    

    Move g_menuclouds to clouds.cpp|h

    

    Move g_profiler to profiler.cpp|h

    Move g_menuclouds to clouds.cpp|h

    

    Move g_profiler to profiler.cpp|h

    Move g_profiler to profiler.cpp|h

    NetworkPacket: reading outside packet is now clearer.

    Use a common function to check the reading offset

    Use a common function to check the reading offset

    Fix some minor details from 6d61375

    Clean scaling pre-filter for formspec/HUD.

    Fix usage of destroyed mutex

    

    Also fix a memory leak

    Fix overloaded virtual warning in Player::move()

    Remove some trailing whitespace

    Also fix a memory leak

    Fix overloaded virtual warning in Player::move()

    Remove some trailing whitespace

    Fix overloaded virtual warning in Player::move()

    Remove some trailing whitespace

    Remove some trailing whitespace

    Fix set_bits

    ObjDefManager, Mapgen SAPI: Huge refactoring

    

     - General code cleanup

     - Unified object creation and loading

     - Specifying objects in APIs is now orthogonal (i.e. anything can take an ID,

       name string, or the raw table definition (and automatically registers if present

     - General code cleanup

     - Unified object creation and loading

     - Specifying objects in APIs is now orthogonal (i.e. anything can take an ID,

       name string, or the raw table definition (and automatically registers if present

     - Unified object creation and loading

     - Specifying objects in APIs is now orthogonal (i.e. anything can take an ID,

       name string, or the raw table definition (and automatically registers if present

     - Specifying objects in APIs is now orthogonal (i.e. anything can take an ID,

       name string, or the raw table definition (and automatically registers if present

       name string, or the raw table definition (and automatically registers if present

    Fix use of unitialized variable in gettext.cpp

    

    #2583

    Connection::Receive(): receive Network Packet instead of SharedBuffer<u8>.

    Because we get a Buffer<u8> from ConnectionEvent, don't convert it to SharedBuffer<u8> and return it to Server/Client::Receive which will convert it to NetworkPacket

    Instead, put the Buffer<u8> directly to NetworkPacket and return it to packet processing

    This remove a long existing memory copy

    Also check the packet size directly into Connection::Receive instead of packet processing

    Because we get a Buffer<u8> from ConnectionEvent, don't convert it to SharedBuffer<u8> and return it to Server/Client::Receive which will convert it to NetworkPacket

    Instead, put the Buffer<u8> directly to NetworkPacket and return it to packet processing

    This remove a long existing memory copy

    Also check the packet size directly into Connection::Receive instead of packet processing

    Instead, put the Buffer<u8> directly to NetworkPacket and return it to packet processing

    This remove a long existing memory copy

    Also check the packet size directly into Connection::Receive instead of packet processing

    This remove a long existing memory copy

    Also check the packet size directly into Connection::Receive instead of packet processing

    Also check the packet size directly into Connection::Receive instead of packet processing

    RunCommandQueues: little optimization

    remove command from queue on success, else do nothing, instead of remove command from queue and push it front on success

    remove command from queue on success, else do nothing, instead of remove command from queue and push it front on success

    Typo in getOutgoingSequenceNumber => successfull to successful

    Move texture_min_size even further down the pipe. Now, textures are JIT-upscaled using an image transformation, right at the time they're added to a mesh or particle; images used in 2D elements are left unscaled. This should fix any remaining issues with HUD elements.

    Change format of screenshot names

    

    Filename screenshot_ + ISO 8601 format + [-serial]

    

    i.e. screenshot_YYYY-MM-DDTHH::MM::SS[-serial].png

    

    Serial is added if the filename + timestamp already exists and is in the range 1 to 999

    Filename screenshot_ + ISO 8601 format + [-serial]

    

    i.e. screenshot_YYYY-MM-DDTHH::MM::SS[-serial].png

    

    Serial is added if the filename + timestamp already exists and is in the range 1 to 999

    i.e. screenshot_YYYY-MM-DDTHH::MM::SS[-serial].png

    

    Serial is added if the filename + timestamp already exists and is in the range 1 to 999

    Serial is added if the filename + timestamp already exists and is in the range 1 to 999

    GenElementManager: Pass opaque handles to Lua and rename to ObjDefManager

    

    Add core.clear_registered_schematics() and refactor schematics somewhat

    Add core.clear_registered_schematics() and refactor schematics somewhat

    Use Buffer not SharedBuffer in NetworkPacket::oldForgePacket

    On Android enable always fast

    

    Invert the meaning of holding down the fast button (i.e. holding down the fast button -- if there is one -- means walk), unless performing an action, sneaking or jumping.

    Still requires fast move to be toggled on (and fast priv)

    Invert the meaning of holding down the fast button (i.e. holding down the fast button -- if there is one -- means walk), unless performing an action, sneaking or jumping.

    Still requires fast move to be toggled on (and fast priv)

    Still requires fast move to be toggled on (and fast priv)

    Let main menu scale (non-Android)

    

    This fixes main menu not fitting for 800x600 (and lower resolutions) on PC builds

    This fixes main menu not fitting for 800x600 (and lower resolutions) on PC builds

    Fix Android build-related bugs

    

    E.g. Sound and freetype always being disabled, redefinition of pre-processor directives

    E.g. Sound and freetype always being disabled, redefinition of pre-processor directives

    Make sure g_timegetter is initalised before running speedtests

    

    Thanks @SmallJoker for noticing the issue

    Thanks @SmallJoker for noticing the issue

    Fix typo

    Update credits

    

    The following algorithm was used when selecting contributors:

    

    * Every non-trivial contributor from the current release,

      Non-trivial meaning more than X non-trivial commits, not counting documentation/translation changes

    * The top Y contributors from the last 4 years.

    * Previous contributor means no contributions since a few months before the last release.

    

    In the future this should be automated

    queued_commands must be a std::deque. RunCommandQueues needs to push packet on front, not back

    Fix uninitialized variable Player::local_animation_speed

    Update minetest.po

    

    Update minetest.po

    

    Update minetest.po

    Update minetest.po

    

    Update minetest.po

    

    Update minetest.po

    Update minetest.po

    

    Update minetest.po

    

    Update minetest.po

    Add Lua function get_video_modes() for main menu

    

    Also updates and uses porting::getSupportedVideoModes()

    Also updates and uses porting::getSupportedVideoModes()

    Make camera clear error message if there's no error

    Fix GetText translation loading

    Change error_message from wstring to string

    

    This removes a lot of narrow/wide conversions where a wide string was never used.

    This removes a lot of narrow/wide conversions where a wide string was never used.

    Fix MSVC compile error

    Document nil player as being allowed for can_dig

    Fix typo in OpenGL ES 2 CMake file

    Clean up and tweak build system

    

      * Combine client and server man pages.

      * Update unit test options and available databases in man page.

      * Add `--worldname` to man page.

      * Fix a bunch of places where `"Minetest"` was used directly instead of `PROJECT_NAME`.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Combine client and server man pages.

      * Update unit test options and available databases in man page.

      * Add `--worldname` to man page.

      * Fix a bunch of places where `"Minetest"` was used directly instead of `PROJECT_NAME`.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Update unit test options and available databases in man page.

      * Add `--worldname` to man page.

      * Fix a bunch of places where `"Minetest"` was used directly instead of `PROJECT_NAME`.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Add `--worldname` to man page.

      * Fix a bunch of places where `"Minetest"` was used directly instead of `PROJECT_NAME`.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Fix a bunch of places where `"Minetest"` was used directly instead of `PROJECT_NAME`.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Disable server build by default on all operating systems.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Make `ENABLE_FREETYPE` not fail if FreeType isn't found.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Enable LevelDB, Redis, and FreeType detection by default.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Remove the `VERSION_PATCH_ORIG` hack.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Add option to search for and use system JSONCPP.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Remove broken LuaJIT version detection.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Rename `DISABLE_LUAJIT` to `ENABLE_LUAJIT`.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Rename `minetest_*` variables in `version.{h,cpp}` to `g_*`.

      * Clean up style of CMake files.

      * Clean up style of CMake files.

    Remove duplicate code since 8ca08a850ff2494652aa0ac2daa3d00f03aa4e7a

    Update German translation and minetest.pot

    lua_api/l_mapgen: generate_ores/decorations: make p1, p2 optional

    Change filename of screenshots to something more human readable

    Update timestamp to include date

    Don't send an InventoryAction at each setInventoryModified, we only need one SendInventory per inventory modification

    

    Client doesn't like to receive multiples SendInventory for one action, this can trigger glitches on clients (sometimes due to incorrect UDP packet ordering due to UDP protocol)

    

    This fix issue #2544

    Client doesn't like to receive multiples SendInventory for one action, this can trigger glitches on clients (sometimes due to incorrect UDP packet ordering due to UDP protocol)

    

    This fix issue #2544

    This fix issue #2544

    Slow down the "key repeat" touch speed for some Android controls

    

    Increases the key/buttons repeat delay for fly, noclip, fast, debug and camera buttons

    Increases the key/buttons repeat delay for fly, noclip, fast, debug and camera buttons

    Add core.register_schematic() and cache schematics on use

    Fix endianness inconsistency with PcgRandom::bytes()

    Schematics: Error if unable to open file

    Do not enable texture_clean_transparent by default

    

    This feature is still experimental and has some issues. Also,

    increase texture_min_size to 64 px. The setting was initially

    a conservative 16 so that the effect would not be noticable

    for players who aren't using aniso/bi/trilinear filtering. This

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    This feature is still experimental and has some issues. Also,

    increase texture_min_size to 64 px. The setting was initially

    a conservative 16 so that the effect would not be noticable

    for players who aren't using aniso/bi/trilinear filtering. This

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    increase texture_min_size to 64 px. The setting was initially

    a conservative 16 so that the effect would not be noticable

    for players who aren't using aniso/bi/trilinear filtering. This

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    a conservative 16 so that the effect would not be noticable

    for players who aren't using aniso/bi/trilinear filtering. This

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    for players who aren't using aniso/bi/trilinear filtering. This

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    isn't necessary now that texture_clean_transparent is disabled

    by default.

    by default.

    Mgv6: Use heightmap in placeTreesAndJungleGrass()

    Fix for sun/moon tonemaps: don't upscale 1px images.

    Fix Android build on 32 bit

    

    Remove the --system=linux-x86_64 which isn't neccessary on 64 bit,

    as, when given no --system parameter, the standalone-toolchain.sh script

    figures out the platform on itself. Naturally, the hardcoded setting broke

    android building on 32 bit systems.

    Remove the --system=linux-x86_64 which isn't neccessary on 64 bit,

    as, when given no --system parameter, the standalone-toolchain.sh script

    figures out the platform on itself. Naturally, the hardcoded setting broke

    android building on 32 bit systems.

    as, when given no --system parameter, the standalone-toolchain.sh script

    figures out the platform on itself. Naturally, the hardcoded setting broke

    android building on 32 bit systems.

    figures out the platform on itself. Naturally, the hardcoded setting broke

    android building on 32 bit systems.

    android building on 32 bit systems.

    Fix cmake po detection bug

    

    Previously, cmake po detection would treat the "timestamp" file created by building for android as own language directory.

    Previously, cmake po detection would treat the "timestamp" file created by building for android as own language directory.

    Fix minetest.get_craft_recipe function

    

    Previously, calling it resulted in a crash.

    Previously, calling it resulted in a crash.

    Player: Fix a deadlock triggered by previous commit 0e5e49736c0a5fa29bca257bafc02d7c7a7171c9

    Protect Player::hud from concurrent modifications

    Sometimes HUD can be modified by ServerThread and EmergeThread results in a crash on client side because the HUD is not correct

    Sometimes HUD can be modified by ServerThread and EmergeThread results in a crash on client side because the HUD is not correct

    Mgv7: 1 up , 1 down overgeneration for chunk border continuity

    

    Fixes biome layer at y = 47 when base/alt terrain exceeds it

    Also fixes missing dust glitch at y = 47

    Mgv5/mgv7:Cleanup code

    Fixes biome layer at y = 47 when base/alt terrain exceeds it

    Also fixes missing dust glitch at y = 47

    Mgv5/mgv7:Cleanup code

    Also fixes missing dust glitch at y = 47

    Mgv5/mgv7:Cleanup code

    Mgv5/mgv7:Cleanup code

    Revert "Add a Lua call to do damages / heals" ok @ShadowNinja

    

    This reverts commit 467fc0ddc912ae38c3bf9fcb99e0b66d7478eec0.

    This reverts commit 467fc0ddc912ae38c3bf9fcb99e0b66d7478eec0.

    Remove unused ConnectionCommand::sendToAll function. NetworkPacket::oldForgePacket returns Buffer instead of SharedBuffer and is used in ConnectionCommand instead of Connection::Send

    This remove the NetworkPacket buffer => SharedBuffer => Buffer copy. Now NetworkPacket => Buffer

    This remove the NetworkPacket buffer => SharedBuffer => Buffer copy. Now NetworkPacket => Buffer

    Fix some loose ends from 3993093f

    Add support for the PCG32 PRNG algo (and associated script APIs)

    SendInventory when handleCommand_Interact is a use.

    This call was missing when change looping to triggering SendInventory: 1b2f64473ed4f222d3b7f02df853730d4382105e

    This call was missing when change looping to triggering SendInventory: 1b2f64473ed4f222d3b7f02df853730d4382105e

    Fix composite textures with texture_min_size. Moved upscaling of textures to later in the process, when images are converted to textures, instead of right after image load, so the original image is unmodified for generateImagePart.

    Connect rails with connect_to_raillike and shorten the codes

    Optimize minetest.get_(all)_craft_recipe(s)

    

    Signed off by: ShadowNinja, kwolekr

    Signed off by: ShadowNinja, kwolekr

    Configurable automatic texture scaling and filtering at load time.

    

    Signed off by: Zeno, kwolekr

    Signed off by: Zeno, kwolekr

    Revert "Fix issue #2441: crash on respawn, since a conversion std::list to std::vector on Environment.cpp"

    

    This reverts parts of commit 9749d9fee6db99da1ab861dc04ec63ef973db3e0, which breaks node resolver

    list clearing

    This reverts parts of commit 9749d9fee6db99da1ab861dc04ec63ef973db3e0, which breaks node resolver

    list clearing

    list clearing

    Mgv5/mgv7: Sprinkle dust from full_node_max.Y if chunk above is generated

    

    Mgv5: Add large_cave_depth constant

    Mgv5: Add large_cave_depth constant

    Reset the old HP method on PlayerSAO::setHP

    Fix game minetest.conf default settings

    

    This was a regression introduced by f6e4c5d9cf459e8278a76a2beaee59732e841458 .

    This was a regression introduced by f6e4c5d9cf459e8278a76a2beaee59732e841458 .

    Add a Lua call to do damages / heals

    ServerpacketHandler: spelling fixes

    Mgv6: Remove addDirtGravelBlobs, replaced by blob ore in Minetest Game

    

    Desert stone above y = -32 not water_level

    Remove unused generateExperimental()

    Desert stone above y = -32 not water_level

    Remove unused generateExperimental()

    Remove unused generateExperimental()

    Save creative_mode and enable_damage setting for each world in world.mt

    

    Create Parameters on world initialisation and set settings of old worlds

    Create Parameters on world initialisation and set settings of old worlds

    MutexedQueue inherits must use std::deque instead of std::list

    Remove Android makefile ugly make -j hack

    Standalone bundle for OSX (w/ dependencies!)

    Server::step throw is never catched in minetestserver

    Replace it with an errorstream + assert for server

    

    This throw can be trigger by LuaError exception or ConnectionBindFailed exception in the following functions:

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    Replace it with an errorstream + assert for server

    

    This throw can be trigger by LuaError exception or ConnectionBindFailed exception in the following functions:

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    This throw can be trigger by LuaError exception or ConnectionBindFailed exception in the following functions:

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ServerThread::Thread()

    Use the NetworkPacket api to read full version string instead of u8 pointers. Also store the reserved byte to use API properly

    

    Fixes #2509

    Fixes #2509

    Fix a little regression on SendActiveObjectMessages which send all TOCLIENT_ACTIVE_OBJECT_MESSAGES as reliable

    Minor bug fix (lag between damage flash and hearts updating)

    Fix various damage related bugs (client-side)

    

    E.g. spawning or teleporting into lava to become invinsible

    E.g. spawning or teleporting into lava to become invinsible

    Minor cleanup: game.cpp

    

    * Sort includes

    * Remove unnecessary includes

    * Ensure the parameter name for GameRunData is consistent for class member functions

    * Sort includes

    * Remove unnecessary includes

    * Ensure the parameter name for GameRunData is consistent for class member functions

    * Remove unnecessary includes

    * Ensure the parameter name for GameRunData is consistent for class member functions

    * Ensure the parameter name for GameRunData is consistent for class member functions

    Revert "Server::step throw is never catched. Replace it with an errorstream + assert"

    

    This reverts commit 5f8e48c63baf12930430d5d8fc07495021599e61.

    This reverts commit 5f8e48c63baf12930430d5d8fc07495021599e61.

    Bump android version code

    Server::step throw is never catched. Replace it with an errorstream + assert

    This throw can be trigger by LuaError exception or ConnectionBindFailed exception in the following functions:

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    This throw can be trigger by LuaError exception or ConnectionBindFailed exception in the following functions:

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * EmergeThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ScriptApiEnv::environment_Step()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ScriptApiEnv::player_event()

    * ServerThread::Thread()

    * ServerThread::Thread()

    Android: Fix auto-entry of server address and port in mainmenu

    

    Fixes #2497.

    Fixes #2497.

    Move client packet generators to dedicated functions for:

    * TOSERVER_INIT_LEGACY

    * TOSERVER_DELETEDBLOCKS

    * TOSERVER_GOTBLOCKS

    * TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    * TOSERVER_INIT_LEGACY

    * TOSERVER_DELETEDBLOCKS

    * TOSERVER_GOTBLOCKS

    * TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    * TOSERVER_DELETEDBLOCKS

    * TOSERVER_GOTBLOCKS

    * TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    * TOSERVER_GOTBLOCKS

    * TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    * TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    Also use a std::vector instead of std::set for TOSERVER_REMOVED_SOUNDS

    Move TOCLIENT_ACTIVE_OBJECT_REMOVE_ADD and TOCLIENT_ACTIVE_OBJECT_MESSAGES to private functions

    Rename packethandler/{client,server}.cpp to {client,server}packethandler.cpp

    * Requested by @Zeno-

    * Approved by @nerzhul

    * Requested by @Zeno-

    * Approved by @nerzhul

    * Approved by @nerzhul

    If player is dead, permit it to respawn, even if damages are not enabled

    * Mods can do setHP function to do damages and override the enable_damage value sometimes

    * Mods can do setHP function to do damages and override the enable_damage value sometimes

    SendPlayerHPOrDie everytime at client connection, damage enabled or not, this will fix the player which stay dead at connection

    Finer progress bar updates when initializing nodes

    

    The bar is only drawn when the user will notice a change, which prevents time overheads that this commit would cause, resulting from useless draws.

    The bar is only drawn when the user will notice a change, which prevents time overheads that this commit would cause, resulting from useless draws.

    Android Makefile update backported from stable-0.4 with minor changes

    mg_decoration: Raise highest allowed deco top to max edge of voxelmanip

    

    Remove max_y from functions, simplify code

    Remove max_y from functions, simplify code

    Android: Backport changes from stable-0.4

    Android: fix package name in JAVA sources

    Fix package name in AndroidManifest.xml

    AndroidManifest.xml version bump

    Disable double-click -> ESC translation for main menu

    client.cpp: typo fix and break; fix to make some compilers happy

    Replace NetworkPacket pointers to references

    Prepare Protocol v25 init & authentication.

    * TOSERVER_INIT and TOCLIENT_INIT renamed to _LEGACY

    * TOSERVER_PASSWORD merged from dev-0.5, can use protocol v24 and v25

    * TOCLIENT_ACCESS_DENIED merged from dev-0.5, can use protocol v24 and v25, with normalized strings an a custom id for custom errors

    * new TOSERVER_INIT packet only send MT version, supported compressions, protocols and serialization, this permit to rework everything later without break the _INIT packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * TOSERVER_INIT and TOCLIENT_INIT renamed to _LEGACY

    * TOSERVER_PASSWORD merged from dev-0.5, can use protocol v24 and v25

    * TOCLIENT_ACCESS_DENIED merged from dev-0.5, can use protocol v24 and v25, with normalized strings an a custom id for custom errors

    * new TOSERVER_INIT packet only send MT version, supported compressions, protocols and serialization, this permit to rework everything later without break the _INIT packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * TOSERVER_PASSWORD merged from dev-0.5, can use protocol v24 and v25

    * TOCLIENT_ACCESS_DENIED merged from dev-0.5, can use protocol v24 and v25, with normalized strings an a custom id for custom errors

    * new TOSERVER_INIT packet only send MT version, supported compressions, protocols and serialization, this permit to rework everything later without break the _INIT packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * TOCLIENT_ACCESS_DENIED merged from dev-0.5, can use protocol v24 and v25, with normalized strings an a custom id for custom errors

    * new TOSERVER_INIT packet only send MT version, supported compressions, protocols and serialization, this permit to rework everything later without break the _INIT packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * new TOSERVER_INIT packet only send MT version, supported compressions, protocols and serialization, this permit to rework everything later without break the _INIT packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * new TOSERVER_AUTH packet which auth the client

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * new TOCLIENT_HELLO packet which send server serialization version atm

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    * new TOCLIENT_AUTH_ACCEPTED which is send when TOCLIENT_AUTH was okay. After this packet, the client load datas from servers, like after TOCLIENT_INIT_LEGACY packet

    Handle the newly added TOCLIENT_ACCESS_DENIED and TOCLIENT_DELETE_PARTICLESPAWNER

    * Rename the handlers from _Legacy to regular, because here we can use same handlers

    * Fix some packet names and pseudo handlers

    * Rename the handlers from _Legacy to regular, because here we can use same handlers

    * Fix some packet names and pseudo handlers

    * Fix some packet names and pseudo handlers

    Rename some packet and handlers to <packet>_Legacy name for compat layer between new network changes and old network clients

    Use the new Player::isDead function when it's the case

    Update Indonesian Language

    handleCommand_Breath mustn't update breath is player is dead. A dead player doesn't breath.

    Add Player::isDead function to check player is dead

    Add Player::isDead function to check player is dead

    Don't handle PlayerPos packet coming from client if player is dead

    Mgv5/mgv7: Add desert temples if desert stone detected in mapchunk

    Unescape tooltip texts

    

    Previously, tooltips didn't unescape escaped formspec texts.

    Item descriptions that trigger tooltips like inside inventories or for item_image_button

    don't need to get unescaped, as they don't get set using formspec, but from lua.

    Previously, tooltips didn't unescape escaped formspec texts.

    Item descriptions that trigger tooltips like inside inventories or for item_image_button

    don't need to get unescaped, as they don't get set using formspec, but from lua.

    Item descriptions that trigger tooltips like inside inventories or for item_image_button

    don't need to get unescaped, as they don't get set using formspec, but from lua.

    don't need to get unescaped, as they don't get set using formspec, but from lua.

    Mgv6: Fix uninitialised heightmap used by cavegen

    lua_api/l_mapgen: Fix overlapping areas of minetest.generate_ores/decorations

    Silence Clang warning

    Ensure that heightmap is initialized before use

    

    Without this, cavegen will use values in the heightmap before they are initialized.

    Without this, cavegen will use values in the heightmap before they are initialized.

    Stop formspecs closing with double-click in empty area

    

    Behaviour on Android remains the same until other alternatives can be devised (if possible)

    

    See #2425 (and the many other -- now closed -- issues reporting this feature as a bug)

    Behaviour on Android remains the same until other alternatives can be devised (if possible)

    

    See #2425 (and the many other -- now closed -- issues reporting this feature as a bug)

    See #2425 (and the many other -- now closed -- issues reporting this feature as a bug)

    Fix memleak pointed by issue #2439.

    Also change bzero to memset. bzero doesn't work on windows

    Also change bzero to memset. bzero doesn't work on windows

    Fix unitialized data when creating TOSERVER_INIT packet

    Make the dummy backend only look up blocks once

    Update Android Makefile

    

    ARMv7 default build

    Update curl

    Update OpenSSL

    ARMv7 default build

    Update curl

    Update OpenSSL

    Update curl

    Update OpenSSL

    Update OpenSSL

    Heightmaps: Fix uninitialised values in mgv5/mgv6. findGroundLevel: Return -MAP_GENERATION_LIMIT if surface not found

    Optimize Profiler::avg()

    Don't use luaL_checkstring to read node names, it's only for arguments

    

    This caused confusing error messages like "argument #4 to set_node is not a string."

    This caused confusing error messages like "argument #4 to set_node is not a string."

    Add Turkish comment translation to minetest.desktop

    Add more Android build files to .gitignore

    Respect game mapgen flags and save world noise params

    Fix RUN_IN_PLACE broken due to invalid usage of assert

    For usages of assert() that are meant to persist in Release builds (when NDEBUG is defined), replace those usages with persistent alternatives

    Improve Clouds::render mathematics

    Fix Android text bug (no text displaying)

    Dungeongen: Optionally set ignore to be untouchable to disable floating dungeons

    Don't start a server for map migration

    Clean up database API and save the local map on an interval

    Biome API: Enable decorations placed on water

    

    Add schematic decoration force placement flag

    Add schematic decoration force placement flag

    Improve group-based connection between raillike nodes

    l_get_modnames: Compare using std::sort instead of a custom function which does same work

    collisionMoveSimple: use std::vector instead of std::list, this improve the performances

    ProfilerGraph: Use std::list instead of std::vector

    Fix mapgen using unitialised height map values

    Use std::queue for HTTPFetchRequest and std::vector for log_output instead of std::list

    Fix issue #2441: crash on respawn, since a conversion std::list to std::vector on Environment.cpp

    * Also change some std::list to std::vector for ClientMap::renderMap

    * Remove disabled code in ClientMap::renderMap, disabled since a long time

    * Also change some std::list to std::vector for ClientMap::renderMap

    * Remove disabled code in ClientMap::renderMap, disabled since a long time

    * Remove disabled code in ClientMap::renderMap, disabled since a long time

    Replace std::list to std::vector into tile.cpp (m_texture_trash) and move tile.hpp to src/client/

    Server.cpp Use std::list instead of std::vector for playSound, fillMediaCache, sendRequestedMedia, sendMediaAnnouncement and related functions

    Server::AsyncRunStep: buffered_messages now uses std::vector instead of std::list. * sendRemoveNode and sendAddNodes are also converted as a side effect

    Fix some rendering glitches

    

    - Fixes particle draworder

    - Fixes nodehighlighting

    - Fixes particle draworder

    - Fixes nodehighlighting

    - Fixes nodehighlighting

    Performance improvement: Use std::list instead of std::vector for request_media, Server::getModNames, Environment::m_simple_objects.

    * Also remove unused Server::m_modspaths

    * Also remove unused Server::m_modspaths

    Remove Queue class which uses std::list and use native std::queue

    Fix memory leak in MapgenV6

    Cavegen, mgv5: Cleanup code

    

    Conf.example: Update mgv5 mapgen params

    Mgv7: Lava caves only below -256

    Conf.example: Update mgv5 mapgen params

    Mgv7: Lava caves only below -256

    Mgv7: Lava caves only below -256

    Use std::vector instead of std::list in StaticObjectList and MutexedMap::getValues()

    ABMHandler and player_collisions use sequential read/write. Switch from std::list to std::vector

    * Also remove dead code Map::unloadUnusedData which is dead since a long time

    * Also remove dead code Map::unloadUnusedData which is dead since a long time

    ClientInterface::getClientIDs doesn't need a std::list. Use a std::vector for better perfs

    We always know playerSAO when calling SendInventory. Using it instead of searching it via peer_id

    Radius parameter for /deleteblocks here

    Send Position packet on event, don't check it at each AsyncRunStep.

    * This permit to cleanup the player checking loop

    * This permit to cleanup the player checking loop

    ASyncRunStep doesn't need to lock when do setTimeOfDaySpeed.

    * setTimeOfDaySpeed already lock a mutex when modify the value, we don't need to lock all environment.

    * add a fine grain lock for getTimeOfDay and setTimeOfDay to solve environment multithread modifications on this value

    * setTimeOfDaySpeed already lock a mutex when modify the value, we don't need to lock all environment.

    * add a fine grain lock for getTimeOfDay and setTimeOfDay to solve environment multithread modifications on this value

    * add a fine grain lock for getTimeOfDay and setTimeOfDay to solve environment multithread modifications on this value

    Send Inventory packet on event, don't check it at each AsyncRunStep.

    * Call UpdateCrafting into SendInventory because this functions is only called before SendInventory

    * Use Player* instead of peer_id for UpdateCrafting because SendInventory already has the Player* pointer, then don't loop for searching Player* per peer_id

    * m_env_mutex don't need to be used with this modification because it's already locked before the calls

    * Call UpdateCrafting into SendInventory because this functions is only called before SendInventory

    * Use Player* instead of peer_id for UpdateCrafting because SendInventory already has the Player* pointer, then don't loop for searching Player* per peer_id

    * m_env_mutex don't need to be used with this modification because it's already locked before the calls

    * Use Player* instead of peer_id for UpdateCrafting because SendInventory already has the Player* pointer, then don't loop for searching Player* per peer_id

    * m_env_mutex don't need to be used with this modification because it's already locked before the calls

    * m_env_mutex don't need to be used with this modification because it's already locked before the calls

    Remove unused m_wielded_item_not_sent

    Send Breath packet on event, don't check it at each AsyncRunStep

    Send Player HP when setHP (or a setHP caller) is called instead of looping and testing the state change.

    Fix occlusion

    Fix narrow_to_wide_c (ANDROID)

    

    * Ensure converted string is NUL terminated

    * Restore logic to that used prior to 9e2a9b5

    * Ensure converted string is NUL terminated

    * Restore logic to that used prior to 9e2a9b5

    * Restore logic to that used prior to 9e2a9b5

    Mgv6: Add heightmap. Do not make large caves that are entirely above ground

    Add /setpassword and /clearpassword logging

    Add Turkish language

    Update minetest.po

    

    Update minetest.po

    

    Update minetest.po

    Revert "Fix particles draworder" (issue #2388)

    

    This reverts commit c09d026f0561ee3c6db821a7e193716f724a0e4a.

    This reverts commit c09d026f0561ee3c6db821a7e193716f724a0e4a.

    Change find_surface_nodes_in_area to find_nodes_in_area_under_air

    Add find_surface_nodes_in_area LUA call which permit to only get the nodes which touch air. This permit to massively improve performance for mods like plantlife

    Wrap lines longer than 80 characters in lua_api.txt ...and minor formating changes

    Fix minor memory leak (Android)

    Biome API: Re-calculate biome at every surface in a mapchunk column

    Add camera smoothing and cinematic mode (F8)

    Rename --do-unittests to --run-unittests as @Zeno- and @sfan5 requested

    Optimise MapBlockMesh related functions

    

    Directely or indirectly optimises the following functions:

    

    * MapBlockMesh::MapBlockMesh

    * MapBlockMesh::getTileInfo

    * MapBlockMesh::makeFastFace

    * MapBlockMesh::getSmoothLightCombined

    Directely or indirectly optimises the following functions:

    

    * MapBlockMesh::MapBlockMesh

    * MapBlockMesh::getTileInfo

    * MapBlockMesh::makeFastFace

    * MapBlockMesh::getSmoothLightCombined

    * MapBlockMesh::MapBlockMesh

    * MapBlockMesh::getTileInfo

    * MapBlockMesh::makeFastFace

    * MapBlockMesh::getSmoothLightCombined

    * MapBlockMesh::getTileInfo

    * MapBlockMesh::makeFastFace

    * MapBlockMesh::getSmoothLightCombined

    * MapBlockMesh::makeFastFace

    * MapBlockMesh::getSmoothLightCombined

    * MapBlockMesh::getSmoothLightCombined

    Fix wrapDegrees family of functions

    

    wrapDegrees() (renamed to modulo360f)

    wrapDegrees_0_360

    wrapDegrees_180

    

    Minor errors were present in previous versions; see issue #2328

    wrapDegrees() (renamed to modulo360f)

    wrapDegrees_0_360

    wrapDegrees_180

    

    Minor errors were present in previous versions; see issue #2328

    wrapDegrees_0_360

    wrapDegrees_180

    

    Minor errors were present in previous versions; see issue #2328

    wrapDegrees_180

    

    Minor errors were present in previous versions; see issue #2328

    Minor errors were present in previous versions; see issue #2328

    Add src/network/CMakeFiles/ and src/client/CMakeFiles to gitignore

    Disallow object:remove() if the object is a player

    

    Rebased by Zeno- (conflict in lua_api.txt)

    Rebased by Zeno- (conflict in lua_api.txt)

    Fix serialization of floating point numbers

    Improve FindIrrlicht.cmake module

    

    Linux distributions prefer to link against a shared version of the Irrlicht

    engine instead of using embedded code copies of the same. Search for this

    shared version first and use that but fall back to the static version if it

    does not exist.

    

    This also fixes https://github.com/minetest/minetest/issues/2163

    Linux distributions prefer to link against a shared version of the Irrlicht

    engine instead of using embedded code copies of the same. Search for this

    shared version first and use that but fall back to the static version if it

    does not exist.

    

    This also fixes https://github.com/minetest/minetest/issues/2163

    engine instead of using embedded code copies of the same. Search for this

    shared version first and use that but fall back to the static version if it

    does not exist.

    

    This also fixes https://github.com/minetest/minetest/issues/2163

    shared version first and use that but fall back to the static version if it

    does not exist.

    

    This also fixes https://github.com/minetest/minetest/issues/2163

    does not exist.

    

    This also fixes https://github.com/minetest/minetest/issues/2163

    This also fixes https://github.com/minetest/minetest/issues/2163

    Add mod.conf file support This new file only permits to specify a mod name for now

    Fix android build

    Fix some memory leaks on packet sending.

    Move hex.h to util/

    Fix particles draworder

    Move sha1.hpp and base64.hpp to util/

    Use skin font for usernames (fixes #2363)

    Use proper CMakeLists.txt for network and client directories

    Update Japanese Translation

    

    ok @Zeno- @nerzhul

    ok @Zeno- @nerzhul

    Unit tests must be done at integration process.

    

    * Remove --enable-unittests and --disable-unittests and add --do-unittests function

    * --do-unittests function will exit 0 on success.

    * minetest and minetestserver binaries are launched with --do-unittests in travis build.

    * Remove --enable-unittests and --disable-unittests and add --do-unittests function

    * --do-unittests function will exit 0 on success.

    * minetest and minetestserver binaries are launched with --do-unittests in travis build.

    * --do-unittests function will exit 0 on success.

    * minetest and minetestserver binaries are launched with --do-unittests in travis build.

    * minetest and minetestserver binaries are launched with --do-unittests in travis build.

    Mgv5: Remove blobgen. Remove crumble and wetness noises

    

    Add large pseudorandom caves below -256

    De-link terrain level from water_level

    Cavegen: Mgv5 large cave code

    Add large pseudorandom caves below -256

    De-link terrain level from water_level

    Cavegen: Mgv5 large cave code

    De-link terrain level from water_level

    Cavegen: Mgv5 large cave code

    Cavegen: Mgv5 large cave code

    update README.txt

    

    * prefix apt-get with sudo

    * git clone minetest_game without going to folder

    * execute minetest binary without going into bin folder

    * prefix apt-get with sudo

    * git clone minetest_game without going to folder

    * execute minetest binary without going into bin folder

    * git clone minetest_game without going to folder

    * execute minetest binary without going into bin folder

    * execute minetest binary without going into bin folder

    Typo fix in networkprotocol.h

    

    InventoryAction is in inventorymanager.h

    InventoryAction is in inventorymanager.h

    Uncomment version patch field

    Bump version to 0.4.12

    Add modname convention checking

    

    Fixes #2037

    Fixes #2037

    Server: announce MIN/MAX protocol version supported to serverlist. Client: check serverlist

    

    Client now informs about incompatible servers from the list, this permits to prevent the protocol movements.

    Server announces its supported protocol versions to master server

    Client now informs about incompatible servers from the list, this permits to prevent the protocol movements.

    Server announces its supported protocol versions to master server

    Server announces its supported protocol versions to master server

    Increase default font_size

    Fix font_size under windows

    Use fixed size for builtin menus on non-android platforms

    Update missing files for Android.mk

    Fix unused (and so, broken) enable_rollback_recording. This option must be reloaded at server loop but loaded when server starts, for data consistency (not a hot load variable)

    ok @ShadowNinja

    ok @ShadowNinja

    Android build fix

    Fix map_seed not changed when creating a new world after login to another

    Change many useless std::list into Environment class (m_players), ABMHandler and ActiveBlockList::update

    This improve looping performances.

    This improve looping performances.

    Grab GUIChatConsole::m_font, fixes segfault when changing font_size

    Replace std::list by std::vector into ClientMap::updateDrawList, Map::timerUpdate and ServerMap::save().

    This will speedup the loop reading into those functions

    This will speedup the loop reading into those functions

    Replace std::list by std::vector into timerUpdate calls

    Ignore old entities from 0.3.

    Remove old comment from Network Rework Patch 2/4

    Replace std::list by std::vector into ServerMap::listAllLoadableBlocks ServerMap::listAllLoadedBlocks and their database backends.

    This adds a speedup on database migration and /clearobjects command

    This adds a speedup on database migration and /clearobjects command

    SAO: re-add old ActiveObjectTypes for a future migration layer

    SAO work: ActiveObject types & SAO cleanup * Replace u8 types with ActiveObjectType. * Merge content_object.h into activeobject.h * Remove DummyLoadSAO, it's now unused. * Remove ItemSAO, it's also unused

    Add player direction to on-screen debug text

    

    (PR Modified slightly)

    (PR Modified slightly)

    Add LevelDB and redis to Travis Linux builds

    Performance Improvement: Use a cache which caches result for getFacePositions.

    This greatly reduce the number of std::list generated by caching the result, which is always constant for each radius selected.

    In the callgrind map, you will see original:

      * 3.3M calls to std::list for 9700 calls to getFacePositions

    In the modified version, you will see:

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

    This greatly reduce the number of std::list generated by caching the result, which is always constant for each radius selected.

    In the callgrind map, you will see original:

      * 3.3M calls to std::list for 9700 calls to getFacePositions

    In the modified version, you will see:

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

    In the callgrind map, you will see original:

      * 3.3M calls to std::list for 9700 calls to getFacePositions

    In the modified version, you will see:

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

      * 3.3M calls to std::list for 9700 calls to getFacePositions

    In the modified version, you will see:

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

    In the modified version, you will see:

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

      * 3.3K calls to std::list for 6900 call to getFacePositions

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

    Callgrind map is here: #2321

    

    it's a huge performance improvement to l_find_node_near

    it's a huge performance improvement to l_find_node_near

    [Patch 2/4] Network rework: packet writing, sending and cleanups

    

    NetworkPacket.cpp:

    * Remove some deprecated functions, we must use streaming interface

    * m_data converted from u8* to std::vector<u8>

    * Add an exporter to forge packet to Connection object

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    NetworkPacket.cpp:

    * Remove some deprecated functions, we must use streaming interface

    * m_data converted from u8* to std::vector<u8>

    * Add an exporter to forge packet to Connection object

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove some deprecated functions, we must use streaming interface

    * m_data converted from u8* to std::vector<u8>

    * Add an exporter to forge packet to Connection object

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * m_data converted from u8* to std::vector<u8>

    * Add an exporter to forge packet to Connection object

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Add an exporter to forge packet to Connection object

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * implement operator << std::wstring. n

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * implement operator << std::string

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * dynamic resize when write packet content.

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * fix string writing and performances.

    * create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

      * Reliability

      * Transmit channel

    * Implement putRawString for some ugly char (_INIT packet), and use it.

    * Many packet read and write migrated

    * Implement oldForgePacket to interface writing with current connection

    * fix U8/char/bool writing

    * fix string writing and performances.

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * add some missing functions

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Use v3s16 read instead of reading x,y,z separately

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Add irr::video::SColor support into packets

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Add some missing handlers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Add a template function to increase offset

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Throw a serialization error on packet reading (must be improved)

    

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    PacketFactories:

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Create ServerCommandFactory, used by client to get useful informations about packet processing (sending).

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Create ClientCommandFactory, used by server to get useful informations about packet processing (sending).

    

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Client.cpp:

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * implement NetworkPacket ::Send interface.

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Move packet handlers to a dedicated file

    * Remove Client::Send(SharedBuffer)

    

    Server.cpp:

    * implement NetworkPacket ::Send interface.

    * Rewrite all packets using NetworkPacket

    * Move packet handlers to a dedicated file

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove Server::Send(SharedBuffer)

    

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    ClientIface.cpp:

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove sendToAll(SharedBuffer<u8>)

    

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Connection.hpp rework:

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove duplicate include

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove duplicate negation

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove a useless variable

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Improve code performance by using a m_peers_list instead of scanning m_peers map

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove Connection::Send(SharedBuffer)

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Fix useafterfree into NetworkPacket Sending

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove unused Connection::sendToAll

    

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Test.cpp:

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Remove dead code

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Update tests to use NetworkPackets

    

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Misc:

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * add new wrappers to Send packets in client, using NetworkPacket

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Add NetworkPacket methods for Connection

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * coding style fix

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * dead code since changes cleanup

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Use v3s16 read instead of reading x,y,z separately in some packets

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Use different files to handle packets received by client and server

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    * Cleanup: Remove useless includes

    

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    ok @Zeno-

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Tested by @Zeno- @VanessaE and @nerzhul on running servers

    Fix minetest.item_eat's replace_with_item, fixes #2292

    Fix unit test if there isn't a localhost address (for example FreeBSD jails), second part

    Fix unit test if there isn't a localhost address (for example FreeBSD jails)

    Only do the IPv6 unit test if IPv6 is enabled

    Updated Spanish translations

    Fix issue #2278, Connection sent before address data loading

    Re-apply 4a6582c13c36cab457b78f32338c6bb4ab9ea58b broken since 146f77fdb750833c649de7159a0833c398e14a4d

    Fix crash on passing false as value in table to table.copy(t)

    

    Fixes #2293.

    Fixes #2293.

    Suppress CGUITTFONT build warnings

    Add german and french translation for minetest.desktop

    This fixes #1573

    This fixes #1573

    Update czech translation

    Minor fixes in translations

    Fix gettext on MSVC

    Fix .zip extraction (mod store)

    main.cpp rework * Move ClientLauncher class to a dedicated file * ClientLauncher now owns print_video_modes and speed_tests functions (they are only called by him) * Move GameParams to shared/gameparams.h because it's shared between server and client and launcher need to know it * Move InputHandlers class to client/inputhandler.h * Cleanup includes

    Fix store.lua bug: default screenshot

    Fix tab_mods.lua: default screenshot patch

    

    https://forum.minetest.net/viewtopic.php?f=6&t=11201

    Fixed this bug.

    https://forum.minetest.net/viewtopic.php?f=6&t=11201

    Fixed this bug.

    Fixed this bug.

    Remove unused variables to make clang happy

    Small changes in the style of controls

    Make Clang happy with lua lauxlib.c.

    No functionnal change

    No functionnal change

    Enable LUA_USE_POSIX if possible in bundled Lua

    

    Fixes warning:

    src/lua/src/loslib.c:60: Warning: the use of `tmpnam' is dangerous, better use `mkstemp'

    Fixes warning:

    src/lua/src/loslib.c:60: Warning: the use of `tmpnam' is dangerous, better use `mkstemp'

    src/lua/src/loslib.c:60: Warning: the use of `tmpnam' is dangerous, better use `mkstemp'

    Fix Android compile warning

    Fix 'Download complete' dialog in the mods store

    Don't permit to open inventory is playerCAO isn't present. This prevent to open an empty inventory at player load. ok @zeno-

    Fix issue #2279. ok @zeno-

    Fix Android build since a704c04f00bfea4b77550169fa08105c2ee0dfd0Oxh. ok @zeno-

    Remove workaround in itemdef.cpp to enable/disable/enable "enable_shaders" setting

    * Increase performance (client)

    * Avoid changing a global value to solve a local problem

    * Increase performance (client)

    * Avoid changing a global value to solve a local problem

    * Avoid changing a global value to solve a local problem

    Fix Android build of narrow_to_wide

    Revert "Remove workaround in itemdef.cpp to enable/disable/enable "enable_shaders" setting"

    

    This reverts commit d25ff8fd2592f457b91e8a61240694af3902d23f.

    This reverts commit d25ff8fd2592f457b91e8a61240694af3902d23f.

    Remove workaround in itemdef.cpp to enable/disable/enable "enable_shaders" setting

    * Increase performance (client)

    * Avoid changing a global value to solve a local problem

    * Increase performance (client)

    * Avoid changing a global value to solve a local problem

    * Avoid changing a global value to solve a local problem

    Fix FTBFS on GNU/Hurd platform

    

    Minetest fails to build on GNU/Hurd due to a name clash with OSX/Apple,

    both are defining the __MACH__ keyword. This commit fixes the issue.

    Minetest fails to build on GNU/Hurd due to a name clash with OSX/Apple,

    both are defining the __MACH__ keyword. This commit fixes the issue.

    both are defining the __MACH__ keyword. This commit fixes the issue.

    Increase MapBlock::actuallyUpdateDayNightDiff() performance by 2-8x. ok @celeron55

    

    Before patch, function consumes up to ~8% of the main server loop. After, ~0% (below level of 2 places of significance)

    Before patch, function consumes up to ~8% of the main server loop. After, ~0% (below level of 2 places of significance)

    Replace getPlayer(playername) by getPlayer(peer_id) in some possible cases. ok @Zeno-

    README.txt: Simplify initial build steps by using git to fetch sources

    

    Also simplify wget steps and apt-get install zlib1g-dev libjsoncpp-dev

    Also simplify wget steps and apt-get install zlib1g-dev libjsoncpp-dev

    Craftdef.cpp: Improve loop and mathematics for CraftDefinitionShaped::check

    Fix Exit to OS button focus in Pause Menu

    Network Layer 7 rework (Packet handling)

    

    * Move networkcode to a dedicated directory

    * Rename clientserver.h to network/networkprotocol.h (Better name) and sanitize some includes

    * Create object NetworkPacket

      * It stores command (opcode) and data separated

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

    * Move networkcode to a dedicated directory

    * Rename clientserver.h to network/networkprotocol.h (Better name) and sanitize some includes

    * Create object NetworkPacket

      * It stores command (opcode) and data separated

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

    * Rename clientserver.h to network/networkprotocol.h (Better name) and sanitize some includes

    * Create object NetworkPacket

      * It stores command (opcode) and data separated

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

    * Create object NetworkPacket

      * It stores command (opcode) and data separated

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * It stores command (opcode) and data separated

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * It also stores peer_id

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * Data reading can be done by using a streaming interface

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

    * Change packet routing analysis

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * Remove old conditional analysis

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * Now uses function pointed analysis and add connection state ({Client,Server}::handlers)

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * Connection state permit to categorize condition to handle before analyze packets

      * Create a handler for depreciated messages, instead of duplicating code

      * Create a handler for depreciated messages, instead of duplicating code

    Hud: Modify Y-positioning of health/breath starbars to prevent overlapping with Hotbar

    Fix rebase bug, make render loop use cache setting

    Fix warnings in CGUITTFont.cpp

    Fix gettext

    Reduce gettext wide/narrow and string/char* conversions

    Fix translation memory leak

    Fix translation finding of overlay messages

    Add wstrgettext to list of translation update keywords

    Mgv7 mountains: Remove divide by zero code that creates vast walls

    Conf.example: Add mgv7 cave1, cave2 noiseparams

    Mgv7: Make skipping of mountain code relative to y=0 not water level

    Mountain noise offset now -0.6 to compensate

    Tune chance of large caves

    Conf.example: Add mgv7 cave1, cave2 noiseparams

    Mgv7: Make skipping of mountain code relative to y=0 not water level

    Mountain noise offset now -0.6 to compensate

    Tune chance of large caves

    Mgv7: Make skipping of mountain code relative to y=0 not water level

    Mountain noise offset now -0.6 to compensate

    Tune chance of large caves

    Mountain noise offset now -0.6 to compensate

    Tune chance of large caves

    Tune chance of large caves

    Fix performance regression

    Give full breath after death

    Fix dying of lava causes repeated death This is a bugfix for issue #81

    Change assignment to global in a function to warning

    Suppress 4 gcc 4.9.2 warnings in CGUITTFont.cpp

    Fix download URL

    Fix getCraftRecipe returing wrong reciep due to way to unspecific output matching

    Fix some MSVC-specific warnings and add debug path as an MSVC directory

    Create minidump on fatal Win32 exceptions

    

    Remove software exception translator function, simplifying exception handler

    macros.  FatalSystemExceptions are left unhandled.

    Remove software exception translator function, simplifying exception handler

    macros.  FatalSystemExceptions are left unhandled.

    macros.  FatalSystemExceptions are left unhandled.

    Randomly generate seed if field blank for any Settings instance

    Fix NDT_GLASSLIKE normals

    

    Remove inventorycube() workaround for default:glass in minimal game

    Remove inventorycube() workaround for default:glass in minimal game

    Fix local map saving when joining a local server from the server tab

    

    Disables local map saving for all local server types

    

    See: https://github.com/minetest/minetest/issues/2024

    Disables local map saving for all local server types

    

    See: https://github.com/minetest/minetest/issues/2024

    See: https://github.com/minetest/minetest/issues/2024

    Fix uninitialized variable m_database_delete in Database_SQLite3

    

    This fixes issue #2219

    This fixes issue #2219

    Prevent null concatenation when /deleteblocks is provided an incorrect format

    Write common mapgen params to map_meta.txt on world initialization

    Fix a crash (assert) when client set serial version < 24 in INIT

    

    When SER_FMT_VER_LOWEST is set to zero, then the test is stupid in INIT because all client works. In mapblock we check if client's serialization version is < 24, but if client sent serialization version < 24 (15 for example) the server set it and tried to send nodes, then BOOM

    

    To resolve the problem:

    * Create a different CLIENT_MIN_VERSION to handle this problem

    * Remove the exception

    * Use an assert in case of bad developer code

    When SER_FMT_VER_LOWEST is set to zero, then the test is stupid in INIT because all client works. In mapblock we check if client's serialization version is < 24, but if client sent serialization version < 24 (15 for example) the server set it and tried to send nodes, then BOOM

    

    To resolve the problem:

    * Create a different CLIENT_MIN_VERSION to handle this problem

    * Remove the exception

    * Use an assert in case of bad developer code

    To resolve the problem:

    * Create a different CLIENT_MIN_VERSION to handle this problem

    * Remove the exception

    * Use an assert in case of bad developer code

    * Create a different CLIENT_MIN_VERSION to handle this problem

    * Remove the exception

    * Use an assert in case of bad developer code

    * Remove the exception

    * Use an assert in case of bad developer code

    * Use an assert in case of bad developer code

    Fix missing map_meta.txt error when creating new worlds

    

    A missing map_meta.txt should be treated simply as if there were a blank file.

    A missing map_meta.txt should be treated simply as if there were a blank file.

    Revert "Fix a crash (assert) when client set serial version < 24 in INIT command SER_FMT_VER_LOWEST is set to zero, then the test is stupid in INIT because all client works. In mapblock we check if client's serialization version is < 24, but if client sent serialization version < 24 (15 for example) the server set it and tried to send nodes, then BOOM"

    

    nerzhul is (may?) be working on a new solution. For the moment this is reverted because old worlds cannot be loaded (see discussion on github for the commit).

    

    This reverts commit 800d19270250bb13cc6b2d330199815bf8e96446.

    nerzhul is (may?) be working on a new solution. For the moment this is reverted because old worlds cannot be loaded (see discussion on github for the commit).

    

    This reverts commit 800d19270250bb13cc6b2d330199815bf8e96446.

    This reverts commit 800d19270250bb13cc6b2d330199815bf8e96446.

    Fix imprecise serialization of large numbers

    Suppress MSVC warning in chat.cpp

    Settings fixes Make the GameGlobalShaderConstantSetter use the settings callback (8% perf improvement in game loop) Ensure variable is set Ensure settings callback is threadsafe

    Revert "Make the GameGlobalShaderConstantSetter use the settings callback (8% perf improvement in game loop)"

    

    This reverts commit a555e2d9b0ccee452996381a44677b8bec210036.

    This reverts commit a555e2d9b0ccee452996381a44677b8bec210036.

    Fix a crash (assert) when client set serial version < 24 in INIT command SER_FMT_VER_LOWEST is set to zero, then the test is stupid in INIT because all client works. In mapblock we check if client's serialization version is < 24, but if client sent serialization version < 24 (15 for example) the server set it and tried to send nodes, then BOOM

    Fix uninitialized variable Server::m_next_sound_id

    Fix unitialised variable occassionally being used

    Make the GameGlobalShaderConstantSetter use the settings callback (8% perf improvement in game loop)

    Amend the settings callback to support userdata

    Amend the settings callback to support userdata

    Mgv5: Skip calculation of filler, heat and humidity perlinmaps in underground mapchunks

    Send real port to server list

    Mgv7 generateRidgeTerrain: Make river generation relative to water level

    Remove widthn and make nridge zero underwater

    Remove widthn and make nridge zero underwater

    Mgv7: Speed optimise calculateNoise and generateRidgeTerrain

    Remove unnecessary range limiting of persistmap

    Skip calculation of filler, mountain, ridge, heat and humidity perlinmaps in underground mapchunks

    Skip generateRidgeTerrain in underground mapchunks

    Remove unnecessary range limiting of persistmap

    Skip calculation of filler, mountain, ridge, heat and humidity perlinmaps in underground mapchunks

    Skip generateRidgeTerrain in underground mapchunks

    Skip calculation of filler, mountain, ridge, heat and humidity perlinmaps in underground mapchunks

    Skip generateRidgeTerrain in underground mapchunks

    Skip generateRidgeTerrain in underground mapchunks

    Mgv7 generateRidgeTerrain: Enable rangelim of widthn to remove abysses, calculate widthn later in function

    Reduce width to 0.2

    Carve river channels in deeper waters

    Reduce width to 0.2

    Carve river channels in deeper waters

    Carve river channels in deeper waters

    Allow filter and mipmap drop down menues to be translated

    Improve desktop file

    Update german translation

    Added ratio argument to colorize, removed the weird alpha-based ratio.

    Fix hyphen used as minus sign

    Update Spanish language

    

    I am a native speaker. I have corrected all the mistakes I've found.

    

    Update Spanish language

    I am a native speaker. I have corrected all the mistakes I've found.

    

    Update Spanish language

    Update Spanish language

    

    I am a native speaker. I have corrected all the mistakes I've found.

    

    Update Spanish language

    Mapgen V5: Various improvements

    

    Caves check for biome nodes, only excavate stone under water level

    Unease caves noises, use MT0.3 parameters

    Blobgen after cavegen

    Biomegen: remove 'is replaceable content' bool

    Caves check for biome nodes, only excavate stone under water level

    Unease caves noises, use MT0.3 parameters

    Blobgen after cavegen

    Biomegen: remove 'is replaceable content' bool

    Unease caves noises, use MT0.3 parameters

    Blobgen after cavegen

    Biomegen: remove 'is replaceable content' bool

    Blobgen after cavegen

    Biomegen: remove 'is replaceable content' bool

    Biomegen: remove 'is replaceable content' bool

    Fix all warnings and remove -Wno-unused-but-set cflag

    Add SemiDebug (-O1 with debug symbols) build mode and do not optimize Debug at all

    

    Add -Wall to Debug modes for all compilers and -Wabi for non-MSVC

    Use /Ox for MSVC Release mode (potentially higher optimization than /O2)

    Add -Wall to Debug modes for all compilers and -Wabi for non-MSVC

    Use /Ox for MSVC Release mode (potentially higher optimization than /O2)

    Use /Ox for MSVC Release mode (potentially higher optimization than /O2)

    Reorganize supported video driver query mechanisms

    Revert "Fix style on settings tab"

    

    This reverts commit 7b17b9059e30cef384ecca37feec87cdcdfd39b8.

    This reverts commit 7b17b9059e30cef384ecca37feec87cdcdfd39b8.

    Revert "Fix bug in debug build"

    

    This reverts commit 839c4a99cddcacdc19dee42286b7029c4c1e7800.

    This reverts commit 839c4a99cddcacdc19dee42286b7029c4c1e7800.

    Fix bug in debug build

    

    -O1 results in executables that are completely useless for actuall debugging

    -O1 results in executables that are completely useless for actuall debugging

    Fix style on settings tab

    Fix use of uninit data in Sky and (potentially) GUIChatConsole constructors

    

    Clean up nearby code a bit

    

    As a small side effect, it is now possible to add a background texture

    to the chat console by simply providing background_chat.jpg, it is no

    longer necessary to also add "console_color =" to minetest.conf.

    Clean up nearby code a bit

    

    As a small side effect, it is now possible to add a background texture

    to the chat console by simply providing background_chat.jpg, it is no

    longer necessary to also add "console_color =" to minetest.conf.

    As a small side effect, it is now possible to add a background texture

    to the chat console by simply providing background_chat.jpg, it is no

    longer necessary to also add "console_color =" to minetest.conf.

    to the chat console by simply providing background_chat.jpg, it is no

    longer necessary to also add "console_color =" to minetest.conf.

    longer necessary to also add "console_color =" to minetest.conf.

    Fix particles causing unitialised data being used due to use of incorrect union member

    Water fixes

    

    Change must_reflow to a deque

    Add overload for MapBlock::raiseModified that takes a const char*. This is a speed improvement.

    Comment out unused variable

    Optimisations to block offset calculations

    Change must_reflow to a deque

    Add overload for MapBlock::raiseModified that takes a const char*. This is a speed improvement.

    Comment out unused variable

    Optimisations to block offset calculations

    Add overload for MapBlock::raiseModified that takes a const char*. This is a speed improvement.

    Comment out unused variable

    Optimisations to block offset calculations

    Comment out unused variable

    Optimisations to block offset calculations

    Optimisations to block offset calculations

    Create empty default constructor for MapNode

    Mgv7: Replace small pseudorandom caves with 3D noise tunnels. Fewer large caves

    Fix NodeMetadataList loosing memory on deserialize due to invalid clear map call instead of clear

    Fix entitiy WieldMeshSceneNode not freed due to additional grab

    Make minor style change(unescape_string())

    Fix missing return in Database_Dummy::deleteBlock

    Optimize bumpmapping mathematics

    

    OpenGL_vertex:

    * bufferize a duplicate calcul

    * Factorize vertexes

    OpenGL_vertex:

    * bufferize a duplicate calcul

    * Factorize vertexes

    * bufferize a duplicate calcul

    * Factorize vertexes

    * Factorize vertexes

    Fix potential out-of-bounds array index

    Simplify deleteblocks chat command argument parsing

    

    Add optional core.pos_to_string decimal place rounding

    Move core.string_to_pos to builtin/common/misc_helpers.lua for consistency

    Add optional core.pos_to_string decimal place rounding

    Move core.string_to_pos to builtin/common/misc_helpers.lua for consistency

    Move core.string_to_pos to builtin/common/misc_helpers.lua for consistency

    Add ability to delete MapBlocks from map

    

    Also add a Lua API and chatcommand for this

    Also add a Lua API and chatcommand for this

    Initialize noise ptr on creation (fixes crash if OreVein deleted before use)

    Fix unescape_string removing all backslashes

    Fix typo in `serialize.lua`.

    Android, build: Update curl to 7.40.00

    Add missing return value for filter/mipmap dropdown in mainmenu

    Revert "Optimize bumpmapping mathematics"

    

    This reverts commit 148fffb0f23fa437c67639ff3cc69177fb71d76a.

    This reverts commit 148fffb0f23fa437c67639ff3cc69177fb71d76a.

    Small tweaking (alignement - client tab)

    Optimize bumpmapping mathematics

    

    OpenGL_vertex:

    * bufferize a duplicate calcul

    * Factorize vertexes

    OpenGL_vertex:

    * bufferize a duplicate calcul

    * Factorize vertexes

    * bufferize a duplicate calcul

    * Factorize vertexes

    * Factorize vertexes

    Change UniqueQueue to use a queue and a set.

    Reorganizing client and server tabs

    Added configurable ambient_occlusion_gamma. Default is 2.2 (same as previous hardcoded values).

    Fix use of uninitialized data

    builtin: Unify register wrapper functions and wrap clear_registered_* functions too

    Performance fixes.

    Add VoxelArea::hasEmptyExtent

    Fix Android crash on keyboard connection change.

    Attempt to fix occasional issue of uninitialized MapBlock data

    Prevent transform of noise3d result in getBlockSeed2

    Mapgen V5: Move cave generation from base terrain loop to optional function

    

    This fixes biome surface in tunnels

    This fixes biome surface in tunnels

    Remove builtin_biome.lua from builtin and add simple biome minimal

    Lua-api.txt: Document that paramtype='light' results in light propagation with attenuation and is essential for a light source to spread it's light

    Disable sound and key binding settings in "pause" menu on android

    Fix invalid stepheight increase calculation on android

    Increase stepheight on android by 0.5 to smoothen movement

    Fix clipping rectangle of GUITable row highlight

    Change default font sizes to 14(freetype) and 10(non-freetype)

    Set default value for ENABLE_REDIS to 0

    Revert "Switch default scaling factor to 0.75 as most ppl seem to have 96dpi screens instead of previous assumed 72"

    which ain't required any longer as fonts are no longer autoadjusted

    This reverts commit 7ad17a25f4dfc81427df54d5c855b40b4472d517.

    which ain't required any longer as fonts are no longer autoadjusted

    This reverts commit 7ad17a25f4dfc81427df54d5c855b40b4472d517.

    This reverts commit 7ad17a25f4dfc81427df54d5c855b40b4472d517.

    Remove automatic consistent formspec size <-> font size (now has to be done manually)

    Set builtin formspecs to autoscale in order to get consistent formspec look and feel

    Uncouple label positioning from font size (May break some formspecs but is required to allow manual font adjustment)

    Set builtin formspecs to autoscale in order to get consistent formspec look and feel

    Uncouple label positioning from font size (May break some formspecs but is required to allow manual font adjustment)

    Uncouple label positioning from font size (May break some formspecs but is required to allow manual font adjustment)

    Removed superfluous facedir check in mapblock_mesh.cpp

    Fix logic of checkbox formspec element validity checking

    Fix memory leaks due to messed up memory handling for particles as well as their spawners

    Split gui_scaling to gui_scaling + hud_scaling as those elements need different handling on some devices

    Fix facedir > 23 causes segfault in client

    See issue #2017

    Applied kahrl's gist

    See issue #2017

    Applied kahrl's gist

    Applied kahrl's gist

    Switch default scaling factor to 0.75 as most ppl seem to have 96dpi screens instead of previous assumed 72

    Remove included SQLite3

    Add SQLite3 libraries to buildbot

    Return step smoothing value to 23

    Mapgen V6: Re-enable liquid flowing

    Remove accidentally added non-ft font files

    Fix armv7 using arm arch while arm uses armv7

    Fix direction property of HUD

    Fix emerge thread not cleaning up emerge queue on shutdown

    Switch android build to external sqlite3

    Fix andorid build error

    Implement X11 dpi autodetection

    Fix buildbot (was broken by 04a1a446cf845a0db80d39fd0e42771aa07e4492)

    Fixes for android

    Copy only minetest_game to apk by default

    Don't copy .git and .svn folders to apk

    Fix bouncing asset copy scrollbar due to long filepaths

    Reenable font scaling to fix broken menu on high dpi screens

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Copy only minetest_game to apk by default

    Don't copy .git and .svn folders to apk

    Fix bouncing asset copy scrollbar due to long filepaths

    Reenable font scaling to fix broken menu on high dpi screens

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Don't copy .git and .svn folders to apk

    Fix bouncing asset copy scrollbar due to long filepaths

    Reenable font scaling to fix broken menu on high dpi screens

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Fix bouncing asset copy scrollbar due to long filepaths

    Reenable font scaling to fix broken menu on high dpi screens

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Reenable font scaling to fix broken menu on high dpi screens

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Implement minetest loglevel to android loglevel mapping

    Disable touch digging while moving around

    Disable touch digging while moving around

    Add registered_ores and registered_decorations

    Prevent client crashing if an NDT_AIRLIKE node is dropped

    

    The player dropping the node can either be themselves or another player (i.e. without this fix you can crash other people's clients)

    Thanks CWz for reporting the issue

    The player dropping the node can either be themselves or another player (i.e. without this fix you can crash other people's clients)

    Thanks CWz for reporting the issue

    Thanks CWz for reporting the issue

    Shorten ManualMapVoxelManipulator to MMVManip

    Optionally specify propagateSunlight area in calcLighting

    

    This fixes the Mapgen V5 calcLighting segfault

    This fixes the Mapgen V5 calcLighting segfault

    Fix off-by-one error in `string:split` implementation.

    Exclude vertical mapblock borders when setting light

    NodeDef: Clear NodeResolver related entries too in clear()

    Add minetest.generate_ores() and minetest.generate_decorations()

    Fix broken android version due to new openssl not linking correct to curl

    NodeResolver: Perform callback immediately if node registration phase finished

    

    Also add NodeResolver callbacks on the client

    Also add NodeResolver callbacks on the client

    Fix forgotten favourite list image update of simple menu

    Re-add lost way to debug simple menu on PC

    Switch to official openssl version and update to 1.0.1j

    Remove freezemelt documentation from lua_api.txt

    Remove freezemelt (the remainder of proller nonsense)

    Add warning about using deprecated fields in Mapgen API and update docs

    LuaVoxelManip: Error when given out-of-bounds area

    Lighting: Fix nearly all issues

    

    The cause of a single light source seemingly being lit without spread

    was due to its creation in the +Y mapblock boundary layer during map

    generation, which was ignored as the overtop.  This overtop explicitly

    needs to be omitted during sunlight propagation, however.  To accomplish

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    The cause of a single light source seemingly being lit without spread

    was due to its creation in the +Y mapblock boundary layer during map

    generation, which was ignored as the overtop.  This overtop explicitly

    needs to be omitted during sunlight propagation, however.  To accomplish

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    was due to its creation in the +Y mapblock boundary layer during map

    generation, which was ignored as the overtop.  This overtop explicitly

    needs to be omitted during sunlight propagation, however.  To accomplish

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    generation, which was ignored as the overtop.  This overtop explicitly

    needs to be omitted during sunlight propagation, however.  To accomplish

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    needs to be omitted during sunlight propagation, however.  To accomplish

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    this, Mapgen::calcLighting() was split into separate functions taking

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    separate parameters.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    Additionally, do not diminish light too early during spread.  This fixes the

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    output inconsistency between Map::updateLighting and Mapgen::calcLighting.

    Update bundled SQLite to 3.8.7.4

    Deduplicate code and use stdlib in string functions

    Fix crash if NodeResolver destroyed before pending any node resolutions

    Rewrite lua_api.txt into Markdown format

    

    Just Markdown, no variant of it. File name intentionally

    not changed to “lua_api.md” because of fear to break references

    to that file. The file can still be renamed later.

    Just Markdown, no variant of it. File name intentionally

    not changed to “lua_api.md” because of fear to break references

    to that file. The file can still be renamed later.

    not changed to “lua_api.md” because of fear to break references

    to that file. The file can still be renamed later.

    to that file. The file can still be renamed later.

    More consistent progress bar from 0-100 on startup

    Speedup initial android startup on some devices by factor 10 or more

    Fix rounding error in font size making main menu and in game font sizes inconsistent

    MgV5/6/7: Generate dungeons above water level

    

    Use/add stone_surface_max_y to speed-optimise/guide dungeon generation

    MgV7: Don't let mountain terrain chop dungeons at mapchunk borders

    Make mountain terrain update stone_surface_max_y for caves in mountains

    Use/add stone_surface_max_y to speed-optimise/guide dungeon generation

    MgV7: Don't let mountain terrain chop dungeons at mapchunk borders

    Make mountain terrain update stone_surface_max_y for caves in mountains

    MgV7: Don't let mountain terrain chop dungeons at mapchunk borders

    Make mountain terrain update stone_surface_max_y for caves in mountains

    Make mountain terrain update stone_surface_max_y for caves in mountains

    Mgv7: Remove range limits on mountain height to enable modification through .conf

    Fix map parameter load order

    Add display_gamma option for client

    Fix endian.h include for FreeBSD

    Cleanup updateCameraDirection and fix random input not working

    Replace instances of height_min/height_max with y_min/y_max to remove ambiguity

    Decoration: Fix default parameter values

    Fix documentation for string functions

    Add support back for resolving group names in NodeResolver

    Fix some lingering code style issues

    Mapgen: Use getBlockSeed2() for blockseeds (much better uniformity)

    Add core.get_mapgen_names() to Main Menu API (and use it)

    

    Also rewrite mapgen registration for static initialization

    Also rewrite mapgen registration for static initialization

    Expose mapgen parameters on scripting init

    

    Add minetest.get_mapgen_params()

    Deprecate minetest.register_on_mapgen_init()

    Add minetest.get_mapgen_params()

    Deprecate minetest.register_on_mapgen_init()

    Deprecate minetest.register_on_mapgen_init()

    Ignore downloaded public serverlist if public_serverlist is false

    

    Fixes #1807: When the server list finishes downloading, the local server

    list resets in certain conditions

    Fixes #1807: When the server list finishes downloading, the local server

    list resets in certain conditions

    list resets in certain conditions

    Center status text for better visibility.

    Add extra buttons to Android GUI. All icons are licensed by freepik.com under CC BY 3.0

    Update Japanese Translation

    

    ok @Zeno- @nerzhul

    Add util/bump_version.sh

    Fix -Wtype-limits warnings and remove disabling of -Wtype-limits

    Print unit test failures to dstream

    FontEngine: Don't use file extension to check font file compatibility

    LuaVoxelManip: Remove blank allocator

    LuaItemStack: Fix and document behavior of set_name, set_count, set_wear, set_metadata

    Fix MSVC compiler warning about passing this pointer in initializer list

    Faster string.split implementation.

    MainMenu: Save 'hide gamemods' and 'hide modpack contents' checkbox state (fixes #1960)

    Skip further loading of client if there was an exit signal

    Decoration: Add height_min and height_max parameters

    

    Also set default height_min/height_max to -31000 and 31000,

    respectively, for ore and biomes

    Also set default height_min/height_max to -31000 and 31000,

    respectively, for ore and biomes

    respectively, for ore and biomes

    Cavegen: Fix copy & paste error (solves #2020)

    Biome API: Add shore top and shore filler nodes, underwater node, water top node. Add water top depth and shore height parameters. Remove water dust node

    Ore: Add Vein ore type

    Ore: Add Blob ore type

    PseudoRandom: Expose constant PSEUDORANDOM_MAX

    LuaVoxelManip: Add option to allocate blank data

    VoxelManipulator: Remove unnecessary deallocation steps

    Set fallback content if resolving content vector requires everything

    Redefine NodeResolver interface and replace with callback mechanism

    Uncomment version patch field

    Bump version to 0.4.11

    Conf.example: Correct grammar and spelling. Shorten some lines. Move a few lines into correct sections. Remove finite liquid reference. Make indentation consistent

    Fix fs::GetRecursiveSubPaths trying to get directory lists for files

    Large increase in performance

    Increase indentation throughout file for clarity. Correct mistakes. Shorten lines. Make more consistent

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    State biome API heat and humidity noise parameters in positional format

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Conf.example: Fix typo

    Update MinGW toolchain downloads used by travis

    Silence misc. warnings

    Make limiting of the reflow liquids queue size optional

    

    If liquid_queue_purge_time == 0 then disable the queue size limiting and make this the default setting

    Additionally, liquid_loop_max now defaults to 100000

    If liquid_queue_purge_time == 0 then disable the queue size limiting and make this the default setting

    Additionally, liquid_loop_max now defaults to 100000

    Additionally, liquid_loop_max now defaults to 100000

    Update mapgen stuff in minetest.conf

    Temporarily fix always bright wieldhand with shaders enabled

    Regenerate server_flags_creative.png from XCF

    Fix weird (and wrong) comment in test.cpp

    lua_api.txt: improve noise documentation. Remove previous eased 3D noise format example

    Re-add hacky fix for underwater grass, to fix mgv7 user's biomes

    Change TileSpec::frames to be std::vector not std::map

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix visual_scale for plantlike nodes (again)

    

    fixes #1989

    

    move the plant to the bottom of its node properly, without affecting its scale.  See isue #1989

    fixes #1989

    

    move the plant to the bottom of its node properly, without affecting its scale.  See isue #1989

    move the plant to the bottom of its node properly, without affecting its scale.  See isue #1989

    Temporarily set default biome in builtin

    

    This should probably be removed when minetest_game has proper biomes.

    If I hear "the whole map is just stone!" again after this, I am going to detonate.

    This should probably be removed when minetest_game has proper biomes.

    If I hear "the whole map is just stone!" again after this, I am going to detonate.

    If I hear "the whole map is just stone!" again after this, I am going to detonate.

    Fix visual_scale for NDT_PLANTLIKE being set too small

    Suppress compiler warning

    Remove manual biome noise translation

    Do not allow the m_transforming_liquid queue to increase until all RAM is consumed

    Fix OSX packaging finally

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Set WM_CLASS window hint for Xorg

    Expose mapgen chunksize in on_mapgen_init callbacks

    Update French translation

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Update Spanish language.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fixes #1687 by extra semaphore retval handle code for OSX

    

    See https://github.com/minetest/minetest/issues/1687#issuecomment-56830173

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    See https://github.com/minetest/minetest/issues/1687#issuecomment-56830173

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix typo in lua_api.txt

    Noise: Don't assume Noise is used for 2D unless gradientMap2D is actually called

    Fix background of creative icon (was black, now transparent)

    Revert "Update Russian translation"

    

    This reverts commit e4e4324a30d6bcac5cc06c74e955e4941b14bd38.

    

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

    This reverts commit e4e4324a30d6bcac5cc06c74e955e4941b14bd38.

    

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            po/minetest.pot

            po/*/minetest.po

            po/*/minetest.po

    Fix misleading error when exiting the client from the main menu

    Provide more info if a subgame is not valid/found

    Update german translation

    LuaPerlinNoiseMap: Fix 3d noise safety check

    Fix segfault when dragging mouse out of mainmenu window (#1910)

    Remove vertlabels from main menu and relayout a bit

    Display serverlist flags as icons

    Update po files

    Update Russian translation

    Update Italian translation

    Fix missing call to std::ostringstream::str

    Fix MSVC compiling warnings and remove an unused texture

    Log: Silence errorstream during unittests

    Use std::string::empty() instead of size() where applicable

    Add basic support for generating API documentation using Doxygen

    

    If CMake is run and Doxygen is found, add a make target called "doc",

    which builds API documention in doc/html. This target is not included

    in the default "all" target, you have to explicitly run "make doc" to

    generate the documentation.

    

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    If CMake is run and Doxygen is found, add a make target called "doc",

    which builds API documention in doc/html. This target is not included

    in the default "all" target, you have to explicitly run "make doc" to

    generate the documentation.

    

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    which builds API documention in doc/html. This target is not included

    in the default "all" target, you have to explicitly run "make doc" to

    generate the documentation.

    

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    in the default "all" target, you have to explicitly run "make doc" to

    generate the documentation.

    

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    generate the documentation.

    

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    If graphviz is installed, in particular, if the "dot" binary is found,

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    doxygen is configured to generate various kinds of diagrams. Note that

    due to this, the first run of doxygen can take a while.

    due to this, the first run of doxygen can take a while.

    Settings: Fix invalid memory access when setting not found in working mem

    NodeResolver: Fix some comments and use const references for params

    Add minetest.clear_registered_decorations() and clear_registered_ores()

    Allow footstep sounds to play for liquid and ladder nodes, making swimming and climbing sounds possible

    Responsive tooltip offset for Android.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix typo in mapblock.h

    LuaPerlinNoiseMap: Prevent invalid memory access when attempting to generate 3d noise with a buffer created for 2d

    Mapgens: Rename m_emerge to prevent name collisions

    Add support for NoiseParams in minetest.get_perlin() and add docs on NoiseParams to lua_api.txt

    Revert "Adjust the values of dirs1 and dirs2 so that rotate_and_place orients textures correctly"

    

    This reverts commit 9878e8de4fdf232ebb77b396766c339786c01218.

    

    See: https://github.com/minetest/minetest/issues/1939 and IRC log for discussion

    This reverts commit 9878e8de4fdf232ebb77b396766c339786c01218.

    

    See: https://github.com/minetest/minetest/issues/1939 and IRC log for discussion

    See: https://github.com/minetest/minetest/issues/1939 and IRC log for discussion

    Settings: Fail on invalid sequence and throw exception for LuaSettings

    Settings: Sanitize value for multiline terminator tokens

    Fix undeclared globals in functions and shorten lines in misc_helpers.lua.

    Clean up Noise macros

    NodeResolver: Fix cancelNode and cancelNodeList

    Noise: Automatically transform noise maps if needed

    Move get_schematic and read_schematic to l_mapgen.cpp

    Biome API: Reduce heat and humidity persistences to 0.5

    Add support for lacunarity in legacy NoiseParams string format

    Add paste command (Ctrl-V) in GUIChatConsole

    Remove get_noiseparams function. read_noiseparams should be used from now on

    Noise: Create a deep copy of NoiseParams

    Settings: Sanitize setting name everywhere, not just LuaSettings

    Rename and repurpose minetest.set_noiseparam_defaults to set_noiseparams

    Settings: Make setting entry group and values mutually exclusive

    

    This greatly reduces the complexity of Settings code.

    Additionally, several memory leaks were fixed.

    This greatly reduces the complexity of Settings code.

    Additionally, several memory leaks were fixed.

    Additionally, several memory leaks were fixed.

    Rewrite fs:GetDirListing(file) by kahrl

    Ignore .name directories and files

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Increase performance of getLight() by at least 2x

    

    Leads to the following increases:

    getSmoothLight() approx.     40% increase

    getTileInfo() approx.        25% increase

    MapBlockMesh::MapBlockMesh() 25-30%

    Leads to the following increases:

    getSmoothLight() approx.     40% increase

    getTileInfo() approx.        25% increase

    MapBlockMesh::MapBlockMesh() 25-30%

    getSmoothLight() approx.     40% increase

    getTileInfo() approx.        25% increase

    MapBlockMesh::MapBlockMesh() 25-30%

    getTileInfo() approx.        25% increase

    MapBlockMesh::MapBlockMesh() 25-30%

    MapBlockMesh::MapBlockMesh() 25-30%

    Fix builds failing on BSD-like (such as OSX) due to an irrlicht bug (temporary fix)

    

    Details:

    - https://sourceforge.net/p/irrlicht/bugs/433/

    - https://github.com/minetest/minetest/issues/1687#issuecomment-61368769

    - https://forum.minetest.net/viewtopic.php?f=42&t=9190&start=125#p159364

    

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    Details:

    - https://sourceforge.net/p/irrlicht/bugs/433/

    - https://github.com/minetest/minetest/issues/1687#issuecomment-61368769

    - https://forum.minetest.net/viewtopic.php?f=42&t=9190&start=125#p159364

    

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    - https://sourceforge.net/p/irrlicht/bugs/433/

    - https://github.com/minetest/minetest/issues/1687#issuecomment-61368769

    - https://forum.minetest.net/viewtopic.php?f=42&t=9190&start=125#p159364

    

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    - https://github.com/minetest/minetest/issues/1687#issuecomment-61368769

    - https://forum.minetest.net/viewtopic.php?f=42&t=9190&start=125#p159364

    

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    - https://forum.minetest.net/viewtopic.php?f=42&t=9190&start=125#p159364

    

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    In case when "settings.h" is included from "emerge.cpp" or

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    "environment.cpp", u64 type has "unsigned long" length because

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    previously <stdint> was included. When "settings.h" is included from

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    "settings.cpp", u64 has "unsigned long long" length because no <stdint>

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    was included previously. This leads to different signatures of "setU64" method

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    and linker cannot find appropriate symbol.

    

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    The best fix of this bug should be done in the Irrlicht, but as hotfix I

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    think this is OK and better than types changing.

    

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    Previously this bug didn't appear because there was no "settings.cpp" file and

    implementation of all methods was done in the header file.

    implementation of all methods was done in the header file.

    Noise: Update Noise::resizeNoiseBuf to account for lacunarity not equal to 2

    Biomes: Make biome heat and humidity noise parameters user-configurable

    Fix compiler warning (signed vs. unsigned)

    Optimize noise implementations

    Fix struct vs. class in forward declarations

    Fix lighting artifacts (Issue #1887).

    Always escape user provided data in mainmenu fields

    Add flags and lacunarity as new noise parameters

    

    Add 'absolute value' option to noise map functions

    Extend persistence modulation to 3D noise

    Extend 'eased' option to noise2d_perlin* functions

    Some noise.cpp formatting fixups

    Add 'absolute value' option to noise map functions

    Extend persistence modulation to 3D noise

    Extend 'eased' option to noise2d_perlin* functions

    Some noise.cpp formatting fixups

    Extend persistence modulation to 3D noise

    Extend 'eased' option to noise2d_perlin* functions

    Some noise.cpp formatting fixups

    Extend 'eased' option to noise2d_perlin* functions

    Some noise.cpp formatting fixups

    Some noise.cpp formatting fixups

    Disable loading .mtl files. Theyre not used anyway.

    Make directional fog colors respect tonemap

    Fix f6 debug/profiler display

    

    After fonts were re-engineered the height of the f6 debug/profiler display would only display about 2-3 lines of text.

    After fonts were re-engineered the height of the f6 debug/profiler display would only display about 2-3 lines of text.

    Increase third person view distance

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Add space between client names in status text (client)

    

    Before:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1,user2,user3,user4,user5,foobar,userplayedminetestthismorning}

    

    After:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1, user2, user3, user4, user5, foobar, userplayedminetestthismorning}

    Before:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1,user2,user3,user4,user5,foobar,userplayedminetestthismorning}

    

    After:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1, user2, user3, user4, user5, foobar, userplayedminetestthismorning}

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1,user2,user3,user4,user5,foobar,userplayedminetestthismorning}

    

    After:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1, user2, user3, user4, user5, foobar, userplayedminetestthismorning}

    After:

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1, user2, user3, user4, user5, foobar, userplayedminetestthismorning}

    Server: version=0.4.10, uptime=190.5, max_lag=0.001, clients={user1, user2, user3, user4, user5, foobar, userplayedminetestthismorning}

    Restore finalColorBlend implementation in shaders.

    Fix regression (increase/decrease viewing range with +/- keys)

    Mapgen V5: Fix use of uninitialized value in ctor

    Schematics: Fix minetest.place_schematic() when defined by a Lua table

    Add minetest.clear_registered_biomes() api

    Ignore some mouse events sent from scrollbar to GUITable

    

    Fixes #1567, #1806.

    Fixes #1567, #1806.

    Close settings files and save them correctly

    Add workaround for failing clang build

    Build for win32 & win64 on Travis too

    Rewrite generate notification mechanism

    

    Add support for notify-on-decoration

    Clean up mapgen constructors

    Clean up mapgen.cpp code style somewhat

    Remove trailing whitespace from some files

    Add support for notify-on-decoration

    Clean up mapgen constructors

    Clean up mapgen.cpp code style somewhat

    Remove trailing whitespace from some files

    Clean up mapgen constructors

    Clean up mapgen.cpp code style somewhat

    Remove trailing whitespace from some files

    Clean up mapgen.cpp code style somewhat

    Remove trailing whitespace from some files

    Remove trailing whitespace from some files

    Performance of main client loop up to 2x faster In places, up to 3 times faster

    

    NOTE 1: This does not mean a 2x increase in framerate. Increase in fps may be up to 1-2fps

    NOTE 2: This local 'caching' of settings is not optimal and an alternative solution will be worked on after 0.4.11 is released

    NOTE 1: This does not mean a 2x increase in framerate. Increase in fps may be up to 1-2fps

    NOTE 2: This local 'caching' of settings is not optimal and an alternative solution will be worked on after 0.4.11 is released

    NOTE 2: This local 'caching' of settings is not optimal and an alternative solution will be worked on after 0.4.11 is released

    Add Lua helper functions vector.apply(v) math.sign(x, tolerance)

    Add name of node 'pointed at' to debug

    

    This is "Add name of node pointed at to debug #1677" by @rubenwardy updated to work with game.cpp after it was refactored.

    This is "Add name of node pointed at to debug #1677" by @rubenwardy updated to work with game.cpp after it was refactored.

    Fix MSVC build

    

    Note: The unit test was technically incorrect for all platforms but passes due to implicit casting

    Note: The unit test was technically incorrect for all platforms but passes due to implicit casting

    Recalculate normals for mesh #0. Fix for issue #1902.

    (INTERIM) Make sizes of the font in formspecs consistent and not so large

    

    Until a permanent fix can be developed

    Until a permanent fix can be developed

    Optimise VoxelManipulator::copyFrom

    

    ~3-4x faster

    

    This indirectly optimises MapBlock:copyTo() which in turn improves performance of MeshMakeData::fill()

    ~3-4x faster

    

    This indirectly optimises MapBlock:copyTo() which in turn improves performance of MeshMakeData::fill()

    This indirectly optimises MapBlock:copyTo() which in turn improves performance of MeshMakeData::fill()

    Right mouse button behaviour for craft/inventory If right mousebutton clicked once then don't drop single items into slots. If right mouse button has been clicked and held a second time, drop items as the mouse is moved. In the second case (automatically drop/place items as mouse is moved) only auto-drop into blank slots, or slots that contain the same item.

    Make dropped items larger and rotate faster

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Settings: Various setting group fixes and enhancements

    

     - Remove blank setting values when setting has a group

     - Pair setting values with groups in file when possible

     - Preserve user-set whitespace in setting objects

     - Delete setting value when setting NoiseParams group

     - Delete overwritten groups outside of lock

     - Remove blank setting values when setting has a group

     - Pair setting values with groups in file when possible

     - Preserve user-set whitespace in setting objects

     - Delete setting value when setting NoiseParams group

     - Delete overwritten groups outside of lock

     - Pair setting values with groups in file when possible

     - Preserve user-set whitespace in setting objects

     - Delete setting value when setting NoiseParams group

     - Delete overwritten groups outside of lock

     - Preserve user-set whitespace in setting objects

     - Delete setting value when setting NoiseParams group

     - Delete overwritten groups outside of lock

     - Delete setting value when setting NoiseParams group

     - Delete overwritten groups outside of lock

     - Delete overwritten groups outside of lock

    Add definable node_stone to biome API, mgv5, mgv7. Reduce and correct depth of mgv7 biomes. l_mapgen.cpp: add '#include mapgen_v5.h' because '#include mapgen_v7' is there. Improve underwater grass hack

    Settings: Fix getNoiseParamsFromValue()

    Use setting groups for NoiseParams

    

    Add format example to minetest.conf.example

    Add Settings::setU16()

    Throw exception on attempted access of NULL settings groups

    Add format example to minetest.conf.example

    Add Settings::setU16()

    Throw exception on attempted access of NULL settings groups

    Add Settings::setU16()

    Throw exception on attempted access of NULL settings groups

    Throw exception on attempted access of NULL settings groups

    Fix style of comment in minetest.conf.example

    Add fontengine.cpp to Android.mk

    Fix settings callback "call" lost on rebase

    Fix node 0,0,0 being highlighted when enable_node_highlighting == false

    

    Without this patch node 0,0,0 is highlighted when enable_node_highligting is false

    There is a minor lighting issue remaining, however it seems to be related to a different bug (https://github.com/minetest/minetest/issues/1887)

    Without this patch node 0,0,0 is highlighted when enable_node_highligting is false

    There is a minor lighting issue remaining, however it seems to be related to a different bug (https://github.com/minetest/minetest/issues/1887)

    There is a minor lighting issue remaining, however it seems to be related to a different bug (https://github.com/minetest/minetest/issues/1887)

    Fix build

    Note: this does not fix the warnings generated by clang

    Note: this does not fix the warnings generated by clang

    LuaSettings: Sanitize setting name strings

    Fix segfault at exit caused by non grabbed font

    settings: Add setting groups and multiline entries

    Make hud use fontengine too

    Fix non coding style conforming glb_fontengine to g_fontengine

    Fix fonts never been deleted due to grabbed to often

    Fix non coding style conforming glb_fontengine to g_fontengine

    Fix fonts never been deleted due to grabbed to often

    Fix fonts never been deleted due to grabbed to often

    Scale form elements consistently

    

    The ratios between the sizes of form elements, including text, is now

    fixed, aside from variations caused by rounding.  This makes form layout

    almost fully predictable, and particularly independent of player's

    screen size.  The proportions of non-text elements are the traditional

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    The ratios between the sizes of form elements, including text, is now

    fixed, aside from variations caused by rounding.  This makes form layout

    almost fully predictable, and particularly independent of player's

    screen size.  The proportions of non-text elements are the traditional

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    fixed, aside from variations caused by rounding.  This makes form layout

    almost fully predictable, and particularly independent of player's

    screen size.  The proportions of non-text elements are the traditional

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    almost fully predictable, and particularly independent of player's

    screen size.  The proportions of non-text elements are the traditional

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    screen size.  The proportions of non-text elements are the traditional

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    proportions.

    

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    For compatibility, the way in which element positions and sizes are

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    specified remains unchanged, in all its baroqueness, with one exception.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    The exception is that the position of a label[] element is now defined

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    in terms of the vertically center of the first line of the label,

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    rather than the bottom of the first line of the label.  This change

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    allows a label to be precisely aligned with button text or an edit box,

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    which are positioned in a centering manner.  Label positioning remains

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    consistent with the previous system, just more precisely defined.

    

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    Make multi-line label[] elements work properly.  Previously the code set

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    a bounding rectangle assuming that there would be only a single line,

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    and as a result a multi-line label would be cut somewhere in the middle

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    of the second line.  Now multi-line labels not only work, but have

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    guaranteed line spacing relative to inventory slots, to aid alignment.

    

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    Incidentally fix tabheader[] elements which were being constrained to

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    the wrong width.

    

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    Given an unusually large form, in variable-size mode, the form rendering

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    system now chooses a scale that will fit the entire form on the screen,

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    if that doesn't make elements too small.  Fixed-size forms, including the

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    main menu, are have their sizes fixed in inch terms.  The fixed size for

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    fixed-size forms and the preferred and minimum sizes for variable-size

    forms all scale according to the gui_scaling parameter.

    forms all scale according to the gui_scaling parameter.

    Implement proper font handling

    noise: Throw exception on noise allocation failure

    Fix MSVC compiling error (argc/argv not available to pass to init_gettext)

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Improve Lua API documentation

    

    Changes:

      * Add extra documentation for remove_item.

    

        This isn't as silly as it sounds: iterate a list containing items with

        unique metadata each, and remove_item the first one you find, placing

        into a different - fine, except the remove will invariably remove the

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Add extra documentation for remove_item.

    

        This isn't as silly as it sounds: iterate a list containing items with

        unique metadata each, and remove_item the first one you find, placing

        into a different - fine, except the remove will invariably remove the

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        This isn't as silly as it sounds: iterate a list containing items with

        unique metadata each, and remove_item the first one you find, placing

        into a different - fine, except the remove will invariably remove the

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        unique metadata each, and remove_item the first one you find, placing

        into a different - fine, except the remove will invariably remove the

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        into a different - fine, except the remove will invariably remove the

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        wrong one, leading to items being duplicated and others destroyed.

    

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        Arguably it's a bug, and Inventory::removeItem should actually remove

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        the item you tell it to. (i.e. if the passed ItemStack has metadata,

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        match it). But it seems reasonable to just document the behaviour

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

        more clearly.

    

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

     * Improve string_to_pos documentation.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

     * Clarify dig_node documentation (return value).

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

     * Better on_step documentation.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

     * get_nodemeta -> get_meta.

     * Other minor fixes.

     * Other minor fixes.

    Update minetest.po (Japanese)

    Fix regression with command line --go option

    Add minetest.copy_table(table) To get rid off the "table references"

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Don't corrupt stepheight when setting other properties

    Wield: always obey anisotropic_filter setting, not just for hi res textures

    EMF_USE_MIP_MAPS was introduced in Irrlicht 1.8, don't use in 1.7.3 or below

    

    This is not optimal as it will cause minor graphical glitches for

    Irrlicht 1.7 users, but at least it fixes the build.

    This is not optimal as it will cause minor graphical glitches for

    Irrlicht 1.7 users, but at least it fixes the build.

    Irrlicht 1.7 users, but at least it fixes the build.

    added enable_build_where_you_stand option

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Wieldmesh: don't force anisotropic filtering on, instead disable mipmaps

    

    This should fix #1844. Thanks to oleastre for making the first version

    of this commit (#1848).

    This should fix #1844. Thanks to oleastre for making the first version

    of this commit (#1848).

    of this commit (#1848).

    Fix some undeclared global variables

    Only set the camera update keymap when using a debug build

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix Android main menu crash, and user data directory check.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Increase step smoothing to fit 1:1 stairs (works well on slabs too)

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix client "double saving" simple singleplayer local maps

    Fixes for Android build errors. Enable sensor landscape rotation.

    

    Fix typo in Android Makefile ndk path.

    Fix touchscreen parts of game.cpp to work after Zeno's refactor.

    Fix isdigit and isspace overload conflict with Android Irrlicht in string.h

    Enable sensor landscape rotation in Android Manifiest.

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix typo in Android Makefile ndk path.

    Fix touchscreen parts of game.cpp to work after Zeno's refactor.

    Fix isdigit and isspace overload conflict with Android Irrlicht in string.h

    Enable sensor landscape rotation in Android Manifiest.

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix touchscreen parts of game.cpp to work after Zeno's refactor.

    Fix isdigit and isspace overload conflict with Android Irrlicht in string.h

    Enable sensor landscape rotation in Android Manifiest.

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix isdigit and isspace overload conflict with Android Irrlicht in string.h

    Enable sensor landscape rotation in Android Manifiest.

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Enable sensor landscape rotation in Android Manifiest.

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Add mapgen v5 to Android build.

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix Makefile not checking leveldb.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Adjust the values of dirs1 and dirs2 so that rotate_and_place orients textures correctly

    

    According to doc/lua_api.txt if paramtype2 == "facedir" the two least significant bits of parm2 orient the texture around the axis. For dirs1 (looking at a wall) these would be 0, 1, 2, 3 and for dirs2 (looking at the ceiling) 2, 1, 0, 3

    According to doc/lua_api.txt if paramtype2 == "facedir" the two least significant bits of parm2 orient the texture around the axis. For dirs1 (looking at a wall) these would be 0, 1, 2, 3 and for dirs2 (looking at the ceiling) 2, 1, 0, 3

    Make duplicate warning checks file and line specific

    Fix console spaming by debug function on mod checking for global variable to exist.

    Port createForsythOptimizedMesh from Irrlicht 1.8

    

    Mesh rotation helpers.

    Mesh rotation helpers.

    Fix regression with USE_REDIS (refactor_main)

    refactor main.cpp

    Fix smooth lighting (ambient occlusion)

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix compiling if no endian.h found

    

    f7d6509 introduces error when no endian.h found in the system.

    

    Since "CHECK_INCLUDE_FILE" returns empty string instead of "0", when

    "cmake_config.h" is generated it has "#define CMAKE_HAVE_ENDIAN_H " line.

    Later we have "#define HAVE_ENDIAN_H CMAKE_HAVE_ENDIAN_H" in the

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    f7d6509 introduces error when no endian.h found in the system.

    

    Since "CHECK_INCLUDE_FILE" returns empty string instead of "0", when

    "cmake_config.h" is generated it has "#define CMAKE_HAVE_ENDIAN_H " line.

    Later we have "#define HAVE_ENDIAN_H CMAKE_HAVE_ENDIAN_H" in the

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Since "CHECK_INCLUDE_FILE" returns empty string instead of "0", when

    "cmake_config.h" is generated it has "#define CMAKE_HAVE_ENDIAN_H " line.

    Later we have "#define HAVE_ENDIAN_H CMAKE_HAVE_ENDIAN_H" in the

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    "cmake_config.h" is generated it has "#define CMAKE_HAVE_ENDIAN_H " line.

    Later we have "#define HAVE_ENDIAN_H CMAKE_HAVE_ENDIAN_H" in the

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Later we have "#define HAVE_ENDIAN_H CMAKE_HAVE_ENDIAN_H" in the

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    "config.h", an thus "HAVE_ENDIAN_H" is also empty sting. Because of

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    this, "#if HAVE_ENDIAN_H" is incorrect preprocessor directive.

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Update credits menu

    serialize.h: use machine native byte swapping if available, fall-back to previous generic method if not (supported for GCC using endian.h, detection done in cmake) write/readARGB8() - just write 32-bit color in one op, instead of 4 1-byte ops cleanup: removed unneeded buffer init for some serialize-out functions use a #define for the fixed point factor in read/writeF1000()

    

    nodemetadata.cpp, nodetimer.cpp

            optimzation: simpler deserialize node position method

    

    staticobject.cpp:

            cleanup: use util/serialize.h inlines instead of its own de/serialization

    

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    nodemetadata.cpp, nodetimer.cpp

            optimzation: simpler deserialize node position method

    

    staticobject.cpp:

            cleanup: use util/serialize.h inlines instead of its own de/serialization

    

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

            optimzation: simpler deserialize node position method

    

    staticobject.cpp:

            cleanup: use util/serialize.h inlines instead of its own de/serialization

    

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    staticobject.cpp:

            cleanup: use util/serialize.h inlines instead of its own de/serialization

    

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

            cleanup: use util/serialize.h inlines instead of its own de/serialization

    

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    serialize.cpp:

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

            minor optimization/cleanup: avoid generation of unneeded string temporary

    

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    CMakeLists.txt, cmake_config.h.in: detection of endian.h

    

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    config.h: added HAVE_ENDIAN_H

    

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Commits due to feedback squashed

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Optimise functions from CNodeDefManager and VoxelManipulator

    

    CNodeDefManager::get()

    VoxelManipulator::addArea()

    CNodeDefManager::get()

    VoxelManipulator::addArea()

    VoxelManipulator::addArea()

    Optimise getTileInfo()

    

    getTileInfo() ~1.5x faster

    getSmoothLight ~2.0x faster

    getTileInfo() ~1.5x faster

    getSmoothLight ~2.0x faster

    getSmoothLight ~2.0x faster

    Mgv5 1 up 1 down overgeneration for biome surface continuity

    Mgv5 get ground level at point function. Fast spawn player version

    Simplify loading of Android version of menu

    Fix leaking global in texture pack menu

    Fix raillike bug (currently manifests itself on Android), and minor improvement to readability.

    

    NB: Minor edits to patch made by Zeno- (int to short and minor formatting)

    NB: Minor edits to patch made by Zeno- (int to short and minor formatting)

    Clean up rollback

    Fix wallmounted mesh rotations

    Add strict module

    

    Also fix leaking globals found by it.

    Also fix leaking globals found by it.

    Tweak core.serialize

    

    This adds proper support for nested tables and improves performance a bit.

    This adds proper support for nested tables and improves performance a bit.

    Add (optional) client-side saving of server map to disk

    Fix Belarusian translation header

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Add gettext to Travis build

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Remove unused rangelim function (the macro still exists)

    Fix indonesian language errors

    

    Errors found by @Sokomine.

    Errors found by @Sokomine.

    Update Indonesian Language

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix double free bug when server is shut down

    

    Thanks @oleastre

    Thanks @oleastre

    Fix NoisePerlin3DEased return value

    Fix warnings and other misc. minor changes

    Remove most exceptions from getNode() (and variants)

    Improved VoxelArea variable locality, thus performance

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Add option 'eased' to NoiseParams

    

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Signed-off-by: Craig Robbins <kde.psych@gmail.com>

    Fix compilation under some Linux distributions

    Mapgen v7: Fix uninitialized spflags

    Mapgen v5: Fix minor style issue

    Mapgen v5: Fix minor style issue

    Add eased 3d point-value noise functions

    Add Generator Element Management framework

    

    Add BiomeManager, OreManager, DecorationManager, and SchematicManager

    Add BiomeManager, OreManager, DecorationManager, and SchematicManager

    Wielded fixes. Add shaders support.

    Fix profiler values not being updated (F6) and not being logged

    Serverlist: announce mg_name from map_meta.txt instead of minetest.conf

Merge: 10a47b7fe 987e565ee

    Merge pull request #1825 from Zeno-/control_key_cache

    

    Create faster key cache for main game loop (client)

    Create faster key cache for main game loop (client)

    Create faster key cache for main game loop (client)

    Tune cave noise scales to 6. Fix blobs spflag, now enabled. Update conf.example

    Add tooltips to main menu subgames button bar

    Implement WieldMeshSceneNode which improves wield mesh rendering

    

    - Don't create and cache an extruded mesh for every (non-node) item.

      Instead use a single one per image resolution.

    

    - For cubic nodes reuse a single wield mesh too

    

    - Improve lighting of the wielded item

    

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

    - Don't create and cache an extruded mesh for every (non-node) item.

      Instead use a single one per image resolution.

    

    - For cubic nodes reuse a single wield mesh too

    

    - Improve lighting of the wielded item

    

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

      Instead use a single one per image resolution.

    

    - For cubic nodes reuse a single wield mesh too

    

    - Improve lighting of the wielded item

    

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

    - For cubic nodes reuse a single wield mesh too

    

    - Improve lighting of the wielded item

    

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

    - Improve lighting of the wielded item

    

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

    - Increase far value of wield mesh scene camera, fixes #1770

    

    - Also includes some minor refactorings of Camera and GenericCAO.

    - Also includes some minor refactorings of Camera and GenericCAO.

    Stop inserting empty lines at end of minetest.conf file each time it is rewritten

    

    See: https://github.com/minetest/minetest/issues/1790

    See: https://github.com/minetest/minetest/issues/1790

    Fix regressions and minor improvements in refactor_the_game

    a) Fix double tap for jump and show_debug

    b) Revert changes to limitFps()... there is no verification that the new method was an issue, but going back to old method just in case

    b.2) limitFps() no longer calls device->run() and also no longer has to be called immediately after a call to device->run()

    a) Fix double tap for jump and show_debug

    b) Revert changes to limitFps()... there is no verification that the new method was an issue, but going back to old method just in case

    b.2) limitFps() no longer calls device->run() and also no longer has to be called immediately after a call to device->run()

    b) Revert changes to limitFps()... there is no verification that the new method was an issue, but going back to old method just in case

    b.2) limitFps() no longer calls device->run() and also no longer has to be called immediately after a call to device->run()

    b.2) limitFps() no longer calls device->run() and also no longer has to be called immediately after a call to device->run()

    Add mgv5. New noise code, uses biome API. Eased 3d noise for terrain, caves, blobs

    Speed up removing a node (less block mesh updates).

    Fix dump() indentation with non-tab indents

    Add last_login field to auth.txt

    

    Also shortens some related code and adds more parameters to string.split.

    Also shortens some related code and adds more parameters to string.split.

    Replace setting unlimited_player_transfer_distance with player_transfer_distance

    Address issues related to refactoring the_game

    

    Fix time of day persistence

    Fix wield item being updated every frame causing small performance hit

    Rename some classes and variables

    Fix time of day persistence

    Fix wield item being updated every frame causing small performance hit

    Rename some classes and variables

    Fix wield item being updated every frame causing small performance hit

    Rename some classes and variables

    Rename some classes and variables

    Fix regression: mouse wheel couldn't scroll from last hotbar item to first

    Cleanup and (mostly) document util/string.h and (very) minor refactoring

    

    Updated: Incorporated feedback from 'kahrl'

    Updated: Moved MinetestApp::boolToCStr() from game.cpp into string.h renaming it bool_to_cstr()

    Updated: Incorporated feedback from 'kahrl'

    Updated: Moved MinetestApp::boolToCStr() from game.cpp into string.h renaming it bool_to_cstr()

    Updated: Moved MinetestApp::boolToCStr() from game.cpp into string.h renaming it bool_to_cstr()

    Include mg_decoration.h, mg_ore.h from emerge.cpp to fix warnings

    Fix unit tests failing if IPv6 not available

    

    See:

    https://github.com/minetest/minetest/issues/1526

    https://github.com/minetest/minetest/issues/793

    See:

    https://github.com/minetest/minetest/issues/1526

    https://github.com/minetest/minetest/issues/793

    https://github.com/minetest/minetest/issues/1526

    https://github.com/minetest/minetest/issues/793

    https://github.com/minetest/minetest/issues/793

    Modified dtime calculation method in limitFps()

    Refactor the_game() to make it more understandable and maintainable.

    

    The following is a record of 31 commits before squashing:

    

    Revert "Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism"

    

    This reverts commit b49e5cfc7013cef7e9af79d17e04f7e7e4c377d4.

    

    Basic reformatting with astyle

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    The following is a record of 31 commits before squashing:

    

    Revert "Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism"

    

    This reverts commit b49e5cfc7013cef7e9af79d17e04f7e7e4c377d4.

    

    Basic reformatting with astyle

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Revert "Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism"

    

    This reverts commit b49e5cfc7013cef7e9af79d17e04f7e7e4c377d4.

    

    Basic reformatting with astyle

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    This reverts commit b49e5cfc7013cef7e9af79d17e04f7e7e4c377d4.

    

    Basic reformatting with astyle

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Basic reformatting with astyle

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    -- additional formatting will be modified, manually, as the need for it is encountered

    

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Start "outlining" what a MinetestApp class might look like

    

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Add MinetestApp::shutdown()

    

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Converted class member functions to camelCase and created protos for new functions

    

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    First stage of connect to server done

    

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Add get itemdefs/nodedefs/media code

    

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Init clouds, camera, sky, init GUI, HUD

    

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Input handling

    

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Client events, camera, sound, draw

    

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Fix wield hand getting stuck digging and add debug text back

    

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Fix FPS

    

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Added profiler graph back

    

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Fix FPS issue

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Need to work out what went wrong and clean up the copy/paste stuff

    

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Annotate

    

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Various:

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Rewrote limitFps()

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Limited scope of some variables

    

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Jitter calcs

    

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Reduce scope of objects

    

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Move some stuff out of ::run and minor formatting cleanup

    

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Scope reduction

    

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Function splits

    

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Removed old (broken) limitFps()

    

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Added exception handling back

    

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Fixed some formatting

    

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Reverted commented out unit tests (uncommented them)

    

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Slow clouds down on loading and media screens so the behaviour is like the original the_game()

    

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Formatting/style (no functional changes)

    

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Manually reapply upstream b49e5cf: Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Fixed silly errors on my part

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Minor formatting cleanups

    

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Removed strange differentiation in FPS limiting when loading

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    FPS limiting was done differently if cloud_menu_background was true, which does not make sense

    

    Cleaning up

    

    Add some comments

    Cleaning up

    

    Add some comments

    Add some comments

    Split up mapgen.cpp

    Fix erroneous lua_pop parameter

    Fix uninitialized variable warning

    mapgen: Resolve nodes in ctor rather than makeChunk

    Check minetest.hud_change() parameters on conversion (Fix #1714)

    Fix bug introduced by me (Zeno)

    Add option to enable mesh caching, add wallmounted for meshes.

    Added names colours and refactored parseColorString()

    Refactor decoration-related code

    

    Split up ModApiMapgen::l_register_decoration()

    Define and make use of CONTAINS() and ARRLEN() macros

    Split up ModApiMapgen::l_register_decoration()

    Define and make use of CONTAINS() and ARRLEN() macros

    Define and make use of CONTAINS() and ARRLEN() macros

    Fix various indentation issues

    Fix #1733: An unhandled exception occurred: GetPeer: Peer not found (possible timeout)

    Add notice when only minimal is installed

    Add NodeResolver documentation

    

    Set content to fallback on AddNode failure

    Consider node list requests with no results as failed

    Set content to fallback on AddNode failure

    Consider node list requests with no results as failed

    Consider node list requests with no results as failed

    Prevent invalid memory access under failure conditions

    Change license of noise implementation to Simplified BSD

    Add support for eased 3d noise

    Add NodeResolver and clean up node name -> content ID resolution system

    Remove m_ext_ptr in GUIFormSpecMenu, replaced by refcount mechanism

    Remove remenants of mob code

    

    Since minetest has no mobs within the core anymore, I suppose these

    settings and code should go. Any mod that uses `minetest.setting_getbool`

    will work with no problem since the default return value is `false`.

    Since minetest has no mobs within the core anymore, I suppose these

    settings and code should go. Any mod that uses `minetest.setting_getbool`

    will work with no problem since the default return value is `false`.

    settings and code should go. Any mod that uses `minetest.setting_getbool`

    will work with no problem since the default return value is `false`.

    will work with no problem since the default return value is `false`.

    Fix syntax error in Japanese translation

    Fix broken plantlike drawtype.

    Add Indonesian Language

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Search for subgames using $MINETEST_SUBGAME_PATH.

    Recalculate normals for cached meshes.

    

    Check if mesh is here before adding to meshcollector.

    

    Fix deleting the meshes.

    Check if mesh is here before adding to meshcollector.

    

    Fix deleting the meshes.

    Fix deleting the meshes.

    Fix some indentation in nodedef.cpp

    Fix memory leak caused by mesh nodes (and nodeboxes)

    Custom collision boxes node property.

    Update the cURL the buildbot uses to 7.38.0

    Various uninitialised variable fixes

    

    sky.cpp: m_bgcolor.getAlpha() was being used before initialised

    

    mesh related: m_highlight_mesh_color was being used uninitialised

    sky.cpp: m_bgcolor.getAlpha() was being used before initialised

    

    mesh related: m_highlight_mesh_color was being used uninitialised

    mesh related: m_highlight_mesh_color was being used uninitialised

    Move buttons upwards to accommodate for new configure keys button in the

    pause menu

    pause menu

    Add meshnode drawtype.

    Make sure PRECISION_SECONDS corresponds to the integer 0

    Fix unit reported by TimeTaker (was always ms)

    Change topleft text when switching subgames, fixes #1728

    Fix use of unitialized variables in mouse button handling

    Add in-game key change menu

    Add a better error message when trying to teleport another player without bring privileges

    Fix object reference pushing functions when called from coroutines

    Add [colorize modifier

    Fix special tile backspace culling

    Bugfix: dont highlight (0,0,0) when theres no node pointed.

    Fix broken plantlike drawtype.

    Fix misc. style issues

    Clean up nodedef.cpp

    Add better documentation for alternate drop definition to lua_api.txt.

    Add optional framed glasslike drawtype

    Make players check inventory modification properly

    Only set player dirty flag if values change

    Simplify player modification checks

    Fix android build using hardcoded path for data instead of using the one fetched by android api on init.

    Fix android missing version information

    Fix android missing version information

    updatepo.sh: Find all files

    Use round if falling node is misplaced

    

    Fixes: http://i.imgur.com/arAWw1i.png (middle-right)

    Fixes: http://i.imgur.com/arAWw1i.png (middle-right)

    Standardize tooltip row detection

    Fix multilined description in tooltips (fixes #1688)

    Fix totally messed up 3d modes interlaced/topbottom/sidebyside

    Fix chat lines not word wrapped correct

    Fix command line parsing

    

    Broken by 6bc4cad0eddd7a7cf593ca1471599e2d75727379, e.g.

      minetest --worldname world

    would be parsed as

      minetest --worldname --worldname

    Broken by 6bc4cad0eddd7a7cf593ca1471599e2d75727379, e.g.

      minetest --worldname world

    would be parsed as

      minetest --worldname --worldname

      minetest --worldname world

    would be parsed as

      minetest --worldname --worldname

    would be parsed as

      minetest --worldname --worldname

      minetest --worldname --worldname

    Fix build with redis

    

    Broken by 6bc4cad0eddd7a7cf593ca1471599e2d75727379 because database-redis.h

    depended on settings.h to include filesys.h.

    Broken by 6bc4cad0eddd7a7cf593ca1471599e2d75727379 because database-redis.h

    depended on settings.h to include filesys.h.

    depended on settings.h to include filesys.h.

    Add firelike drawtype

    Update default of preload_item_visuals in minetest.conf.example

    Make dump's output prettier

    

    Changes:

      * Indentation with tabs by default.

      * Array keys dumped without "[i] = " prefix.

      * String keys that are valid identifiers aren't enclosed in '[""]'.

      * Basic support for multiple references (as specified in the comment).

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Indentation with tabs by default.

      * Array keys dumped without "[i] = " prefix.

      * String keys that are valid identifiers aren't enclosed in '[""]'.

      * Basic support for multiple references (as specified in the comment).

      * Array keys dumped without "[i] = " prefix.

      * String keys that are valid identifiers aren't enclosed in '[""]'.

      * Basic support for multiple references (as specified in the comment).

      * String keys that are valid identifiers aren't enclosed in '[""]'.

      * Basic support for multiple references (as specified in the comment).

      * Basic support for multiple references (as specified in the comment).

    Fix GCC reorder warning

    

    Caused by a020d1b653f94fbcaac06c15f9dbab4521fda355.

    Caused by a020d1b653f94fbcaac06c15f9dbab4521fda355.

    Add inventory right click drag and drop

    Update ja/minetest.po

    Revert the icon name in minetest.desktop

    

    This reverts commit 7993696fc4b59354974059e1f8d6b3063d316411, which broke the

    icon on most distributions.

    This reverts commit 7993696fc4b59354974059e1f8d6b3063d316411, which broke the

    icon on most distributions.

    icon on most distributions.

    Fix locking bugs and make inventory deserialization errors more specific

    Split settings into seperate source and header files

    

    This also cleans up settings a bit

    This also cleans up settings a bit

    Fix Settings locking

    Use const references for Settings methods

    

    Also check for (this == &other) before locking mutexes.

    Also check for (this == &other) before locking mutexes.

    Make getters of the Settings class const

    

    Also removed 2 unused functions.

    Also removed 2 unused functions.

    Allow taking screenshots of formspecs and move message to chat

    Update .mailmap

    Fix wrong video_driver setting when changing in mainmenu

    

    Fixes issue with direct3d(8|9)

    Fixes issue with direct3d(8|9)

    Add compression API

    .travis.yml: fix possible issues

    

    * use `pool.sks-keyservers.net` as keyserver as it's often more reliable

    than `keyserver.ubuntu.com` as you can see with Google.

    * put script to multiple lines

        * build out-of-source

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

    * use `pool.sks-keyservers.net` as keyserver as it's often more reliable

    than `keyserver.ubuntu.com` as you can see with Google.

    * put script to multiple lines

        * build out-of-source

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

    than `keyserver.ubuntu.com` as you can see with Google.

    * put script to multiple lines

        * build out-of-source

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

    * put script to multiple lines

        * build out-of-source

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

        * build out-of-source

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

        * use two CPUs

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

            * make seems to fail if $(nproc) is used unlike WeeChat. ZNC has

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

              same issue.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

    * mark build as failed if one job fails immediately without waiting for

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

    all builds to finish.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

        * this doesn't stop jobs that didn't finish before build was marked

        failed.

        failed.

    Revert "Small changes to French translation (Petites modifications mineures)"

    

    This reverts commit 4432e982616cd871cf1ae5c5706da09e98077433.

    

    Exception: "Nom / Mot de Passe" --> "Nom / Mot de passe"

    This reverts commit 4432e982616cd871cf1ae5c5706da09e98077433.

    

    Exception: "Nom / Mot de Passe" --> "Nom / Mot de passe"

    Exception: "Nom / Mot de Passe" --> "Nom / Mot de passe"

    Fixed french vocabulary/grammar errors

    

    Notes (in french) :

    

    72 msgstr "Ok" : OK est un acronyme, pas un nom, donc majuscules.

    193 msgstr "Feuilles transparentes" : quel type de feuilles ? Trop vague.

    213 msgstr "Filtrage anisotropique" : oxymore.

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    Notes (in french) :

    

    72 msgstr "Ok" : OK est un acronyme, pas un nom, donc majuscules.

    193 msgstr "Feuilles transparentes" : quel type de feuilles ? Trop vague.

    213 msgstr "Filtrage anisotropique" : oxymore.

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    72 msgstr "Ok" : OK est un acronyme, pas un nom, donc majuscules.

    193 msgstr "Feuilles transparentes" : quel type de feuilles ? Trop vague.

    213 msgstr "Filtrage anisotropique" : oxymore.

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    193 msgstr "Feuilles transparentes" : quel type de feuilles ? Trop vague.

    213 msgstr "Filtrage anisotropique" : oxymore.

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    213 msgstr "Filtrage anisotropique" : oxymore.

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    229 msgstr "Précharger les visuels d'objets" : doit être écourté (dépasse trop la bordure grisée)

    Small changes to French translation (Petites modifications mineures)

    Add a .mailmap file

    

    So I was checking out minetest and wondered how many developers there are

    and how they development community is setup and such, so I decided to have

    a look at the git shortlog. There were lot of double entries for some

    persons, so it was harder to estimate the number of people involved.

    

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    So I was checking out minetest and wondered how many developers there are

    and how they development community is setup and such, so I decided to have

    a look at the git shortlog. There were lot of double entries for some

    persons, so it was harder to estimate the number of people involved.

    

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    and how they development community is setup and such, so I decided to have

    a look at the git shortlog. There were lot of double entries for some

    persons, so it was harder to estimate the number of people involved.

    

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    a look at the git shortlog. There were lot of double entries for some

    persons, so it was harder to estimate the number of people involved.

    

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    persons, so it was harder to estimate the number of people involved.

    

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    By adding a .mailmap file, the overview of the authors is much improved

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    For details on the .mailmap file, see

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    https://www.kernel.org/pub/software/scm/git/docs/git-shortlog.html

    

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    Signed-off-by: Stefan Beller <stefanbeller@gmail.com>

    Make config compatible with C++11

    Change default halo.png for better visibility.

    Use configured bind_address for HTTPFetch

    Reduce indentation of HTTPFetchOngoing

    

    Also clean up some related things.

    Also clean up some related things.

    Added configurable selectionbox width. Min width = 1, Max = 5

    Bugfix: don't highlight air nodes.

    Node highlighting.

    Fix typo in comment in chat.cpp

    Simplify and optimize schematic replacements

    Fix another typo in example configuration

    Fix typo in default configuration file

    Log unhandled exceptions in connectionthreads to errorstream

    Fix access to invalid data on reception of packet with size 0

    Change screenshot colorformat properly

    Don't save alpha channel in screenshots (fixes #1451)

    Add LuaVoxelManip methods: get_node_at() and set_node_at()

    Update Mapgen VoxelManipulator on buffer invalidation

    Save previously generated blocks on Mapgen blitback

    Fix only one texture being updated on window resize breaking sidebyside and topbottom 3d modes

    Fix interlaced 3d mode second image being flipped on compiling against irrlicht >= 1.8

    Remove invalid doc about minetest.get_time_us()

    Add missing doc for minetest.get_us_time()

    Allow use all 6 faces for special tiles.

    Protocol version bump.

    Protocol version bump.

    Fix retval of entity.get_staticdata beeing lost while profiling is enabled

    Add lua exception handling test code

    Catch some error situations when mod used without thinking about it

    Catch some error situations when mod used without thinking about it

    Fix LuaJIT exception wrapper

    Fix seg fault if popping from empty stack (L-system trees)

    

    See: https://github.com/minetest/minetest/issues/1525

    

    Background

    Wuzzy2: If you attempt to spawn a L-system tree with minetest.spawn_tree, you can make Minetest crash if it is attempted to pop an empty stack.

    

    ShadowNinja: This shouldn't cause a segmentation fault, but it should throw a Lua error

    

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    See: https://github.com/minetest/minetest/issues/1525

    

    Background

    Wuzzy2: If you attempt to spawn a L-system tree with minetest.spawn_tree, you can make Minetest crash if it is attempted to pop an empty stack.

    

    ShadowNinja: This shouldn't cause a segmentation fault, but it should throw a Lua error

    

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Background

    Wuzzy2: If you attempt to spawn a L-system tree with minetest.spawn_tree, you can make Minetest crash if it is attempted to pop an empty stack.

    

    ShadowNinja: This shouldn't cause a segmentation fault, but it should throw a Lua error

    

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Wuzzy2: If you attempt to spawn a L-system tree with minetest.spawn_tree, you can make Minetest crash if it is attempted to pop an empty stack.

    

    ShadowNinja: This shouldn't cause a segmentation fault, but it should throw a Lua error

    

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    ShadowNinja: This shouldn't cause a segmentation fault, but it should throw a Lua error

    

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Commit Description

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    This commit throws a Lua error instead of causing a segmentation fault. The server will still "crash" but will include a Lua backtrace.

    

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    L-Systems fix randomness

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Unless a random seed is provided (via Lua treedef) seed the PRNG with a different seed for each tree

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Resolves: https://github.com/minetest/minetest/issues/1469

    

    Fix l-system crash when treedef random_level not set by Lua

    Fix l-system crash when treedef random_level not set by Lua

    Add video driver selection to settings menu (based uppon idea from webdesigner97)

    Minimal game: add /dummyball <count> command

    Fix chat messages capturing mouse interactions for menu/formspecs

    Use pause_fps_max also on multiplayer

    Add ^[mask texture modifier

    Reduce time of red screen when damaged

    

    10 seconds in PvP is very long and annoying.

    10 seconds in PvP is very long and annoying.

    ban.cpp refactoring

    Fix to to too two times

    Add player name length checks

    Fix "ghost" blocks if block update is "on wire" while player digs nodes

    Improve timeout calculation

    

    gf

    gf

    Correct spelling mistakes in documentation

    Fix wrong Icon name in minetest.desktop

    Remove buildable_to nodes without dropping item when replaced by a falling node

    Pass light sources in blue channel of vertex color instead of decoded light for all special drawtypes.

    Plus some style fixes and optimizations.

    Plus some style fixes and optimizations.

    Don't call a player event without having player to do a event for

    Fix caption of config mods button (simple menu)

    Mod profiling support

    

    Config settings:

    profiling = true/false (gather statistics)

    detailed_profiling = true/false (break mod times to callbacks)

    

    Chat commands:

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    Config settings:

    profiling = true/false (gather statistics)

    detailed_profiling = true/false (break mod times to callbacks)

    

    Chat commands:

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    profiling = true/false (gather statistics)

    detailed_profiling = true/false (break mod times to callbacks)

    

    Chat commands:

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    detailed_profiling = true/false (break mod times to callbacks)

    

    Chat commands:

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    Chat commands:

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    save_mod_profile saves current statistics in debug.txt and shows on console (on default loglevel)

    Make scrollbar scale according to DPI and scaling factor

    Let lighting be done only CPU side. Remove finalColorBlend implementation from shaders.

    Revert "Fix inventory items blinking on item preloading"

    

    The fix didn't work on some systems sadly this wasn't detected prior merge,

    as preload is disabled by default now there's not gonna be a fix for it.

    The fix didn't work on some systems sadly this wasn't detected prior merge,

    as preload is disabled by default now there's not gonna be a fix for it.

    as preload is disabled by default now there's not gonna be a fix for it.

    Fix inventory items blinking on item preloading

    Remove temporary file at safeWriteToFile()

    Makefile support for build without leveldb

    Add sqlite3 backend hack for android

    Fix the *CDP display

    Fix mainmenu game initialisation

    Make faces shading correct for all possible modes.

    Skip shading for lightsources and top of the nodes.

    Fixes liquid sources and flowing surfaces having different brightness.

    Skip shading for lightsources and top of the nodes.

    Fixes liquid sources and flowing surfaces having different brightness.

    Fixes liquid sources and flowing surfaces having different brightness.

    Move #includes from version.h to version.cpp

    Formspec escape fixed seen in world creation menu

    Disable preload_item_visuals by default

    

    This can delay connections by several minutes.

    This can delay connections by several minutes.

    Fix issue 1527

    https://github.com/minetest/minetest/issues/1527

    https://github.com/minetest/minetest/issues/1527

    Add ZLIBWAPI_DLL and LEVELDB_DLL CMake options Remove legacy MINGWM10_DLL CMake option Update 32-bit buildbot (OpenAL updated, zlib updated) Change build directory for buildbots to '_build' to prevent removal of Android build files Use -win64 suffix for 64-bit Windows builds Fixes #1476

    Rework texture generating code, add texture grouping via ( ... )

    Don't include cmake_config_githash.h into files that don't need it

    Dont display interior of glasslike_framed node when its not defined.

    Fixes https://github.com/minetest/minetest/issues/1514

    Fixes https://github.com/minetest/minetest/issues/1514

    Allow full circle rotation with 2degs step for plantlike drawtype.

    Add rotation for plantlike drawtype.

    Bugfix in makeCuboid - apply rotations to all faces when 1 tile is given.

    Remove vector assertions

    

    These were initially added to get tracebacks for invalid vector errors, but it

    didn't work and tracebacks have since been properly fixed in the core.

    These were initially added to get tracebacks for invalid vector errors, but it

    didn't work and tracebacks have since been properly fixed in the core.

    didn't work and tracebacks have since been properly fixed in the core.

    Speedup mapblock_mesh

    Fix texture glitches for plants with visual scale > 1.0 (jungle grass).

    Fix texture hack in fences.

    Fix error handling on inconsistent client ready message

    Fix android makefile to provide a correct dummy githash if detection fails

    Fix android makefile to provide a correct dummy githash if detection fails

    Make tooltip_show_delay=0 work

    Permit non-integer sizes for item_image[]

    Fix indexing error in timer processing

    Fix flipped textures for drawtype "glasslike"

    Add srollbar formspec element

    Fix android build after removal of indev and math mapgen

    Fix crash reported here: https://forum.minetest.net/viewtopic.php?f=6&t=9726

    Move MapBlock (de)serializing code out of Database class

    Remove proller from credits

    Remove indev mapgen

    Remove math mapgen

    Update default control documentation

    Switch back repository to dev-mode after 0.4.10 release.

    Faces shading fixes

    Don't copy back already generated blocks on map generation

    Don't unload blocks if save failed

    

    Improve error handling in saveBlock()

    Improve error handling in saveBlock()

    Fix regression in leveldb backend

    Update version numbers for 0.4.10

    Fix client crash on deletion of an object the clients localplayer is attached to

    Switch android to leveldb as sqlite3 is broken and fails to save any mapblock there

    Improve error reporting in leveldb backend

    Fix non-smooth non-shader node shading (Fixes #1436, regression by commit a0f78659f31abd)

    Fix errors/warnings reported by valgrind

    Fix memory leak in EmergeManager

    

    EmergeManager keeps a copy of the BiomeGen that it creates, but

    never deletes it.

    Fix warnings reported by clang

    Fix typos in doc/lua-api.txt

    Remove FPS from being next to the version string

    Fix typo in doc/lua_api.txt

    Fix memory leaks in GenericCAO, ShaderSource and Player classes

    Fix inversion of full_punch_interval

    Move master server to seperate repository

    Fix regression in light calculation

    Fix serverlist code style, const-correctness, and types

    Fix server list boolean typing and alignment

    Add support for multipart/form-data to HTTPFetch for server announcing

    Masterserver: Fix compiling servers.jst

    Add redis options to documentation

    Copy zlib and freetype dll to windows package too

    Add support for Android 2.3+

    

    There have been plenty of ppl involved in creating this version.

    I don't wanna mention names as I'm sure I'd forget someone so I

    just tell where help has been done:

    - The partial android versions done by various ppl

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    There have been plenty of ppl involved in creating this version.

    I don't wanna mention names as I'm sure I'd forget someone so I

    just tell where help has been done:

    - The partial android versions done by various ppl

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    I don't wanna mention names as I'm sure I'd forget someone so I

    just tell where help has been done:

    - The partial android versions done by various ppl

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    just tell where help has been done:

    - The partial android versions done by various ppl

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    - The partial android versions done by various ppl

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    - Testing on different android devices

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    - reviewing code (especially the in core changes)

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    - testing controls

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    - reviewing texts

    

    A big thank you to everyone helping this to be completed!

    A big thank you to everyone helping this to be completed!

    Don't spam server console on player/playersao error but just drop the affected client

    Glasslike_framed drawtype rework.

    OS X compatibility fixes

    Fix msvc2012 build

    Add formspec api versioning

    Make sure none of the irrlicht member objects of GenericCAO are deleted prior deletion of GenericCAO

    Make player files saving again

    Masterserver: Fix undefined players

    Add prefixes to enum values and fix style issues

    Make GUITable mouse wheel scrolling faster

    Fix GenericCAO fails to grabing member animated mesh node to prevent it do be deleted to early

    Fix wrong status text rectangle. Fix for #1412

    Add separate download timeout to allow download of bigger files or on low bandwidth lines

    Fix statement not set NULL on deletion

    Make local only variables static

    Make local only variables static

    Add setting for tooltips show delay.

    Tooltips rework.

    Separate element for tooltips. Delayed showing,

    use global color or given ones.

    Separate element for tooltips. Delayed showing,

    use global color or given ones.

    use global color or given ones.

    Handle missing tablecolumns[], fixes bug #1187

    GUITable typo fixes in comments

    Store the maximum player file tries in a constant

    Only try to load from possible player files

    Only keep players loaded while they're connected

    Remove confusing code block from SQLite3 database

    Clear inventory before setting lists

    Fix Windows build

    

    Fixes the issue introduced by c1a0ebb (Fix use of uninitialised variable

    in class Event) causing Windows builds to fail

    Fix race condition on accessing m_time_of_day_speed causing day night race on some architectures

    Remove MapVoxelManipulator not really used by anyone

    Remove emerge and speedup addArea by using memcopy instead of one by one assignment

    Minor fix in check order

    Don't keep temporary images in RAM

    Avoid doing a full material compare if not even first texture does match

    Speedup attachement handling by replacing vector search by direct array access and secondary child lookup vector

    Use memset for flag initialization (compiler optimization is way better)

    use temp variables instead of recalculating array index

    use temp variables instead of recalculating array index

    Speedup getTileInfo by up to 30%

    Speedup getBlockNodeIdMapping by up to factor 4 by using a fixed size mapping array

    Fix menu crash due to lack of favourites list

    Fix sqlite3 map shutdown fails due to missing to finalize list statement

    Add error output on fail to shutdown sqlite3 map db

    Implement shutdown of sqlite3 rollback db

    Add error output on fail to shutdown sqlite3 map db

    Implement shutdown of sqlite3 rollback db

    Implement shutdown of sqlite3 rollback db

    Support for scalable font and gui elements

    Fix positioning of tabheader in order to be usable for scaling GUIs

    WARNING: this changes position of current tabheaders, mods have to adjust!

    Fix positioning of tabheader in order to be usable for scaling GUIs

    WARNING: this changes position of current tabheaders, mods have to adjust!

    WARNING: this changes position of current tabheaders, mods have to adjust!

    Fix uncought deserialization error on receiving data

    Fix server assert in case of invalid message from client, just kick that client.

    Don't handle lack of IPv6 as fatal in unit tests

    Fix labels and vertlabels on some systems.

    Fix small memory leaks on shutdown

    Fix build on big endian architectures.

    Fix chat overlaying full screen, now it's gonna overlay only up to length of longest line

    Fix newline not handled to to interpreting it as invisible char

    Fix broken serverdescription in multiplayer tab

    Remove ugly curl struct pointer from jsonFetchValue signature

    Remove a lot of superfluous ifndef USE_CURL checks

    Add support for directly starting a world by name from command line

    Add tooltips for button, imagebutton and checkbox.

    Fix bounding rect for formspec elements label vertlabel and checkboxes

    Make dropdown formspec elements send their value same style as buttons on change

    Update buildbot scripts and add 64-bit buildbot

    Fix issue #1275 - one more missing check.

    Remove not really used guiTextInputMenu

    Fix issue #1275 - wielded index greater than inv size.

    Improved faces shading with and without shaders.

    L-systems treegen code tweaks.

    Minor stability improvements in block emerge handling

    Unite nodes shaders.

    Pass drawtype and material type to shaders.

    Move shaders generation to startup only.

    Allow assign shaders per tile.

    Initial code to support water surface shader.

    Pass drawtype and material type to shaders.

    Move shaders generation to startup only.

    Allow assign shaders per tile.

    Initial code to support water surface shader.

    Move shaders generation to startup only.

    Allow assign shaders per tile.

    Initial code to support water surface shader.

    Allow assign shaders per tile.

    Initial code to support water surface shader.

    Initial code to support water surface shader.

    Fix regression main_menu_script setting not working any longer

    Fix regression dirt texture not beeing default in non cloud menu

    Fix AppData path for RUN_IN_PLACE, fixes #1365

    Add AppData file

    Fix HUD not visible if below ground blacked out

    Changed Time Out message from ERROR to INFO.

    

    Changed Time Out message from ERROR to INFO.

    Changed Time Out message from ERROR to INFO.

    

    Changed Time Out message from ERROR to INFO.

    Add support for exiting formspecs by doubleclicking outside

    Improve performance by removing some temporary objects

    Fix some coding style issues

    Fix some coding style issues

    New feature: drop a item instead a stack while...

    

    sneaking

    sneaking

    Added show_debug to minetest.conf.example

    

    I love that setting. Why is it not in this file already?

    I love that setting. Why is it not in this file already?

    Fix #1358 (disappearing clouds)

    Allow custom liquids to have drops

    Fix switch from "skybox" to other sky types as triggered by player:set_sky()

    Re-add missing shaders setting. (Generate normalmaps)

    Codestyle cleanup (main.cpp)

    Revert "Add daemon support for linux like operating systems"

    Remove daemon support due to delayed popular vote (part 2)

    Remove daemon support due to delayed popular vote (part 2)

    Revert "Redirect stdin/stderr/stdout to /dev/null in daemon mode"

    Remove daemon support due to delayed popular vote (part 1)

    Remove daemon support due to delayed popular vote (part 1)

    Redirect stdin/stderr/stdout to /dev/null in daemon mode

    Add daemon support for linux like operating systems

    Small cleanup of hud add/remove code

    Fix over-poping and only push the core once

    Add success and output return values to chat commands

    Add item eat callback

    Fix misplaced selection box in some situations

    Fix setThreadName support for BSD

    Works for debian and a few other distributions but fails for even more so back to old order

    Revert "Fix library link order"

    This reverts commit b743dcb942eb1a88bce2968c08b114058738758b.

    Revert "Fix library link order"

    This reverts commit b743dcb942eb1a88bce2968c08b114058738758b.

    This reverts commit b743dcb942eb1a88bce2968c08b114058738758b.

    Sort commands and privs alphabetically in '/help'.

    

    Also make a stray variable local.

    Also make a stray variable local.

    Rework dumping functions

    

    Changes:

      * Add comments to explain the dumping code

      * Add support for dumping values of any type (as '<' <type> '>')

      * Add support for tables as keys in dump2()

      * Make dump2() return it's result (like dump()) rather than printing it

      * Simplify and optimize function serialization via serialize()

    Changes:

      * Fix indentation.

      * Pass strings by const reference.

      * Merge Strfnd and WStrfnd into one class instead of copying them.

      * Remove trailing spaces.

      * Fix variable names.

      * Move to util.

      * Other miscellaneous style fixes.

      * Add comments to explain the dumping code

      * Add support for dumping values of any type (as '<' <type> '>')

      * Add support for tables as keys in dump2()

      * Make dump2() return it's result (like dump()) rather than printing it

      * Simplify and optimize function serialization via serialize()

      * Add support for dumping values of any type (as '<' <type> '>')

      * Add support for tables as keys in dump2()

      * Make dump2() return it's result (like dump()) rather than printing it

      * Simplify and optimize function serialization via serialize()

      * Add support for tables as keys in dump2()

      * Make dump2() return it's result (like dump()) rather than printing it

      * Simplify and optimize function serialization via serialize()

      * Make dump2() return it's result (like dump()) rather than printing it

      * Simplify and optimize function serialization via serialize()

      * Simplify and optimize function serialization via serialize()

    Hide pause menu prior drawing "shutting down..." message

    Reduce log level for non npot2 texture warning message

    Fix library link order

    Remove settings not used any longer

    Fix disable hud disabling drawing of full gui

    fixed typo std::encl in src/gettext.cpp

    Fix a bunch of small bugs due to mainmenu cleanup

    Fix doubleclick not working in singleplayer

    Fix of by one issue on accessing raw list

    Fix this->self

    Fix copy&paste error for scroll button

    Fix doubleclick not working in singleplayer

    Fix of by one issue on accessing raw list

    Fix this->self

    Fix copy&paste error for scroll button

    Fix of by one issue on accessing raw list

    Fix this->self

    Fix copy&paste error for scroll button

    Fix this->self

    Fix copy&paste error for scroll button

    Fix copy&paste error for scroll button

    Item entity stacks merge on the ground.

    

    Add TTL to item entities.

    Add TTL to item entities.

    Fix memory leak in redis backend, fixes #1325

    Add joining player to printed player list

    Add support for interlaced polarized 3d screens

    Add (experimental) support for topbottom as well as sidebyside 3d mode

    Add (experimental) support for topbottom as well as sidebyside 3d mode

    Split declaration of GenericCAO from implementation

    Fix singleplayer dialogs missing game customization

    Add formspec toolkit and refactor mainmenu to use it

    Fix crash on using cursor keys in client menu without selected server

    Add support for non fixed size tabviews

    Fix crash on using cursor keys in client menu without selected server

    Add support for non fixed size tabviews

    Add support for non fixed size tabviews

    Make print() NUL-safe

    Map irrlicht log level to minetest. Allow write them to debug file.

    Fix old client showing duplicated health bar on new server

    Fix client not showing hearts and bubbles on connecting to old server

    Fix server not remembering hud flags correctly

    Fix client not showing hearts and bubbles on connecting to old server

    Fix server not remembering hud flags correctly

    Fix server not remembering hud flags correctly

    Send max number of characters instead of asserting in case of too long chat messages

    Fix invalid cast fix resulting in chat messages beeing limited to 256 bytes

    Fix incorrect scaling of customized hud item selection marker

    Fix error messages beeing shown on pressing cursor keys in various menus

    Fix possible deadlock in error conditions

    Fix healthbar not beeing hidden on disabled damage

    Use "core" namespace internally

    Organize builtin into subdirectories

    Add write_json() to the async API

    Add a limit to node meta data resolving recursion

    Fix heart + bubble bar size on different texture packs

    Add DPI support for statbar

    Move heart+bubble bar to Lua HUD

    Add statbar size (based upon an idea by blue42u)

    Add support for customizing breath and statbar

    Add DPI support for statbar

    Move heart+bubble bar to Lua HUD

    Add statbar size (based upon an idea by blue42u)

    Add support for customizing breath and statbar

    Move heart+bubble bar to Lua HUD

    Add statbar size (based upon an idea by blue42u)

    Add support for customizing breath and statbar

    Add statbar size (based upon an idea by blue42u)

    Add support for customizing breath and statbar

    Add support for customizing breath and statbar

    Move message about missing normal maps to infostream instead of errorstream.

    Bugfix: make waypoints respect camera offset

    Fix numeric underflow on calculating window size adjustment

    Fix player:set_animation() in third person view

    Add hack to avoid 2s startup delay on local games

    Fix usage of deprecated functions in builtin

    Add proper lua api deprecated handling

    Add download rate to media progress bar (non http mode only!)

    Minor coding style fixes

    Minor coding style fixes

    Make debug text adjust it's border to the screensize and fix a border update bug

    Fix rounding issue of hud dpi on some machines

    Add support for function serialization to minetest.serialize

    Fix code style of async API

    Remove dependency on marshal and many other async changes

    

    This makes a number of changes:

      * Remove the dependency on marshal by using string.dump and loadstring.

      * Use lua_tolstring rather than having Lua functions pass string lengths to C++.

      * Move lua_api/l_async_events.* to cpp_api/s_async.*, where it belongs.

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

    This makes a number of changes:

      * Remove the dependency on marshal by using string.dump and loadstring.

      * Use lua_tolstring rather than having Lua functions pass string lengths to C++.

      * Move lua_api/l_async_events.* to cpp_api/s_async.*, where it belongs.

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Remove the dependency on marshal by using string.dump and loadstring.

      * Use lua_tolstring rather than having Lua functions pass string lengths to C++.

      * Move lua_api/l_async_events.* to cpp_api/s_async.*, where it belongs.

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Use lua_tolstring rather than having Lua functions pass string lengths to C++.

      * Move lua_api/l_async_events.* to cpp_api/s_async.*, where it belongs.

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Move lua_api/l_async_events.* to cpp_api/s_async.*, where it belongs.

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Make AsyncWorkerThread a child of ScriptApiBase, this removes some duplicate functionality.

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Don't wait for async threads to shut down.  (Is this safe?  Might result in corruption if the thread is writing to a file.)

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Pop more unused items from the stack

      * Code style fixes

      * Other misc changes

      * Code style fixes

      * Other misc changes

      * Other misc changes

    Only push the Lua error handler once

    Add support for dpi based HUD scaling

    Add support for (configurable) multiline hotbar

    Improved screensize handling

    Add userdefined gui scale by BlockMen

    Add support for (configurable) multiline hotbar

    Improved screensize handling

    Add userdefined gui scale by BlockMen

    Improved screensize handling

    Add userdefined gui scale by BlockMen

    Add userdefined gui scale by BlockMen

    Client: Don't crash if trying to draw too many items from inventory in HUD

    Move the old stuff to doc

    Remove useless MSVC project files

    Fix directional fog color in front view

    Update documentation on is_ground_content

    Revert "Add backtrace to error function"

    

    This reverts commit 5b518ed2feff28c9bf21ad940c1b211b72d71bd1.

    

    This caused duplicate tracebacks and tracebacks when unwanted.

    It also ignored the level argument to error() and didn't pass the message (or level) to debug.traceback().

    Use xpcall() or lua_pcall()'s errorhandler argument instead.

    This reverts commit 5b518ed2feff28c9bf21ad940c1b211b72d71bd1.

    

    This caused duplicate tracebacks and tracebacks when unwanted.

    It also ignored the level argument to error() and didn't pass the message (or level) to debug.traceback().

    Use xpcall() or lua_pcall()'s errorhandler argument instead.

    This caused duplicate tracebacks and tracebacks when unwanted.

    It also ignored the level argument to error() and didn't pass the message (or level) to debug.traceback().

    Use xpcall() or lua_pcall()'s errorhandler argument instead.

    It also ignored the level argument to error() and didn't pass the message (or level) to debug.traceback().

    Use xpcall() or lua_pcall()'s errorhandler argument instead.

    Use xpcall() or lua_pcall()'s errorhandler argument instead.

    Fix lost pause support in singleplayer

    Fix argument type of the RaiseException() function

    Revert binary database block position encoding

    

    This reverts commits a2003b0d553c7223a61c75e5dad79ea68e058ba2 and 54ffe2e5de9ce44129f84f4748743f893b75fda7.

    

    These weren't correct.  Add a black magic warning instead.

    This reverts commits a2003b0d553c7223a61c75e5dad79ea68e058ba2 and 54ffe2e5de9ce44129f84f4748743f893b75fda7.

    

    These weren't correct.  Add a black magic warning instead.

    These weren't correct.  Add a black magic warning instead.

    Fixed wrong node texture rotation for facedirs 5 and 7

    Fix formspec replacement handling for in game formspecs

    make formspec textarea wordwrap

    

    Thats updated #795

    Thats updated #795

    Add missing ip address to player join log entry

    Textureable sun and moon.

    Fix red background missing in deathscreen

    Fix chat console not working anymore

    Fix macro ARRAYSIZE name collision on windows

    Reduce log level for incoming crap packets

    Add log entry for peer timeout

    Add log entry for peer timeout

    Fix win32 build (typo in jthread lock cleanup)

    Replace deathscreen by formspec variant

    Bunch of small fixes (coding style, very unlikely errors, warning messages)

    Use narrow_to_wide in gettext instead of os dependent conversion fct

    jthread remove locks that aren't absolutely required

    add c++11 atomic support (optional)

    add c++11 atomic support (optional)

    Add support for threadnames on BSD, Windows (MSVC-only), and OSX

    Fix warnings

    Remove liquid_finite and weather

    Add redis database backend

    Fix invalid liquid lighting.

    Use bit shifts rather than multiplication in block position encoding

    Use binary operators rather than "Python modulo" in decoding block positions

    Fix all warnings reported by clang

    Fix problem with newer MinGW runtimes

    Add checks for nil in minetest.after

    Reorder initialization of member variables to make GCC happy

    Use integers instead of float values

    Add player:set_eye_offset() by @MirceaKitsune and clean up

    Add third person view

    Fix write and read S32 vectors

    Fix MSVC build

    

    Note: The unit test was technically incorrect for all platforms but passes due to implicit casting

    Fix broken Ipv4 serialization on win32

    Fix broken win32+bsd build

    Fix crash when teleporting near unknown node

    Infer ipv6_server from bind_address; fix client connect to IN(6)ADDR_ANY

    Add support for named threads (atm linux only)

    Make config honor build system specified config defines

    Minor fixes for file/modlist download in mainmenu

    Cleanup client init states by bumping protocol version

    Don't use TOSERVER_RECEIVED_MEDIA but TOSERVER_CLIENT_READY as indicatio for client ready

    Handle clients with protocol version < 23 (almost) same way as before

    Make client tell server about it's version

    Add client state to not send bogus player position updates prior init complete

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Don't use TOSERVER_RECEIVED_MEDIA but TOSERVER_CLIENT_READY as indicatio for client ready

    Handle clients with protocol version < 23 (almost) same way as before

    Make client tell server about it's version

    Add client state to not send bogus player position updates prior init complete

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Handle clients with protocol version < 23 (almost) same way as before

    Make client tell server about it's version

    Add client state to not send bogus player position updates prior init complete

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Make client tell server about it's version

    Add client state to not send bogus player position updates prior init complete

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Add client state to not send bogus player position updates prior init complete

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Add access to statistics information (peer connction time,rtt,version)

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Fix clients standing stalled in world while preloading item visuals (new clients only)

    Add get_player_information to read client specific information from lua

    Add get_player_information to read client specific information from lua

    Pass pointer to nodedef directly to avoid recalculation in quite often called function

    Performance optimized button to button mask evaluation

    Fix lost change password button

    Fix bug in RemoteClient::GetNextBlocks

    Fix merge mistake when rebasing for PR #1169

    Fix double sending of chat messages

    Fix "ghost stacks" created when a player clicks an item on the ground:

    since the object is not immediately removed, any other code may still

    think an object is there, therefore leading to item duplication. This code

    therefore sets the itemstring to '' after the object is picked up to avoid

    such issues

    since the object is not immediately removed, any other code may still

    think an object is there, therefore leading to item duplication. This code

    therefore sets the itemstring to '' after the object is picked up to avoid

    such issues

    think an object is there, therefore leading to item duplication. This code

    therefore sets the itemstring to '' after the object is picked up to avoid

    such issues

    therefore sets the itemstring to '' after the object is picked up to avoid

    such issues

    such issues

    Fix serializing of signed numbers in serializeStructToString

    Normal maps generation on the fly.

    Parallax mapping with slope information.

    Overriding normal maps.

    Parallax mapping with slope information.

    Overriding normal maps.

    Overriding normal maps.

    Add more informative error messages for inventory and item method errors

    Remove lua_State parameter from LuaError::LuaError

    Revert "Make sure we get a stacktrace for as many lua errors as possible"

    

    This reverts commit 362ef5f6ced862daa4733034810d0b07e2ad5d89.

    

    Stack tracebacks couldn't be generated in LuaError::LuaError anyway and this

    caused a second, empty traceback in most cases.  In cases where there wasn't

    annother traceback the stack had already unwound and the traceback was empty.

    This reverts commit 362ef5f6ced862daa4733034810d0b07e2ad5d89.

    

    Stack tracebacks couldn't be generated in LuaError::LuaError anyway and this

    caused a second, empty traceback in most cases.  In cases where there wasn't

    annother traceback the stack had already unwound and the traceback was empty.

    Stack tracebacks couldn't be generated in LuaError::LuaError anyway and this

    caused a second, empty traceback in most cases.  In cases where there wasn't

    annother traceback the stack had already unwound and the traceback was empty.

    caused a second, empty traceback in most cases.  In cases where there wasn't

    annother traceback the stack had already unwound and the traceback was empty.

    annother traceback the stack had already unwound and the traceback was empty.

    Make serializeStructToString use an ostringstream

    Fix sound not being played at the correct place.

    Make sure we get a stacktrace for as many lua errors as possible

    Revert "Use fixed-width format specifiers in serializeStructToString"

    

    This reverts commit 875f1327a47f78d783c3abc7f7acc3977dc286ec.

    Fixed width format specifiers are only officially availale in C99 and C++11.

    This reverts commit 875f1327a47f78d783c3abc7f7acc3977dc286ec.

    Fixed width format specifiers are only officially availale in C99 and C++11.

    Fixed width format specifiers are only officially availale in C99 and C++11.

    Use fixed-width format specifiers in serializeStructToString

    Fix game pause in singleplayer

    Fix special characters in pause and message menu

    Replace usage of long long with u64/s64

    Pass arguments by reference

    Remove goto from Environment::removePlayer

    Fix error when calling minetest.node_punch without a pointed_thing

    Fix generating winresource.o with build dir != source dir

    Correct misleading detached inventory error message

    

    Looks like a bit of hasty copying and pasting from s_item.cpp.

    Looks like a bit of hasty copying and pasting from s_item.cpp.

    Update ABM object counts when triggers add objects

    

    Also fixes long-standing accuracy issue due to unknown wider

    object count not being incremented.

    Also fixes long-standing accuracy issue due to unknown wider

    object count not being incremented.

    object count not being incremented.

    Fix race condition on exit to menu

    Update set_mapgen_params and set_gen_notify Lua API to use new flag format

    Stop wasting time in abm - performance improvement

    

    Unless I'm mistaken, the chunk of code I'm moving there is potentially

    executed hundreds of times inside the loop to get the exact same result

    every time

    Unless I'm mistaken, the chunk of code I'm moving there is potentially

    executed hundreds of times inside the loop to get the exact same result

    every time

    executed hundreds of times inside the loop to get the exact same result

    every time

    every time

    Replace pause and message menu by formspec ones

    Fix rendering glitches when far from the center of the map

    Document CMake options in README

    Improved win32 file version information

    Fix for unloaded but active block problem

    Fix translation name.

    Add Belarusian translation.

    Remove "Server -!- " prefix from player messages

    Fix MSVC build

    

    Note: The unit test was technically incorrect for all platforms but passes due to implicit casting

    Fix null string escape

    Fix test for broken LuaJIT versions, solves #1152

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    wrong expression and wrong word order

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Kürzen, da es sonst nicht in den Button passt.

    Translated using Weblate (Lithuanian)

    

    Currently translated at 16.5% (224 of 1356 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Fix g_settings not being included

    Fix broken cross-compiling

    Schematic: Add force_placement parameter to minetest.place_structure API

    Add minetest.set_noiseparam_defaults() Lua API

    Accept any error response code for missing index.mth

    Add check to avoid usage of broken LuaJIT < 2.0.0beta8

    Fix possible missing unlock of env_lock

    ServerEnvironment: Remove direct dependency on EmergeManager

    Define strlcpy on platforms that do not have it

    Add capability to read table flag fields from Lua API

    Tune block emerge and sending parameters to more aggressive values

    Make flag strings clear specified flag with 'no' prefix

    

    Remove flagmask field from set_mapgen_params table

    Add small bits of needed documentation

    Remove flagmask field from set_mapgen_params table

    Add small bits of needed documentation

    Add small bits of needed documentation

    Remove lots of dead code

    Add check for datatype overflows

    use native datatype indices instead of fixed 16bit/32bit ones

    Add check for datatype overflows

    use native datatype indices instead of fixed 16bit/32bit ones

    use native datatype indices instead of fixed 16bit/32bit ones

    Fix invalid check for fread error on extracting zip

    Fix memory leak in database migration

    Add missing header

    Add the option to bind to a specific address

    Remove blank default values for emergequeue_limit_* settings

    

    Add checks for invalid user input for important settings

    Rename Settings::tryGet* to Settings::get*NoEx for consistency

    Add checks for invalid user input for important settings

    Rename Settings::tryGet* to Settings::get*NoEx for consistency

    Rename Settings::tryGet* to Settings::get*NoEx for consistency

    Revert "Fix settings to honor numeric conversion errors"

    

    This reverts commit 3f376a092e1c16429fb52f24736e9da98aff4cd5.

    This reverts commit 3f376a092e1c16429fb52f24736e9da98aff4cd5.

    Fix another heap-use-after-free in pause menu.

    Fix unexpected preprocessor directive in gettext.cpp

    Fix settings to honor numeric conversion errors

    Rename try* non exceptioning functions to *NoEx

    Rename try* non exceptioning functions to *NoEx

    Update minetest.conf.example

    Huge overhaul of the entire MapgenParams system

    

    MapgenParams is no longer a polymorphic class, eliminating the need for messy and bug-prone reallocations.

    Separation between the common and mapgen-specific parameters is now strongly defined.

    Mapgen parameters objects are now properly encapsulated within the proper subsystems.

    MapgenParams is no longer a polymorphic class, eliminating the need for messy and bug-prone reallocations.

    Separation between the common and mapgen-specific parameters is now strongly defined.

    Mapgen parameters objects are now properly encapsulated within the proper subsystems.

    Separation between the common and mapgen-specific parameters is now strongly defined.

    Mapgen parameters objects are now properly encapsulated within the proper subsystems.

    Mapgen parameters objects are now properly encapsulated within the proper subsystems.

    Settings: Add no-exception variants of each get method

    Fix crash when a error occurs in a globalstep callback

    Escape texture pack names

    Add minetest.kick_player(name, reason)

    Remove noisy error messages, prepend "pathfinder: " to pathfinder messages

    Add missing "-" to list of allowed chars in media filenames

    Add additional check to avoid broadcasting private messages in error conditions

    Add player:override_day_night_ratio() for arbitrarily controlling sunlight brightness

    Add player:set_sky() with simple skybox support

    Add propper client initialization

      -add client states to avoid server sending data to uninitialized clients

      -don't show uninitialized clients to other players

      -propper client disconnect handling

    Minor comment fixes in server

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -add client states to avoid server sending data to uninitialized clients

      -don't show uninitialized clients to other players

      -propper client disconnect handling

    Minor comment fixes in server

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -don't show uninitialized clients to other players

      -propper client disconnect handling

    Minor comment fixes in server

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -propper client disconnect handling

    Minor comment fixes in server

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

    Minor comment fixes in server

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

    Minor bugfixes in connection

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -improved peer id calculation

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -honor NDEBUG flag

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -improved disconnect handling

      -increased initial send window

    Remove some dead code

      -increased initial send window

    Remove some dead code

    Remove some dead code

    New HUD element - waypoint.

    Fix bug only half of unreliable queue handled per step in worst case

    Fix use of previously deallocated EmergeManager

    Fix error on mod download failure

    Pass pointed_thing to on_punch and minetest.register_on_punchnode callbacks

    Include system info in the HTTP user agent on Windows

    Add pointed_thing to minetest.register_on_placenode

    

    As suggested by qwrwed.

    As suggested by qwrwed.

    Connection: Stop processing malformed packet when encountered

    Fix curl dll not getting installed when sound is disabled

    Fix minetest.rotate_and_place() calling on_rightclick() with nil/random param for node

    Update lua_api.txt documentation

    LuaVoxelManip: Add get_param2_data and set_param2_data

    Schematic: Read slice probability table from schematic descriptors

    Fixed mainmenu lua errors because of changes in get_textlist_index

    

    Fixed lua error when none of the worlds or servers selected are and connect,

    delete or configure buttons used.

    Fixed lua error when none of the worlds or servers selected are and connect,

    delete or configure buttons used.

    delete or configure buttons used.

    Deindent HTTPFetchRequest::HTTPFetchRequest()

    Prevent player jumping into nodes from below

    

    Fixes camera glitch and cheating at drowning

    Fixes camera glitch and cheating at drowning

    Prevent placing node when player would be inside new node

    Fix win32 reading semaphore count not working (broke all queues)

    Make default User-agent follow RFC 2616

    Fix building with MinGW

    Fix building under MSVC

    Fix spelling of "attempt"

    Add minetest.override_item

    Add formspec table

    Allow vertical axis particle rotation constraint

    

    Use tables for adding particles, deprecate former way.

    

    separate particles(pawner) definition, add default values, work with no

    arguments

    Use tables for adding particles, deprecate former way.

    

    separate particles(pawner) definition, add default values, work with no

    arguments

    separate particles(pawner) definition, add default values, work with no

    arguments

    arguments

    Fix some errors reported by clang static analyzer.

    Mapgen V6: Add flag to stop mud flow

    Fix doc and forceloading crash.

    Add maximum recursion depth to read_json_value

    Rename get_json_value to read_json_value

    Add InvRef::get/set_lists()

    Compare values instead of pointers in Inventory::operator==

    Add operator!= to Inventory(List), make operator== a const method

    Add forceloading

    Deepcopy pointed_thing for after_place_node, give it to on_rightclick too.

    Fix check for max_fd == -1 should actually be max_fd != -1

    Fixed minetest reliable udp implementation (compatible to old clients)

    Make MutexQueue use jsemaphore for signaling

    Set locale properly when built without gettext support

    Document "wielditem" visual

    Don't lookup node texts in a endless recursion loop

    Revert "Improve (re)spawn, add cache_block_before_spawn and max_spawn_height settings"

    

    The commit didn't work because the blocks weren't loaded yet.

    

    This reverts commit 22dbbf0a6fc9547f0dbdb7f6076337b8c6acd48b.

    

    Conflicts:

            minetest.conf.example

    The commit didn't work because the blocks weren't loaded yet.

    

    This reverts commit 22dbbf0a6fc9547f0dbdb7f6076337b8c6acd48b.

    

    Conflicts:

            minetest.conf.example

    This reverts commit 22dbbf0a6fc9547f0dbdb7f6076337b8c6acd48b.

    

    Conflicts:

            minetest.conf.example

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            minetest.conf.example

    Pass pointed_thing to after_place_node

    Add protection support to auto-rotated nodes

    Prevent auto-rotated nodes replacing the nodes they are placed on

    Fix wrong named masterserver announce variable

    Send long announce as POST, show OS in useragent

    Add lag reporting to masterserver (average dtime)

    StyledWriter  -> FastWriter in masterserver announce

    Add lag reporting to masterserver (average dtime)

    StyledWriter  -> FastWriter in masterserver announce

    StyledWriter  -> FastWriter in masterserver announce

    Escape error messages in error dialog

    Actually pause singleplayer game in pause menu and use lower maximum FPS in it

    Add function to deregister a profiler from profiler list

    Create new instance of mesh every time it's required (Solves #703)

    Fix main menu error message dialog: Now multi-line messages aren't cut at half of second line

    BUILD: fix cmake list parsing

    

    because cmake is unable to parse it's own lists properly

    because cmake is unable to parse it's own lists properly

    BUILD: prefer pkg-config for freetype2 detection

    

    This can solve numerous problems such as:

    http://www.cmake.org/Bug/view.php?id=13959

    http://www.cmake.org/Bug/view.php?id=14601

    

    If pkg-config or freetype2.pc is not found, then fall back to the

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    This can solve numerous problems such as:

    http://www.cmake.org/Bug/view.php?id=13959

    http://www.cmake.org/Bug/view.php?id=14601

    

    If pkg-config or freetype2.pc is not found, then fall back to the

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    http://www.cmake.org/Bug/view.php?id=13959

    http://www.cmake.org/Bug/view.php?id=14601

    

    If pkg-config or freetype2.pc is not found, then fall back to the

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    http://www.cmake.org/Bug/view.php?id=14601

    

    If pkg-config or freetype2.pc is not found, then fall back to the

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    If pkg-config or freetype2.pc is not found, then fall back to the

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    FindFreetype.cmake module logic.

    

    Restrict to UNIX since I only tested it here.

    Restrict to UNIX since I only tested it here.

    Add option to link to OpenGL ES, fixes #1051

    Fix absence of images when compiled with RUN_IN_PLACE=0.

    Reenable -dev suffix

    Fix objects being selected behind a node

    Bump version to 0.4.9

    Fix exception caused by destroying sockets on Server shutdown

    Fix enum element name in Lua HUD code (position vs. pos)

    Initialize world before creating BanManager and RollbackManager

    Fix InventoryList reading order

    

    Lua does not guarantee that the indexes of a table will be in numerical order.

    Lua does not guarantee that the indexes of a table will be in numerical order.

    Revert "Fix minetest.facedir_to_dir when param2 is 5 or 7."

    

    This reverts commit 4e5760a5416cbca6945b1b4484cbd96bea7b250c.

    This reverts commit 4e5760a5416cbca6945b1b4484cbd96bea7b250c.

    Remove FPS from window title

    This doubles performance on some window managers (WTF?!)

    This doubles performance on some window managers (WTF?!)

    Make SHA1::addBytes(..., 0) a no-op instead of an assertion failure

    Use sleep_ms instead of select in httpfetch when max_fd == -1, fixes WSAEINVAL

    Fix particle code ignoring return value of std::vector::erase(). Wat.

    Fix wrong names for parallax settings in config example.

    Bugfix to get_all_craft_recipes.

    Indexes for empty slots shall not be skipped.

    Indexes for empty slots shall not be skipped.

    Check for denied access in itemdef/nodedef/media fetch loop

    Don't throw a error when writing JSON fails

    Log guilty node name when allow_metadata_inventory_move/put/take fails

    Add 'minetest.write_json'

    Handle LuaErrors in Lua -> C++ calls on LuaJIT

    Fix formspec field labels

    Fix broken httpfetch due to SimpleThread removal

    Fix MSVC compiling issue

    Reduce cloud coloring for colored fog and cloud mode

    Remove an unused function and include from client.cpp

    Add setting to disable direction dependent fog and sky colors

    Directional fog + horizon colors, based on sun & moon positions at sunrise / sunset

    Replace SimpleThread by JThread now implementing same features

    Add alpha setting to font shadow

    Update mapgen params in ServerMap after Mapgen init

    Handle Lua errors in on_generate callbacks instead of throwing SIGABRT

    Add map feature generation notify Lua API

    Remove support for optdepends.txt

    Don't call curl_global_init twice

    Replace any direct curl usage by httpfetch

    Use httpfetch_async in serverlist announce code

    Implement urlencode and urldecode

    Rewrite client media download and support hash-based remote download

    

    Move most of the media-related code in client.cpp into a new class

    ClientMediaDownloader (clientmedia.cpp, clientmedia.h). Among other

    things, this class does the following things:

    

    - Download [remote_server][sha1] instead of [remote_server][name]. This

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    Move most of the media-related code in client.cpp into a new class

    ClientMediaDownloader (clientmedia.cpp, clientmedia.h). Among other

    things, this class does the following things:

    

    - Download [remote_server][sha1] instead of [remote_server][name]. This

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    ClientMediaDownloader (clientmedia.cpp, clientmedia.h). Among other

    things, this class does the following things:

    

    - Download [remote_server][sha1] instead of [remote_server][name]. This

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    things, this class does the following things:

    

    - Download [remote_server][sha1] instead of [remote_server][name]. This

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - Download [remote_server][sha1] instead of [remote_server][name]. This

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    is to support servers that provide the same file name with different

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    contents.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - Initially fetch [remote_server]index.mth. This file should follow the

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    Minetest Hashset format (currently version 1) and contain a list of SHA1

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    hashes that exist on the server.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - The list of needed SHA1s is uploaded (via HTTP POST) when index.mth is

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    requested, so servers can optionally narrow down the list to the needs

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    of the client.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - If index.mth is missing (HTTP response code 404), we enter compat mode,

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    fetching [remote_server][name] as before this commit.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - remote_server can now contain multiple servers, separated by commas.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    The downloader code attempts to split requests between the different

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    servers, as permitted by each server's index.mth. If one server claims

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    to have a file but actually doesn't (or something fails), we ask a

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    different server that also claims to have it.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - As before, when none of the remote servers provide a particular

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    file, we download it via the conventional method, i.e. using

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    the minetest protocol: TOSERVER_REQUEST_MEDIA / TOCLIENT_MEDIA.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - Bugfix: Every downloaded file's SHA1 is now verified against the SHA1

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    announced by the minetest server (before loading it and inserting it

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    into the file cache).

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    - Bugfix: Only send TOSERVER_RECEIVED_MEDIA when we actually have all

    media. This should fix #863.

    media. This should fix #863.

    Implement httpfetch module and initialize it from main()

    

    Add curl_parallel_limit setting that will replace media_fetch_threads in

    a later commit.

    

    Fix a typo in MutexedQueue::pop_back() that made it impossible to compile

    code that used this function. (Noticed this while implementing httpfetch.)

    Add curl_parallel_limit setting that will replace media_fetch_threads in

    a later commit.

    

    Fix a typo in MutexedQueue::pop_back() that made it impossible to compile

    code that used this function. (Noticed this while implementing httpfetch.)

    a later commit.

    

    Fix a typo in MutexedQueue::pop_back() that made it impossible to compile

    code that used this function. (Noticed this while implementing httpfetch.)

    Fix a typo in MutexedQueue::pop_back() that made it impossible to compile

    code that used this function. (Noticed this while implementing httpfetch.)

    code that used this function. (Noticed this while implementing httpfetch.)

    Fix a bug in GenericCAO GENERIC_CMD_UPDATE_POSITION parsing.

    Make line_of_sight return blocking node position

    Add 'on_prejoinplayer' callback

    Add configurable font shadow.

    Implement search tab and version picker

    Add Lithuanian translation.

    Check if width, height or start index of a list[] is negative

    Optimize shaders code. Add settings at compile time.

    Mapgen Indev: Fix segfault in cave generation due to uninitialized variable

    Fix shaders on some GPUs

    Fix leak and possible segfault in minetest.set_mapgen_params

    EmergeManager: Fix Lua mapgen override param handling

    Dungeongen: Create dungeon gen tuneables; add desert temples for Mapgen V6

    Move script_run_callbacks to Lua

    Fix paralax occlusion setting

    Fix small mistake in Lua API docs

    Fix win32 jthread implementation

    Improve (re)spawn, add cache_block_before_spawn and max_spawn_height settings

    Only create one alias metatable

    Use a table in set_physics_override()

    Add sneak and sneak_glitch to set_physics_override()

    Fix LevelDB maps

    Shaders rework.

    Dont move item back when not clicking on a slot

    Rename names -> can_see_far_names in announce

    Fix broken async locking in release build

    Remove link to #, add unlimited_player_transfer_distance to announce

    Fix MinGW build

    Cleanup jthread and fix win32 build

    Cavegen: Fix possible out-of-bounds heightmap access

    Decoration: Add schematic Y-slice probability support

    Fix log threadname lookup handling not beeing threadsafe

    Assume a selection box for fences

    

    Similar to assuming a selection box for the nodebox drawtype, minetest.register_item() now assumes a selection box for the fencelike drawtype.

    Similar to assuming a selection box for the nodebox drawtype, minetest.register_item() now assumes a selection box for the fencelike drawtype.

    Add error handler to async step

    Optimize table creation

    Add documentation for minetest.swap_node

    Add minetest.swap_node

    Fix MSVC build.

    Change default value of is_ground_content to true

    

    Most modders would otherwise forget to explicitly define this, and generated nodes aliased from mods would wall-off caves

    Most modders would otherwise forget to explicitly define this, and generated nodes aliased from mods would wall-off caves

    LuaVoxelManip: Add area parameters back to calc_lighting and set_lighting, made optional this time; also fixed a slight bug with night values being ignored

    LuaVoxelManip: Add get_light_data() and set_light_data()

    Fixed potential NULL pointer and leak when setting node metadata

    Cavegen: Respect is_ground_content MapNode setting; fix some code formatting issues

    Fix broken thread stop handling

    Fix old gcc build

    Fix modstore/favourites hang by adding asynchronous lua job support

    Split server/client port setting to avoid port number clashes in mainmenu

    Don't use variable length arrays

    Rollback fixes and get_node_actions

    SQLite rollback

    Fix line_of_sight (AGAIN)

    Reenable -dev suffix

    Bump version to 0.4.8

    Don't continue trying to deserialize blank block data

    Temporary disable local install button due to irrlicht dialog breaking localization

    Fix my name (doesn't display correctly because of utf8 characters)

    Fix rename modpack button not working, fixes #1019

    Run updatepo.sh

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Myslím, že se jedná o IME Convert klávesu: http://msdn.microsoft.com/en-us/library/system.windows.input.key.aspx

    Translated using Weblate (Romanian)

    

    Currently translated at 47.6% (665 of 1396 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Myslím, že se jedná o IME NonConvert klávesu: http://msdn.microsoft.com/en-us/library/system.windows.input.key.aspx

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Translated using Weblate (Czech)

    

    Currently translated at 68.6% (1004 of 1462 strings)

    Fix invalid escape sequence in database migration code

    Prevent enabling Shaders if Direct3D is used

    Fix crash when pressing Enter key in formspec menu

    Fix usage of 'minetest' where 'engine' was intended

    Fix possible implicit conversion of NULL to std::string

    LuaVoxelManip: Update parameter index of set_lighting()

    Mapgen V6: Respect water_level setting

    Fix modmanager screenshot path

    fix gettext compile issues under win32

    Fix issue #1009 (minetest.get_connected_players() returns non-existing players)

    Increase liquid_loop_max to 10000 again

    Revert patch 58f036ad1 that causes object duplication (which tried to fix objects getting hidden from client) and fix the original problem correctly. This fixes the second distinct object duplication bug.

    Fix Result of processed Request was written to invalid (non existent) ResultQueue if requesting thread timed out before

    Add missing RequestQueue doc

    Fix multicaller support in RequestQueue

    Do the same for LevelDB interface

    Handle blank blocks in database

    

    Fix screwed-up indentation

    Fix screwed-up indentation

    Revert "Don't use msvc libs for mingw build"

    

    This reverts commit 3985c01ad71159b888677d0fe2019d7a05debeed.

    This reverts commit 3985c01ad71159b888677d0fe2019d7a05debeed.

    Replace print()s with minetest.log() in builtin

    Prevent shaders from being created when disabled

    Add CURL_DLL search to show up CURL_DLL in cmake gui and don't silently ignore missing CURL_DLL

    Don't use msvc libs for mingw build

    Decoration: Stop DecoSimple::resolveNodeNames from complaining about no node name if decolist is used

    

    Fix warning message for spawnby nodes

    

    Prevent type-punning warning caused by casting enum to int

    Fix warning message for spawnby nodes

    

    Prevent type-punning warning caused by casting enum to int

    Prevent type-punning warning caused by casting enum to int

    Actually fix weather

    

    The real problem was that MapBlocks were not activated before getting sent to the client

    The real problem was that MapBlocks were not activated before getting sent to the client

    Fix invalid listname and listsize not handled correctly in set_size

    fixed array limit check when reading Lua specialtiles table

    Pass a errfunc to lua_pcall to get a traceback

    Fix formspec background padding when clipped

    Improved default settings for floatland perlin noise 1. Larger, more detailed floatlands.

    Fix compiling with 32bit MinGW

    Fix invalid usage of temporary object in mainmenu json conversion

    Disable localization workaround in server

    Fix win32/msvc i18n (quite UGLY version, blame Microsoft)

    Fix "TODO read modinfo" in modmanager to improve ui usability

    Fix spaces float islands code

    FIxed floating isle generation at chunk boundaries

    

    A mapgen fix authored by paramat, as mentioned here: https://github.com/minetest/minetest/issues/989

    A mapgen fix authored by paramat, as mentioned here: https://github.com/minetest/minetest/issues/989

    Weather: Fix uninitialized weather_update_time (sorry proller)

    Add BlockMen to core dev list

    Fix game buttons not beeing 48x48

    Fix crash updating gametype without game

    Fix typo in lua_api.txt

    Add wrapper for minetest.rotate_and_place.

    Don't assert scalars must be vectors.

    Fix orient_flags to be optional.

    Add 6d facedir rotation prediction routine

    Correct useragent in http queries

    Net struct init

    Net struct init

    Masterserver uptime fix

    Add seed entry to world creation dialog

    Accept hexadecimal and string values for seeds

    Fix invalid use of pointer to temporary object in json2lua conversion

    Fix masterserver README.md

    Masterserver fixes

    Masterserver show privs and js autoload

    Add a "More..." link when the serverlist is filtered

    Only show servers with at least master.min_clients clients

    Use a doT.js template for the serverlist

    Fix invalid usage of texture->getSize() where actually texture->getOriginalSize() was meant

    Fix typo

    Reworked formspecs and kahrl's hexcolor parser

    Send a on_receive_fields event when formspec is closed, with fields.quit = "true"

    Add basic protection support to builtin

    Portability fixes for OpenBSD (and possibly NetBSD and others).

    Fix possible crash with grass ABM.

    Fix liquid_range

    * Prevent graphical glitches on old servers

    * Fix flowing of liquids with viscosity != 1 and range != 8

    * Fix range = 0, no flowing nodes will appear

    * Prevent graphical glitches on old servers

    * Fix flowing of liquids with viscosity != 1 and range != 8

    * Fix range = 0, no flowing nodes will appear

    * Fix flowing of liquids with viscosity != 1 and range != 8

    * Fix range = 0, no flowing nodes will appear

    * Fix range = 0, no flowing nodes will appear

    Fix grass adding/removing ABM.

    Move the sapling growing and grass adding/removing ABMs to Lua

    Add my email address to the main menu credits

    Add more checks to vector functions

    Don't remove background of games in submenus

    Fixed ignoring of "diggable" property of nodes.

    Add a callback: minetest.register_on_craft(itemstack, player,

    old_craft_grid, craft_inv) and

    minetest.register_craft_predict(itemstack, player, old_craft_grid,

    craft_inv)

    old_craft_grid, craft_inv) and

    minetest.register_craft_predict(itemstack, player, old_craft_grid,

    craft_inv)

    minetest.register_craft_predict(itemstack, player, old_craft_grid,

    craft_inv)

    craft_inv)

    Made unknown nodes stop falling nodes properly and shorten lines

    Raise the maximum node limit to 0x7fff

    

    As agreed to by kahrl

    As agreed to by kahrl

    Move new core devs to the "Core Developpers" section of mainmenu.

    Masterserver totals fix

    Masterserver update

    Add sanity checks to vector functions

    Remove vector metatable setting

    

    This not only makes the vector functions faster, but also makes them more

    consistent with other functions.

    This not only makes the vector functions faster, but also makes them more

    consistent with other functions.

    consistent with other functions.

    Fix object duplication bug (at least in the most reproducible UFO case)

    Add tool callback

    Fix minetest.facedir_to_dir when param2 is 5 or 7.

    Add support for parameter 'visual_scale' for drawtypes 'signlike' and 'torchlike' like used for drawtype 'plantlike'

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Czech language

    FIx wrong error message on invalid use of the formspec element image_button

    Remove mapgen_air alias (#935)

    Optimized minetest.get_connected_players()

    

    Instead of collecting all objects within a huge radius (which could be

    a big value), just register each player that connects and give back the

    current hold list.

    Instead of collecting all objects within a huge radius (which could be

    a big value), just register each player that connects and give back the

    current hold list.

    a big value), just register each player that connects and give back the

    current hold list.

    current hold list.

    Pass VERSION_EXTRA to GenerateVersion.cmake

    Add set_name(), set_count(), set_wear() and set_metadata() to Lua ItemStack

    Allow to manually specify param2 in minetest.item_place() and return success

    Add --version option

    Remove doc/gpl-2.0.txt, add doc/lgpl-2.1.txt

    Show git hash in version string at top left corner of window

    Lower the default max_users from 100 to 15

    Add curl, freetype and luaJIT to CMAKE_BUILD_INFO

    Re-fix hud_change stat argument retrieval

    

    Conflicts:

            src/script/lua_api/l_object.cpp

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            src/script/lua_api/l_object.cpp

    Fix compiling issue of MSVC

    Add option to scale image to percentage values

    Fix null dereference in weather update functions

    Fix some warnings and other minor details

    Weather: Clean up getHeat/getHumidity somewhat

    Fix comments about length of server step

    

    6b927229f5f9cb9a8163ecec482160975199fa0f Changed the default server step

    from 0.05s to 0.1s

    6b927229f5f9cb9a8163ecec482160975199fa0f Changed the default server step

    from 0.05s to 0.1s

    from 0.05s to 0.1s

    Use cached "weather" setting

    Fog depend on humidity

    Add configurable PRAGMA synchronous =

    Always use builtin JThread library

    Change mainmenu texture handling + small misc changes

    

    Texture names must now be escaped in formspec elements image[],

    background[], image_button[], image_button_exit[].

    

    Instead of special-case handling of texture loading (and unloading

    which was missing) in guiFormSpecMenu.cpp, use the newly created

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    Texture names must now be escaped in formspec elements image[],

    background[], image_button[], image_button_exit[].

    

    Instead of special-case handling of texture loading (and unloading

    which was missing) in guiFormSpecMenu.cpp, use the newly created

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    background[], image_button[], image_button_exit[].

    

    Instead of special-case handling of texture loading (and unloading

    which was missing) in guiFormSpecMenu.cpp, use the newly created

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    Instead of special-case handling of texture loading (and unloading

    which was missing) in guiFormSpecMenu.cpp, use the newly created

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    which was missing) in guiFormSpecMenu.cpp, use the newly created

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    ISimpleTextureSource interface which is a minimal subset of

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    ITextureSource. There is an implementation of this interface

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    used by GUIEngine (MenuTextureSource).

    

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    Fix an off-by-one bug in unescape_string; it caused requests for a

    texture called "\0".

    texture called "\0".

    Fix hotbar padding at bottom

    Add offset to automatic_face_movement_dir

    Fix bug: texture pack not overriding default menu textures

    Use engine.is_yes() in mainmenu

    Use the Settings Lua interface to read world.mt

    Allow non-string arguments for minetest.is_yes()

    Add Settings interface for Lua

    Handle --migrate even when compiled without leveldb support

    Remove assert warning in leveldb wonderland

    Fix loading leveldb worlds

    Fix broken build due to missing mapsector.h include

    Add --migrate to manpages and update manpage dates

    Add license headers and remove useless includes

    Use system-wide LevelDB instead of bundled one

    Prevent ModMgr from deleting backend setting in world.mt

    Make --migrate update world.mt too

    Add note about --migrate only working with minetestserver or --server

    Fix 'Unknown map backend' error when using Configure menu right after creating world

    Use STL containers instead of irr::core::list

    Add message that LevelDB is not supported on Windows

    Make it compile

    Add dummy and LevelDB database backends

    Run updatepo.sh

    Add fallback font support for some languages.

    Add minetest.get_gametime() API function, that returns the number of seconds since the world was created.

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Fix typo

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Add mapgen_stair_cobble alias to minimal

    Standardized method of getting node info in dungeon mapgen.

    Add sanity check to sort function

    Fix selectionbox not honoring anaglyph mode 3d distortion

    Fix crash on lua exception

    Use player:set_hotbar_image() instead of hardcoded hotbar.png

    Add backtrace to error function

    Fix remnants of s32 enable_shaders

    Fix enable_fog = false not having any effect when shaders are enabled

    Server::ProcessData(): call getBanName once instead of twice (#639)

    Add minetest.parse_json, engine.parse_json

    Use wstring for vertlabels

    Fix bug in pathfinder causing endless loop in some situations

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Normalized heat and adjusted humidity

    Add escaping to world list in main menu (fixes #896).

    Remove "po/du". "du" is invalid language code (fixes #881).

    Add support for using textures in hotbar

    Fix aliases not working in shapeless crafting recipes

    Run util/updatepo.sh

    Add a setting for HighPrecisionFPU (fixes #763).

    Fix *.po errors caused by rebase.

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Hungarian)

    

    Currently translated at 100.0% (1416 of 1416 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Fix umlauts/special character issue in lua gettext

    Fix gettext for tabs (windows)

    Allow SIGINT to kill mainmenu again

    World config dialog: Use engine determined path for game mods

    GUIFormSpecMenu focus fixes

    Reenable image scaling in formspecs

    Fix trailing nils being dropped by deprecated minetest.env handler

    Add translation for main menu

    Add engine.gettext() and remove gettext() calls in guiFormspecMenu.cpp

    Add engine.gettext() and remove gettext() calls in guiFormspecMenu.cpp

    Send player damage to all clients and apply [brighten

    Diagonal liquid animation

    Fix modstore pagecount

    Use get_texturepath() instead of get_gamepath()/../textures

    Use errorstream instead of std::cout in pathfinder.cpp

    Remove debug output

    Sort modlist alphabetically

    Add ability to activate mods with doubleclick (remove old_style_mod_selection)

    Don't automatically scroll listbox when selecting an item in the middle

    Formspec textlist: Black Irrlicht magic to detect fake doubleclicks

    Fix formspec escaping, add escaping to info.txt for texture packs.

    Fix documentation about colors in formspec

    Add virtual destructor to IBackgroundBlockEmerger to silence warning

    Omnicleanup: header cleanup, add ModApiUtil shared between game and mainmenu

    Fix my name.

    Fix typos

    Add support for entities to automatic face movement direction

    Dont write directly to files but rather write and copy a tmp file

    Remove farmesh

    Decoration: Fix schematic probability mess with new MTS file version

    Dont crash if facedir > 23

    Dont download modstore info if its isnt needed

    Don't freak out when a client sends multiple TOSERVER_INIT packets; also log one thing more.

    Fix various memory access problems detected by valgrind

    Fix path of mono font in defaultsettings.cpp

    Fix stored XSS vulnerability in the serverlist

    Fix uninitialized irr::SEvent fields in guiFormSpecMenu.cpp

    Simplify code of mainmenu world sort

    Fix full crack texture being shown when releasing dig button

    Add support for different drowning damage and allow drowning in other nodetypes

    Fix worldlist in servertab being filtered by selected game

    Rename LagPool's member variables to avoid MSVC freaking up due to it's #define max

    Clean up server's log messages and give a better error to client when its player is in use

    Add minetest.registered_biomes

    Fix crack overlay for animated textures

    Master server script improvement

    Fix installation of textures/texture_packs_here.txt

    Fix texture bumpmapping on some GPUs

    Masterserver bugfix

    Freeze-melt adjust

    Fix formspec label issues in win builds (MSVC)

    Make freetype usage configureable by a setting

    Dont show gamefilter in TP tab

    Add texture pack selection to main menu

    Change large amount of objects to be configurable via a setting in minetest.conf (max_objects_per_block).

    Fix server getting completely choked up on even a little of DoS

    

    * If client count is unbearable, immediately delete denied clients

    * Re-prioritize the checking order of things about incoming clients

    * Remove a huge CPU-wasting exception in ReliablePacketBuffer

    * If client count is unbearable, immediately delete denied clients

    * Re-prioritize the checking order of things about incoming clients

    * Remove a huge CPU-wasting exception in ReliablePacketBuffer

    * Re-prioritize the checking order of things about incoming clients

    * Remove a huge CPU-wasting exception in ReliablePacketBuffer

    * Remove a huge CPU-wasting exception in ReliablePacketBuffer

    Allow mods to listen to cheat detections using minetest.register_on_cheat()

    Fix anticheat

    Lessen the sky color glitch when quickly turning to look up after looking at ground that contains caves

    Fix and improve view range tuner

    Add replacements to schematics

    More info in serverlist

    Allow multiple 'wherein' nodes in oredef

    Weather backward compatibility

    Leveled nodebox backward compatibility

    Make bumpmapping compatible with irrlicht 1.8

    Add support for setting stepheight for entities

    Fix warnings in mapblock.cpp

    Play sounds/main_menu.ogg in menu

    Warnings fix

    Better snow fall, finite liquid transform, leveled nodes api

    Weather support

    Dont announce server in singleplayer

    Show portnumber for ip adresses only

    Add support of pressed_texture of image_button

    

    Fix params number

    

    Add pressed texture name

    

    Fix string def

    

    Fix syntax error

    Fix params number

    

    Add pressed texture name

    

    Fix string def

    

    Fix syntax error

    Add pressed texture name

    

    Fix string def

    

    Fix syntax error

    Fix string def

    

    Fix syntax error

    Fix syntax error

    Add gettext translation for image_button

    Cosmetic player info changes

    added (optional) support for 6d facedir in dir_to_facedir and added facedir_to_dir

    Fix modstore URLs

    Disable gamemanager by default

    Fix enable mod/enable button not shown on entering world config dialog

    Fix bug in world creation

    Add old style mod selection in worldconfig dialog

    Add old style mod selection in worldconfig dialog

    Add missing header/footer for singleplayer tab

    Remove debug output

    Fix Bug in modname guessing resulting in undefined modname

    Use user folder for gamemanager too

    Enable mod and gamemanager by default

    merge mainmenu_helper.lua to misc_helpers.lua

    Fix background/overlay/footer/header handling

    Add missing file headers

    Add missing file headers

    Add configurable curl timeout

    Add playernumber to favorites list

    filterlist api cleanup

    Add port to favorites if not 30000

    Major modmgr overhaul

    Add missing formspec checkbox doc

    Major modmgr overhaul

    Add missing formspec checkbox doc

    Add missing formspec checkbox doc

    Replace worldlist by generic filterlist implementation

    Add support for modstore screenshots

    Add error output on invalid mmdb entries

    Add error output on invalid mmdb entries

    Swap name/password <-> server description

    Revert "Fix serverdescription and name not beeing saved to local serverlist"

    

    This reverts commit 7dbbbfc665e285cc9eb9d750c3a449d7da178d4f.

    (was added twice)

    This reverts commit 7dbbbfc665e285cc9eb9d750c3a449d7da178d4f.

    (was added twice)

    (was added twice)

    Remove unused required by list in worldconfig

    Fix light issue in 6d facedir.

    Bump protocol version

    Add an option to disable object <-> object collision for Lua entities

    Add liquid_range to nodedef

    Make range of tools configureable

    Add set_breath and get_breath to lua API.

    Randomly choose singleplayer port

    Fix lighting bug caused by disappearing lava

    Remove support for common mods

    Change ContentFeatures array to a vector

    Leveled nodebox

    Masterserver mods fix

    Better masterserver html

    Don't show flags in local favorites

    Fix bug server name set to address field when using up/down keys

    Show server description above connect button instead of in favorites list

    Show server description above connect button instead of in favorites list

    Add missing server flags in public serverlist

    Remove lots of debug output from modmgr

    Fix RUN_IN_PLACE=0 mod install (now mods are saved in user folder in that case)

    Fix text of field element not unescaped correctly

    Fix RUN_IN_PLACE=0 mod install (now mods are saved in user folder in that case)

    Fix text of field element not unescaped correctly

    Fix text of field element not unescaped correctly

    Fix serverdescription and name not beeing saved to local serverlist

    Masterserver mods announse, ipv6, better curl errors

    Clean up bumpmap code a bit

    Disallow the name 'singleplayer' in a multiplayer server

    Add VoxelArea:position, VoxelArea:iter and VoxelArea:iterp

    Worldlist fixes

    Add alphabeticaly sorted worldlists

    Select world after creation

    Move worldlist handling to separate file

    Merge world selection of singleplayer/server tab

    Remove some useless code

    Add alphabeticaly sorted worldlists

    Select world after creation

    Move worldlist handling to separate file

    Merge world selection of singleplayer/server tab

    Remove some useless code

    Select world after creation

    Move worldlist handling to separate file

    Merge world selection of singleplayer/server tab

    Remove some useless code

    Move worldlist handling to separate file

    Merge world selection of singleplayer/server tab

    Remove some useless code

    Merge world selection of singleplayer/server tab

    Remove some useless code

    Remove some useless code

    Fix multiple texture support for animated meshnodes

    Fix serverlist

    Public server checkbox

    Dont play digging sound if not digging

    Revert "Fix serverlist not beeing escaped correctly"

    

    This reverts commit 39d03148e5d98ef5f9a31b131a79ff2bbd71a877.

    This reverts commit 39d03148e5d98ef5f9a31b131a79ff2bbd71a877.

    Fix header not beeing shown except on singleplayer tab

    Fix serverlist not beeing escaped correctly

    Always use address for server

    Fix first (empty) element beeing selected after deleting last world

    Always use address for server

    Fix first (empty) element beeing selected after deleting last world

    Fix first (empty) element beeing selected after deleting last world

    fix crash on play/start with empty world list

    make enter button work in create world dialog

    make enter button work in create world dialog

    Fix wallmounted rotations along Y axis for 90 and 270 degree cases

    Decoration: Handle facedir and wallmounted param2types with schematic rotation

    Remove note in lua-api.txt that there are no vector helper functions

    Make sure that coordinates passed to /teleport are actual numbers

    Move math.hypot() to misc_helpers.lua and fix zero-division error

    Lua main menu: Fix world creation dialog

    Set numeric locale in Lua in main menu

    Settings: everything != 0 equals true; remove .asm shaders

    Fix many formspec menu bugs

    Fix parseColor, change remaining colorkeys to new format, fix Contributor list

    When server sends late media, log to errorstream instead of crashing.

    

    Do a check for valid num_files before doing

    assert(!m_mesh_update_thread.IsRunning());

    

    In particular, don't execute the assertion if all media has already

    been received.

    Do a check for valid num_files before doing

    assert(!m_mesh_update_thread.IsRunning());

    

    In particular, don't execute the assertion if all media has already

    been received.

    assert(!m_mesh_update_thread.IsRunning());

    

    In particular, don't execute the assertion if all media has already

    been received.

    In particular, don't execute the assertion if all media has already

    been received.

    been received.

    Handle 0 vectors in vector.normalize()

    include mathconstants.h in numerics.cpp

    Add vector helpers

    BiomeDefManager: Fully initialize default biome

    Mapgen V7: Fix out-of-bounds array access

    LuaVoxelManip: Allow liquid updates in non-mapgen VoxelManip objects

    Decoration: Remove usage of multi-character constants

    Use hexadecimal RRGGBB instead of colorkeys, rename getColor to parseColor

    Mapgen V7: Huge rewrite, also tweaks to cavegen et al.

    Fix possible NULL dereference in createExtrudedMesh

    Don't rebuild the dummy shader (less SourceShaderCache warning spam)

    

    Also write something about rebuilding shaders to infostream in

    Client::afterContentReceived()

    Also write something about rebuilding shaders to infostream in

    Client::afterContentReceived()

    Client::afterContentReceived()

    Improve finite liquid distribution, fix small bug

    Throw exception instead of assert on nested reliable packets

    

    Fixes a denial of service vulnerability, issue #784

    Fixes a denial of service vulnerability, issue #784

    Add texture bumpmapping feature.

    Whoever called a function parameter m_device is fired without notice.

    Lua main menu: Fix crash on init lua error, mapgen dropdown index, and new worlds not saving index

    Change debug optimization level back to -O1

    Update wiki url

    Move generateTextureFromMesh to TextureSource to fix a texture leak

    

    TextureSource has a list of textures to delete (m_texture_trash) so this

    provides a proper, non-hacky way to delete RTT textures. Also, the prior,

    hacky way of deleting them seems to be broken (see pull request #803).

    

    To avoid header file clutter by repeating the same long list of

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    TextureSource has a list of textures to delete (m_texture_trash) so this

    provides a proper, non-hacky way to delete RTT textures. Also, the prior,

    hacky way of deleting them seems to be broken (see pull request #803).

    

    To avoid header file clutter by repeating the same long list of

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    provides a proper, non-hacky way to delete RTT textures. Also, the prior,

    hacky way of deleting them seems to be broken (see pull request #803).

    

    To avoid header file clutter by repeating the same long list of

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    hacky way of deleting them seems to be broken (see pull request #803).

    

    To avoid header file clutter by repeating the same long list of

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    To avoid header file clutter by repeating the same long list of

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    arguments over and over again, store the arguments of

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    generateTextureFromMesh in a struct called TextureFromMeshParams.

    

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    Also fix issue #782 (Only use bilinear (and others) on item textures

    when settings allow it).

    when settings allow it).

    Fix possible 0 pointer access

    Replace C++ mainmenu by formspec powered one

    Cavegen: Prevent caves from occuring above ground level, and superfluous mixing of lava and water in caves

    Remove texture atlas / AtlasPointer, rename getTextureRaw to getTexture

    Remove unnecessary debug output in node_dig()

    Infinite tools in creative mode

    Fix i18n of some strings.

    Decoration: Add schematic rotation support

    Disable collision fix, its broke unit tests

    Fix sand, gravel falling stuck

    LuaVoxelManip: Fix minor bug with set_lighting, remove coordinate params for light and liquid updates

    Optimize liquid queue on generate map for liquid_finite

    Update documentation for get_mapgen_object

    Add Lua VoxelArea methods: contains, containsp, containsi

    Make generated water a shade darker to match up with older versions

    Add voxelarea.lua helper to builtin

    Dont write player files all the time

    Apply various fixes to several things

    LuaVoxelManip: Separate VoxelManip data get/set from emerging/blitting data back to map

    Add Lua on_mapgen_init callback, and minetest.set_mapgen_params API

    Add Lua PerlinNoiseMap:get#dMap_flat API

    Add minetest.get_mapgen_object to API

    Fix issue of VManip occasionally not blitting back blocks, and pitch black lighting bug

    Add LuaVoxelManip

    Fix ipv6 on windows

    Cavegen: fix division by 0 with abnormal max tunnel diameter sizes

    Math mapgen fix, ip show on connect, pathfinder segfault fix

    New math mapgen with fractal based worlds

    Add support for IPv6

    Two new configuration options are added:

         - "enable_ipv6" to enable/disable the overall use of IPv6

         - "ipv6_server" to enable/disable the use of IPv6 sockets when running

           a server (when "enable_ipv6" is enabled)

    Two new configuration options are added:

         - "enable_ipv6" to enable/disable the overall use of IPv6

         - "ipv6_server" to enable/disable the use of IPv6 sockets when running

           a server (when "enable_ipv6" is enabled)

         - "enable_ipv6" to enable/disable the overall use of IPv6

         - "ipv6_server" to enable/disable the use of IPv6 sockets when running

           a server (when "enable_ipv6" is enabled)

         - "ipv6_server" to enable/disable the use of IPv6 sockets when running

           a server (when "enable_ipv6" is enabled)

           a server (when "enable_ipv6" is enabled)

    Decoration: Add support for zero probability, fix breakage from last commit

    Print playername when failing to read playerfile and ignore files starting with .

    A handful of minor fixes to various things

    Decoration: Add Schematic decoration type

    Add Hungarian language.

Merge: 58f3cd3eb b1ebd9f79

    Merge remote-tracking branch 'origin/master'

    Translated using Weblate (Kirghiz)

    Add a setting for max loop count per step in liquid update

    Make minetest.debug accept multiple parameters; convert them to string

    Remove deprecated functions that don't work anymore from lua_api.txt

    Play placing sound only if place prediction was successful

    Dont dig or place nodes if interact priv is missing (clientside)

    Add drowning

    Restore old output format of dump()

    Compress textures

    Decoration: Place decorations in mgv6, check if air or cignore before placement

    Show number of objects in client environment in profiler (F6)

    Formspec: Don't perform black magic if selected item fits the guess

    Fix calculation of selected item (for not drawing it) in formspec

    

    The previous code did not work when the list did not start at index 0

    of the inventory list (issue #779).

    The previous code did not work when the list did not start at index 0

    of the inventory list (issue #779).

    of the inventory list (issue #779).

    Remove useless recalculation of bounding box (mapblock_mesh)

    Decoration, Ore: Resolve node names on Mapgen init

    Decoration: Change divlen to sidelen

    Add initial Decoration support, many misc. improvements & modifications

    Extend a delay in TestConnection from 50 to 100 milliseconds.

    

    The 50 ms delay causes frequent test failures on certain systems with

    slow network stacks, these failures go away with the 100 ms variant.

    The 50 ms delay causes frequent test failures on certain systems with

    slow network stacks, these failures go away with the 100 ms variant.

    slow network stacks, these failures go away with the 100 ms variant.

    Tweak IDropAction restriction handling in server.cpp

    Lazy sunday typo fixing. s/unban_player_of_ip/unban_player_or_ip/g

    Removed a redundant step which degraded performance

    Add basic unicode support to the console (linux workaround)

    Fix crash in dump() when index is a table

    Fixes cmake-gui causing RUN_IN_PLACE to be always off

    Reset dig_time when switching to a tool that cant dig the current node

    Enable word wrapping in profiler IGUIStaticText (freetype needs this)

    Play player_damage.ogg when recieving damage and additionally play player_falling_damage.ogg when recieving falling damage

    Fix class/struct forward declaration inconsistencies (good on ya, MSVC)

    Bump version to 0.4.7

    Revert "Fix multiple texture support for animated meshnodes." (broke existing models)

    

    This reverts commit 649dca4d16786ed4e5b74878f56b86dea4f02542.

    This reverts commit 649dca4d16786ed4e5b74878f56b86dea4f02542.

    Close console when it loses focus but it is still on screen

    Only add ^[forcesingle to get raw texture if atlas is used

    Fix multiple texture support for animated meshnodes.

    Corrected segfault when registering new biomes.

    Add and implement setting max_clearobjects_extra_loaded_blocks.

    

    Now Environment::clearAllObjects() unloads unused blocks in an interval

    defined by max_clearobjects_extra_loaded_blocks (default 4096).

    Now Environment::clearAllObjects() unloads unused blocks in an interval

    defined by max_clearobjects_extra_loaded_blocks (default 4096).

    defined by max_clearobjects_extra_loaded_blocks (default 4096).

    Delay deleting replaced textures (m_texture_trash)

    Call m_menumgr->deletingMenu from quitMenu in addition to destructor

    

    This fixes the bug where noMenuActive() keeps returning false after

    closing a menu until the mouse is moved, rendering the keyboard

    unusable (the_game calls input->clear() every frame when

    noMenuActive() is false).

    This fixes the bug where noMenuActive() keeps returning false after

    closing a menu until the mouse is moved, rendering the keyboard

    unusable (the_game calls input->clear() every frame when

    noMenuActive() is false).

    closing a menu until the mouse is moved, rendering the keyboard

    unusable (the_game calls input->clear() every frame when

    noMenuActive() is false).

    unusable (the_game calls input->clear() every frame when

    noMenuActive() is false).

    noMenuActive() is false).

    Add Code::Blocks project and build files to .gitignore

    Replace c55.me links

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Fix missing find_path and line_of_sight

    Fix some nullptr exceptions when handling invalid node inventories

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

Merge: ec039a3d1 64627817f

    Merge remote-tracking branch 'origin/master'

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Kirghiz)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Fix minetest.get_inventory(loc) always returning nil for "node" type loc

    Fix editbox default text being pre-selected in some cases

    Generate debug HUD text with ostringstream instead of snprintf.

    

    This should fix #730.

    This should fix #730.

    Liquid adjusting: continue to drop

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Bugfix: Update formname on showing new formspec while already one shown

    Fixed wrongly named invref:get_location() table members for nodes.

    

    Makes the result compatible with the minetest.get_inventory(location) param.

    Makes the result compatible with the minetest.get_inventory(location) param.

    Add ObjectRef.hud_set_hotbar_itemcount and add TOCLIENT_HUD_SET_PARAM

    Higher resolution menuheader

    Fix itemstack:add item not working correct

    Move scriptapi to separate folder (by sapier)

    

    On the lua side, notably minetest.env:<function>(<args>) should now

    be replaced by minetest.<function>(<args>).

    The old way is and will stay supported for a long time.

    

    Also:

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    On the lua side, notably minetest.env:<function>(<args>) should now

    be replaced by minetest.<function>(<args>).

    The old way is and will stay supported for a long time.

    

    Also:

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    be replaced by minetest.<function>(<args>).

    The old way is and will stay supported for a long time.

    

    Also:

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    The old way is and will stay supported for a long time.

    

    Also:

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    Also:

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    Update and clean up lua_api.txt (by celeron55)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    Move EnvRef to lua and remove add_rat and add_firefly (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    Add separate src/util/CMakeLists.txt, other minor fixes (by kahrl)

    Predict param2 of facedir nodes and attachment of attached_node nodes

    Make raillike nodes connect to any other raillike nodes if both are in the group connect_to_raillike

    Fix disappearing of wielditem

    Log non-fatal mod name conflict to actionstream instead of errorstream

    Dont animate changing wielditem from hand to hand

    Add menu_header.png and remove old, unused textures

    Fix typo in particle spawning

    Save settings after dropping main menu

    Fix link in minetest.conf.example

    Use the group "soil" for nodes that saplings grow on

    Fix lava damage on player's upper body

    Fix nearly all warnings

    Allow nil as puncher e.g. to do damage by tnt

    Add a little animation when changing the wielded item

    Dont teleport back if holding sneak when detaching/turn freemove off

    Fix EmergeThread names in log

    

    Concatenate the thread id as string instead of adding it to the pointer

    Concatenate the thread id as string instead of adding it to the pointer

    Write mods that are not in world.mt into it at world startup

    Dont load mods that have no entry in world.mt

    Install mods/mods_here.txt instead of mods/minetest/mods_here.txt

    Remove no virtual dtor warnings, make MapgenParams contain actual NoiseParams

    Fix regression of world loading caused by 81c863ac

    New modsystem

    Mods are placed in $path_<user/share>/mods

    They can be enabled per world in world.mt or the configure world window

    Mods are placed in $path_<user/share>/mods

    They can be enabled per world in world.mt or the configure world window

    They can be enabled per world in world.mt or the configure world window

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Remove survival and build from CMakeLists.txt

    Remove common from CMakeLists.txt, README.txt, lua-api.txt and buildwin.sh

    Only create SoundManager in main menu if USE_SOUND is true

    Fix memory leak in MeshUpdateThread

    Fix math for isBlockInSight.  Fixes #718 (client-side).

    Move kahrl to core devs in credits tab

    Fix Problem with uk Translation

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Dont drop fonts with ENABLE_FREETYPE=0

    Fix memory leak in run_tests()

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Update po files

Merge: be96fa2fb 822723c24

    Merge remote-tracking branch 'origin/master'

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Norwegian Bokmål)

    

    Currently translated at 61.7% (874 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Dutch)

    

    Currently translated at 100.0% (1415 of 1415 strings)

    Add mouse_sensitivity option

    Add progress bar to item visuals preloading

    Only use game filter in singleplayer tab; use menu_{background, overlay, header, footer}.png for other tabs

    Fix double free in createExtrudedMesh, reported by ptitSeb

    Add code to play main_menu.ogg in main menu

    Clear custom player HUDs when emerging players.  Fixes #711.

    Fix memory leak: remove InventoryAction after sending and applying

    Fix memory leaks: delete font in main and GUIChatConsole

    Fix memory leak by dropping sky

    Add clouds to all loading screens and better progress handling

    Fix gettext memory leaks

    Really fix itemdef memory leak

    Add --videomodes option to show available video modes

    Drop IrrlichtDevice when running --speedtests

    Fix world selection a bit (also fixes a main menu segfault)

    Add progress bar and clouds to loading screen

    Update default controls in README and pause menu

    Fix shader license headers to be LGPL

    Remove 'Meshbuffer ran out of indices' limitation

    fix static data not beeing stored correctly on deactivation

    Install menu textures of minetest_game

    Add header.png and footer.png support for games, and support texture packs via <gameid>_menu_<background/overlay/header/footer>.png

    Fix favorite Server List on Windows

    Fix documentation for HUD commands in protocol

    Optional dependencies and properly handle mod name conflicts again

    Don't predict placement of nodes if they would replace a non buildable_to node

    Predict wallmounted param2 during node placement prediction.

    

    Also clean up the_game a bit: move node placement prediction to a

    separate function.

    Also clean up the_game a bit: move node placement prediction to a

    separate function.

    separate function.

    Server: force block send of pointed_pos_under after predicted node place

    Use DIR_DELIM instead of / in file paths

    Show game name instead of game ID of selected game

    Switch menu to game selected in world creation dialog

    Pre-select current game in world creation dialog

    games/minimal: Add menu/background.png and menu/icon.png

    Filter worlds by selected game

    Get menu background image from selected game

    Fix minetest.features

    Move sfan5 to core devs

Merge: 97cddd1b9 2b0d1710a

    Merge remote-tracking branch 'origin/master'

    Rename "no" (Norwegian) to "nb" (Norwegian Bokmål)

Merge: f1f2004cb 898a4e441

    Merge remote-tracking branch 'origin/master'

    Translated using Weblate (Ukrainian)

    

    Currently translated at 57.3% (839 of 1462 strings)

    Translated using Weblate (Portuguese (Brazil))

    

    Currently translated at 98.7% (1398 of 1416 strings)

    Translated using Weblate (Kirghiz)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Norwegian language.

    Add a Way of checking for specific Feature with Lua Adds minetest.get_feature() and minetest.has_feature()

    Fix itemdef drop on NULL texture

    Actually fix shader3 alpha this time

    Enhance caves for mgv7, add ravines

    Minor hud.cpp cleanup

    Ability to change the crosshair using textures

    Generalize hud_builtin_enable into hud_set_flags

    Tune finite liquids, indev huge caves

    Fix serverlist on -DRUN_IN_PLACE=0 (use path_user instead of path_share)

    Move player collisionbox to player class

    kahrl is back

    Transform alpha channel as well in shader

    Fix compatibility of RBA's NDT_GLASSLIKE_FRAMED

    Improve getFree*ActiveObjectId to reduce common case cpu usage drasticaly

    Translated using Weblate (Kirghiz)

    Add new drawtype GLASSLIKE_FRAMED

    Added support to disable built-in HUD elements

    Fixes possible crash when using hud_change with "align" or "offset"

    Fix to: addUpdateMeshTaskWithEdge

    Check in all 6 directions instead of just 3.

    Check in all 6 directions instead of just 3.

    Add option to use texture alpha channel

    Disable fall bobbing by default; enable using fall_bobbing_amount = 1.0

    Grow dirt_with_snow instead of dirt_with_grass if snow is above it

    Add minetest.get_player_ip()

    Add option to not prepend "Server -!- " to messages sent with minetest.chat_send_player()

    Added offset support for HUD items

    Added support for alignment in HUD items

Merge: 4117ab473 58ded5cd2

    Merge remote branch 'origin/master'

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Kirghiz)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translation to Portuguese of Brazil for Minetest

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    mgv7: Implement getGroundLevelAtPoint(), fix layer of topnodes at chunk Y boundaries, remove growGrass()

    Fix findSpawnPos()

    Fix hud_change stat argument retrieval

    Class-ify caves & move to cavegen.cpp, fix cave regression, add caves to Mapgen V7

    Add direction parameter to statbars in HUD API

    Fix health bar overlap when a larger texture is used

    Fix health bar overlap when a larger texture is used

    Fix Lua HUD documentation

Merge: 9e6376bd9 852f768a7

    Merge remote branch 'origin/master'

    Add dutch translation

Merge: e385af7cc e60eb3205

    Merge remote branch 'origin/master'

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Kirghiz)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Add dutch translation

    Split HUD code off to hud.cpp, make into a class, extensive Lua HUD modification

    Lua HUD

Merge: ce901f4c4 9e0bb9446

    Merge pull request #654 from ShadowNinja/remove_old_makefile

    

    Remove old Makefile

    Remove old Makefile

    Remove old Makefile(that is what git is for)

    Fix double free, null texture drop

    Swing the camera down when the player lands on the ground, based on the velocity the surface is hit with.

    Fix masterserver javascript: adjustable output id

    Bugfixes to get_craft_recipe and get_all_craft_recipes.

    Improvements to get_all_craft_recipes (see api doc)

    Improvements to get_all_craft_recipes (see api doc)

    fix bug in scriptapi line_of_sight

    fix warnings for pathfinder debug traces

    fix warnings for pathfinder debug traces

    fix objects colliding with its own collision boxes

    fix emergemanager memory leaks

    fix various memory leaks

    fix extruded items texture leak

    Use system wide LuaJIT if aviable.

    fix memory leak on sound shutdown

    fix memory leak in loadMedia

    addon extended resource accounting

    fix inventory image texture leak

    fix memory leaks introduced by invalid gettext usage

    replace Server smart pointer with conventional one to gain control over dtor call order

    fix memory leak on shader shutdown

    fix memory leak in itemdef

    cleanup useless code

    cleanup useless code

    fix huge texture leak in tiledef

    fix minor glitches too

    fix minor glitches too

    fix 3d model mesh leak

    fix mesh leak in camera class

    Add param2 field for ores, some minor fixes and misc. code cleanup

Merge: 33052abf4 4468ea84e

    Merge remote branch 'origin/master'

    Add Ukrainian language.

    Fix black tree leaves, reduce above-ground cave shadows

    Fix crash on creating map with invalid mg_name

    Revert "Fix to be able to build from dir different than source dir"

    This commit broke RUN_IN_PLACE

    This commit broke RUN_IN_PLACE

    Add Mapgen V7, reorganize biomes

    Adjusting water removing above unloaded blocks

    Don't re-write entire map_meta.txt if a setting is missing

    Fix to be able to build from dir different than source dir

    Don't flow finite liquid into an unloaded chunk

    fix memory leak

    Add Dijkstra A* and A* without prefetching pathfind algorithms

    Only enqueue falling nodes if they really want to fall

    unkn own block -> unkn own node

    Add private messaging with /msg

    Use the nodebox as selection box if it's not set manually

    Install "build" and "survival" games with "make install"

    Dont allow fast move in water or ladder when aux1_descend is true

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Fix nick completion

    Add a delay to nodeupdate()

    Allow modifying movement speed, jump height and gravity per-player via the Lua API.

    Check if the address field is empty when hitting enter on the multiplayer tab

    Limit speed in collisionMoveResult for avoiding hangs

    Fix camera "jumping" when attached and the parent goes too fast

    Update doc/lua-api.txt

    Bump version to 0.4.6

Merge: 6e96bc98d 9ff801265

    Merge remote branch 'origin/master'

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Kirghiz)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Return an ItemStack in minetest.item_place() if nodes' on rightclick doesnt return it

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Ore generation flags, implement ore absolute height

    Increase value range of Ore::clust_scarcity

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

Merge: 5b597a6bf a2e570666

    Merge remote branch 'origin/master'

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Kyrgyz language

    Add a small optimization to the menu splash and remove a old comment

    Don't load menu textures every frame

    Don't grant priveleges to non-existent players.

    

    When accidentally misspelling a name, privileges are sometimes granted to non-existent players, leaving them with the extra privileges, but without the default privileges, if they ever join the server. This corrects that by disallowing /grant from working with invalid players. For completeness, it does the same for /revoke.

    When accidentally misspelling a name, privileges are sometimes granted to non-existent players, leaving them with the extra privileges, but without the default privileges, if they ever join the server. This corrects that by disallowing /grant from working with invalid players. For completeness, it does the same for /revoke.

    Install locales in minetest directory, so they are correctly loaded

    Fix MapgenV6::generateCaves possible division by 0 and misc. cosmetic fixes

    Optimize CNodeDefManager::getIds

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Update po files

Merge: 0d83bdc3a 1aa50b136

    Merge remote branch 'origin/master'

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (Estonian)

    

    Currently translated at 44.1% (616 of 1396 strings)

    Make the textbox for serverlist title wider

    GUI: Make singleplayer default tab, store selected serverlist, show title of serverlist

    Fix build on Linux with some glibcs

    Fix backward compatibility for server uptime in master server web page

    Masterserver: report gameid, uptime, cosmetic fixes on server web page

    Add varying levels of precision to TimeTaker

    Add different place sound for nodes

    New damage system, add damageGroups to ToolCapabilities, bump protocol version

    Update Credits tab

    Fix node replacement in not-quite-loaded chunks

    

    When first entering an area, sometimes placing nodes replaces other nodes that are not buildable_to. This seems to be caused by the fact that nodes in unloaded map blocks are treated as ignore, a node that is buildable_to. This fixes that, by using get_node_or_nil() instead of the previously-used get_node(), then checking to see if the nodes were actually loaded before replacing.

    When first entering an area, sometimes placing nodes replaces other nodes that are not buildable_to. This seems to be caused by the fact that nodes in unloaded map blocks are treated as ignore, a node that is buildable_to. This fixes that, by using get_node_or_nil() instead of the previously-used get_node(), then checking to see if the nodes were actually loaded before replacing.

    Fix last singlenode modification

    Don't replace existing nodes in singlenode mapgen

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Prevent infinite loop with invalid Inventory format

    Fix parameter list of obj:set_attach() and obj:set_bone_position()

    Closed add object <-> object collision handling

    README.txt: Add some build stuff

    Vary ore sheet y position by noise

    Ensure ore can fit in OreSheet::generate()

    Use minetest.register_ore() in minimal

    Add more error checking to l_register_ore

    Fix indentation of lua_api.txt

    Update lua_api.txt

    

    set_sky does work with on_joinplayer

    Add Ore infrastructure and l_register_ore()

    Mapgen indev: float islands, larger far biomes

    Allow spawning particles from the server, from lua

    

    Spawn single particles or make use of ParticleSpawner for many randomly spawned particles.

    Accessible in Lua using minetest.spawn_particle and minetest.add_particlespawner.

    Increase Protocol Version to 17.

    

    Conflicts:

            src/clientserver.h

    Spawn single particles or make use of ParticleSpawner for many randomly spawned particles.

    Accessible in Lua using minetest.spawn_particle and minetest.add_particlespawner.

    Increase Protocol Version to 17.

    

    Conflicts:

            src/clientserver.h

    Accessible in Lua using minetest.spawn_particle and minetest.add_particlespawner.

    Increase Protocol Version to 17.

    

    Conflicts:

            src/clientserver.h

    Increase Protocol Version to 17.

    

    Conflicts:

            src/clientserver.h

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            src/clientserver.h

    Move rightclickable to the proper place

    Include backface_culling flag in serialization format for TileDefs

    

    This way flowing liquids actually show the backface when specified to

    do so. Without this, TileDefs where by default initialized with

    backface_culling = true and never set otherwise.

    

    For backwards compatibility, an old client connected to a new server,

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    This way flowing liquids actually show the backface when specified to

    do so. Without this, TileDefs where by default initialized with

    backface_culling = true and never set otherwise.

    

    For backwards compatibility, an old client connected to a new server,

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    do so. Without this, TileDefs where by default initialized with

    backface_culling = true and never set otherwise.

    

    For backwards compatibility, an old client connected to a new server,

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    backface_culling = true and never set otherwise.

    

    For backwards compatibility, an old client connected to a new server,

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    For backwards compatibility, an old client connected to a new server,

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    or a new client connected to an old server will behave like before

    i.e., backface_culling is always true.

    i.e., backface_culling is always true.

    Set of changes to build mineTest using Visual Studio 11.0. These affect

    the following:

    1. String concatenation in guiMainMenu.cpp - it is required for all

    individual strings to be of the same type <unicode/non-unicode>; adding

    explicit L qualifier before the other strings.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    the following:

    1. String concatenation in guiMainMenu.cpp - it is required for all

    individual strings to be of the same type <unicode/non-unicode>; adding

    explicit L qualifier before the other strings.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    1. String concatenation in guiMainMenu.cpp - it is required for all

    individual strings to be of the same type <unicode/non-unicode>; adding

    explicit L qualifier before the other strings.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    individual strings to be of the same type <unicode/non-unicode>; adding

    explicit L qualifier before the other strings.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    explicit L qualifier before the other strings.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    2. Correcting type of BlockMakeData to struct in place of class forward

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    declarations. This information is used for name decoration by Visual

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    Studio, leading to linker errors in case of mismatches.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    3. Windows headers define max as a macro somewhere, leading to a compile

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    time error in profiler.h; using () around function to prevent macro match

    from occurring.

    from occurring.

    6d facedir

Merge: 34b185e95 f98d0433f

    Merge pull request #563 from proller/guest

    

    Random guest name and finite liquid checkbox

    Random guest name and finite liquid checkbox

    Random guest name and finite liquid checkbox

    Add singlenode mapgen; generates solely the node 'mapgen_singlenode', defaults to air

    CMakeLists.txt: Add games/common to be installed when available

    Support game-specific minetest.conf

    lua_api.txt: Document paths, games and common mod loading

    Update buildwin32.sh to get minetest/common

    Update README.txt to instruct to get minetest/common too

    Common mods support

    

    Implement "common mods", includeable from

      {$user,$share}/games/common/$modname

    by using the game.conf setting

      common_mods = $modname,$modname2,...

    Implement "common mods", includeable from

      {$user,$share}/games/common/$modname

    by using the game.conf setting

      common_mods = $modname,$modname2,...

      {$user,$share}/games/common/$modname

    by using the game.conf setting

      common_mods = $modname,$modname2,...

    by using the game.conf setting

      common_mods = $modname,$modname2,...

      common_mods = $modname,$modname2,...

    Allow falling nodes to pass through solid "buildable_to" nodes.

    Git-ignore SQLite build files

    Fix Map::initBlockMake to actually use chunksize setting

    Prevent passing nil to unpack() in minetest.after

    Add jungle grass to jungles

    Don't erase modified_blocks

    Add FPS limit to menu clouds

    lua methods set_look_pitch and set_look_yaw

    Fix new_style_water

    Add missing settings to minetest.conf.example

    Allow minetest.after to take a variable number of arguments

    build with ogles2 driver

    Some minor cleanups from the last commit

    initial mapgen indev version with farscale feature and huge caves

    Make saplings only grow on dirt or grass, make jungle tree trunks only replace air

    Re-add jungles, apple trees

    Optimize Mapgen::updateLighting(), add setLighting()

    Liquid fine tuning

    Remove 'tape and glue', update Credits tab

    Add cloud menu background by Krisi, configurable with the menu_clouds option.

    Also add a menuheader, menusplash, menufooter_clouds, and allow HD menu footers.

    And finally don't git-ignore textures/base/.

    Also add a menuheader, menusplash, menufooter_clouds, and allow HD menu footers.

    And finally don't git-ignore textures/base/.

    And finally don't git-ignore textures/base/.

    fix typo invalid for loop end

    Clean up Mapgen

    Move l_get_all_craft_recipes to scriptapi_craft

    Migrate to STL containers/algorithms.

    Update menulogo.png

    Re-add dungeons in new dungeongen.cpp

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Change libjson to libjsoncpp in .gitignore

    Fix Irrlicht includes in scriptapi_*

    fix link if system json lib exists

    Added method to get all registered recipes for item(node)

    Allow any character in formspec strings with escape char

    split scriptapi.cpp

    

    Remerge some files in order to reduce number of additional files

    

    Make necessary changes for split, rename files, reorganize some bits

    Remerge some files in order to reduce number of additional files

    

    Make necessary changes for split, rename files, reorganize some bits

    Make necessary changes for split, rename files, reorganize some bits

    Bump version to 0.4.5

    Fix pickup of dropped items when the player only takes a part of them

Merge: 5917e8629 72abd5a88

    Merge pull request #513 from sfan5/patch-2

    

    Add python script to doc/protocol.txt

    Add python script to doc/protocol.txt

    Add one more curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);

Merge: 48b999a8d 382387830

    Merge remote branch 'origin/master'

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Estonian language template

    Fix "longjmp causes uninitialized stack frame" (serverlist.cpp)

    Add python script to doc/protocol.txt

Merge: 22e186b4a 7caa28a6a

    Merge remote branch 'origin/master'

Merge: 372acf7b8 d31f07bd4

    Merge remote branch 'origin/master'

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Change default settings for log level, texture atlas, document new settings

    Fix nodeplacement prediction

    Fix most warnings, re-fix MSVC compile error

Merge: 9b5f18264 b90e431fc

    Merge pull request #482 from proller/liquid

    

    finite liquid

    finite liquid

    Remove dead code, relocate some code

    Fix selection of # threads, set default to 1 thread

    Fix build on Windows

    Fix most walled-off caves

    Tune queue limits, some other adjustments

    Misc. cleanup and minor fixes

    Add multi-Emerge thread support

    Add emerge queue limit configuration

    Fix EmergeThread hang on exit

    Add global and per-peer queue limits

    Add emerge.cpp, initial EmergeThread changes

    

    - Neatly placed all emerge related code into a new file, emerge.cpp

    - Greatly cleaned up the code in EmergeThread::Thread()

    - Reworked Emerge queue.  Now an actual std::queue of v3s16 block positions

    - Removed the completely unnecessary map of peer ids requesting blocks

    - Neatly placed all emerge related code into a new file, emerge.cpp

    - Greatly cleaned up the code in EmergeThread::Thread()

    - Reworked Emerge queue.  Now an actual std::queue of v3s16 block positions

    - Removed the completely unnecessary map of peer ids requesting blocks

    - Greatly cleaned up the code in EmergeThread::Thread()

    - Reworked Emerge queue.  Now an actual std::queue of v3s16 block positions

    - Removed the completely unnecessary map of peer ids requesting blocks

    - Reworked Emerge queue.  Now an actual std::queue of v3s16 block positions

    - Removed the completely unnecessary map of peer ids requesting blocks

    - Removed the completely unnecessary map of peer ids requesting blocks

    Update Copyright Years

    Update buildbot

    Change Minetest-c55 to Minetest

    Update README

    new adjustable finite liquid

Merge: 6b9906687 f0d70d4e8

    Merge pull request #505 from RealBadAngel/master

    

    Add seed parameter for default and L-system trees

    Add seed parameter for default and L-system trees

    Add seed parameter for default and L-system trees

Merge: bc2e9dbaf 4d73d99eb

    Merge pull request #503 from RealBadAngel/master

    

    Add sound volume controls to ingame menu

    Add sound volume controls to ingame menu

    Read server_announce from minetest.conf for GUI

    Add sound volume controls to ingame menu

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

Merge: 7f240aea1 12e9f3d01

    Merge pull request #431 from sapier/dtime_clamping

    

    add limit for (collision handling) steps to avoid runaway memory consumption

    add limit for (collision handling) steps to avoid runaway memory consumption

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Added debug log level setting

    Fix json include

    new auto masterserver

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Drop nodes as items when dugged and no room in inventory and dont remove dropped items when no room in inventory

Merge: fc61c8809 89b88917a

    Merge pull request #500 from doserj/server_report_missing_deps

    

    Print missing mod dependencies on server start

    Print missing mod dependencies on server start

    Print missing mod dependencies on server start

    i.e., not only the mod with missing dependencies, but also the missing

    dependencies itself. (This already used to be the case before the mod

    selection gui was added)

    

    Also, mods with unsatisfied dependencies are no longer reported as

    mods that could not be found.

    dependencies itself. (This already used to be the case before the mod

    selection gui was added)

    

    Also, mods with unsatisfied dependencies are no longer reported as

    mods that could not be found.

    selection gui was added)

    

    Also, mods with unsatisfied dependencies are no longer reported as

    mods that could not be found.

    Also, mods with unsatisfied dependencies are no longer reported as

    mods that could not be found.

    mods that could not be found.

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Dont drop tools on rightclick

    Disable placement prediction for nodes that use on_rightclick

    Set numeric locale for Lua

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

Merge: c88d89d26 9ebf1fd3b

    Merge pull request #465 from doserj/mod_selection_empty_modname_fix

    

    Remove use of operator[] on a std::map, so no spurious elements get inse...

    Remove use of operator[] on a std::map, so no spurious elements get inse...

    Some kind of middleway values for player acceleration for now

    Restore old acceleration behavior until something is actually agreed on (part 2)

    Restore old acceleration behavior until something is actually agreed on

    Add Freetype support

    Improved Player Physics

    Fix minetest.item_place_node() and minetest.item_drop() to always return an ItemStack

    Fix to on_rightclick not able to change wielded_item

    Server requires gettext library as well

    Enable multiline signs

    Dont remove grass under unloaded blocks

    Disable backface culling for drawtype plantlike and only draw 2 faces instead of 4

    

    This way, plants actually show the real backface on their back side,

    i.e., the front face mirrored around the vertical axis, instead of

    showing the front face on both sides. This looked weird when the

    texture was not symmetrical around the vertical axis.

    This way, plants actually show the real backface on their back side,

    i.e., the front face mirrored around the vertical axis, instead of

    showing the front face on both sides. This looked weird when the

    texture was not symmetrical around the vertical axis.

    i.e., the front face mirrored around the vertical axis, instead of

    showing the front face on both sides. This looked weird when the

    texture was not symmetrical around the vertical axis.

    showing the front face on both sides. This looked weird when the

    texture was not symmetrical around the vertical axis.

    texture was not symmetrical around the vertical axis.

    Don't fall off nodes if sneaking with free_move on but without fly privileges

    Don't see through nodes without noclip privileges

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

Merge: 0cda2d519 9b2044351

    Merge remote branch 'origin/master'

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Japanese)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Danish)

    

    Currently translated at 39.9% (566 of 1416 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Translated using Weblate (Portuguese)

    

    Currently translated at 92.6% (1354 of 1462 strings)

    Document remote_media setting

    Fix compile error (MSVC2010).

    Add flag string settings, flat map option

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Fix assertion condition in initializePaths()

    Don't write control character to verbosestream

    Fix and improve noise map functions

    Add Perlin noise map Lua API

    Improve random map seed generation

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

Merge: c48c6d188 286867669

    Merge remote branch 'origin/master'

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Add Japanese & Korean languages.

    Translated using Weblate (Chinese (China))

    

    Currently translated at 73.6% (676 of 918 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

Merge: c33654c21 6424c5b69

    Merge remote branch 'origin/master'

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Italian)

    

    Currently translated at 99.7% (1412 of 1416 strings)

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Translated using Weblate (French)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Add Chinese Simplified & Portuguese.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Remove use of operator[] on a std::map, so no spurious elements get inserted. (fixes #464)

    

    All uses of operator[] in guiConfigureWorld.cpp have been replaced

    with .find() operations.

    

    In some places, operator[] had been called with mod names of "Add-Ons"

    or "N/A", which would insert a default-constructed ModSpec into the

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    All uses of operator[] in guiConfigureWorld.cpp have been replaced

    with .find() operations.

    

    In some places, operator[] had been called with mod names of "Add-Ons"

    or "N/A", which would insert a default-constructed ModSpec into the

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    with .find() operations.

    

    In some places, operator[] had been called with mod names of "Add-Ons"

    or "N/A", which would insert a default-constructed ModSpec into the

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    In some places, operator[] had been called with mod names of "Add-Ons"

    or "N/A", which would insert a default-constructed ModSpec into the

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    or "N/A", which would insert a default-constructed ModSpec into the

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    list of add-on mods. In other places, the use of operator[] was safe

    now, but it probably is safer for future changes to use .find()

    everywhere.

    now, but it probably is safer for future changes to use .find()

    everywhere.

    everywhere.

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translate key functions in key change menu

    Translated using Weblate (Polish)

    

    Currently translated at 79.1% (1121 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

Merge: cbbb6447b 9d69b3858

    Merge pull request #442 from kwolekr/mingw_compile_fix

    

    Fix compile under MingW

    Fix compile under MingW

Merge: 6912f65cd 91e88196c

    Merge pull request #441 from kwolekr/mapgen_factories

    

    Make mapgen factory setup more elegant, add mapgen_v6.h

    Make mapgen factory setup more elegant, add mapgen_v6.h

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Translated using Weblate (Spanish)

    

    Currently translated at 83.0% (1214 of 1462 strings)

    Translated using Weblate (Russian)

    

    Currently translated at 90.1% (1277 of 1416 strings)

    Add Spanish, Russian, Polish and Romanian languages.

    Dont call on_rightclick() if sneak is pressed

    Place block when holding sneak while right-clicking nodes with formspec

    Workaround failing Travis clang build.

Merge: 13358c29b eb2a8fe8b

    Merge pull request #447 from sapier/add_lua_log_parameter_check

    

    BUGFIX: check parameters for minetest.log lua function

    BUGFIX: check parameters for minetest.log lua function

    check parameters for minetest.log lua function

Merge: aaee2786a 035933f80

    Merge remote branch 'origin/master'

    Translated using Weblate (German)

    

    Currently translated at 100.0% (1462 of 1462 strings)

    Slightly improved version of mystrtok_r

    Fix compile under MingW

    Make mapgen factory setup more elegant, add mapgen_v6.h

    Tweak buildbot

    

    * CURL support

    * only download packages if they don't exist

    * fixed download links (libvorbis and libogg)

    * manual downloading if automatic downloading fails (only minetest and minetest_game)

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    * CURL support

    * only download packages if they don't exist

    * fixed download links (libvorbis and libogg)

    * manual downloading if automatic downloading fails (only minetest and minetest_game)

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    * only download packages if they don't exist

    * fixed download links (libvorbis and libogg)

    * manual downloading if automatic downloading fails (only minetest and minetest_game)

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    * fixed download links (libvorbis and libogg)

    * manual downloading if automatic downloading fails (only minetest and minetest_game)

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    * manual downloading if automatic downloading fails (only minetest and minetest_game)

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    * mingwm10.dll and openal_stripped.zip are downloaded automatically

    Treegen update. Some new symbols. Speed up code a bit.

Merge: c4af909ac f09986124

    Merge pull request #436 from doserj/mod_selection

    

    Fix some crashes and improved behaviour for mod selection gui

    Fix some crashes and improved behaviour for mod selection gui

    Update translation files

    

    strings from #12131 and #7629 included prematurely for sake of the release

    Make sure that settings are written to config file when settings are removed.

    

    Previously, settings where only written when a value has changed, and

    removal of a setting value didn't count as a change.

    Previously, settings where only written when a value has changed, and

    removal of a setting value didn't count as a change.

    removal of a setting value didn't count as a change.

    Fix crash when pressing delete button in server browser and no server is selected.

    

    A check for that was there, but was comparing an unsigned variable to

    -1, which doesn't work.

    A check for that was there, but was comparing an unsigned variable to

    -1, which doesn't work.

    -1, which doesn't work.

    Improve behaviour for empty modpacks and when no mods at all are installed:

    

    Only show enable all / disable all buttons for all add-ons when at

    least one add-on is installed. When no add-on ist installed, don't

    show any buttons or checkboxes.

    

    Added is_modpack flag to ModSpec to distinguish empty modpacks from

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    Only show enable all / disable all buttons for all add-ons when at

    least one add-on is installed. When no add-on ist installed, don't

    show any buttons or checkboxes.

    

    Added is_modpack flag to ModSpec to distinguish empty modpacks from

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    least one add-on is installed. When no add-on ist installed, don't

    show any buttons or checkboxes.

    

    Added is_modpack flag to ModSpec to distinguish empty modpacks from

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    show any buttons or checkboxes.

    

    Added is_modpack flag to ModSpec to distinguish empty modpacks from

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    Added is_modpack flag to ModSpec to distinguish empty modpacks from

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    normal mods and check this flag in mod selection gui so that empty

    modpacks are not treated like mods that can be enabled or disabled.

    modpacks are not treated like mods that can be enabled or disabled.

    Fix crash when no world is selected and configure button is pressed.

    

    by moving return statement out of if-then-else clause...

    by moving return statement out of if-then-else clause...

    Disable travis email notifications.

    Add .travis.yml

    Fix msvc build

    add support for saving settings by lua command (server doesn't autosave on exit)

    Add mapgen parameters to minetest.conf.example

    Use a string identifier for a mapgen instead of version

    Fix compile on certain Linux configurations, reduce spawn point height

    Removed Mapgen V7 for now

    Last set of minor cleanups

    Fix MapgenV6::getGroundLevelAtPoint()

    Finish and clean up mapgen configuration

    Add Settings::getStruct and Settings::setStruct

    Clean up EmergeManager, do initial work on Mapgen configuration

    Readded and optimized mapgen V6

    Cleaned & enhanced noise object management

    Add initial Lua biomedef support, fixed biome selection

    The new mapgen, noise functions, et al.

    Make WATER_LEVEL configurable, fix slight comparison bug in findSpawnPos()

    Only clear block modified flag if writing to db was successful

    Make cloud height user-configurable

    stop MSVC++ from generating dumb warnings

    Proper RUN_IN_PLACE support for OSX and FreeBSD

    Basic support for configuring which mods to load for each world

    

    settings.h: added function to return all keys used in settings, and a

    function to remove a setting

    

    mods.{h,cpp}: added class ModConfiguration that represents a subset of the installed mods.

    

    server.{h,cpp}: server does not load add-on mods that are disabled in

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    settings.h: added function to return all keys used in settings, and a

    function to remove a setting

    

    mods.{h,cpp}: added class ModConfiguration that represents a subset of the installed mods.

    

    server.{h,cpp}: server does not load add-on mods that are disabled in

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    function to remove a setting

    

    mods.{h,cpp}: added class ModConfiguration that represents a subset of the installed mods.

    

    server.{h,cpp}: server does not load add-on mods that are disabled in

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    mods.{h,cpp}: added class ModConfiguration that represents a subset of the installed mods.

    

    server.{h,cpp}: server does not load add-on mods that are disabled in

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    server.{h,cpp}: server does not load add-on mods that are disabled in

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    the world.mt file. mods are disabled by a setting of the form

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    "load_mod_<modname> = false". if no load_mod_<modname> = ... setting

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    is found, the mod is loaded anyways for backwards compatibilty. server

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    also complains to errorstream about mods with unstatisfied

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    dependencies and about mods that are not installed.

    

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    guiConfigureWorld.{h,cpp}: shows a treeview of installed add-on mods

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    and modpacks with little icons in front of their name indicating their

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    status: a checkmark for enabled mods, a cross for disabled mods, a

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    question mark for "new" mods

    

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    Mods can be enabled/disabled by a checkbox. Mods also show a list of

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    dependencies and reverse dependencies. double-click on a mod in

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    dependency or reverse dependency listbox selects the corresponding

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    mod. Enabling a mod also enables all its dependencies. Disabling a mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    also disables all its reverse dependencies.

    

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    For modpacks, show buttons to enable/disable all mods (recursively,

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    including their dependencies) in it.

    

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    Button "Save" saves the current settings to the world.mt file and

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    returns to the main menu. Button "Cancel" returns to main menu without

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    saving.

    

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    basic keyboard controls (if the proper widget has keyboard focus):

    

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    up/down: scroll through tree of mods

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    left/right: collaps/expand a modpack

    space: enable/disable the selected mod

    space: enable/disable the selected mod

    Add a list of servers to the "Multiplayer" tab

    

    If USE_CURL is set, it also downloads a list from a remote server.

    The url of this list is configurable in minetest.conf using the setting "serverlist_url"

    The local list of favorite servers is saved in client/serverlist/filename

    filename is also configureable using the setting "serverlist_file"

    If USE_CURL is set, it also downloads a list from a remote server.

    The url of this list is configurable in minetest.conf using the setting "serverlist_url"

    The local list of favorite servers is saved in client/serverlist/filename

    filename is also configureable using the setting "serverlist_file"

    The url of this list is configurable in minetest.conf using the setting "serverlist_url"

    The local list of favorite servers is saved in client/serverlist/filename

    filename is also configureable using the setting "serverlist_file"

    The local list of favorite servers is saved in client/serverlist/filename

    filename is also configureable using the setting "serverlist_file"

    filename is also configureable using the setting "serverlist_file"

    add limit for steps to avoid runaway memory consumption by collision handling

    Bugfix: else repeat_rightclick_timer = 0;

    Add particles

    Fix spread of items in falling code

    fix integer overflow (fixes #414)

    

    liquid_kind was declared as an u8, but used to hold a content_t value, which is delcared to be a u16.

    

    changing this fixes (at least for me) the problem reported in bug #414.

    liquid_kind was declared as an u8, but used to hold a content_t value, which is delcared to be a u16.

    

    changing this fixes (at least for me) the problem reported in bug #414.

    changing this fixes (at least for me) the problem reported in bug #414.

    fixes node timer bug (fixes #407).

    

    Previously, when a block was activated, on_timer callbacks where

    called with the relative position of the node inside the block,

    instead of the absolute position of the node.

    Previously, when a block was activated, on_timer callbacks where

    called with the relative position of the node inside the block,

    instead of the absolute position of the node.

    called with the relative position of the node inside the block,

    instead of the absolute position of the node.

    instead of the absolute position of the node.

    Fixed two typo's in commit 615fd498bc

    Disable all HP handling if enable_damage is false

    Add a setting to enable always flying fast

    Fix buttons not working for Lua-triggered formspecs

    L-Systems treegen update.

    "or" should be "||". Don't use "or", "and", etc.. It breaks build.

    Implement textarea in formspec, a multiline input field

    Fix typo doubletab -> doubletap

    Fixed content_abm aliases

    

    Since commit 5a13c49492 when I'm in a new area of the world that hasn't

    yet been generated the debug log gets flooded with the following error:

    

    Map::setNode(): Not allowing to place CONTENT_IGNORE while trying to

    replace "default:dirt_with_grass" at (729,1,-219) (block (45,0,-14))

    

    This commit fixes that.

    Since commit 5a13c49492 when I'm in a new area of the world that hasn't

    yet been generated the debug log gets flooded with the following error:

    

    Map::setNode(): Not allowing to place CONTENT_IGNORE while trying to

    replace "default:dirt_with_grass" at (729,1,-219) (block (45,0,-14))

    

    This commit fixes that.

    yet been generated the debug log gets flooded with the following error:

    

    Map::setNode(): Not allowing to place CONTENT_IGNORE while trying to

    replace "default:dirt_with_grass" at (729,1,-219) (block (45,0,-14))

    

    This commit fixes that.

    Map::setNode(): Not allowing to place CONTENT_IGNORE while trying to

    replace "default:dirt_with_grass" at (729,1,-219) (block (45,0,-14))

    

    This commit fixes that.

    replace "default:dirt_with_grass" at (729,1,-219) (block (45,0,-14))

    

    This commit fixes that.

    This commit fixes that.

    Switch to fly mode if spacebar is doubleclicked

    Can be turned off in the key change GUI or in minetest.conf via doubletab_space

    Can be turned off in the key change GUI or in minetest.conf via doubletab_space

    Repeated right clicking when holding the right mouse button

    Configure using repeat_rightclick_time in minetest.conf

    Configure using repeat_rightclick_time in minetest.conf

    Add on_rightclick(pos, node, clicker) callback for nodes

    Adjust the maximum alpha of the red hurt screen

    Tilt camera on player damage (tweaked by PilzAdam)

    Change the nodenames for dirt -> grass and sapling -> tree abms to match the mapgen aliases

    Replace constant red hurt screen with fade out red

    Add ServerEnvironment::setNode()/removeNode() to allow setting nodes from the C++ side with proper script-defined initialization/destruction

    Add InvRef:get_location()

    Call this 0.4.4-d1 because it has a protocol addition since 0.4.4

    Add TOCLIENT_SHOW_FORMSPEC to display formspecs at client from lua

    Bugfixes to item_image formspec method

    Fixed compile issues on windows

    

    With latest upstream L-Systems treegen.

    With latest upstream L-Systems treegen.

    L-System treegen

    Use aux1 to move fast when flying

    Add selectionbox_color, crosshair_color, and crosshair_alpha options

    Fix 'longjmp causes uninitialized stack frame' in cURL

    Initialize all member variables of LuaEntitySAO

    Fixed two typos in wireshark lua file.

    Fix keycodes (#325)

    Prefer shared cURL library instead of the static one.

    Fixed u64 ambiguous symbol error

    

    Fixed the compiler not being able to determine which symbol it should

    use when compiling Minetest as 64bit with Irrlicht 1.8+

    Fixed the compiler not being able to determine which symbol it should

    use when compiling Minetest as 64bit with Irrlicht 1.8+

    use when compiling Minetest as 64bit with Irrlicht 1.8+

    Tweak CMake files for cURL

    Add ability to change the itemstack in placenode callbacks

    Fix falling damage when not flying

    Make m_media_fetch_threads to contain MediaFetchThread* instead of MediaFetchThread

    Fix hypen used as minus sign (manpages), fix spelling error (server.cpp)

    Added ability to fetch media from remote server (using cURL library)

    Fix item entity's collision with nodeboxes

    Dont sneak while flying

    Only fly through walls in noclip mode wich requires the noclip privilege

    Update README

    Bump version to 0.4.4

    Update GUI texts

    draw gui later. this fixes the hotbar disappearing while rendering to texture.

    fix screen flickering black when rendering to texture

    Set proper field background colors in Irrlicht 1.8

    Raise default maximum render distance to 240

    Fix automagic render distance tuner

    Add #include guards to base64.h

    Try to add a bit of topside brightness when not using shaders

    Tweak shader randomly a bit

    Default to preload_item_visuals=true

    Don't send player position from client to server if the player hasn't moved

    Fix minetest.get_node_drops(). It should always return list of item names, not ItemStack(s).

    Smooth day-night transitions

    Const-correct util/serialize.h

    Handle day-night transition in shader and make light sources brighter when shaders are used

    Get rid of jordan4ibanez's insane digging animation speed

    Fix tile MaterialType to make sense and make lava surface be shader'd lower like water

    Install shaders properly

    Remove accidental vim swap file

    Add enable_shaders to minetest.conf.example

    Add checkboxes for shaders and on-demand item visual generation

    Implement a global shader parameter passing system and useful shaders

    ShaderSource and silly example shaders

    Add setting preload_item_visuals

    On-demand item meshes and textures

    Modify some client log message levels

    New elements in formspec, item_image and item_image_button.

    

    Fixed also game bug drawing dragged item behind fields, buttons etc.

    Fixed also game bug drawing dragged item behind fields, buttons etc.

    Only check attachment for nodes with group attached_node

    Add the group attached_node

    Nodes in this group will be dropped as items if the node under them or the node in the wallmounted direction is not walkable.

    Nodes in this group will be dropped as items if the node under them or the node in the wallmounted direction is not walkable.

Merge: 778d9b0cd 6c43ec2d2

    Merge support for anaglyph stereo

    Add the ability for client to check if image exists

    Log /grant and /revoke command usage

    Make dragged itemstack following the mouse cursor much smoother

    

    by using the cursor coordinates directly, instead of updating them only when a mouse event is seen.

    by using the cursor coordinates directly, instead of updating them only when a mouse event is seen.

    Ignore directories beginning with a "." when searching for mods

    

    This is not a problem on POSIX systems (these directories are

    ignored by the POSIX implementation of fs::GetDirListing() in

    filesys.cpp), but these directories still are reported on Windows

    systems.  This becomes a problem when mod authors use version

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    This is not a problem on POSIX systems (these directories are

    ignored by the POSIX implementation of fs::GetDirListing() in

    filesys.cpp), but these directories still are reported on Windows

    systems.  This becomes a problem when mod authors use version

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    ignored by the POSIX implementation of fs::GetDirListing() in

    filesys.cpp), but these directories still are reported on Windows

    systems.  This becomes a problem when mod authors use version

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    filesys.cpp), but these directories still are reported on Windows

    systems.  This becomes a problem when mod authors use version

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    systems.  This becomes a problem when mod authors use version

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    control systems that create directories like ".git" or ".svn"

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    and collectMods() picks up on them.  It has also been suggested

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    that ignoring such directories would allow for the easily disabling

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    mods by inserting a "." in front of their name.

    

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    This quick fix simply makes collectMods() ignore directories

    beginning with a ".".

    beginning with a ".".

    Run scriptapi_on_shutdown() thread-safely and remove some old crap

    Add shutdown hook interface to Lua API

    

    Scripts can call minetest.register_on_shutdown() to register a

    shutdown hook.

    

    Document that minetest.register_on_shutdown() callbacks may not be run

    

    If the server crashes, it is unlikely that callbacks registered using

    minetest.register_on_shutdown() will be called.

    Scripts can call minetest.register_on_shutdown() to register a

    shutdown hook.

    

    Document that minetest.register_on_shutdown() callbacks may not be run

    

    If the server crashes, it is unlikely that callbacks registered using

    minetest.register_on_shutdown() will be called.

    shutdown hook.

    

    Document that minetest.register_on_shutdown() callbacks may not be run

    

    If the server crashes, it is unlikely that callbacks registered using

    minetest.register_on_shutdown() will be called.

    Document that minetest.register_on_shutdown() callbacks may not be run

    

    If the server crashes, it is unlikely that callbacks registered using

    minetest.register_on_shutdown() will be called.

    If the server crashes, it is unlikely that callbacks registered using

    minetest.register_on_shutdown() will be called.

    minetest.register_on_shutdown() will be called.

    Add congestion control settings to minetest.conf

    Full protocol 13 compatibility on server side

    Make strict and non-strict protocol version checking to work more like expected

    Allow server to accept protocol 13 clients altough they don't work too well

    Ranged support of protocol version on server side

    Support serialization of protocol 13 ContentFeatures

    unit test: TestNodedefSerialization

    Modify new ObjectProperties format to such that 0.4.3 will eat it

    Fix Taoki's messed up generic object command ids

    Change version to 0.4.4-dev because... ehm... why it wasn't that already?

    Fix head shifting downards in glass, nodeboxes...

    Fix mesh glitches on MapBlock boundaries

    Revert "Use wielditem drawtype for all nodes in item_entity"

    

    This reverts commit ffad18e42442fed10c312adc989fc62b74e05896.

    This reverts commit ffad18e42442fed10c312adc989fc62b74e05896.

    Fix forgotten material properties for meshes (also seems to have been forgotten for cubes previously). This allows transparent png images to work properly

    Default server step to 0.1s and sync object/player update intervals to it

    Use wielditem drawtype for all nodes in item_entity

    Remove unnecessary util/serialize.h from content_mapblock.cpp

    Const-correct SharedBuffer::SharedBuffer(const T *t, unsigned int size)

    Move util/serialize.h out from staticobject.h for smaller header dependencies

    Move a function from clientserver.h to clientserver.cpp

    Proper versioning of new network-serialized stuff

    New PROTOCOL_VERSION scheme (allow client to support a range of versions)

    Fix LuaEntitySAO::getClientInitializationData() and bump the related version

    Bump version to 0.4.4 as this isn't compatible with 0.4.3

    Update ContentFeatures serialization format now as PROTOCOL_VERSION was changed

    RealBadAngel's patch which allows the lua api to read pressed player keys. This should make it possible to change the player's animation based on what he is doing

    

    Correct lua api version number

    

    Always update animations and attachments after the entity is added to scene client side. Fixes animations not being applied in client initialization for some reason. Attachments should be re-tested now just to be safe.

    

    Fix a segmentation fault caused by reaching materials that didn't exist in a loop for setting texture

    Correct lua api version number

    

    Always update animations and attachments after the entity is added to scene client side. Fixes animations not being applied in client initialization for some reason. Attachments should be re-tested now just to be safe.

    

    Fix a segmentation fault caused by reaching materials that didn't exist in a loop for setting texture

    Always update animations and attachments after the entity is added to scene client side. Fixes animations not being applied in client initialization for some reason. Attachments should be re-tested now just to be safe.

    

    Fix a segmentation fault caused by reaching materials that didn't exist in a loop for setting texture

    Fix a segmentation fault caused by reaching materials that didn't exist in a loop for setting texture

    A bunch of fixes

    

    No longer hide players who are dead. With models, a death animation should be used instead

    

    Some changes requested by celeron55

    

    Rename a lot of things in the code, and use better lua api function names

    

    Minor code corrections

    

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    No longer hide players who are dead. With models, a death animation should be used instead

    

    Some changes requested by celeron55

    

    Rename a lot of things in the code, and use better lua api function names

    

    Minor code corrections

    

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    Some changes requested by celeron55

    

    Rename a lot of things in the code, and use better lua api function names

    

    Minor code corrections

    

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    Rename a lot of things in the code, and use better lua api function names

    

    Minor code corrections

    

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    Minor code corrections

    

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    Bump protocol version up, since the models / animations / attachments code creates new client<->server messages

    Allow Vanessa's texture filtering / mipmap patch to work on models, as well as all other node types

    

    Initialize m_bone_posrot too

    

    Update pos_translator for attached players, which should fix a bug noticed with carts where a detached player would travel from the detachment spot to where it was detached

    

    Don't make attachments possible to right-click either

    

    Properly apply object and text visibility for local attachments, and fix them showing when they shouldn't

    Initialize m_bone_posrot too

    

    Update pos_translator for attached players, which should fix a bug noticed with carts where a detached player would travel from the detachment spot to where it was detached

    

    Don't make attachments possible to right-click either

    

    Properly apply object and text visibility for local attachments, and fix them showing when they shouldn't

    Update pos_translator for attached players, which should fix a bug noticed with carts where a detached player would travel from the detachment spot to where it was detached

    

    Don't make attachments possible to right-click either

    

    Properly apply object and text visibility for local attachments, and fix them showing when they shouldn't

    Don't make attachments possible to right-click either

    

    Properly apply object and text visibility for local attachments, and fix them showing when they shouldn't

    Properly apply object and text visibility for local attachments, and fix them showing when they shouldn't

    Fix more things I forgot for attached players. Such players will now properly see themselves moving when attached, and the server will read their position accordingly

    

    Fix attached players being able to bob their view and generate foostep sounds by pressing a movement key (running in place)

    Fix attached players being able to bob their view and generate foostep sounds by pressing a movement key (running in place)

    Update attachments at the ending of the addToScene function for parents. And with this... *drum roll* Client-side attachments are at last functional and stick visibly.

    

    Fix the last segmentation fault (apparently). So far attachments seem to be fully functional, although removing the parent causes children to go to origin 0,0,0 and possibly still cause such a fault (though this should already be addressed)

    

    Fix a bug in falling code where entities get stuck

    

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Fix the last segmentation fault (apparently). So far attachments seem to be fully functional, although removing the parent causes children to go to origin 0,0,0 and possibly still cause such a fault (though this should already be addressed)

    

    Fix a bug in falling code where entities get stuck

    

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Fix a bug in falling code where entities get stuck

    

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Send animations, bone overrides and attachments in entity initialization. Clients no longer have to be near an object when an animation or attachment is set to see the changes, and newly connected clients (or a client that simply renders the object for the first time) will get all of those settings. Therefore, the lua script no longer needs to run every X seconds either, just once per entity.

    

    Finish fixing the material color code. But it won't work until MineTest has dynamic lighting... another day another feature.

    

    Extra checks for the bone positioning / rotation code

    

    Many checks and consistency improvements to the client attachment code

    

    Make a separate function for checking if a client object is attached. A more in-depth change will be needed here to fix reading of invalid pointers

    

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Finish fixing the material color code. But it won't work until MineTest has dynamic lighting... another day another feature.

    

    Extra checks for the bone positioning / rotation code

    

    Many checks and consistency improvements to the client attachment code

    

    Make a separate function for checking if a client object is attached. A more in-depth change will be needed here to fix reading of invalid pointers

    

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Extra checks for the bone positioning / rotation code

    

    Many checks and consistency improvements to the client attachment code

    

    Make a separate function for checking if a client object is attached. A more in-depth change will be needed here to fix reading of invalid pointers

    

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Many checks and consistency improvements to the client attachment code

    

    Make a separate function for checking if a client object is attached. A more in-depth change will be needed here to fix reading of invalid pointers

    

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Make a separate function for checking if a client object is attached. A more in-depth change will be needed here to fix reading of invalid pointers

    

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Use a different method of fetching the parent. Fixes the mass segmentation faults when rendering an attachment (some still happen though)

    

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Major change to how attachments are handled. Fix the last segmentaton fault, which was due to the parent becoming invalid while being refreshed / removed which would bause the child to remain attached to nothing. Parents remove their children when being deleted themselves and add them back when re-added. Attachments are stored inside a 2D a vector which easily allows both a child to find their parent and a parent to find its children.

    

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Remove attachment list entry when an object is being permanently removed. Also avoid duplicate entries in this list when re-attaching the same object

    

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    The "big code comments" can now go away. Client attachments almost work properly, and I know what else needs to be done

    Enable client-side attachments, add detachment code

    Fix some remaining issues with attachments, now they work. Tested with object->player and player->player attachments

    Complete the attachment framework.

    

    The child ID can now be checked against the parent ID in content_cao.cpp so the parent can be detected. Actual attachment code to come

    

    Divide attachment system between server attachments and client attachments, neither coded right now. As explained in the code comment:

    

    // Attachments need to be handled on both the server and client.

    // If we attach only on the server, models (which are client-side)

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    The child ID can now be checked against the parent ID in content_cao.cpp so the parent can be detected. Actual attachment code to come

    

    Divide attachment system between server attachments and client attachments, neither coded right now. As explained in the code comment:

    

    // Attachments need to be handled on both the server and client.

    // If we attach only on the server, models (which are client-side)

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    Divide attachment system between server attachments and client attachments, neither coded right now. As explained in the code comment:

    

    // Attachments need to be handled on both the server and client.

    // If we attach only on the server, models (which are client-side)

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    // Attachments need to be handled on both the server and client.

    // If we attach only on the server, models (which are client-side)

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    // If we attach only on the server, models (which are client-side)

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    // can't be read so we don't know the origin and orientation of bones.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    // If we attach only on the client, the real position of attachments is

    // not updated and you can't click them for example.

    // not updated and you can't click them for example.

    Framework for the attachment system, new object property which allows changing the color and alpha of mesh materials

    

    New object property which allows changing the color and alpha of mesh materials. Due to the current lighting systems it doesn't work yet, but the full implementation is there

    

    Framework for the attachment system, with no actual functionality yet

    

    Send bone and player object to the setAttachment function in content_sao.cpp, but we need a way to translate it there and send it to the client

    

    I will also want position and rotation offsets to be possible to apply to attachments

    

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    New object property which allows changing the color and alpha of mesh materials. Due to the current lighting systems it doesn't work yet, but the full implementation is there

    

    Framework for the attachment system, with no actual functionality yet

    

    Send bone and player object to the setAttachment function in content_sao.cpp, but we need a way to translate it there and send it to the client

    

    I will also want position and rotation offsets to be possible to apply to attachments

    

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    Framework for the attachment system, with no actual functionality yet

    

    Send bone and player object to the setAttachment function in content_sao.cpp, but we need a way to translate it there and send it to the client

    

    I will also want position and rotation offsets to be possible to apply to attachments

    

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    Send bone and player object to the setAttachment function in content_sao.cpp, but we need a way to translate it there and send it to the client

    

    I will also want position and rotation offsets to be possible to apply to attachments

    

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    I will also want position and rotation offsets to be possible to apply to attachments

    

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    Network object ID from server to client. This will be used to identify the parent client-side and know what to attach to

    Get the new animation framework properly working

    

    Store start and end frames as v2f

    

    Also move bone animations to their own function instead of object properties

    Store start and end frames as v2f

    

    Also move bone animations to their own function instead of object properties

    Also move bone animations to their own function instead of object properties

    Joint positioning and rotation code, and fix a problem related to their lua API

    

    Attempt to move the animation system to a more correct implementation, rather than using object properties. Incomplete and breaks functionality

    Attempt to move the animation system to a more correct implementation, rather than using object properties. Incomplete and breaks functionality

    Allow the LUA API to set animations to meshes as well as the animation speed. Also update animations only when needed.

    

    Support for animation blending, though for some reason it doesn't work.

    

    Don't enable animation transitions by default for many reaosons

    

    Object property to store individual bone positions. LUA can specify a bone name followed by a bone position. No functionality yet. Bone rotation to be added in the following commit

    

    Same system for bone rotation, plus a few other things I missed

    Support for animation blending, though for some reason it doesn't work.

    

    Don't enable animation transitions by default for many reaosons

    

    Object property to store individual bone positions. LUA can specify a bone name followed by a bone position. No functionality yet. Bone rotation to be added in the following commit

    

    Same system for bone rotation, plus a few other things I missed

    Don't enable animation transitions by default for many reaosons

    

    Object property to store individual bone positions. LUA can specify a bone name followed by a bone position. No functionality yet. Bone rotation to be added in the following commit

    

    Same system for bone rotation, plus a few other things I missed

    Object property to store individual bone positions. LUA can specify a bone name followed by a bone position. No functionality yet. Bone rotation to be added in the following commit

    

    Same system for bone rotation, plus a few other things I missed

    Same system for bone rotation, plus a few other things I missed

    Get the mesh working through the memory cache properly. Most credit goes to celeron55 for the help on this code

    

    Get the texture from memory as well

    

    Add .x to the list of supported formats

    

    Update LUA API documentation

    Get the texture from memory as well

    

    Add .x to the list of supported formats

    

    Update LUA API documentation

    Add .x to the list of supported formats

    

    Update LUA API documentation

    Update LUA API documentation

    Add a subfolder for models and transfer models from server to client

    

    (obj, md2 and md3 are currently allowed)

    

    Get rid of the texture string and use the existing textures array. Segmented meshes have multiple materials, and this will allow us to texture each. Do not switch to this commit yet!

    

    If a texture string is left empty in LUA, don't modify that material. Useful so a script can change specific textures without affecting others

    (obj, md2 and md3 are currently allowed)

    

    Get rid of the texture string and use the existing textures array. Segmented meshes have multiple materials, and this will allow us to texture each. Do not switch to this commit yet!

    

    If a texture string is left empty in LUA, don't modify that material. Useful so a script can change specific textures without affecting others

    Get rid of the texture string and use the existing textures array. Segmented meshes have multiple materials, and this will allow us to texture each. Do not switch to this commit yet!

    

    If a texture string is left empty in LUA, don't modify that material. Useful so a script can change specific textures without affecting others

    If a texture string is left empty in LUA, don't modify that material. Useful so a script can change specific textures without affecting others

    Fix material properties and allow lighting. Models should now be affected by light instead of being black

    Properly read the mesh from LUA.

    

    Players can now be set to meshes using the following test script:

    

    function switch_player_visual()

                    prop = {

                            mesh="player.obj",

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

    Players can now be set to meshes using the following test script:

    

    function switch_player_visual()

                    prop = {

                            mesh="player.obj",

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

    function switch_player_visual()

                    prop = {

                            mesh="player.obj",

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

                    prop = {

                            mesh="player.obj",

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

                            mesh="player.obj",

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

                            texture="player.png",

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

                            visual="mesh",

                    }

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

            for _, obj in pairs(minetest.get_connected_players()) do

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

                    obj:set_properties(prop)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

            end

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

            minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

    end

    minetest.after(1.0, switch_player_visual)

    3D model support for players using Irrlicht. Also ready the basis for mesh support on nodes / items via LUA (to be done). Supports any mesh format compatible with Irrlicht, but animations are not set up yet.

    Revert "Don't leak textures all over the place"

    

    This causes textures to be deleted before they are no longer accessed,

    resulting in a segmentation fault. This needs to be rewritten in such a way

    that textures are deleted when the client disconnects from a server.

    

    This reverts commit 41c00e87d42580881d8c7001f39014814e3b55f2.

    This causes textures to be deleted before they are no longer accessed,

    resulting in a segmentation fault. This needs to be rewritten in such a way

    that textures are deleted when the client disconnects from a server.

    

    This reverts commit 41c00e87d42580881d8c7001f39014814e3b55f2.

    resulting in a segmentation fault. This needs to be rewritten in such a way

    that textures are deleted when the client disconnects from a server.

    

    This reverts commit 41c00e87d42580881d8c7001f39014814e3b55f2.

    that textures are deleted when the client disconnects from a server.

    

    This reverts commit 41c00e87d42580881d8c7001f39014814e3b55f2.

    This reverts commit 41c00e87d42580881d8c7001f39014814e3b55f2.

    Fix trees growing into any type of node

Merge: 3ba9b2631 f9087d14a

    Merge pull request #268 from khonkhortisan/image_button

    

    Allow transparent image_buttons

    Allow transparent image_buttons

    Fix server crash on /clearpassword

    

    According to #253, using `/clearpassword` without an argument causes the server to crash from an assertion failure. I've resubmitted matttpt's patch as a pull request to aid in merging.

    According to #253, using `/clearpassword` without an argument causes the server to crash from an assertion failure. I've resubmitted matttpt's patch as a pull request to aid in merging.

    Add anaglyph settings to minetest.conf.example

    Default anaglyph to 0.1

    Anaglyph stereo support, created by xyz

Merge: 1db033478 8e5167d72

    Merge pull request #284 from RealBadAngel/master

    

    Adding backgrounds to formspec

    Adding backgrounds to formspec

Merge: 5f1d3ad75 6e2ba111a

    Merge pull request #286 from PilzAdam/digging_animation

    

    Add jordan4ibanez' better digging animation

    Add jordan4ibanez' better digging animation

    Add jordan4ibanez' better digging animation

    Swap out pixel-perfect nyan cat by request of Chris Torres

    added GUI checkboxes in Settings tab for the aforementioned video settings.

    Added video settings filter options via config file - second try :-)

    

    Set one or more of these in the config to turn the related option on:

    

    mip_map = 1

    anisotropic_filter = 1

    bilinear_filter = 1

    trilinear_filter = 1

    Set one or more of these in the config to turn the related option on:

    

    mip_map = 1

    anisotropic_filter = 1

    bilinear_filter = 1

    trilinear_filter = 1

    mip_map = 1

    anisotropic_filter = 1

    bilinear_filter = 1

    trilinear_filter = 1

    anisotropic_filter = 1

    bilinear_filter = 1

    trilinear_filter = 1

    bilinear_filter = 1

    trilinear_filter = 1

    trilinear_filter = 1

    Fix unnecessary network protocol incompatibility in ContentFeatures

    Adding background to Formspec

Merge: 23837e435 8540871eb

    Merge pull request #279 from RealBadAngel/patch-2

    

    Formspec: Draw images before inventories. Allows to use image as backgro...

    Formspec: Draw images before inventories. Allows to use image as backgro...

    Formspec: Draw images before inventories. Allows to use image as background.

Merge: 3cab24fbc 21317be49

    Merge pull request #274 from PilzAdam/falling

    

    Fix a bug in falling code where entities get stuck

    Fix a bug in falling code where entities get stuck

    

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

Merge: 755df5f65 926830e0d

    Merge pull request #243 from xyzz/liquid_renewable

    

    Add liquid_renewable property, allow non-renewable liquids.

    Add liquid_renewable property, allow non-renewable liquids.

Merge: 41c00e87d 936411e4d

    Merge pull request #273 from PilzAdam/air

    

    Make air and ignore drop nothing

    Make air and ignore drop nothing

    Make air and ignore drop nothing

    Fix a bug in falling code where entities get stuck

    

    Also check if the parent has been removed server-side, and detach the child if so. Fixes children going to origin 0,0,0 when their parent is removed.

    

    Unset all attachment properties when permanently detaching (on both the client and server). Also store less data we don't need

    

    Create a separate function for detaching, and also update lua api documentation

    

    When a child is detached, update its position from the server to clients. This WILL cause it to get positioned slightly differently client side, as the server attachment system only copies parent origin and knows not about mesh / bone transformation. This prevents different clients seeing the object detached in different spots which is most correct

    

    Update the position of attached players to clients. An attached player will see himself move, but this is currently VERY ugly and laggy as it is done by the server (it probably must stay this way too)

    

    Use a different approach for locally attached players. This allows for smooth positio transitions to work, as well at the player turning around freely. Still buggy however

    Don't leak textures all over the place

    Fix flowing liquid animation direction calculation

Merge: 63e73f29c b701f8a87

    Merge pull request #272 from PilzAdam/pow

    

    Replace pow() with multiplikation to improve speed

    Replace pow() with multiplikation to improve speed

    Replace pow() with multiplikation to improve speed

Merge: 25cf3757b 7fcf153ad

    Merge pull request #270 from PilzAdam/master

    

    Move falling to builtin

    Move falling to builtin

    Add functions to the default mod of minimal game to support old code

    Add falling_node to special groups in lua-api.txt

    Remove a useless comment

    Move falling to builtin

    Allow transparent image_buttons

    Add nodedef.on_blast() to lua_api.txt in order to support chained explosions of any explosives

    Statically store always_collect field of __builtin:item

    Add dtime_s to entity activation

    Fix ServerActiveObject stuff

    Fix wielditem entity drawtype brightness control

    Fix ObjectRef:punch()

    Add liquid_renewable property.

    Version 0.4.3

    Prevent world creation if the world already exists

    Enforce stricter world names using a blacklist

    

    Blacklisted characters are: / \

    Blacklisted characters are: / \

    Add aux1_descends to key change menu

    Version 0.4.3-rc0; increase PROTOCOL_VERSION due to backwards-incompatible InventoryList width field

    Remove "Unknown inventory identifier" deserialization errors, because they can break forward compatibility

    Reorganize ClientMap rendering code for a bit more performance

    

    - Don't select blocks for drawing in every frame

    - Sort meshbuffers by material before drawing

    - Don't select blocks for drawing in every frame

    - Sort meshbuffers by material before drawing

    - Sort meshbuffers by material before drawing

    Fix shift-descend to ladders from a floor

    Fix moving stuff into a mismatched stack in a "infinite" inventory

    Make inventory GUI do sane things when server-side inventory acts unusually

    Fix bug in moving a larger sized stack in inventory on top of another

    

    - You have 2 stacks: a with x items and b with y<x items

    - Take a with your mouse and place it on b

    - Whole stack a moves to b

    - (y * 2 - x) items move from b to a

    - (x - y) items are left to the mouse cursor

    - You have 2 stacks: a with x items and b with y<x items

    - Take a with your mouse and place it on b

    - Whole stack a moves to b

    - (y * 2 - x) items move from b to a

    - (x - y) items are left to the mouse cursor

    - Take a with your mouse and place it on b

    - Whole stack a moves to b

    - (y * 2 - x) items move from b to a

    - (x - y) items are left to the mouse cursor

    - Whole stack a moves to b

    - (y * 2 - x) items move from b to a

    - (x - y) items are left to the mouse cursor

    - (y * 2 - x) items move from b to a

    - (x - y) items are left to the mouse cursor

    - (x - y) items are left to the mouse cursor

    Add overridable function for handling dropped items from nodes

    Fix github issue #224

    Fix issue with openal mac os x compile

    Fix GUIKeyChangeMenu so that '/' can be inserted on a finnish keyboard

    A bunch of GUIKeyChangeMenu fixes

    

    - Display message when associating a key already in use

    - Fix issue for not beeing able to assign space to an action

    - Cleaning up

    - Make it build (by celeron55)

    - Display message when associating a key already in use

    - Fix issue for not beeing able to assign space to an action

    - Cleaning up

    - Make it build (by celeron55)

    - Fix issue for not beeing able to assign space to an action

    - Cleaning up

    - Make it build (by celeron55)

    - Cleaning up

    - Make it build (by celeron55)

    - Make it build (by celeron55)

    Attempt to fix flying gravel and dirt

    Smooth transition to the desert biome.

    Fix the bouncy node related stuff a bit

    Add bouncy node group

    Add disable_jump and fall_damage_add_percent node groups

    Add InventoryList width property & allow custom crafting grids.

    Make shift the default descent control on ladders and when flying

    

    "aux1_descends" setting switches to the old descend control.

    "aux1_descends" setting switches to the old descend control.

    Don't crash in "unexpected multibyte character"; just print it in log. Github #222

    Use proper alpha blit in some more texture modifiers

    Properly initialize baseimg for texture modifier [combine:WxH:X,Y=filename:X,Y=filename2

    Fix black display inside opaque water

    

    Opaque water's solidness was being set to 2, like a normal node.

    When you swim, it is treated like a solid block, and the display

    goes black.  Setting it to 1 like transparent water allows you to

    see.

    

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    Opaque water's solidness was being set to 2, like a normal node.

    When you swim, it is treated like a solid block, and the display

    goes black.  Setting it to 1 like transparent water allows you to

    see.

    

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    When you swim, it is treated like a solid block, and the display

    goes black.  Setting it to 1 like transparent water allows you to

    see.

    

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    goes black.  Setting it to 1 like transparent water allows you to

    see.

    

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    see.

    

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    It looks somewhat awkward when you swim, look up, and see an opaque

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    wall of water (the surface), but there isn't much that can be done

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    about it.  If you made the water transparent so it looked good,

    it would defeat the purpose :) .

    it would defeat the purpose :) .

    Fix github issue #213: Dropping unknown items crashes the game

    

    The items will now just disappear when dropped.

    The items will now just disappear when dropped.

    Fix crash when furnace is full (minimal game)

    Move chat commands to Lua and remove servercommand.{cpp,h}

    

    Commands moved:

     /me

     /status

     /time

     /shutdown

     /ban

     /clearobjects

    Commands moved:

     /me

     /status

     /time

     /shutdown

     /ban

     /clearobjects

     /me

     /status

     /time

     /shutdown

     /ban

     /clearobjects

     /status

     /time

     /shutdown

     /ban

     /clearobjects

     /time

     /shutdown

     /ban

     /clearobjects

     /shutdown

     /ban

     /clearobjects

     /ban

     /clearobjects

     /clearobjects

    Add ban management routines to Lua API

    

    Those functions are:

     * minetest.get_ban_list()

     * minetest.get_ban_description(ip_or_name)

     * minetest.ban_player(name)

     * minetest.unban_player_or_ip(ip_or_name)

    Those functions are:

     * minetest.get_ban_list()

     * minetest.get_ban_description(ip_or_name)

     * minetest.ban_player(name)

     * minetest.unban_player_or_ip(ip_or_name)

     * minetest.get_ban_list()

     * minetest.get_ban_description(ip_or_name)

     * minetest.ban_player(name)

     * minetest.unban_player_or_ip(ip_or_name)

     * minetest.get_ban_description(ip_or_name)

     * minetest.ban_player(name)

     * minetest.unban_player_or_ip(ip_or_name)

     * minetest.ban_player(name)

     * minetest.unban_player_or_ip(ip_or_name)

     * minetest.unban_player_or_ip(ip_or_name)

    Extend Lua API in order to implement chat commands

    

    minetest.get_server_status()

    minetest.request_shutdown()

    EnvRef:clear_objects()

    minetest.get_server_status()

    minetest.request_shutdown()

    EnvRef:clear_objects()

    minetest.request_shutdown()

    EnvRef:clear_objects()

    EnvRef:clear_objects()

    Remove trailing comma after player list in server status string

    Allow digging of unknown nodes

    

    This allows the removal of nodes with unknown types.

    get_item_callback() (C++) would fail if a node has an unknown type.  Now it

    will try using the callback from minetest.nodedef_default in this case.

    Also, minetest.node_dig() (Lua) was altered to always allow digging when

    the node definition is empty (i.e. unknown node).

    This allows the removal of nodes with unknown types.

    get_item_callback() (C++) would fail if a node has an unknown type.  Now it

    will try using the callback from minetest.nodedef_default in this case.

    Also, minetest.node_dig() (Lua) was altered to always allow digging when

    the node definition is empty (i.e. unknown node).

    get_item_callback() (C++) would fail if a node has an unknown type.  Now it

    will try using the callback from minetest.nodedef_default in this case.

    Also, minetest.node_dig() (Lua) was altered to always allow digging when

    the node definition is empty (i.e. unknown node).

    will try using the callback from minetest.nodedef_default in this case.

    Also, minetest.node_dig() (Lua) was altered to always allow digging when

    the node definition is empty (i.e. unknown node).

    Also, minetest.node_dig() (Lua) was altered to always allow digging when

    the node definition is empty (i.e. unknown node).

    the node definition is empty (i.e. unknown node).

    Fix wrong amount of nodes being dropped from inventory

    fix node timers so on_timer gets the correct position

    Remove unwanted ! from ifs in inventory record-for-rollback code

    Call this 0.4.2-rc1

    Fix inventory segfault when rollback recording is disabled

    Add enable_rollback_recording setting, defaulting to false

    Handle max<min in LuaPseudoRandom::l_next()

    Tweak rollback and liquids

    Tweak rollback stuff

    Increase automatic suspect guess timeframe

    ABM and liquid overload skip

    Fix server build (a missing header)

    Make the rollback system VERY FUCKING GOD DAMN POWERFUL

    Don't track liquids for rollback because of too much log

    Properly rollback chat command triggered things

    Experimental-ish rollback functionality

    Working group-shapeless and multigroup recipes

    Restore focus to formspec menu when pressing a button

    Deprecate minetest.add_to_creative_inventory and use group not_in_creative_inventory instead

    Add notice in the minimal game

    Add special return value -1 to inventry callbacks

    Improve formspec positioning

    Improve inventory callbacks a bit

    Remove special handling of creative mode

    Detached inventory callbacks and reworked node metadata callbacks

    Detached inventories

    builtin/item.lua: callbacks with copies of positions and nodes rather than recycle the same ones, which callbacks can modify

    darkrose should work at a nuclear power plant.

    

    It'd take years to figure out what caused the accident.

    It'd take years to figure out what caused the accident.

    Update minetestmapper.py to support ver. 24 and 25

    Improve node timer format (map format version 25) and update mapformat.txt

    Add node timer test in minimal/experimental

    Add oldnode parameter to minetest.register_on_placenode callback

    Fix building on top of (pointable && buildable_to) nodes

    Describe node definition fields better in lua_api.txt

    Move /give, /giveme, /spawnentity and /pulverize to builtin/chatcommands.lua

    Improve build configuration options

    Update lua_api.txt a bit

    Fix map deserialization and remove old serialization code

    Increase node id/param0 to 16 bits, leaving param2 always with 8 bits

    Implement node timers

    Fix terrible grammar in comment!

    Fix compressZlib()

    Test zlib wrapper's handling of large data

    Tweak test.c overally a bit

    Formspec button_exit[] and image_button_exit[]

    Doc updates for formspec

    Add /test1 command to minimal for testing a more complicated player inventory form

    minetest.register_on_player_receive_fields()

    Implement formspec

    Update Lua API documentation to include minetest.get_modnames()

    Add "/mods" command to list mods to client

    Add minetest.get_modnames() to Lua API

    Version 0.4.1

    Fix signedness warning in base64.cpp

    Fix wctomb use

    

    wctomb(NULL, _) returns "nonzero if the encoding has nontrivial shift state, or zero if the encoding is stateless."

    

    I assume the intentation was to get the size of the target buffer.

    Use MB_CUR_MAX for this.

    wctomb(NULL, _) returns "nonzero if the encoding has nontrivial shift state, or zero if the encoding is stateless."

    

    I assume the intentation was to get the size of the target buffer.

    Use MB_CUR_MAX for this.

    I assume the intentation was to get the size of the target buffer.

    Use MB_CUR_MAX for this.

    Use MB_CUR_MAX for this.

    Remove mbtowc warnings

    

    As mbtowc(_, _, 1) reads at most one char, everything other than a

    return value of 1 is an error. Since the input strings are static,

    an assert protects against future changes.

    

    Likewise, wctomb should currently never encounter a character, which

    actually needs a multibyte representation.

    As mbtowc(_, _, 1) reads at most one char, everything other than a

    return value of 1 is an error. Since the input strings are static,

    an assert protects against future changes.

    

    Likewise, wctomb should currently never encounter a character, which

    actually needs a multibyte representation.

    return value of 1 is an error. Since the input strings are static,

    an assert protects against future changes.

    

    Likewise, wctomb should currently never encounter a character, which

    actually needs a multibyte representation.

    an assert protects against future changes.

    

    Likewise, wctomb should currently never encounter a character, which

    actually needs a multibyte representation.

    Likewise, wctomb should currently never encounter a character, which

    actually needs a multibyte representation.

    actually needs a multibyte representation.

    Actually fix facedir-rotated nodes placed using minetest.env:place_node()

    Fix hovering after mining a block underneath you while sneaking

    Rotate facedir-rotated top and bottom textures too, and re-implement nodebox side rotation

    Facedir rotation of nodebox textures

    Check whether node is known before reading definition in __builtin:item:on_step()

    Fix signed overflow in getPointedThing

    Fix typo in scriptapi.cpp in minetest.get_craft_recipe()

    Server-side checking of digging; disable_anticheat setting

    BITCH, THIS IS 0.4.0.

    Define M_PI on MSVC

    Add a random-ish contributor list to credit screen

    Check for table type when reading groups from Lua

    Add minetest.get_craft_recipe()

    Add support for "textures/all" (and thus texture packs) to server

    Make lava buckets work as fuel in minimal game

    Remove trenches from map generator (cyisfor) (glitches: read below)

    

    This causes glitches in very high cliffs by not making mud "flow" down from

    them. Those are quite rare currently because of the lame height differences

    generated.

    This causes glitches in very high cliffs by not making mud "flow" down from

    them. Those are quite rare currently because of the lame height differences

    generated.

    them. Those are quite rare currently because of the lame height differences

    generated.

    generated.

    Message cleanups (consistency) and prevent /me when not allowed to shout

    Handle nil placer as it might occur when using minetest.env:place_node. (Uberi)

    Remove util/old/genmap.py, because it is uselessly old

    Allow defining player's inventory form in Lua

    Fix /builtin/misc.lua:47: attempt to call method 'is_player' (a nil value)

    Fix random glitches in transparent animations

    Add pointed_thing to lua_api.txt

    Hopefully fix includes on mingw

    Increment protocol version

    Explain node boxes in lua_api.txt

    Custom boxy nodes (stairs, slabs) and collision changes

    Optimize headers

    Properly and efficiently use split utility headers

    Initially split utility.h to multiple files in util/

    Mention node drawtypes in lua_api.txt

    Fix /setpassword and /clearpassword

    Fix "Node placement prediction failed for (places __default) - Name not known"

    Add desynchronize_mapblock_texture_animation setting and improve minetest.conf.example a bit

    Fix build error due to DEBUGFILE

    Revert back proper crack texture

    Clean up constants.h a bit

    Allow node cracking animations of any length

    Remove tiles and special_tiles from node definition prototype because otherwise the old names can't be used

    Update field names to non-deprecated ones in node definition prototype

    Use new field names and reorder fields a bit in minimal game

    Node texture animation

    Add comment about ItemSAO being deprecated

    Add some missing object properties to doc/lua_api.txt

    Node placement client-side prediction

    Remove a random old comment and a #define from game.cpp

    Add experimental_tester_tool_1.png to minimal game (was accidentally left out)

    Move genmap.py and pnoise.py to old/

    Update minetestmapper.py to support the current map format (and previous ones)

    Update and fix doc/mapformat.txt; make current format more solid in mapblock.cpp

    Don't deprecate minetest.register_on_placenode and minetest.register_on_dignode

    Add disallow_empty_password setting

    Call this 0.4.dev-20120606

    Add minetest.serialize() and minetest.deserialize()

    Allow groups in crafting recipes

    Remove obsolete "footprints" default setting from defaultsettings.cpp

    Allow replacements in cooking and fuel recipes

    Fix small errors in lua_api.txt

    Add after_destruct and cache the existence of on_construct, on_destruct and after_destruct for quick skipping when a node does not have them

    place_node, dig_node and punch_node; an in-game tester tool; remove old code

    Fix NDT_RAILLIKE tweakings

    Shadily clean up NDT_RAILLIKE to surely differ from the few leftover non-LGPLv2 parts from the standpoint of copyright law.

    Clean and optimize clouds.cpp enough to not really contain any of the small amount of non-LGPLv2/later code left

    Switch the license to be LGPLv2/later, with small parts still remaining as GPLv2/later, by agreement of major contributors

    Update translation template po/minetest.pot

    Use gettext for more basic user interface strings

    Remove misdesigned exception from ReliablePacketBuffer

    Add ignore_world_load_errors configuration option and provide better error messages

    Improve GUIMessageMenu (move and resize elements based on size of text)

    Fix loading of old signs

    Call this 0.4.dev-20120603

    Add InvRef:is_empty(listname) and make chests/furnaces not diggable if not empty in minimal game

    Add can_dig callback

    fix locked chest to not destroy denied items (minimal game)

    Add fire visualization to minimal furnace menu

    Update inventory menu from formspec on-the-fly

    Add texture modification [lowpart:percent:filename

    Implement image[<X>,<Y>;<W>,<H>;<texture name>] and allow floating-point values in formspec

    Reshape inventory menu code

    Add a bit of unit test for inventory

    Fix loading of legacy chests

    Use proper furnace cook time

    Add ObjRef:is_player() and modify ObjRef:get_player_name() to always return a string to aid better inter-object compatibility of code that assumes objects to be players

    Make GUIinventoryMenu::drawList more robust with invalid data

    Lua implementation of furnace with visible active state

    Implement locked chest; add after_place_node and after_dig_node node callbacks

    minetest.get_craft_result

    NodeMetaRef:{to,from}_table and lua_api.txt additions

    Properly handle dropping of items from nodes, and disallow moving items directly between nodes

    on_metadata_inventory_{move,offer,take}

    Implement sign using form field protocol

    Convert legacy chest inventory list "0" to "main"

    Properly create metadata inventories in minimal

    Improve GUIInventoryMenu error messages more

    Add proper error messages to GUIInventoryMenu when inventory lists are invalid

    Random node metadata things

    Attempt to begin to implement chests and furnace in Lua (with problems)

    Add node on_construct, on_destruct callbacks and update lua_api.txt

    Strip unneeded variables from NodeMetadata

    WIP node metadata, node timers

    Catch VersionMismatchException while loading world data

    Check password hash validity

    Fix MSVC build (pow type overload stuff)

    Add support for putting modpacks directly into mod directories

    Add better trace peudo-loglevel support

    Allow using --worldname for local game too

    Comment out unnecessary debug output in Settings

    --world list

    Better description of static_spawnpoint in minetest.conf.example

    Update minetest.conf.example a bit

    Tune smooth lighting a bit

    Log more stuff in Client::afterContentReceived()

    Take out the "Privileges of foo are hidden from you." response of /privs

    Add a hack to get rid of the rare "ERROR: StaticObjectList::insert(): id already exists" failure

    Fix continuing to process TOSERVER_INIT2 even if player doesn't exist

    Add "Registered definitions of stuff" to doc/lua_api.txt

    Fix executing register_chatcommand-defined commands even in the middle of a chat line

    Fix unhandled InvalidPositionException

    basic_privs to allow granting/revoking interact_extra too

    Support static_spawnpoint setting

    Fix ABM handling on block activation

    Allow redefining minetest.item_place and the like

    Make client know about reverted disallowed diggings

    Add basic_privs privilege

    Improve doc/lua_api.txt and add minetest.get_item_group(name, group)

    Fix unable to join server first time with a password

    Call this 0.4.dev-20120408

    Add minimal documentation about the $world/game/ addition

    Support placing a minetest game inside $world/game to allow creating proper adventure maps

    

    Pro-tip: You can open a world in minetest by opening the world.mt file using minetest.

    Pro-tip: You can open a world in minetest by opening the world.mt file using minetest.

    Fix crash after 'LuaEntity name "particles:smoke" not defined' and similar errors

    minetest.get_node_group(name, group)

    EnvRef:find_nodes_in_area(minp, maxp, nodenames)

    Allow looping of local and positional sounds

    Make lava brighter by showing light sources at their full emitted light level

    Improve texture atlas generation

    Fullscreen, vsync, fullscreen_bpp and fsaa options in the config; fsaa is experimental atm, causes visible spaces between blocks.

    Improve doc/lua_api.txt

    Tune mapgen

    Fix collision code getting stuck if speed is 0

    Fix segfault when setting privileges of a non-connected player

    Fix fabs() brainfart

    Tune desert beaches

    Fix MSVC ambiguous fabs() call errors

    Add deserts to map generator

    Tune mapgen a bit

    PerlinNoise for Lua.

    Support custom textures installed as /textures/all/*.png

    Add EnvRef:find_node_near(pos, radius, nodenames)

    Add missing mapgen.lua to games/minimal

    Handle failing openal init properly, add enable_sound and sound_volume settings

    Add #include <unistd.h> to filesys.cpp

    experimental:soundblock dig_immediate=3

    Attempt to fix sound left-right channels

    Make the minimal development test somewhat playable by adding ore generation and removing the player visual switch test

    Fix crash when inputting only / in chat

    Fix super-small size of regular item entities

    Show reported map seed on debug info (F5)

    Minimally update compiling on Windows in README.txt

    Add to README.txt's example dependencies on Linux: libogg-dev libvorbis-dev libopenal-dev

    Fix visual='cube' size

    Fix sound direction and add experimental:soundblock alias sb in minimal for testing

    Remove debug output

    Fix dropped nodeitem visuals

    Fix buildbot

    Add util/buildbot

    Add optional MINGWM10_DLL to cmake install

    Add multiplayer test script

    Fix installation path of minetest_game/mods (// in place of / doesn't work on virtualbox network drives)

    Fix things for cross-compiling using mingw

    Tune cave generation

    Improve caves more

    Some completely crapshit coding to make caves more varied

    Implement dropped items as LuaEntities; leave the old ones as is for compatibility

    Fix disabling of player movement cheat detection in singleplayer

    Don't apply player movement cheat detection in singleplayer

    Remplement and improve /setting in Lua, now called /set

    Don't allow /granting unknown privileges

    Split builtin.lua to multiple files

    Allow getting the path of builtin.lua using minetest.get_modpath("__builtin")

    granting and revoking of all privileges at once

    Add license of Lua in README.txt

    Change default privileges from "build, shout" to "interact, shout"

    Fix authentication handler reporting failed password change while it isn't

    Improve /grant and /revoke output, add /auth_reload

    Add server-side enforcement of the 'fast' privilege; also fix client checking 'fly' instead of 'fast'

    Fix client.h getting included on the server build

    Add 'fly' and 'fast' privileges and the underlying privileges-to-client system

    Fix doc/lua_api.txt

    initial_properties field in entity definition

    More documentation in doc/lua_api.txt

    Allow group:groupname in ABM definition and implement minetest.hash_node_position()

    cmake: lua: use COMMON_CFLAGS

    

    This fixes LUA_USE_DLOPEN having no effect.

    This fixes LUA_USE_DLOPEN having no effect.

    Install minetest_game without .git and other unnecessary things

    Fix handling of missing auth.txt in the new handler

    Make server ignore media files with unknown filename extensions

    Fix admin password handling in minetest.builtin_auth_handler.get_auth

    Improved teleport command

    Reimplement authentication handler in Lua; now we have 1) infinite privilege names, 2) minetest.register_authentication_handler()

    Fix the position of LuaEntityCAOs not getting updated at all

    Add minetest.get_connected_players()

    Fix object visuals flashing brightly or disappearing when switching them at night

    Fix walking sound of other players (and other objects)

    ObjectRef:set_armor_groups() and ObjectRef:set_properties() - works on players too!

    ObjectProperties

    minetest.register_chatcommand(cmd, def)

    Raise the player fall damage threshold to a much more fun level

    Improve the look of fences

    [transformN image modifier

    Simple fix for camera blinking black when jumping into ceiling with current smaller collision box

    Use GenericCAO in place of LuaEntityCAO and PlayerCAO

    Add GenericCAO and player armor groups, but don't use them yet

    on_joinplayer + on_leaveplayer + scriptapi_run_callbacks + bugfix

    

    Add minetest.register_on_joinplayer and minetest.register_on_leaveplayer,

    make adding new callbacks to scriptapi.cpp easier by adding

    scriptapi_run_callbacks, also fix a minor bug with PlayerSAO <->

    singleplayer mode interaction

    Add minetest.register_on_joinplayer and minetest.register_on_leaveplayer,

    make adding new callbacks to scriptapi.cpp easier by adding

    scriptapi_run_callbacks, also fix a minor bug with PlayerSAO <->

    singleplayer mode interaction

    make adding new callbacks to scriptapi.cpp easier by adding

    scriptapi_run_callbacks, also fix a minor bug with PlayerSAO <->

    singleplayer mode interaction

    scriptapi_run_callbacks, also fix a minor bug with PlayerSAO <->

    singleplayer mode interaction

    singleplayer mode interaction

    added PlayerSAO and RemotePlayer, removed ServerRemotePlayer

    Modify minimal/give_initial_stuff to always give stuff

    Rework tool_capabilities a bit (maxwear->uses, scale dig time according to leveldiff)

    Try a default day+night length of 20 minutes instead of 15

    Generate beaches

    Generate blobs of dirt and gravel in stone

    Remove unnecessary debug output

    Area-based MapEditEvent ignore and that put to use for on_generate too

    Reduce EnvRef:set_node() time tenfold by postponing the dayNightDiff update until it is actually needed

    Fix on_generate minp/maxp (was broken due to chunkymapgen)

    Add EnvRef:set_node()

    Add range option to PseudoRandom:next()

    Add blockseed to on_generated

    Default to having fancy trees and 3d clouds turned on

    Add minetest.is_singleplayer()

    doc/lua_api.txt: minetest.get_worldpath(modname) -> minetest.get_worldpath()

    Correctly lock mutexes when the server sends MapEditEvents (could cause memory corruption)

    No occlusion culling when free_move is on and camera is inside ground

    Make mapgen use mapgen_* node aliases rather than the LEGN macro

    Add PseudoRandom in Lua API

    Tune skybox

    Try to make background/fog/sky color selection work better

    Set default minimum viewing range of 35 nodes

    Unrelated, but anyway: tune light levels again

    Tune caves

    Fix deep ground cave generation a bit

    Fix mapgen block_is_underground heuristic

    Tune mapgen

    Set default maximum viewing range to a bit more than default server send range to make fog work well

    Re-implement and re-tune mapgen v2

    Tune generation responsiveness and cheat inhibition on server

    Increase maximum generate distance now that generation might actually keep up with it

    Remove usage of mapgen::add_random_objects(block)

    Remove no-op mapgen::add_random_objects

    Fix inexistent_top_provides_sunlight heuristic in make_block and remove clitch-causing optimization

    Remove some debug output

    Tune block fetching to clients on server

    Do post-mapgen lighting using the VoxelManipulator-based functions (causes glitches currently)

    voxalgo::clearLightAndCollectSources

    Implement propagateSunlight for VoxelManipulator

    Fix tree generation density for different mapgen chunk sizes

    Post-mapgen lighting optimization

    Make mapgen generate stuff in chunks of 3^3 mapblocks

    Update minetest.conf.example and defaultsettings.cpp

    Increase vertical FOV on lower aspect ratios (<16:10)

    Fix minetest_game installation and don't fail if it doesn't exist

    Fix and extend minetest.after(time, func, param)

    Add minetest.after(time, func)

    Add default_grass_footstep.1.ogg as a test sound in minimal

    Update version number to 0.4.dev-20120326 because much has changed from the previous one

    Do a dumb-ass static string copy for const-incorrect old versions of ov_fopen

    Add games/minimal/game.conf

    Move games/minetest to games/minimal and update README.txt

    Prefer _game postfix in game names (to be squashed to the previous commit)

    Support _game postfix in game names, taking it out to make the gameid

    Add game.conf check in subgame.cpp

    New world removal GUI code

    Better file/directory removal platform code and utilities

    Small fix to fs::GetDirListing when trying to list an inexistent directory

    MSVC build directory autodetection at startup

    Add OPENAL_DLL LIBOGG_DLL LIBVORBIS_DLL and LIBVORBISFILE_DLL to be used optionally when installing

    Add OGG_INCLUDE_DIR to SOUND_INCLUDE_DIRS

    Fix cmake install script (mesetint -> minetest)

    Don't try to use sound if building only server

    Raise PROTOCOL_VERSION to 9, as this is not compatible with earlier versions

    Make server world selection not brain dead and use gameid 'minetest' instead of 'mesetint'

    Change postfixes from N.ogg to .N.ogg in user/testsounds/ loader

    Some serialization version stuff

    Initialize utility.h return values to 0 to make lazily error-checked deserialization code work less chaotically

    Update doc/lua_api.txt

    Switch sound randomizer postfixes from N.ogg to .N.ogg

    Sound loading from memory (by using a quick hack)

    Update/fix .gitignore

    Almost support loading sounds from server

    Add a variant of hex_encode

    Add removeStringEnd()

    Add more media directories; mod/{textures,sounds,media}

    Texture cache -> Media cache WIP

    Cache textures by checksum

    Make event_manager.h build on MSVC

    Build configuration fixes/improvements on Windows

    Fix build on MinGW (as compared to Linux)

    Lua API for playing sounds

    Add sound.dig

    Update doc/lua_api.txt

    Add sounds, tune things

    Digging and placing sounds

    Add event manager and use it to trigger sounds

    LocalPlayer::getStandingNodePos()

    c55sound continued

    Update/fix/improve config.h and cmake_config.h.in

    celeron55's sound system initial framework

    Seriously WTF, LLVM/clang?

    Fix filesys.cpp debug output to go into debug.txt

    Remove useless clearing of the Z buffer

    Install lua_api.txt and mapformat.txt in  because awesome.

    Update doc/lua_api.txt and doc/mapformat.txt even more

    Describe format of nodes in doc/mapformat.txt

    Update doc/mapformat.txt

    mapformat WIP

    Add output levels --info and --trace (--verbose is now more verbose)

    Move headers from socket.h to socket.cpp

    Fix UDPSocket's debug output

    Log at info level when a banned client connects

    Add more information to lua_api.txt

    Update Lua API documentation and move it into doc/lua_api.txt

    Goddamn MSVC pow overload ambiguities

    Add ScopeProfilerType SPT_GRAPH_ADD

    Add different automatic profiler graph drawing style for relative-ish plots

    Add more graph colors, add mainloop_dtime graph, make statustext fade away faster

    Modify and clean main loop to allow measuring the proper times

    Profiler graph

    Use atof() in mystof(), because istringstream>>float randomly causes a segfault on mingw

    Attempt to fix some minor memory leaks

    Call this 0.4.dev-20120320

    Fix various things being too fast to break by hand

    Remove .hgignore and .hgtags (mercurial isn't used anymore)

    Add mods/mesetint/mods_here.txt to be installed on RUN_IN_PLACE builds

    Fix mod paths

    Fix for MSVC and move stuff around a bit in CMakeLists.txt and src/CMakeLists.txt

    Update vc10 build script example in README.txt

    Move icon files to misc/

    Flatten share/ and user/ in the source and for the RUN_IN_PLACE build

    Move share/builtin.lua to share/builtin/builtin.lua

    Move client textures to the correct place

    Rework directory structure

    Add the mod search path user/mods/gameid

    Make Lua error output in log clearer

    Do not error() on digprop_* calls but print a warning

    Unknown nodes can be dug

    Warn instead of completely removing minetest.digprop_whatever() Lua functions

    Remove minetest.digprop_whatever() Lua functions (because they are useless now)

    Update README.txt a bit

    Update version to 0.4.dev-20120318

    Attempt to fix build for MSVC

    Fix getVisibleBrightness() to return sunlight visibility correctly even if not much of world has been loaded

    Make some things diggable by hand by using a special group oddly_breakable_by_hand; also fill in some other groups

    Fix old world search path for non-run-in-place build

    Move doc/changelog.txt and doc/ancient_main_comment.txt into old/

    Disable word wrap in vertical texts in main menu

    Fix installation in cmake project files

    "or" -> "||" in content_mapblock.cpp

    Fix and tune stars

    Do not clear address in main menu if starting a singleplayer game by double clicking the world

    Dynamic sky, fog and cloud colors; sun and moon

    Move ClientMap to clientmap.{h,cpp}

    Add Client::getEnv() and remove some unnecessary wrappers

    Revert old 4BS/s walk speed for now

    MapBlockMesh, mesh animation system, urgent mesh updates, athmospheric light, removed footprints

    Tune main menu

    Create main menu tab "Settings" for client settings

    Fix click areas of singleplayer checkboxes

    Fix initial moving of mouse above the "exit to menu" button in singleplayer mode

    Fix and improve Server's privilege get/setters

    Add "simple singleplayer mode"; Fix a number of GUI things

    Save selected tab

    Menu tuning WIP

    Use a more standard order of yes/no/cancel/whatever buttons in dialogs

    Crude tab test in main menu (requires gui redesign for the additional tabs)

    Add [new] to world name when supplying a non-existent world on command line

    Allow directly supplying world as a parameter, including world.mt

    Move keychange/connect main menu buttons a bit

    Fix game selection in world creation (used always the first one)

    Attempt to fix RUN_IN_PLACE autodetection on Linux

    Add confirmation menu and make world deletion possible in GUI

    World creation button and dialog and functionality

    Remember selected world by path

    Make finish quicktune and leave it unused (as intended)

    Add quicktune.{cpp,h}

    Handle certain errors properly when using --go

    Add a note about minetest.conf in the key change dialog (because it sucks)

    Use default_game when making a new world using --world without --gameid

    Remove duplicate code in main menu

    Rename "Delete map" to "Delete world"

    Proper handling of failing to bind server socket

    World selection box in main menu (and random fixing)

    --world implies local game

    Fix CreateAllDirs() (failed for relative fully non-existing path)

    Mention world location at server startup at action level

    Redirect Lua print to minetest.debug

    --logfile '' = no logging

    Remove useless debug output (log at info level)

    --gameid list

    Update --gameid to manpages

    Update version number to 0.4.dev-20120311

    world.mt creation

    command-line/world game selection

    full_punch_interval = 1.0 for mese pickaxe

    Limit crack update speed

    When mouse button is held down in air, show continuous animation

    Fix log output in ban.cpp

    Improve command-line parameters

    Prettify --help output

    Move huge comment from the beginning of main.cpp to doc/ancient_main_comment.txt

    --verbose, not --info-on-stderr

    Clean up log messages everywhere

    Do not print errors when searching for usable configuration file

    Fix configuration file behaviour

    

    - Do not rewrite if nothing needs to be changed

    - Update at program exit, in addition to updating when continuing from main menu to game

    - Do not rewrite if nothing needs to be changed

    - Update at program exit, in addition to updating when continuing from main menu to game

    - Update at program exit, in addition to updating when continuing from main menu to game

    Increase Peer max_packets_per_second (hopefully doesn't break anything)

    Add description in minetest.conf.example

    Tune "Connecting to server" and "Waiting content" screens

    Chat console, including a number of rebases and modifications.

    

    Defaults modified from original: alpha=200, key=F10

    Defaults modified from original: alpha=200, key=F10

    Starting the game in the pause menu is lame, don't do it\!

    Set fixed FOV for the wielded item

    Different implementation of KeyPress::operator==

    

    Fixes some key mapping issues.

    Fixes some key mapping issues.

    Make Camera::updateViewingRange more snappy in following the min/max settings

    Faster player movement and smaller collision box

    dig_immediate=2 -> 0.5 seconds digging time

    Set rail to have dig_immediate=2

    Tidy up server log output a bit

    Clean unit test output

    Add and tidy up some Server log output for declined connections

    Remove servermain.cpp, use main.cpp with a couple of #ifdefs instead

    Fix addon and configuration file paths

    Initial directory structure rework

    Ban and Auth managers use infostream rather than dstream

    Replace dig_immediate=1 with dig_immediate=3 in mods/default/init.lua

    Add a small bunch of notes about groups in mods/default/init.lua

    dig_immediate=3 instead of 1 means 0 seconds

    Update mini documentation in mods/default/init.lua a bit

    Immediate smoke puff when a normal entity is punched to death

    Fix and tune things, add tool "recharge" animation, add dummyball

    Set proper armor group for experimental:tnt

    LuaEntity armor groups

    ClientActiveObject::debugInfoText()

    Remove header in servermain.cpp to make minetestserver to build

    Damage groups WIP

    Entity damage system WIP; Remove C++ mobs

    Small fix in getHitParams

    Don't draw cracks when digging is impossible

    itemgroup.h and ItemGroupList typedef

    Tune group digging time stuff a bit

    remove material from minetest.nodedef_default

    Digging time groups WIP

    Improve raillike drawtype

    Handle select errno EINTR properly (not doing this breaks at least many profilers)

    Move profiler measurements into inside of mutex locking for more useful results

    Add dedicated_server_step setting

Merge: a5f6d65c3 806f10524

    Merge remote-tracking branch 'jn/random-fixes'

    Add UNIX man pages to aid package creators.

    Add descriptions to command line arguments

    Install icon and .desktop file on Unix systems

Merge: b7fd3c866 ac69a3561

    Merge pull request #46 from garrosh/master

    

    Add *~ to .gitignore

    Add *~ to .gitignore

    Add minetest.get_worldpath() for getting location for custom data

    Fix pointed.thing.ref -> pointed_thing.ref in builtin.lua

    Add descriptions to minetest.conf.example

    server: /give: show the actual stackstring

    creative inventory: update to use default:fence_wood

    mesh: warn only once about render-to-target not being supported

    tile: remove redundant warning about failing render-to-target

    tile: don't duplicate std::string::find_last_of

    itemdef: handle the !render-to-target case

    Tune brightness stuff and fog color

    Set default maximum viewing range to a bit more than default server send range to make fog work well

    Fix calculating if block is in viewing range; fix fog and default minimum accordingly

    Players stay in environment even when dead, damage flash and fall damage fixes

    

    Don't set m_removed on dead players (dead players are indicated by hp == 0). Local

    damage flash is shown whatever the cause was (even from Lua set_hp). PlayerCAO

    damage flash matches duration of local damage flash. Fall damage is dealt much more consistently (this is done by disallowing jumping when speed.Y is very negative, up to now jumping could sometimes negate fall damage)

    Don't set m_removed on dead players (dead players are indicated by hp == 0). Local

    damage flash is shown whatever the cause was (even from Lua set_hp). PlayerCAO

    damage flash matches duration of local damage flash. Fall damage is dealt much more consistently (this is done by disallowing jumping when speed.Y is very negative, up to now jumping could sometimes negate fall damage)

    damage flash is shown whatever the cause was (even from Lua set_hp). PlayerCAO

    damage flash matches duration of local damage flash. Fall damage is dealt much more consistently (this is done by disallowing jumping when speed.Y is very negative, up to now jumping could sometimes negate fall damage)

    damage flash matches duration of local damage flash. Fall damage is dealt much more consistently (this is done by disallowing jumping when speed.Y is very negative, up to now jumping could sometimes negate fall damage)

    Modify light values to work a bit better with non-smooth lighting

    Add groups = {} to item definition

    Set better visual light levels

    Fix some warnings on some compilers

    

    ItemStack is a struct, not a class

    CollisionInfo is a struct, not a class

    InventoryAction is abstract and it needs a virtual destructor

    ItemStack is a struct, not a class

    CollisionInfo is a struct, not a class

    InventoryAction is abstract and it needs a virtual destructor

    CollisionInfo is a struct, not a class

    InventoryAction is abstract and it needs a virtual destructor

    InventoryAction is abstract and it needs a virtual destructor

Merge: 796009ef2 b85b4ede8

    Merge remote-tracking branch 'kahrl/hidehud'

    Fix server hang when stepping a furnace with a huge dtime

    Page up/down: don't display the old value, it was a little confusing

    Page up and down change the minimum viewing range

    Show the top line too when only chat, but not HUD is shown

    F1 toggles HUD, F2 toggles chat, F5 toggles debug info, F6 toggles profiler pages

    Fix craftresult_is_preview flood in log and remove unnecessary debug output

    Added Kate backup file scheme to .gitignore for Kate users

    Remove unnecessary delays from large data transfer unit test

    Set default number of maximum users to 100 instead of 20

    Add EnvRef:set_timeofday(0...1) and EnvRef:get_timeofday()

    Call this 0.4.dev-20120122-1

    Fix "illegal escape sequence" in MSVC (actually not illegal)

    Fix give_initial_stuff mod; experimental mod: dug_item -> drop; scriptapi.cpp: drops -> drop

    tool and ToolItem apply item aliases

    Cleanup (some stuff went wrong when reverting 4-byte mapnodes); fix legacy_wallmounted

    cleanup

    Create node metadata when placing nodes again

    Client-side prediction of inventory changes, and some inventory menu fixes

    Inventory menu (with dragging) improved. Crafting is now handled via a IACTION_CRAFT inventory action.

    Node placement / mineral / serialization / iron freq / node_dig callback

    

    - Node placement code moved to Lua

    - Mineral system removed (added default:stone_with_coal and default:stone_with_iron).

    - MapBlock and MapNode serialization updated.

    - Mapgen: Frequency of iron increased.

    - node_dig callback and related changes.

    - Node placement code moved to Lua

    - Mineral system removed (added default:stone_with_coal and default:stone_with_iron).

    - MapBlock and MapNode serialization updated.

    - Mapgen: Frequency of iron increased.

    - node_dig callback and related changes.

    - Mineral system removed (added default:stone_with_coal and default:stone_with_iron).

    - MapBlock and MapNode serialization updated.

    - Mapgen: Frequency of iron increased.

    - node_dig callback and related changes.

    - MapBlock and MapNode serialization updated.

    - Mapgen: Frequency of iron increased.

    - node_dig callback and related changes.

    - Mapgen: Frequency of iron increased.

    - node_dig callback and related changes.

    - node_dig callback and related changes.

    Fix inventory glitch when connecting as new user

    Inventory menu changes: Tooltips; dragging; drop from menu. Lag is a bit annoying (even in single player).

    Tool progress bar tweaking

    The huge item definition and item namespace unification patch (itemdef), see http://c55.me/minetest/wiki/doku.php?id=changes:itemdef

    Call this 0.4.dev-20120106-1

    Fix key change menu a bit

    ObjectRef:setpos() to move player properly (a bit shortcuttish implementation)

    Implement minetest.register_on_dieplayer()

    Add missing checks to texture caching

    Limit range of ABM timer initial value randomization

    Use free rather than delete for malloc'd memory

    Initialize ABM timer to random value to spread processing

    Fix ABM trigger chance being often way too high

    Fix server sending stuff before textures have been sent

    Mark ObjectRef::get_entity_name() deprecated

    Add name field to registered entities

    Add ObjectRef:getvelocity(), ObjectRef:setyaw() and ObjectRef:getyaw()

    Add ObjectRef:get_luaentity()

    Call this 0.4.dev-20120102-1

    Make text area in message dialog a bit larger

    Texture cache on client (mostly made by sapier) (breaks network compatibility)

    ObjectRef:get_entity_name() and fixing of comments in default/init.lua

    Make add_entity return a reference to added entity (or nil)

    Clean up InvRef documentation in default/init.lua a bit

    Improve mini Lua reference

    Add ObjectRef:get_inventory() and add stuff to documentation comments

    Working implementation of experimental:luafurnace

    Random fixes to InvRef related stuff and a broken luafurnace

    Add InvRef:get_list() and InvRef:set_list() and fix some things (untested)

    Add minetest.get_inventory(location), untested

    A small robustness addition to ItemStack

    Rename InvStack to ItemStack

    Add InvRef and InvStack (currently untested and unusable)

    Add default: to everything in default/init.lua (...hopefully doesn't break anything)

    Fix segfault when generating stuff on world boundaries

    Correctly pop stuff from the Lua stack in script_load()

    Add virtual destructors to abstract classes

    

    IRespawnInitiator and InventoryActions are abstract classes, but they

    were missing a virtual destructor. Define it, even if it does nothing

    and its absence most likely makes no difference other tha causing

    warnings during compile.

    IRespawnInitiator and InventoryActions are abstract classes, but they

    were missing a virtual destructor. Define it, even if it does nothing

    and its absence most likely makes no difference other tha causing

    warnings during compile.

    were missing a virtual destructor. Define it, even if it does nothing

    and its absence most likely makes no difference other tha causing

    warnings during compile.

    and its absence most likely makes no difference other tha causing

    warnings during compile.

    warnings during compile.

    Fix mirrored sign texture

    Add wooden planks to creative inventory

    Add EnvRef:get_objects_inside_radius(pos, radius)

    Add get_look_dir(), get_look_pitch() and get_look_yaw() for players

    Fix minetest.env:get_player_by_name(nil) causing segfault and similar things

    Extend load screen maximum time

    Add minetest.get_modpath(modname)

    add_luaentity->add_entity in mods/experimental

    Call this 0.4.dev-20111209-1

    Enforce modname naming convention

    Delete unknown LuaEntities when punched

    Improve /spawnentity a bit

    Rename EnvRef:add_luaentity to EnvRef:add_entity

    Add EnvRef:get_node_light(pos, timeofday)

    Properly use time_from_last_punch for limiting PvP punch damage

    Use plain IBillboardSceneNode instead of MyBillboardSceneNode (improves

    Irrlicht 1.8 compat); also find dungeon master's fireball texture

    again; add /spawnentity command

    Irrlicht 1.8 compat); also find dungeon master's fireball texture

    again; add /spawnentity command

    again; add /spawnentity command

    Check symlinks with stat() to know if they are directories or not

    Add support for unix filesystems which yield DT_UNKNOWN in dirent->d_type, falling back on stat().

    Fix player not dying when beated to death by other player

    Fix getting two old-style minerals per digged node

    Determine light_propagates from paramtype

    Add experimental TNT's old name as an alias

    Add furnace to legacy aliases

    Make ToolItem and MaterialItem to convert names by aliases at creation time too (necessary for eg. crafting)

    Fix fence name

    Call this 0.4.dev-20111204-1

    Convert CraftItems directly to the name pointed by alias; necessary due to lua definition table

    Fix wrong checked node names in bucket

    Add some aliases to bucket

    Don't initialize ItemCAOs with stick.png

    Fix craftitem aliases

    Move default_treeprop.png to treeprop.png

    Craftitem aliases

    Fix log message in tooldef.cpp

    Modify a commit in tooldef.cpp and nodedef.cpp

    Tool aliases

    Add serialization for node aliases to let client show inventory images correctly

    Node definition aliases

    Even more texture fixing

    Rename lump_of_* to *_lump

    Fix the previous commit

    Clean and fix mods/experimental/init.lua

    More texture naming fixes

    Rename textures of default mod

    Remove iron apple from default

    Make global names in default mod use good naming convention and move backwards-compatibility definitions to mods/legacy

    Rename cookresult_item to cookresult_itemstring

    add EnvRef:get_node_or_nil()

    Add ABM required neighbor check

    Fix bucket texture names

    Allow digging unknown nodes

    Show infotext for unknown nodes

    Show infotext for unknown items placed on ground

    Call this 0.4.dev-20111203-3

    On SIGINT in main menu, don't connect before shutting down

    inventorycube: use all three specified textures; also moved mesh creation / modification functions to mesh.cpp; in lua, inventorycube is now called minetest.inventorycube

    Do not broadcast an empty chat message when someone tries to log in with the wrong password

    Notify player whose password is being changed

    Call this 0.4.dev-20111203-2

    Note about debug.txt in error message dialog when mod fails to load

    Change naming convention to be modname:* instead of modname_* (sorry modders!)

    Fix note about run-in-place mod search path in mods/default/init.lua

    Set version 0.4.dev-20111203-1

    Add usermods/ to mod search paths and print out the paths at server startup

    Properly handle mod name conflicts

    Better mod loading error handling

    Add world/mods to mod search path

    Remove accidental stupid naming in craftitem example

    Enforced mod global naming convention and better error reporting

    Fix script error reporting a bit

    Fix ActiveObject creation for fast player respawns

    Fix sending of player hp (was sent all the time)

    Remove unnecessary debug output from mods/default/init.lua

    Show bare hand when no item is selected

    Set version to 0.4.dev-20111202-1

    Fix mod licensing and add a mention about sound licensing in README.txt

    Script-defined creative inventory

    Rename "build" privilege to "interact" (backwards-compatibly, of course)

    Rename "NodeItem"/"ToolItem"/"CraftItem" to "node"/"tool"/"craft"

    Remove obsolete createPickedUpItem()

    Add time_from_last_punch to Lua API

    Add a note about mods being under CC BY-SA 3.0 like textures

    + middle-click now empties the inventory slot properly

    Add enable_pvp setting

    Make unlimited player transfer distance configurable

    Fix player double damage

    Make hitting players make a visual damage flash to the player texture and the screen of the local player

    Don't hide players in pitch black (like oerkkis)

    Move ServerRemotePlayer to a separate file

    Fix /give(me) commands a bit in default mod

    Fix the previous commit

    Enforce PLAYER_INVENTORY_SIZE in ObjectRef::l_inventory_set_list

    Print out PROTOCOL_VERSIONs if server is incompatible with client

    Higher default map save and unload interval

    Don't send objects or map data before definitions have been sent

    Make players be again visible from a long distance

    Remove stuff made obsolete by making players more ActiveObject-like and raise protocol version number by one (because it is not compatible at all anymore)

    Players are more like objects + related stuff

    Player-is-SAO WIP

    Fix non-fancy leaves not making faces with water

    Make non-fancy leaf texture to go in texture atlas too

    Add ServerActiveObject::removingFromEnvironment()

    Remove +"^[forcesingle" from ContentFeatures::setInventoryTexture, because 1) it was not used, 2) if it will be used, it won't need to do that anymore

    Fix getTextureRaw to always return an image that is not in the texture atlas and fix plain "^[forcesingle" handling

    Fix loading of legacy MaterialItems (was loaded as a quite random type)

    Fix texture atlas not being created correctly

    Include the freedesktop.org-standard .desktop file in misc/ to aid package makers

    Remove old stuff from misc/

    Fix processing of the default_password setting. It is now actually used as the plaintext password for new users. Also add /setpassword and /clearpassword server commands that can be used by admins with the PRIV_PASSWORD privilege, and update the /help message.

    Make camera.cpp Irrlicht 1.8-compatible by calling ITexture::lock differently depending on the irrlicht version.

    Wireshark dissector: correct messed up field names

    Wireshark dissector: Add TOSERVER_RESPAWN and TOCLIENT_DEATHSCREEN, plus some failed assertion fix (well, hack).

    Enable simple drag and drop in inventory

    Inventory move-to-slot hilighting

    Note in init.lua the methods specific to the "generic" node metadata

    Fix conditional bug in inventory

    

    A spurious semicolon after the conditional checking for the drop count

    to be not higher than the owned count caused the subsequent

        count = getCount()

    to be always executed. Fix by removing the extra semicolon.

    A spurious semicolon after the conditional checking for the drop count

    to be not higher than the owned count caused the subsequent

        count = getCount()

    to be always executed. Fix by removing the extra semicolon.

    to be not higher than the owned count caused the subsequent

        count = getCount()

    to be always executed. Fix by removing the extra semicolon.

        count = getCount()

    to be always executed. Fix by removing the extra semicolon.

    to be always executed. Fix by removing the extra semicolon.

    Fix structs being declared as classes

    

    Some compilers complain when a class is declared as a struct or vice

    versa. Fix by making sure that the correct tag is used both in

    declaration and definition.

    Some compilers complain when a class is declared as a struct or vice

    versa. Fix by making sure that the correct tag is used both in

    declaration and definition.

    versa. Fix by making sure that the correct tag is used both in

    declaration and definition.

    declaration and definition.

    Fix sand to be cookable to glass

    Update version in CMakeLists.txt to 0.4.dev-20111201-1

    Fix deadlock if MeshUpdateThread asks new textures while it is being stopped (happened if texture data was transferred slowly)

    Move NodeMetadata prototype containers to content_nodemeta.cpp to fix them not being filled correctly on some systems and compilers

    Update version in CMakeLists.txt to 0.4.dev-20111201-0

    Do not assert if count becomes larger than getStackMax() in InventoryItem::add(); it is nicer for scripting and overall hacking this way, because rising it higher than the limit is does not break anything. It should be, and is, enforced elsewhere where appropriate.

    Load count 0 in itemstring as 1

    Move craftitem_place_item as minetest.craftitem_place_item in builtin.lua

    ObjectRef:get_player_name, ObjectRef:inventory_set_list, ObjectRef:inventory_get_list

    Add ObjectRef:punch and ObjectRef:right_click to Lua API

    List added functions in default/init.lua

    Add get_wielded_itemstring, get_wielded_item, damage_wielded_item and make getacceleration visible in API

    Reworked the inventory move handling code, hopefully fixed more problems than caused

    Fix player getting reset to 0,0 at connect if being far from 0,0

    Version 0.4.dev-20111129-2

    Modify builtin ABMs to have lower interval and higher trigger non-chance

    Proper player inventory and hp modification tracking and sending accordingly

    Tune main menu a bit and show version number in there

    Better version match fail messages from server

    dev-20111129-1

    Create the necessary API for /giveme and /give and implement those commands; also sort out the scripts a bit

    Handle items with m_count==0 sanely when placing

    Print debug stacks to infostream rather than errorstream when placing CONTENT_IGNORE

    Do not install the static lua library file

    Remove content_inventory.{h,cpp}

    Quick fix to a bug that makes it possible to raise water levels everywhere with one source

    Modify bucket namings

    Add bucket textures

    Reorganize mods

    Add missing files for a previous commit

    Update version number to 0.4.dev-20111129

    Add a note about the default mod not using the modname_ prefix in textures

    CraftItem rework and Lua interface

    Fix active_object_count and active_object_count_wider not getting updated between ABM calls causing huge amounts of DMs and rats and stuff

    Add NULL terminations to EnumString definitions

    Some MSVC fixes

    Fix CMake install data path

    Silly MSVC doesn't know how to handle type conversions for parameters of pow(). Help it.

    Update installation in CMakeLists.txt

    Rename menu background to menubg.png, move unknown_block.png and unknown_object.png to client, make generating a placeholder image for the filename "" not cause an error

    GenericNodeMetadata and an example furnace

    Fix stuff in inventory.{cpp,h}

    Comment out debug output in ServerEnvironment::activateBlock

    Handle ActiveBlockModifier intervals properly, down to 1s

    Initial NodeMetaRef stuff

    Lua interface for ActiveBlockModifier

    Remove creation of builtin.lua defined minetest.registered_* tables in C

    Comment fix in builtin.lua

    For consistency, implement calling of on_chat_message callbacks in C

    Implement callback registration in Lua instead of C

    Replace old active block random node modifying things with actual ActiveBlockModifiers

    Add chat message callback and send functions

    Print errors from local log to chat

    Add a third log output interface method

    Use log_deregister_thread in EmergeThread

    Add log_remove_output and log_deregister_thread

    Fix mod dependency sort

    Add depends.txt for mods/give_initial_stuff

    Warn about unsatisfied dependencies

    Make blocks to be loaded from disk when the active block area reaches them

    Fix a random commented-out piece of lighting code, altough it doesn't work any better

    Optimize lighting by a tiny bit

    Sort mods by dependencies defined by modpath/depends.txt in each mod (not mandatory)

    Fix default value of visual in LuaEntityProperties

    Allow server-side teleporting

    Fix and tune player movement checks (make them very loose)

    Add IDropAction and related stuff

    Improve luaentity sprite functionality (and add some random stuff)

    Comment out print("on_generated: ...") in Lua

    Fix liquid source backface culling (was not turned off)

    Fix player getting thrown underground after connecting

    Make map generator as much threaded as possible (not much benefit with current generator because of small generator chunk size (a single MapBlock))

    Add on_generated hook

    Improve player movement speed checking

    Player movement speed and node access distance checking

    If available, use local textures instead of those sent by server

    Fix TNT script

    Make lighting update occur immediately after ClientActiveObject addition to make objects show up much more responsively

    Reshape LuaEntityCAO implementation a bit and make TNT to blink

    Optimize active block modifier stuff (was left horribly unoptimized after making content ids dynamic)

    Re-implement give_initial_stuff

    Exception handling in Lua setting get

    Lua setting getter

    remove get_nodedef

    on_newplayer and on_respawnplayer callbacks

    liquid_type -> liquidtype

    Make node definitions available to Lua

    Remove give_initial_stuff

    Add node definitions in Lua and do not use content_mapnode_init anymore (except in test.cpp)

    Modify CONTENT_AIR and CONTENT_IGNORE handling in nodedef.cpp

    Fix random node definition stuff

    Add builtin.lua

    builtin.lua

    Add object reference to Lua on_place/dig/punchnode parameters

    Fix "warning: comparison between signed and unsigned integer expressions"

    Some node definitions in Lua

    Duplicate last tile image automatically to all for lua node definitions

    Make map generator more responsive

    Print out number of blocks in memory at unload

    Don't allow placing CONTENT_IGNORE with Map::setNode() because it is never useful and is only caused by bugs.

    Improve debug stack printing interface

    Make liquid_alternative_* to be strings

    Mode node definition loading from Lua (still not finished), fix metadata creation from name

    Store metadata as metadata name in node definition

    Set block modified flag when node metadata inventory is modified

    Add names to NodeMetadata

    Add Lua node definition stuff (not complete)

    Add texture modifier [brighten and modify [toalpha to modify existing texture, not read a new base

    Random Lua tweaks/fixes

    Make object hit delay smaller for fun; actually it should be roughly zero and hit damage should be calculated from the amount of time since last punch, limited to a maximum value

    Relatively snappy object-ground collision detection

    When digging a node, don't switch to punching an object without raising button

    Default to saving stuff more often to minimize lag caused by a single save

    Don't print 'Blocks modified by: ' in Map::timerUpdate if no blocks were written

    Don't print all block saves to verbosestream; rather print counts of distinct modifiers

    Add reason parameter to setModified and print it out to verbosestream when saving block

    Improve LuaEntity velocity/acceleration handling (by kahrl); implement staticdata interface to Lua

    Mess up with node definitions to make CONTENT_IGNORE be correctly interpreted when creating meshes

    Optimize map generator for the dynamic content ids a bit

    Make added nodes give the corresponding NodeItem as of now (placeholder code)

    Fix tool wear

    Falling sand and gravel

    Node place/dig Lua callbacks

    Fix crafted tools being a very tiny bit worn in default/init.lua

    Remove crafting definitions from content_craft.cpp

    Add classic crafting recipes to default/init.lua

    Catch SerializationError in CCraftDefManager::getCraftResult()

    Add note about craft_get_result() not being used anymore, but don't remove before it's contents have been transferred to scripts

    Crafting definition in scripts

    Improve item serialization

    Allow inputting nodename of MaterialItem in ItemSpec::checkItem

    Fix another silly mistake making CONTENT_IGNORE definition not being what it should

    Fix silly misspelling in mapgen that made junglegrass to be CONTENT_IGNORE

    Actually fill in the NewNameGetter names to allow map generator operation and crafting

    MapNode constructor to allow ndef+name

    Initial node definition stuff

    Fix camera MaterialItem draw logic

    Clean InventoryItem interface a bit

    Improved MaterialItem (stores nodename)

    Do not expose CONTENT_* stuff in content_mapnode.h and use a name converter wrapper in old code

    Node definition names

    Add name field to ContentFeatures

    Remove burn time definitions from FurnaceNodeMetadata

    Remove old comments

    Move cook result properly to ContentFeatures

    Remove node content-dependent stuff from map.cpp

    Remove content_mapnode.h and nodedef.h #includes

    Remove content dependencies from mapblock.cpp

    Remove #include <content_mapnode.h> from game.cpp

    Saner sized sapling

    Cut down content transfer verbosity

    Cut down TextureSource verbosity

    Improve loading screen and protocol

    Clean nodefeat and content_mapnode a bit

    Fix flowing water being always opaque

    Fix MaterialProperties serialization (constant_time was missing)

    Improve glass

    Fix NDT_PLANTLIKE scaling to always keep the bottom at ground level

    Replace direct irrlicht texture fetching in CAO content with TextureSource

    Clean mapnode.h and fix other files accordingly

    Node definitions transfer

    Completely generalized mesh generation; ContentFeatures serialization

    Clean more

    Remove commented out code

    Prepare more for node definition serialization

    Better node texture generation

    Update inventory texture too

    Properly update textures in node definitions

    Sending of textures WIP

    Fix yet-another serialization error in utility.h and set constructor of Buffer take const data for copying

    Modify mod and texture directory hierarchies

    Update TODO list in scriptapi.cpp

    Set traditional minetest durability values to tools

    Move tool definitions to script

    Tool definition transfer to client

    ToolDefManager serialization

    ToolDefinition serialization

    Make fence post selection box smaller and create code to allow node placement to the side of a static box

    Tune gravel and picks

    Make possible and do update textures in node definitions after late texture atlas making

    GameDef compiles

    Create framework for getting rid of global definitions of node/tool/item/whatever types

    Move tool stuff to tool.{h,cpp}

    Tune the tool speed thing

    New kind of tool speed and wear calculation thingy

    Set version to 0.4

    Clean headers a bit

    Allocate MapBlock::m_node_metadata on heap to allow less header bloat

    Generic NodeMetadata text input

    Generalize selection boxes

    Set the BS constant to be floating-point; this removes the need for floating point numbers when dividing it

    Clean code and modify comments in mapnode_contentfeatures.h

    Move ContentFeatures to mapnode_contentfeatures.{h,cpp} and clean stuff

    Scripting: Allow multiple global step callbacks and improve documentation

    Handle undefined objects better

    Scripting WIP: Add global environment step function on_step

    Scripting WIP: dynamic object stuff

    ServerRemotePlayer implements ServerActiveObject

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP

    Scripting WIP; Lua entity step callback works

    Add textures in data/textures (appeared to not have been added)

    random scripting work-in-progress

    Add the default.lua script

    Scripting WIP

    Move images to data/textures and fix some path stuff; hope that installation still works

    Make it actually build

    Add Lua

    Better spawn position finding and checking

    Update changelog and call this 0.3.1

    Fix water-glass and water-lava surfaces

    Call this 0.3.dev-20111108

    Reset block usage timer on client only if it is very probably drawn

    Make Connection::Receive return the data via a SharedBuffer reference, so the caller doesn't have to choose the right buffer size in advance.

    

    Conflicts:

    

            src/test.cpp

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            src/test.cpp

    utility.h: Change Buffer's interface to be more compatible with SharedBuffer's interface, connection.h: use Buffer instead of SharedBuffer in command and event queues

    Add new Connection test in test.cpp in case needed in the future (commented out), improve comments in test.cpp a bit

    Infinite packet flood test for debugging the new network layer

    Command-line signal handling for Windows

    Make water invisible next to underwater glass

    Improve "compile on Windows" section in readme

    Call this version 0.3.dev-20111104

    Add option to set water opaque (mainly for stylistic choice)

    Fix flowing liquid spacing; water and lava next to each other will glitch a bit but it isn't as bad as this was

    Update /README.txt, remove duplicate /doc/README.txt and update CMakeLists.txt to package /README.txt

    Make CONTENT_IGNORE to not block the view when occlusion culling

    Disable mipmapping because it is sometimes ugly

    Possible fix to bases of islands/hills getting culled out too early

    Tune occlusion culling a bit more

    Tune occlusion culling a bit

    Very simple occlusion culling

    occlusion culling fix, a little reshaping of map rendering for more useful profiler output and dynamic profiler text size

    Remove trailing / or \ in path_userdata (probably fixes world deletion on Windows)

    Add 3d cloud checkbox in main menu (and rename setting from enable_2d_clouds to enable_3d_clouds)

    Set version to 0.3.0 and update changelog

    Fix an obvious bug in utility.h

    Attempt a workaround to the network layer segfault

    Make it to compile on MSVC2010

    0.3.dev-20111021

    Some tuning in m_max_packets_per_second algorithm

    Improve Connection with threading and some kind of congestion control

    Default max_simultaneous_block_sends_server_total to 2 to make network not cough too much on the fixed block sending code

    Fix apple inventory texture

    Fix and tune block sending

    Add enable_2d_clouds setting for usage on lower-end machines

    Try to tune fog to work well on high-end machines also

    Fix possible NULL dereference in MobV2CAO::step

    Tune map rendering and related diagnostics

    set backface culling off again for torches, ladders, rails and signs

    ...Make the the server buildable again after the last commit

    Improve rendering and fix tiling in mesh generation

    Automate texture listing for texture atlas making

    Fix client profiler print interval

    Better handling of SendFailedException in Connection

    Fix object duplication bug

    Make active_block_range default to 2

    Fix possible NULL pointer access in MobV2CAO

    Add /clearobjects

    Made a scheme to get rid of the objects in the worst object flooded blocks

    Modify default active block range

    F2 toggles profiler display in client

    Attempt to fix objects getting multiplicated by objects getting deactivated in a different block than where they were loaded and then the original block, from where the static object was removed, not getting saved at unload

    Fix minetest.conf.example a bit

    Add a log message to SEnv and make it load objects if there are < 51 of them, to load blocks that were limited to 50

    Catch SendFailedException when replying back in Connection::Receive()

    Display RTT (round trip time, ping) on client status text

    Add some rendering statistics to profiler

    Workaround for blocks having a huge amount of active objects; add log messages related to active objects for investigation

    Remove very floody log message of MobV2SAO

    Improve active object handling log output

    Fix partly double printed debug.txt

    Fix punching of oerkkis

    Fix chest not working after walked away and came back

    Improve inventory debug output

    Fix items showing up as sticks when placed in world

    Fix to-transparend conversion of backgrounds of sprite image files that don't have an alpha channel

    Some more profiler stuff to get the hang on what really uses CPU

    Improve debug profiler usage for investigating CPU usage of server

    When granting or revoking privileges, notify the target player too

    Make dungeon masters not shoot the walls with no reason

    When player times out, log the action as a timeout rather than regular quitting

    Check NULL pointer properly in some new code trying to log new stuff

    Better player damage prevention when falling on unloaded blocks, not involving getting stuck in there.

    Switch more stuff to use the logging thing and fix segfault on player leave from server as introduced in a previous switch-to-logging commit

    Fix map delete on windows (concatenate paths correctly with / or \ depending on OS)

    Update changelog (albeit a bit late)

    Use the logger; also, default to not showing much crap in console. Use --info-on-stderr to enable crap.

    Initially add small and tight logging facility

    Add peaceful / not peaceful distinction in mobs and the only_peaceful_mobs setting

    Update Linux build instructions in README.txt a bit and list the bat script used for releases

    Update version number to 0.3.dev-20111016

    Replace M_PI with PI

    Fix some "Conditional jump or move depends on uninitialised value(s)" valgrind detections

    Resource file handling for exe icon for MinGW

    Make view bobbing amount configurable

    Make dungeon masters though and make oerkkis disappear when they get to you (because hitting them doesn't work for some unknown reason)

    strict_protocol_version_checking setting; PROTOCOL_VERSION in clientserver.h; clean up defaultsettings.cpp and minetest.conf.example

    Handle death and respawn better

    Set a better version number

    Improve mobv2

    mobv2

    Lock mutex when accessing m_env in Server::~Server

    In CMake scripts: New version number, fix MSVC stuff

    Header file tweaking; mainly for speed

    Saner block modification flag operation for not saving everything always

    minetestmapper: Fix the way ylist is computed, use cStringIO instead of rolling own Bytestream, remove some artifacts when drawing underground blocks, introduce a --drawunderground switch (defaults to of), 'blocknum' renamed to 'content'.

Merge: 08ac3454c bc01ae4cb

    Merge remote-tracking branch 'marktraceur/master'

    minetestmapper speed tweaks (kahrl & JacobF)

    Add apple color to minetestmapper and fix cactus color

    Fix minetestmapper.py

Merge: 9a7471b74 561bb6496

    Merge remote-tracking branch 'kahrl/sectors2sqlite-fix'

    Rotate wielded tool the right way and modify axe graphics accordingly

Merge: b9e680d06 2ecd53ce0

    Merge branch 'view_bobbing_and_vielded_tool'

    Fix single-frame lag in camera yaw/pitch, tune view bobbing and add wielded tool movement when walking and tweak stuff a bit

    Support Python 2 and 3 in sectors2sqlite.py.

    Fix processing of blocks below y=0 in sectors2sqlite.py.

    Server user limit configuration option

Merge: 63eca0feb 8b875d71d

    Merge remote-tracking branch 'darkrose/master'

Merge: 789c88509 ae561d705

    Merge pull request #10 from joshbeck/master

    

    Fixed null pointer dereference errors found by cppcheck

    Fixed null pointer dereference errors found by cppcheck

    Fixed null pointer dereference errors found by cppcheck

    Fixed merge issues with saplings, ready to pull now!

    Fixed saplings growing into trees (thanks so much, Kahrl!)

    Put the random interval back to 1 in 50 chance. It's not as rare as rats, but rarer than grass.

    Put the random interval back to 1 in 50 chance. It's not as rare as rats, but rarer than grass.

    Adding sapling texture

    Adding (most) of the sapling functionality. It has yet to work, since MEET_OTHER was not implemented at the time of this commit. Hopefully it will work when merged with celeron's latest.

    remove content_* things from map.cpp

    Move PLATFORM_LIBS around to make sqlite3 link with libdl on some distros

    Make client report a newer version number to the server than 2011-07-31 does and make the server enforce it

    Oh well, let's call it just 0.2.20110922

    Update changelog and version to 0.2.20110922_rc1

    added locking chest texture

    added locking chests - clean patch

    Better apple tree generation

    Simplistic wielded tool lighting, added setMeshVerticesColor to utility.h and refactored some other code into calls of that

    reduce view bobbing slightly

    Create a separate scene manager for the wielded tool. This fixes the glitchyness in large map coordinates and some depth buffer problems. (The tool doesn't bob anymore when walking, this will be fixed later.) Fix MSVC build (thanks to dannydark).

    fix a numerical problem, but tool is still jittery

    Fix jittery view bobbing at large map coordinates again. Wielded tool still has problems there

    Digging animation

    fix some normals

    Wielded tool updates, leaves and glass work now

    Convert any inventory item into a mesh, bring back InventoryItem::getImageRay(), some const-correctness fixes

    Added sprite extruder

    trying some view bobbing changes

    Oops, up vector is needed.

    This looks more like MC view bobbing, but still not even close

Merge: 40707e3c5 88dc8c694

    Merge remote-tracking branch 'sfan5/apple-trees'

    SQLite needs to be linked with -ldl on some Linux distros.

    Revert some changes that could lead to slower map transfer and increaed network load.

    update minetestmapper so it can read the database also

    Update changelog

    Updated colors.txt (which is used by minetestmapper)

    Made wielded tool move slightly (and smoothly) during view bobbing. Making the tool be a child node of an empty scene node instead of the camera scene node seemingly fixed the uncontrollable tool jitter, too.

    View bobbing is slower in the water.

    Added Iron Apple which heals 4 Hearts

    Changed the Heal Amount of Apples from 6 to 2

    Fixed duplication bug

    Removed Spaces

    Added Apple Trees

    inventory displays tool breakage bar again

    trying something else... also replaced M_PI by PI everywhere

Merge: f2ec22652 f31b0a336

    attempting to merge Queatz/the-wielded-tool and kahrl/viewbobbing, something doesn't work right yet

    minor view bobbing improvements

    make it slightly less annoying :o)

    Implemented view bobbing (testing simple lemniscate shape)

    Commented out debug statements again

    Collected and moved existing camera infrastructure from game.cpp to camera.cpp and camera.h. Introduced configuration settings 'fov' which chooses the camera's (vertical) field of view and 'view_bobbing' which currently does nothing. Other code refactored to not expect the FOV to be a build time constant.

    Removed unused camera_position and camera_direction fields from Client. Moved ClientEnvironment::drawPostFx to ClientMap::renderPostFx -- this will make the camera management classes easier to write, as ClientMap already knows the camera position but ClientEnvironment doesn't and has to be told about it. This also eliminates the need for Client::getEnv(). Made the post effect color a content feature defined in content_mapnode.h.

    Display which tool the player is holding

    And some simple animation when trying to dig...

    And some simple animation when trying to dig...

    Note about texture atlas

    Add note about trans_table_19.

    Remove block file from disk when saved to database

    Pause in unloaded territory instead of collide

    Make Connection::Send cancel silently if peer doesn't exist.

    Update version number to something more proper for this stage of development (0.2.201109xx_dev)

    Speed up periodical map unloading by moving beginSave() and endSave() to outer loop in Map::timerUpdate()

Merge: bc847e8cc 0c91d0186

    Merge remote-tracking branch 'queatz/sqlite-map'

    Fix bug in posix file/directory removal wrapper, as pointed out by kahrl

    Fix some texture stuff: remove item_fence.png, use fence.png, remove inexisting cactus.png from texture atlas (replace with nothing because cactus is rare)

    allow specifying a fixed seed in the config file for generating the map (fixed_map_seed)

    Now SAOs will reflect changes to their temporary inventory object

    Also, the temp item wasn't being deleted, might have been a memory leak.

    Now you will only eat 1 item off a stack

    Also, the temp item wasn't being deleted, might have been a memory leak.

    Now you will only eat 1 item off a stack

    Now you will only eat 1 item off a stack

    Cull empty lines...

    Files to database converter

    These numbers were well exceeding 2^32...

    Initial sqlite3 maps.

    * The map will reside in world/map.sqlite

    * It will load from the sectors folder but will not save there

    * The map will reside in world/map.sqlite

    * It will load from the sectors folder but will not save there

    * It will load from the sectors folder but will not save there

    Furnace was crashing stuff again

Merge: 99de37ff9 ad795c9f0

    Merge branch 'master' of /media/Field/Software/minetest-queatz/minetest-sqlite/.. into sqlite-map

    Update to SQLite 3.7.7.1

    * Furnace would say it was overloaded when it had a non-cookable source

    * I didn't understand that expression last fix and now the furnace would burn fuel

    even when it had no source item.

    * I didn't understand that expression last fix and now the furnace would burn fuel

    even when it had no source item.

    even when it had no source item.

Merge: d6d479f94 6415528f9

    Merge remote-tracking branch 'queatz/furnace-fix'

    Updated changelog

    If there was no source item in a furnace it would cause a segmentation fault.

Merge: ba0322f35 cab426ffa

    Merge remote-tracking branch 'kahrl/dissector'

Merge: 1a705523c e278742c5

    Merge remote-tracking branch 'queatz/mmb10'

Merge: 87b9e5467 ef08163c3

    Merge remote-tracking branch 'queatz/furnace-is-not-blackhole'

Merge: 625dac8d8 134e49cc8

    Merge remote-tracking branch 'queatz/furnace-is-not-out-nor-can-rat-escape'

Merge: 00bdfad5f 2e82268a6

    Merge remote-tracking branch 'queatz/privs'

    Merged 2 branches because they relied on each other.

    This one contains these changes from main c55:

    * Adds a function to check if there is room for a specific item

    * Using that, you can now pick up rats if you have a full inventory and a not full rat stack

    * Furnace would cook only 1 item if that item used the last available result slot, now it will continue

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    This one contains these changes from main c55:

    * Adds a function to check if there is room for a specific item

    * Using that, you can now pick up rats if you have a full inventory and a not full rat stack

    * Furnace would cook only 1 item if that item used the last available result slot, now it will continue

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    * Adds a function to check if there is room for a specific item

    * Using that, you can now pick up rats if you have a full inventory and a not full rat stack

    * Furnace would cook only 1 item if that item used the last available result slot, now it will continue

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    * Using that, you can now pick up rats if you have a full inventory and a not full rat stack

    * Furnace would cook only 1 item if that item used the last available result slot, now it will continue

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    * Furnace would cook only 1 item if that item used the last available result slot, now it will continue

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    * Furnace will say it's overloaded

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    * Furnace won't wait until the next step to start on the next item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

     - This caused small fuels to cook slower than meant to

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

     - Also caused furnaces to say they were out of fuel after finishing the last fuel item

    dissector branch: fix for doc/protocol.txt: CONTROLTYPE_DISCO is 3

    dissector branch: fix description of TOCLIENT_PLAYERITEM in clientserver.h

    dissector branch: added wireshark dissector minetest.lua

    Middle mouse click will move 10 items around at a time.

    Don't remove furnace if something is inside it.

    If a user doesn't have build rights, don't allow them to move items to and from their inventory

    The password box in the mainmenu is focused if there is already a name and address filled in

    Lava is now better visible inside water. (a crappy hack)

    Inventory transparency; very loosely based on sapier's commits.

    

    Also contains some commented-out code for testing out different looks

    in the future.

    Also contains some commented-out code for testing out different looks

    in the future.

    in the future.

    if creative mode and player has no build privileges, cannot drop items.

    Fixed water mesh generation acting weird next to sand

    Fix byte count in serialization of "F1000"

    

    Some access violations and segfaults and strange behaviour might have

    been caused by this.

    Some access violations and segfaults and strange behaviour might have

    been caused by this.

    been caused by this.

    Fixed some protocol comment errors in clientserver.h and elsewhere

    

    -- TOCLIENT_OBJECTDATA: peer ID field is missing

    -- TOCLIENT_ACTIVE_OBJECT_REMOVE_ADD: added: init length should be u32, not u16

    -- TOCLIENT_OBJECTDATA: peer ID field is missing

    -- TOCLIENT_ACTIVE_OBJECT_REMOVE_ADD: added: init length should be u32, not u16

    -- TOCLIENT_ACTIVE_OBJECT_REMOVE_ADD: added: init length should be u32, not u16

    Hopefully fix 'dangling water'

    

    If a block has (at least visible) liquids, the block below should also

    be flowed in.

    If a block has (at least visible) liquids, the block below should also

    be flowed in.

    be flowed in.

    Possibly fixed the extremely rare PeerNotFound loop bug.

    

    See explanation in http://2pktfkt.de/irc/minetest-delta/2011-08-22.html

    See explanation in http://2pktfkt.de/irc/minetest-delta/2011-08-22.html

    Update README.txt

Merge: 836e43db6 9c94538fb

    Merge remote-tracking branch 'oblomov/me_cmd'

Merge: 6596e585f 7e610aece

    Merge remote-tracking branch 'oblomov/new_input'

    Change way commands are displayed in chat window

    Introduce hotkey for calling up a command window

    

    This is just a chat window with the / text pre-loaded.

    This is just a chat window with the / text pre-loaded.

    Send KEY_END when (re)creating a text input

    

    This ensures that on creation and when resizing the cursor is at the end

    of the text rather than at the beginnig.

    This ensures that on creation and when resizing the cursor is at the end

    of the text rather than at the beginnig.

    of the text rather than at the beginnig.

    /me command

    Server now supports replies without prefix

    Defines for server command context flags

    Remove distinction between /# and / commands

    

    No need to make the server command syntax more complicated than

    necessary. If the need ever arise, we'll find some other way to

    distinguish the client commands. Also, the /# syntax is deprecated and

    will be made obsolete in time.

    No need to make the server command syntax more complicated than

    necessary. If the need ever arise, we'll find some other way to

    distinguish the client commands. Also, the /# syntax is deprecated and

    will be made obsolete in time.

    necessary. If the need ever arise, we'll find some other way to

    distinguish the client commands. Also, the /# syntax is deprecated and

    will be made obsolete in time.

    distinguish the client commands. Also, the /# syntax is deprecated and

    will be made obsolete in time.

    will be made obsolete in time.

    Overhaul the input system

    

    This allows us to map the keys which are not considered in

    irrlicht's EKEY_CODE system, such as \, [, /, ] etc.

    This allows us to map the keys which are not considered in

    irrlicht's EKEY_CODE system, such as \, [, /, ] etc.

    irrlicht's EKEY_CODE system, such as \, [, /, ] etc.

    Fix typos in key names

    Flowing lava updates lighting

Merge: 23717510c c51564ab5

    Merge remote-tracking branch 'oblomov/liquid_fixes'

Merge: 29c9d3d5f dc4ac0b96

    Merge branch 'lava'

    Optimize for viscosity 1

    Viscous fluids

    Make sure all neighbors of changed fluids are activated

    

    This should fix the remaining cases of fluid not advancing or not

    retreating.

    This should fix the remaining cases of fluid not advancing or not

    retreating.

    retreating.

    Let the liquids flow in the open

    

    No need to curb their spread artificially.

    No need to curb their spread artificially.

    Ensure air neighbors to liquids that can flow are enqueued for transformation

    Ensure param2 is set correctly in transformLiquids

    Use defines for liquid levels

    Implemented MEET_OTHER

    transformLiquid: small optimization and whitespace cleanup

    small fix to transformLiquids

    Fixed liquid mesh generation

    Add lava to creative inventory (hmm, we're shortly running out of creative inventory space)

    Hopefully fixed msvc "'sqrt' : ambiguous call to overloaded function"

    Non-vertex-alpha texture material for lava

    Get rid of makepackage_binary.sh

    

    It's outdated, and it would be better to use cmake's packaging

    capabilities instead, for better cross-platformness.

    It's outdated, and it would be better to use cmake's packaging

    capabilities instead, for better cross-platformness.

    capabilities instead, for better cross-platformness.

    Cleanup root

    

    These scripts should not be in the root but in util/ and in fact

    they are, so let's get rid of these.

    These scripts should not be in the root but in util/ and in fact

    they are, so let's get rid of these.

    they are, so let's get rid of these.

    modified mapgen to generate less lava

    Added #define WATER_ALPHA in content_mapnode.cpp

    tuned lava/universal damage code

    lava!

    Windows.h -> windows.h for cross-mingw build

Merge: 385904d75 94b42a79d

    Merge remote-tracking branch 'speedprog/fixedNotFindingData'

    Let Settings accept a const char* directly

    Fix keycode_to_keyname return value

    Clean up key names handling

    

    Constify keycode and move the static array of localizable names from the

    guiKeyChangeMenu header to the implementation file, changing its name.

    Constify keycode and move the static array of localizable names from the

    guiKeyChangeMenu header to the implementation file, changing its name.

    guiKeyChangeMenu header to the implementation file, changing its name.

    Fix use of && instead of &

    Removed assert if creating texture atlas image fails; cancel creating image instead.

    fixed not finding data dir if installed

    Fixed/extended/modified ban stuff to be good for inclusion

Merge: 3028bbb95 5784c14ab

    Merge remote-tracking branch 'speedprog/banByIp'

    added ipban support

    commands:

    /#ipban <nick>

    /#ipunban <ip>

    commands:

    /#ipban <nick>

    /#ipunban <ip>

    /#ipban <nick>

    /#ipunban <ip>

    /#ipunban <ip>

    Updated .gitignore to ignore vim swap files

    Typo fix

    .gitattributes

    

    Marking *.cpp files as C++ files makes for nicer diffs when using

    --color-words or similar options.

    Marking *.cpp files as C++ files makes for nicer diffs when using

    --color-words or similar options.

    --color-words or similar options.

    Notify other players of wielded item change

    constify inventory item serialization

    Clients inform server on wielded item

    

    This is done with the new TOSERVER_PLAYERITEM message, that informs the

    server on the index of the wielded item.

    This is done with the new TOSERVER_PLAYERITEM message, that informs the

    server on the index of the wielded item.

    server on the index of the wielded item.

    Keep track of player item

    Some inventory const-ification

    Server should use the same eye position as the client

    Refactor player's eye position coding

    

    Collect the player's eye position coding in a Player method, and

    use it in client to pass the eye position information to the game.

    Collect the player's eye position coding in a Player method, and

    use it in client to pass the eye position information to the game.

    use it in client to pass the eye position information to the game.

    Introduce Player::getLightPosition

    

    This is currently only used in the lighting update for remote

    players in client.

    This is currently only used in the lighting update for remote

    players in client.

    players in client.

Merge: 34492ce48 f6ed45fc2

    Merged some FreeBSD fixes

    Proper placement of binary files.

    Gettext fix for *BSD - require special linkage as glibc is not used

    Prevent threadid_t from losing precision when casted on 64bit systems

    Respect base virtual functions' signatures

    Always return from non-void functions

    

    This quiets a warning in Clang.

    This quiets a warning in Clang.

    Keys should be s32, not u32

    

    At least two reasons for this:

    * activeKey is treated as signed (check for sign, assign -1, etc)

    * the ID retrieved from Irrlicht's events are signed

    At least two reasons for this:

    * activeKey is treated as signed (check for sign, assign -1, etc)

    * the ID retrieved from Irrlicht's events are signed

    * activeKey is treated as signed (check for sign, assign -1, etc)

    * the ID retrieved from Irrlicht's events are signed

    * the ID retrieved from Irrlicht's events are signed

    Remove spurious assignment

    InventoryAction is a struct, not a class

    Clang doesn't like -Wno-unused-but-set-variable

    

    The release versions of CMake don't yet properly support flag checking

    in Clang, so we need to exclude it explicitly for the time being.

    The release versions of CMake don't yet properly support flag checking

    in Clang, so we need to exclude it explicitly for the time being.

    in Clang, so we need to exclude it explicitly for the time being.

    Project uses C++, so use CHECK_CXX_COMPILER_FLAG

    

    Although this doesn't change much for our specific case, it can make a

    difference for some flags, so use the appropriate macro.

    Although this doesn't change much for our specific case, it can make a

    difference for some flags, so use the appropriate macro.

    difference for some flags, so use the appropriate macro.

    Fix data paths for FreeBSD

    Fix "integer constant is too large for 'long' type" error

    Check whether -Wno-unused-but-set-variable is supported before using

    it. It seems to only be available on recent (>=4.6) versions of gcc.

    it. It seems to only be available on recent (>=4.6) versions of gcc.

    the zlib error print function now prints to dstream (debug.txt)

    removed broken and old tags and re-added 0.2.20110731_3

    Added tag 0.2.20110731_3 for changeset a519d6832511

Merge: 5f8809e42 dd9909a57

    merged delta and c55

    minetestmapper can be run from any directory

    

    If it doesn't find colors.txt locally, it looks for the one in the

    directory of the script itself.

    If it doesn't find colors.txt locally, it looks for the one in the

    directory of the script itself.

    directory of the script itself.

    Some obvious errors in the new fluid flow management

    MapNode is a struct, not a class

    Some more Italian translations

    fixed some error :/

    changed on string in german translation to fit to gui

    updated po update script to detect wgettext and N_

    update op PO files

    update to german translation

    marked strings as translation

    now translated if set to a button

    now translated if set to a button

    fixed displaying special chars in the keychange menu

    added danish translation made by Frederik Helth

    * Welcome to OMSK.

    * README updated

    * fix for broken water

    Fixed farmesh to such that it was a long time ago.

Merge: bbd8e645a 1d1aec963

    Merge pull request #48 from Oblomov/master

    

    Minor code cleanups (always in the gettext area, but no functional changs)

    Minor code cleanups (always in the gettext area, but no functional changs)

    Use wgettext

    Introduce wgettext

    

    All usages of gettext() are converted to wchars, so let's factor this

    into a single inline.

    All usages of gettext() are converted to wchars, so let's factor this

    into a single inline.

    into a single inline.

    Get rid of unused variables

    * README updated

    added TODO in main.cpp

    * papyrus texture now darker and edgier

    * less clumsy ladder texture, based on rails

Merge: 7ece67727 7bd9e53ae

    Merge pull request #47 from MarkTraceur/master

    

    More better ladders

    More better ladders

    Changing CONTENT_LADDER to be an extended block

    Fixing ladders again

    Fixed a few problems in the ladder update, and changed the speed to account for gravity

    Ladders implemented!

    Added ladders--they don't have any use yet, though

Merge: 831003156 303351de6

    Merge remote-tracking branch 'origin/upstream'

    Added tag 0.2.20110731_3 for changeset b277d01700f6

    updated version in CMakeLists

    Removed tag 0.2.20110731_3

    Added tag 0.2.20110731_3 for changeset c87e28deaabf

    Fixes a bug that made the server to deny non-empty passwords from players connecting the first time.

    Added tag 0.2.20110731_2 for changeset 8ad16fbce9a4

    updated changelog

    Removed tag 0.2.20110731_2

Merge: c01c487c6 54de4afd7

    Merge pull request #44 from SpeedProg/master

    

    last fix was shit, so a fix for the fix -_-

    last fix was shit, so a fix for the fix -_-

    Added tag 0.2.20110731_2 for changeset 4a6cf9491306

    updated version

    Fixed problem of server always receiving an empty password from the client

    last fix was shit but this one works (tested)

    Added tag 0.2.20110731_1 for changeset 705a7e95b871

    Made stricter handling for old clients because now they are not compatible at all.

    Added MaterialItem conversion from old content type namespace to new

    Added tag 0.2.20110731_0 for changeset 06c62112b503

    changelog update and disable motd by default

    Updated CMakeLists, changelog and example config for release

    updated CMakeList.txts a bit

    added windows icon

Merge: f4d753058 2f6e93192

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 185c0bd58 50dc2d811

    Merge pull request #41 from SpeedProg/master

    

    fixe gettext I hope

    fixe gettext I hope

    fixe for msvc broke linux

    added one temporary directory to .hgignore

    added sword textures

    updated example config

    Fixed handling of inventory in creative mode (normal inventory is not trashed anymore), fixed mese pick speed, added some forgotten stuff

Merge: 75816150e 185c0bd58

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 6199252cd 3c0090c0d

    Merge pull request #40 from SpeedProg/master

    

    translated some word to german

    translated some word to german

    german translation update, translated some of the new strings

Merge: 17830c589 c08720bfb

    Merge pull request #39 from SpeedProg/master

    

    fixes for gettext to workaround some bad behaviour of Irrlicht

    fixes for gettext to workaround some bad behaviour of Irrlicht

    this fixes problem with msvc++ and should work on other systems and so on anyway.

    changed one forgotten en_US.UTF-8 to C

    fixed redefinitivon of gettext.h is included more than once

    set some more text to gettext and updated po files

    changed some strings of the german translation to fit in the areas

    set locales to C because en_US not installed on some systems, only UTF-8 version and en_US.UTF-8 does not work.

    fixed displaying "umlauts" (deutsch umlaute) and hopefully other non ASCII chars, too

    * honor environment variables, use utf-8

    * PEP 8 compliance

    - removed old minetestmapper

    * support for content types extension in minetestmapper

    updated version to rc2, rolling out new windows test binary

Merge: 82ea53499 f2051c982

    Merge branch 'upstream/master'

    * README updated

    - compiling with translations works again

    fix to the former

    easier notice on old version

    Added network protocol version number in protocol

Merge: f69123050 dbea511a6

    Merge remote-tracking branch 'origin/upstream'

    Server configuration is now written when "/#setting whatever = whatever" is issued.

    Added message of the day and made it properly configurable using /#setting (not saved to config file yet)

    Made picking items up in creative mode delete them (because they usually are in the inventory already anyway)

    updated pause menu text a bit

    Rats are now eatable. Also made their selection box move smoothly.

    Made rats cookable and made them spawn near trees

    made more things burnable in furnace

    quick fix to it not building with gettext on my visual studio environment

    Removed remaining -delta references

    removed delta README

    fix server build

Merge: ad6b08735 a5a9c9f79

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 71b7d9259 cce210f67

    Merge pull request #36 from Oblomov/master

    

    Some more gettext stuff

    Some more gettext stuff

    Locale dir should be parallel to global data dir

    Read config from gettext.h

    

    Otherwise the USE_GETTEXT define might not be visible.

    Otherwise the USE_GETTEXT define might not be visible.

    Italian translations

    + 24x24 rendering of SVG minetest icon, polished manually to look crisp

    Actually make USE_GETTEXT available in the source

    Two more instances of unhardcoding the project name

Merge: f4a08f7fb e034f8a2a

    Merge pull request #35 from Oblomov/master

    

    some more gettext fixes

    some more gettext fixes

    Sanitize GETTEXT usage macros

    

    Now the user-level option is called ENABLE_GETTEXT, and USE_GETTEXT is

    only set to true if gettext was enabled and found. This simplifies all

    check to USE_GETTEXT only rather than the double checks for it being

    enabled and found.

    Now the user-level option is called ENABLE_GETTEXT, and USE_GETTEXT is

    only set to true if gettext was enabled and found. This simplifies all

    check to USE_GETTEXT only rather than the double checks for it being

    enabled and found.

    only set to true if gettext was enabled and found. This simplifies all

    check to USE_GETTEXT only rather than the double checks for it being

    enabled and found.

    check to USE_GETTEXT only rather than the double checks for it being

    enabled and found.

    enabled and found.

    Bring po update out of cmake again

    

    This solves two issues at once:

    * CMake would delete po files during ‘make clean’ because it thought

      they were autogenerated and not just managed

    * the only gettext tools readily available in Windows are so old they

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    This solves two issues at once:

    * CMake would delete po files during ‘make clean’ because it thought

      they were autogenerated and not just managed

    * the only gettext tools readily available in Windows are so old they

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    * CMake would delete po files during ‘make clean’ because it thought

      they were autogenerated and not just managed

    * the only gettext tools readily available in Windows are so old they

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

      they were autogenerated and not just managed

    * the only gettext tools readily available in Windows are so old they

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    * the only gettext tools readily available in Windows are so old they

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

      don't support options like --package-name

    

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    The change also moves minetest.pot down one level, so we don't need to

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    special case ‘en’ anymore.

    

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    The downside is of course that you need some sane POSIX shell to update

    the po files.

    the po files.

    Refactor gettext init

    

    Put the gettext init code in a macro and define it appropriately

    depending on whether gettext is actually available or not.

    Put the gettext init code in a macro and define it appropriately

    depending on whether gettext is actually available or not.

    depending on whether gettext is actually available or not.

    Lowered default viewing range minimum to such that it allows fairly good framerate in jungles with sucky hardware.

    Almost all computers stick to the minimum with the current farmesh range that someone has set up without asking from me, but farmesh is not used as default anyway so those that use it can raise the lower limit in their configuration as they wish.

    Almost all computers stick to the minimum with the current farmesh range that someone has set up without asking from me, but farmesh is not used as default anyway so those that use it can raise the lower limit in their configuration as they wish.

    Updated the texture atlas a bit

    and now fixed a bug in removing that debug output

    removed a remaining debug print

    Added a mapblock analyzing function for debugging use and fixed remaining mapgen bugs

    changed jungletree/junglegrass content ids to extended range

Merge: 8d84086f3 52ad5944c

    merged fix to decapitated trees; other bugs now exists

    Do not package en translation, since we don't build it

    Gettext domain should match the project name

    

    This partially reverts 023cc0d37776976b4b192b7363f73a5d2debdef6, goes

    back to using PROJECT_NAME for the filename and also uses PROJECT_NAME

    as text domain in the source code.

    This partially reverts 023cc0d37776976b4b192b7363f73a5d2debdef6, goes

    back to using PROJECT_NAME for the filename and also uses PROJECT_NAME

    as text domain in the source code.

    back to using PROJECT_NAME for the filename and also uses PROJECT_NAME

    as text domain in the source code.

    as text domain in the source code.

    Place project name and gettext use in config

    removed unnecessary verbosity from debug output of tile.cpp

Merge: a7daf8e65 f6d9bcc9b

    Merge pull request #34 from SpeedProg/master

    

    Changes to make gettext enabled if it is found

    Changes to make gettext enabled if it is found

    who put pnoise.py in my /?

    made shadows less blue

    updated cmakerules to autodetect if gettext can be used

    fixed error if gettext is disabled

    fixed error if gettext is disabled

    Fixed issue #15: Glass blocks a lot of light

    Fixed #21 Earth under torches oscillates between mud and grass

    Made hotbar a bit smaller

Merge: 96fedb5cb d67cef0eb

    merged jungle and bluish shadows

    removed -delta namings

    converted main.cpp dos linefeeds to unix linefeeds.

    updated main.cpp comments a bit

    changed rat texture to mine

Merge: 90d793f8f 976ec31c1

    merged the content type extension and delta

    extended content-type range

    switched to old transformLiquids, new one is not ready

    switched my textures back

Merge: 3882536d4 7da02e05a

    uh, i guess this now merges the new delta stuff?

Merge: 2b3bc3370 f706644a5

    merged some stuff from upstream while merging delta

    Made dark places tint slightly in blue

    Jungle biome/whatever thing

Merge: 58f612eca 7da02e05a

    Merge branch 'master' of git://github.com/erlehmann/minetest-delta

    * README updated

    * README updated

    * key change menu now saving immediately

    Changing key settings now doesn't require a game restart

Merge: 805ccd449 84c370b1d

    Merge pull request #33 from SpeedProg/master

    

    gettext fix of laguagefile names

    gettext fix of laguagefile names

    change in readme of a lib

    change in readme of a lib

Merge: fb4c3ab4f 7985d746f

    Merge remote-tracking branch 'upstream/master'

Merge: a12229f27 805ccd449

    Merge remote-tracking branch 'upstream/master'

    fixed some problems with filenames of the translations

    fixed some problems with filenames of the translations

    updated some parts which don't really make a problem but are better this way

    updated some parts which don't really make a problem but are better this way

Merge: 0fbb0bcaa f706644a5

    Merge branch 'upstream/master'

Merge: a45f287ae f706644a5

    Merge branch 'upstream/master'

Merge: 21b7a272c 7d9dd352c

    Merge pull request #32 from Oblomov/master

    

    Gettext + misc fixes

    Gettext + misc fixes

Merge: 909075da5 965352287

    Merge pull request #32 from Oblomov/master

    

    Gettext + misc fixes

    Gettext + misc fixes

    Fixed the problem of <=r548 clients fucking up maps on >=r549 servers. Also, already fucked up maps are now loaded correctly.

    Declare USE_GETTEXT option

    Declare USE_GETTEXT option

    fixed problem with displaying special chars

    fixed problem with displaying special chars

    updatepo cmake rule

    

    Get rid of the system-specific updatelocales.sh and introduce an

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    Get rid of the system-specific updatelocales.sh and introduce an

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    filename.

    

    Update po files in the process.

    Update po files in the process.

    updatepo cmake rule

    

    Get rid of the system-specific updatelocales.sh and introduce an

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    Get rid of the system-specific updatelocales.sh and introduce an

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    updatepo cmake rule. po files are also updated before creating the mo

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    files, and we now keep the .pot file (in the po/en directory). To

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    stabilize the po file creation, file contents are sorted by source

    filename.

    

    Update po files in the process.

    filename.

    

    Update po files in the process.

    Update po files in the process.

    added an unit test for the Settings thingy (the python ConfigParser -like thing)

    Static naming of po file

    

    The po file should not be named c55 if we're in ∆. But since it is not

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    The po file should not be named c55 if we're in ∆. But since it is not

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    based on the project name at all, so just call it minetest.po

    Static naming of po file

    

    The po file should not be named c55 if we're in ∆. But since it is not

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    The po file should not be named c55 if we're in ∆. But since it is not

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    exposed at installation time, we don't actually need its name to be

    based on the project name at all, so just call it minetest.po

    based on the project name at all, so just call it minetest.po

    Refactor mo creation/installation

    Refactor mo creation/installation

    Use project name for mo files

    Use project name for mo files

Merge: 5c66664ae 21b7a272c

    Merge remote-tracking branch 'erlehmann/master'

    

    Conflicts (from the introduction of fr translations):

            src/CMakeLists.txt

    Conflicts (from the introduction of fr translations):

            src/CMakeLists.txt

            src/CMakeLists.txt

Merge: 3d53cc2c1 909075da5

    Merge remote-tracking branch 'erlehmann/master'

    

    Conflicts (from the introduction of fr translations):

            src/CMakeLists.txt

    Conflicts (from the introduction of fr translations):

            src/CMakeLists.txt

            src/CMakeLists.txt

    changed some lines to fit the 80chars limit

    changed some lines to fit the 80chars limit

    Fixed small error in mapnode.cpp (didn't cause any harm though)

    Fixed new map generator causing a crash when generating at map limit

    added some TODOs to main.cpp

    * nicer firefly texture

    * nicer firefly texture

Merge: 6505bae41 74ef5b8a4

    Merged minetest-delta a624fe549bc75855a170

    + unknown block is sick

    + unknown block is sick

Merge: cbf2ac5e8 9303283d6

    Merge pull request #29 from cisoun/master

    

    Add french translation.

    Add french translation.

Merge: 5388e8b12 3f4f844ee

    Merge pull request #29 from cisoun/master

    

    Add french translation.

    Add french translation.

    fixed not finding dll for gettext in MSVC

    fixed not finding dll for gettext in MSVC

    Added missing .po fil.e

    Added missing .po fil.e

    Added french translation.

    Added french translation.

    Attempt to fix the big bug. Now server either stops sending map or mapgen starts generating CONTENT_IGNORE.

    * different collision box for fireflies so they now hover above the ground

    * different collision box for fireflies so they now hover above the ground

    Reorganize cmake gettext message output to ease debugging

    Reorganize cmake gettext message output to ease debugging

    Restore "Leave address blank" position

    Restore "Leave address blank" position

    Find correct library for MSVC vs MingW in Winows

    Find correct library for MSVC vs MingW in Winows

    Only install locale files if using gettext

    Only install locale files if using gettext

    Uppercase DEFINED or cmake 2.8.4 complains

    Uppercase DEFINED or cmake 2.8.4 complains

    updated some path because the dlls are mostly under bin not lib

    added explanation why libintl must not belinked under some oses

    added explanation why libintl must not belinked under some oses

    updated some path because the dlls are mostly under bin not lib

    added explanation why libintl must not belinked under some oses

    added explanation why libintl must not belinked under some oses

    Refactor and clean up gettext management

    Refactor and clean up gettext management

    Make gettext optional

    Make gettext optional

    Tweak makefiles to add -delta suffix.

    Tweak makefiles to add -delta suffix.

    Fix win32 MSVC compile. (screw gettext)

    Fix win32 MSVC compile. (screw gettext)

Merge: 8129d16dd 29aae3dcb

    Merge pull request #27 from Oblomov/master

    

    * regression fix for windows build.

    * regression fix for windows build.

Merge: 84684e53e e7beaac6f

    Merge pull request #27 from Oblomov/master

    

    * regression fix for windows build.

    * regression fix for windows build.

    Move package search out of conditional

    

    This unbreaks the Windows build which would otherwise have problems at

    the jthread level.

    This unbreaks the Windows build which would otherwise have problems at

    the jthread level.

    the jthread level.

    Move package search out of conditional

    

    This unbreaks the Windows build which would otherwise have problems at

    the jthread level.

    This unbreaks the Windows build which would otherwise have problems at

    the jthread level.

    the jthread level.

    + fireflies

    + fireflies

    * README updated

    * README updated

Merge: 84b85964f 0f10fc0cd

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 33e80dae7 360a8918d

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: af4b532c9 c6d99fbe0

    Merge pull request #24 from SpeedProg/master

    

    gettext paths problem

    gettext paths problem

Merge: 4f53619a1 4d43a6741

    Merge pull request #24 from SpeedProg/master

    

    gettext paths problem

    gettext paths problem

    fixed problem with wront paths in gettext

    fixed problem with wront paths in gettext

Merge: 69937c342 af4b532c9

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: e5dc58e71 4f53619a1

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 489a7ef32 52df1b598

    Merge pull request #23 from Oblomov/master

    

    Some misc usability patches

    Some misc usability patches

Merge: cef7bb061 3fb5b7a3b

    Merge pull request #23 from Oblomov/master

    

    Some misc usability patches

    Some misc usability patches

    Set the window caption for the initial window too

    Set the window caption for the initial window too

    Check the data path before usage

    

    When not running in place, check if the assumed data path in

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    When not running in place, check if the assumed data path in

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    directory even without the run-in-place flag active.

    Check the data path before usage

    

    When not running in place, check if the assumed data path in

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    When not running in place, check if the assumed data path in

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    ../share/APPNAME exists. If it doesn't exist, fall back to ../data

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    instead. This allows the program to run successfully from the checkout

    directory even without the run-in-place flag active.

    directory even without the run-in-place flag active.

    Use system sqlite3/jthread libs if available

    Use system sqlite3/jthread libs if available

Merge: 9bc701d19 489a7ef32

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 3c630c0d9 cef7bb061

    Merge branch 'master' of github.com:erlehmann/minetest-delta

Merge: 2095b1581 e787e16a8

    Merge pull request #22 from SpeedProg/master

    

    added gettext support

    added gettext support

Merge: d0810b015 a006b828a

    Merge pull request #22 from SpeedProg/master

    

    added gettext support

    added gettext support

    updated german po file for minetest-delta (prior it was for minetest)

    set +x on bashscript

    set +x on bashscript

    updated german po file for minetest-delta (prior it was for minetest)

    set +x on bashscript

    set +x on bashscript

    added gettext support

    german translation file

    and bashscript to update translations

    and bashscript to update translations

    added gettext support

    german translation file

    and bashscript to update translations

    and bashscript to update translations

Merge: 2095b1581 74ef5b8a4

    Merge branch 'upstream/master'

Merge: d0810b015 74ef5b8a4

    Merge branch 'upstream/master'

    * README updated (graphics licensing)

    * README updated (graphics licensing)

    * by popular request, fewer clouds

    * by popular request, fewer clouds

    * README updated

    * README updated

    + minetest application icon

    + minetest application icon

    * initialize liquid_kind properly so compiler does not bitch about it

    * initialize liquid_kind properly so compiler does not bitch about it

    + fake shading for the volumetric clouds

    + fake shading for the volumetric clouds

    + volumetric clouds (thanks teddydestodes)

    + volumetric clouds (thanks teddydestodes)

    final fixes to liquid flow, works now as intended

    final fixes to liquid flow, works now as intended

    fixes to liquid transformation

    fixes to liquid transformation

    fixed refactoring issues // slowed down water flow a bit

    

    * liquid flow no longer does random things when transformed

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    * liquid flow no longer does random things when transformed

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    ce is shortened by 1

    fixed refactoring issues // slowed down water flow a bit

    

    * liquid flow no longer does random things when transformed

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    * liquid flow no longer does random things when transformed

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    * if a flowi

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    ng liquid node doesn't have a solid block as neighbor, its spread distan

    ce is shortened by 1

    ce is shortened by 1

    * refactored liquid transformation code (has some flaws)

    

    Completely rewrote the liquid transformation. The algorithm now exclusively modifies the current node in one iteration. Another change is that MapNode.param2 now stores a bit that tells other nodes if a flowing liquid node flows downwards. This is accomplished by two masks on param2 for the "flow down" bit and the "liquid level" bits.

    

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    Completely rewrote the liquid transformation. The algorithm now exclusively modifies the current node in one iteration. Another change is that MapNode.param2 now stores a bit that tells other nodes if a flowing liquid node flows downwards. This is accomplished by two masks on param2 for the "flow down" bit and the "liquid level" bits.

    

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    * refactored liquid transformation code (has some flaws)

    

    Completely rewrote the liquid transformation. The algorithm now exclusively modifies the current node in one iteration. Another change is that MapNode.param2 now stores a bit that tells other nodes if a flowing liquid node flows downwards. This is accomplished by two masks on param2 for the "flow down" bit and the "liquid level" bits.

    

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    Completely rewrote the liquid transformation. The algorithm now exclusively modifies the current node in one iteration. Another change is that MapNode.param2 now stores a bit that tells other nodes if a flowing liquid node flows downwards. This is accomplished by two masks on param2 for the "flow down" bit and the "liquid level" bits.

    

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    This will be the base of future improvements to the liquid flow. However, in the current state flowing liquid does not always disappear when cut off its source. Be aware that this branch is work in progress.

    * changed GUI to indicate Minetest Δ

    * changed GUI to indicate Minetest Δ

    Hopefully fixed u64 to be the actual 64-bit type on 64-bit architectures. This should fix the compiler error caused by irrlicht on 64-bit fedora defining u64 to be different.

    A small fix to an unlikely situation where the map generator requires a block that hasn't been loaded from disk. Now it is actually loaded from disk in that case.

    * README updated

    * README updated

Merge: 5086bd566 afa2b8714

    Merge remote-tracking branch 'origin/upstream'

Merge: 4d20f1283 afa2b8714

    Merge remote-tracking branch 'origin/upstream'

    Attempt to fix a problem with the factory mappings of objects residing in different source files than the prototype objects that fill them in

    * fix automerge regression

    * fix automerge regression

    * regression fix, clay occurs again now

    * regression fix, clay occurs again now

    * possibly nicer trees

    * possibly nicer trees

Merge: 5146c826b 81535f627

    Merge branch 'upstream/master'

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            data/oerkki1.png

            src/client.cpp

            src/client.cpp

Merge: 4415d95c5 81535f627

    Merge branch 'upstream/master'

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            data/oerkki1.png

            src/client.cpp

            src/client.cpp

    * possibly improved water flow, by flyx86

    

    - When flowing liquid starts to flow down, it stops contributing to its neighboring nodes' liquid level (possibly transforming it back to air)

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - When flowing liquid starts to flow down, it stops contributing to its neighboring nodes' liquid level (possibly transforming it back to air)

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    * possibly improved water flow, by flyx86

    

    - When flowing liquid starts to flow down, it stops contributing to its neighboring nodes' liquid level (possibly transforming it back to air)

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - When flowing liquid starts to flow down, it stops contributing to its neighboring nodes' liquid level (possibly transforming it back to air)

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - Flowing liquid turns into a source if there are at least 2 adjacent liquid source nodes

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    - If a new liquid flow reaches existing flowing liquid, the existing liquid is now updated properly.

    * possible fix for large cubic holes in map

    * possible fix for large cubic holes in map

    * slightly different values for 3d perlin noise

    * slightly different values for 3d perlin noise

    * regression fix, papyrus should appear again now

    * regression fix, papyrus should appear again now

    * README updated

    * README updated

    + farmesh config options

    + farmesh config options

    * amended upstream branch notes

    * amended upstream branch notes

    + notes regarding upstream conversion from mercurial using hg-fast-export

    + notes regarding upstream conversion from mercurial using hg-fast-export

    Added tag 0.2.20110704_0 for changeset 65263ec55caf

    Updated version and changelog

    Removed tag 0.2.20110704_0

    Added tag 0.2.20110704_0 for changeset 25aa2021937f

    initial steps in doing content type extension

    made screen go slightly blue when underwater

    Fixed objects being sometimes not able to be stored statically in a block when block has been unloaded

Merge: 158b054e7 7efe89ff5

    Merge pull request #13 from Bahamada/upstream_merge

    

    Upstream merge

    Upstream merge

Merge: e261cc9e8 13cf5425d

    Merge pull request #13 from Bahamada/upstream_merge

    

    Upstream merge

    Upstream merge

    tried to fix block selection in map rendering a bit

    fixed bug in inventory textures caused from better handling of unknown blocks

    updated minetest.conf.example and changed client_unload_unused_data_timeout default to 600

    better handling of unknown blocks on client

    updated to-do list

    made dtime jitter compare value and fps calculation a bit faster changing

    map unloading is now a whole lot better

    fixed block unloading from memory (a better fix coming next)

    Made the initial loading screen slightly more alive

    added screenshot key F12 (from spongie)

    Added CPT_FACEDIR_SIMPLE calculation, finally, as figured out by spongie

    changed one "if" to "else if" in content_mapblock.cpp

    reorganized stuff

    tuned mapgen

    changed water color in farmesh

    updated noise stuff

    reorganized a lot of stuff and modified mapgen and objects slightly while doing it

    improved player fall damage detection

    backported cactus, papyrus and clay

    backported cactus, papyrus and clay

    small fix

    small fix

Merge: a80025c35 158b054e7

    Merge branch 'master' of https://github.com/erlehmann/minetest-delta.git into upstream_merge

    

    Conflicts:

            .gitignore

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            .gitignore

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

Merge: a80025c35 e261cc9e8

    Merge branch 'master' of https://github.com/erlehmann/minetest-delta.git into upstream_merge

    

    Conflicts:

            .gitignore

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

    Conflicts:

            po/minetest.pot

            po/*/minetest.po

            .gitignore

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            CMakeLists.txt

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            data/heart.png

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/CMakeLists.txt

            src/game.cpp

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/guiMainMenu.cpp

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/inventory.cpp

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/map.cpp

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapblock.cpp

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapnode.cpp

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/mapnode.h

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/materials.cpp

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

            src/server.cpp

    

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

    Signed-off-by: Sebastian Rühl <bahamada_basti@yahoo.de>

    added and commented out some debug output

    even more code refactoring

    more reorganizing of map code

    cleaned map stuff

    moved mapgen stuff around abit

    moved map generator to separate source files

    added minetestmapper in utils/

    mapgen stuff

    added correct data to new images, added comments in main.cpp

    New map generator added (and SQLite, messed up the commits at that time...) (import from temporary git repo)

    Reorganizing stuff (import from temporary git repo)

    disabled farmesh in default settings

    fixed servermain.cpp lacking filesys.h

    path_userdata is now created before potentially creating debug.txt in there

    moved the mac include in porting.cpp out of namespace

    fixed a segfault in case of wrong input from network on the server (reported by spongie)

    uh oh, forgot to add treeprop.png to the repo

    Modified the mesh update thread's sleep time to speed it up (it was way too high)

    lol, i have apparently used python too much...

    added a small php example

    Added endianess to procotol.txt

    Fixed typo in protocol.txt

    updated protocol.txt

    Documentation update

    Hand-picked Mac OSX cursor and bundle path fixes from https://bitbucket.org/toabi/minetest-mac

    Added tag 0.2.20110618_0_dev for changeset dd08a9b5cb84

    Changed MapBlockObjects to be never written anymore. Incremented version number.

    comment update

    farmesh render range is now dynamic

    fixed tree placement in farmesh

    farmesh is now usable.

    modified health bar a bit

    enabled word wrap in chat

    fixed wrong furnace menu layout

    merged Mac OSX build fix from minetest-delta

    removed furnace menu because it is not needed anymore

    separated inventory-related game content to content_inventory.{h,cpp}

    forgot to add mapblock_nodemod.h

    moved inventory menu definition of chest and furnace to content_nodemeta.{h,cpp}

    Created and moved stuff to content_nodemeta.{h,cpp}

    added in-game key shortcuts for toggling free_move and fast_move (default K and J)

    modified iron amount a bit

    Updated comments

    Moved stuff from mapblock{h,cpp} to mapblock_mesh.{h,cpp} and content_mapblock.{h,cpp}

    removed licensecomment.txt

    Moved some mapnode content stuff from mapnode.{h,cpp} and digging property stuff from material.cpp to content_mapnode.{h,cpp}

    hopefully fixed old furnaces taking ridiculous amounts of cpu and halting the server

    Probably fixed the single-MapBlock generator using 1 block lower water height than it should

    + rail block bounding box

    + rail block bounding box

    Added an experimental "far view" thing. Doesn't work exactly like it should and not suitable for real use yet, and might never be.

    * README updated

    * README updated

    + rail

    + rail

    ...and the map part of that

    made server to send map seed for testing

    updated comment in main.cpp

    tried to reduce unnecessary map saving disk i/o a bit

    Messed around with genmap.py. Now supports format version 17.

    updated mapformat.txt a bit

    documentation update (mapformat.txt mainly)

    * README updated

    * README updated

    + bookshelf in minetestmapper, same color as wood

    + bookshelf in minetestmapper, same color as wood

    * point out setInventoryTextureCube() is broken with a FIXME

    * point out setInventoryTextureCube() is broken with a FIXME

    + paper, book, bookshelf

    + paper, book, bookshelf

    * README updated

    * README updated

    + papyrus in minetestmapper

    + papyrus in minetestmapper

    + papyrus

    + papyrus

    * made cactus color darker

    * made cactus color darker

    removed a debug print that would flood a lot in some kind of a timeout

    In a globally installed build, debug.txt is now placed in userdata directory. Needs testing still.

    + check if sectors/sectors2 directories exist before attempting to read them

    + check if sectors/sectors2 directories exist before attempting to read them

    * encoding fix

    * encoding fix

    * tabs to spaces

    * tabs to spaces

    * ignore minetestmapper output

    * ignore minetestmapper output

    + sandstone color value now in minetestmapper

    + sandstone color value now in minetestmapper

    + minetestmapper2, colors modified for Minetest Δ

    + minetestmapper2, colors modified for Minetest Δ

    * README updated

    * README updated

Merge: 96d709dac de36e284a

    Merge pull request #1 from TeddyDesTodes/master

    

    + submenu for key assignment, fast_move and free_move can now be toggled

    + submenu for key assignment, fast_move and free_move can now be toggled

Merge: a75c31143 7dfa3442f

    Merge pull request #1 from TeddyDesTodes/master

    

    + submenu for key assignment, fast_move and free_move can now be toggled

    + submenu for key assignment, fast_move and free_move can now be toggled

    added -Wno-unused-but-set-variable to debug build

Merge: 7cfb71385 7a31ce855

    more merging - hopefully all spare heads are now gone

Merge: ccd3cd218 746861438

    merged an old head into main branch

Merge: a82abbc49 75f3e6845

    merged fence graphic updates another time...

Merge: 87e4c9145 06427e355

    Merged CiaranG's fence graphic updates (ugh, well, it worked, i guess, kind of.) This commit should also get rid of multiple heads on the server.

    Added tag 0.2.20110602_0 for changeset 6f17cd3f6c54

    Removed tag 0.2.20110602_0

    Added tag 0.2.20110602_0 for changeset 96efc17b4cd9

    Fixed the password crash on Windows

Merge: 6434f64ab 96d709dac

    Merge remote-tracking branch 'upstream/master'

Merge: 58bc6f3a1 a75c31143

    Merge remote-tracking branch 'upstream/master'

    added new submenu for key assignment

    configwriting/saving isn't complete and will break your config if you use fancy keys

    configwriting/saving isn't complete and will break your config if you use fancy keys

    added new submenu for key assignment

    configwriting/saving isn't complete and will break your config if you use fancy keys

    configwriting/saving isn't complete and will break your config if you use fancy keys

    * README updated

    * README updated

Merge: 0bcc83a77 2f2f28d39

    Merge pull request #5 from bucket-T/master

    

    MacOSX build support

    MacOSX build support

Merge: 60578e095 28234f6e5

    Merge pull request #5 from bucket-T/master

    

    MacOSX build support

    MacOSX build support

    * README updated

    * README updated

Merge: 4ddf2bc8a 2f2f28d39

    Merge remote-tracking branch 'bucket-t/master'

Merge: 63fe487d9 28234f6e5

    Merge remote-tracking branch 'bucket-t/master'

    MacOSX build support

    MacOSX build support

Merge: 9de57d13b 5f52a622b

    Merge remote-tracking branch 'upstream/master'

Merge: d2b2c7c09 c930a92b7

    Merge remote-tracking branch 'upstream/master'

    * improved fence dimensions (cuboid side lengths now multiples of 2, textures should fit better)

    * improved fence dimensions (cuboid side lengths now multiples of 2, textures should fit better)

    * clay is rarer now

    * clay is rarer now

    + clay and associated items

    + clay and associated items

    + brick

    + brick

    * menulogo now shows minetest delta

    * menulogo now shows minetest delta

    Reduced server CPU usage on NodeMetadata step()s. Also furnace now cooks while no players are near it.

    Slightly better texture coordinates for fences

    Updated licenses of CiaranG's contributions to be in line with the new contribution policy and added a TODO note to server.cpp

    + fence inventory icon

    + fence inventory icon

    * improved fence dimensions (cuboid side lengths now multiples of 2, textures should fit better)

    * improved fence dimensions (cuboid side lengths now multiples of 2, textures should fit better)

    forgot to add profiler to servermain.cpp

    updated version

    auth stuff is now saved only when modified

    removed some debug prints

    ...and added support for simple time usage profiling in the last one.

    ...and added support for simple time usage profiling in the last one.

    Reduced the CPU usage of the sent block selector algorithm

    Ability to set texture coordinates on a generated cuboid (for fences)

    

    Note: can't test this properly yet - may be fixes to follow

    

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    Note: can't test this properly yet - may be fixes to follow

    

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    + cactii

    + cactii

    Added tag 0.2.20110529_2 for changeset cf6dd618ef0b

    

    --HG--

    extra : rebase_source : 762df9f579bc0ba917986f68ac459fa89fcce794

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 762df9f579bc0ba917986f68ac459fa89fcce794

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : cf6dd618ef0b7514c81ae87749733b5a328fc763

    hopefully fixed the privilege problems

    

    --HG--

    extra : rebase_source : 9826d20176134a53ff232816a10407465d8c0f50

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 9826d20176134a53ff232816a10407465d8c0f50

    Added tag 0.2.20110529_1 for changeset 6fa0a8b40406

    

    --HG--

    extra : rebase_source : 5f94fbc4e2421ca49aaade4add869761a9c14a92

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 5f94fbc4e2421ca49aaade4add869761a9c14a92

    version

    

    --HG--

    extra : rebase_source : 6fa0a8b40406aa567f8fa84b5e2045a7e3762c1d

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 6fa0a8b40406aa567f8fa84b5e2045a7e3762c1d

    Added tag 0.2.20110529_0 for changeset 9b05d4bfee93

    

    --HG--

    extra : rebase_source : 44c8310e8572df82800028004f9dfdf6785f90bc

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 44c8310e8572df82800028004f9dfdf6785f90bc

    changed version number to 0.2.20110529_0

    

    --HG--

    extra : rebase_source : 9b05d4bfee9312aef4182fa6f63b4237368cec34

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 9b05d4bfee9312aef4182fa6f63b4237368cec34

    updated comments

    

    --HG--

    extra : rebase_source : bb7c083b9ab2989d90f41255b85e9e3edaf578ef

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : bb7c083b9ab2989d90f41255b85e9e3edaf578ef

    tuned grass growth rate

    

    --HG--

    extra : rebase_source : 8ad4d13fc7ab1088ebd18cf968d912949aab8eae

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 8ad4d13fc7ab1088ebd18cf968d912949aab8eae

    invert_mouse config option

    

    --HG--

    extra : rebase_source : 2695ad71185244cefbcf6e3e28ba1ab5e54c882f

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 2695ad71185244cefbcf6e3e28ba1ab5e54c882f

    player passwords and privileges in world/auth.txt

    

    --HG--

    extra : rebase_source : 7260636295d9068fbeeddf4143c89f2b8a91446c

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 7260636295d9068fbeeddf4143c89f2b8a91446c

    + .gitignore

    + .gitignore

    fast_move and free_move can now be toggled

    fast_move and free_move can now be toggled

    + .gitignore

    + .gitignore

    + README in main directory

    + README in main directory

    * better heart icon

    * better heart icon

    * better glass graphics

    * better glass graphics

    * better rat graphics

    * better rat graphics

    * enemies are now omsk birds

    * enemies are now omsk birds

    * better player graphics

    * better player graphics

    + sandstone

    + sandstone

    A very poor (but better than nothing) inventory icon for fences

    when pause menu is activated, move mouse cursor on top of the disconnect button, for convenience.

Merge: 0c5f58036 c5e583e05

    Merged CiaranG's fence and fixed two things

    a work-in-progress map modified callback interface (committing because i want to merge the fence stuff)

    Added a check that avoids server crash (unhandled exception) when map generation is attempted near limit

    Added fences (but still needs an icon or something to display in inventory)

    Added 'shout' player privilege

    Allow default privileges for new players to be set in the server config

Merge: 4a6b9a6ac a8a327147

    merged password change menu

    Some work-in-progress stuff and many comment updates

    Added the ability to change your password (via pause menu)

    

    --HG--

    extra : rebase_source : e8ec407f60711d42d33be4811b2880088f617b5b

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : e8ec407f60711d42d33be4811b2880088f617b5b

    mud placed in sunlight no longer instantly turns to grass; also tuned transforming speed a bit (will be made a lot longer when testing is complete)

    Preliminary "active block" stuff + set up test code to grow grass.

    Fixed a small memory leak in ServerEnvironment and cleaned the code a bit

    fixed a small memory leak in game.cpp

    fixed a small memory leak in mapnode.cpp

    updated readme a bit

    added a delay to menu loop

    Cleaned networking code a bit (had this one on the to-do list for like 4 months already)

    fix in readme

    some documentation updates

    and the changelog

    All textures are are now searched first from the directory specified by the texture_path setting.

    updated changelog

Merge: 73a18b927 52d857cf1

    Merge: New map directory structure and player passwords

    Passwords - a few corrections to the previous commit

    Passwords - password entry at main menu, stored and checked by server

    change default sneak key from RSHIFT to LSHIFT

    Moved the temporary mapgen test files and added a modified map.cpp too... These are probably useful in the next mapgen update and shouldn't be lost.

    

    --HG--

    rename : src/noise.cpp.new => misc/noise.cpp

    rename : src/noise.h.new => misc/noise.h

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : src/noise.cpp.new => misc/noise.cpp

    rename : src/noise.h.new => misc/noise.h

    rename : src/noise.h.new => misc/noise.h

    Add (possibly non-compatible) work-in-progress noise.{h,cpp} so that they won't be accidentally lost. These are useful for upcoming mapgen updates.

    add recent major changes to changelog

    Don't say 'Creating server and client' if the server is remote, so not being created

    put the wstring stoi too in the ignore-on-vc2010 #if

    (hopefully) fixed stoi/stof compile problems on vc2010

    small comment update

    New map directory structure that avoids map size being limited by filesystem

    Added libIrrlicht.dll.a to searched library names for non-MSVC windows

Merge: 07ff1da6a f1bdc6b18

    merged fix to readlink ignored return value warning

Merge: 5624dac3b 29932d4bd

    merged CiaranG's stuff again: auto-admin powers to local user, DSTACK macro -Wformat warnings

    Get rid of ignored return value warning

    Get rid of all the string format warnings caused by the DSTACK macro

    added -Wno-unused-but-set-variable, which hides a new warning in gcc 4.6 which only slows down development with no effect on security or anything.

    Restored the auto-admin powers of the local user (via name= in the config)

    

    --HG--

    extra : rebase_source : a35aa0d978990c28fa4fc158ce47d1f4aa967c04

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : a35aa0d978990c28fa4fc158ce47d1f4aa967c04

    Fixed two compiler warnings

Merge: 1c3a85fa5 b3268ff38

    merged CiaranG's changes (player privileges)

    Server commands without classes

    Privileges to/from string conversion functions standalone, not static members

    Better synchronisation of build/mine attempts when the player isn't allowed to

    Allow "all" to be specified in player config file for privileges

    Improved server commands and added player permissions.

    

    --HG--

    extra : rebase_source : 178fe08f10b7de3ebaba088bd24faad795114216

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    extra : rebase_source : 178fe08f10b7de3ebaba088bd24faad795114216

    fixed an "unused variable" warning

    added missing #ifndef KEYCODE_HEADER to keycode.h

    removed a leftover debug print

    removed unnecessary comment

    Added key configuration in the configuration file.

Merge: 8c3b4fed1 2c4eb198c

    merged CiaranG's changes: the glass block

    Added .hgignore

    Added glass texture (poor artwork skills, apologies in advance)

    Added glass, with rendering and furnace support.

    Removed a single outdated comment in client.cpp

    Fixed viewing range stuff a bit (now it works better with very low ranges)

    Fixed a temporary solution of server shutting down to an assert(0) when a too large block metadata is sent to an old client

    Hopefully fixed the bug of huge mineral deposits rarely in seafloor sand

    comment update

    random comment updates

    added cobblestone to the texture atlas

    changelog update

    made proper skyboxes for dawn/evening and night

    Tweaked clouds a bit

    updated changelog

    added simple skybox

    added clouds

    didn't actually change everything, just re-saved the grass texture.

    Maybe fixed the flood of "WARNING: StaticObjectList::remove(): id=13 not found" style debug messages on the server when a player has quit.

    Changed a bit of the code that is and should still be commented out.

    forgot to change one thing back

    tested out and commented out some new stuff for the terrain generator, to be used in the future.

    A small fix to unnecessary saving of map metadata

    Optimized map saving and sending (server-side)

    Set oerkki1 to not be drawn in completely dark

    Added /#time <int> command to server for changing the time of day

    fix to the previous commit

    server to print version in chat

    Tuned polygon generation to sort the triangles for nicer gradients

    ...Now the tesselation should actually work

    Optimized smooth lighting calculation code

    Added tag 20110424_0 for changeset 10be2b71f965

    updated menu a bit, and some other small fixes

    cleaned the smooth lighting code a bit

    disable tiling of textures only if smooth lighting is used

    Added a setting for disabling smooth lighting. Updated changelog.

    Added a simple software "ambient occlusion" effect, like minecraft's "smooth lighting"

    removed /usr prefix from install paths

    Made the main menu a bit more unique looking

    updated changelog

    changed version for making a test binary

    fix to the previous commit

    tuned error reporting a bit

    port to be not set to 0 from configuration

    Code refactoring; split half of main.cpp to game.cpp.

    cleaning up main.cpp a bit

    fixed flowing water lighting when it is below a solid block

    Updated to-do list and added the give_initial_stuff setting for testing

    Removed IrrlichtWrapper

    set client to not show hp if server doesn't support it

    Some work-in-progress in hp and mobs and a frightening amount of random fixes.

    item drop multiplication fix

    Menu will now ignore an invalid port or the port 0.

    fixed port setting not being loaded from configuration file for client

    fixing

    Fixed some problems with crafting and inventory

    updated example map generator python script

    support for format 0 and 1 maps

    Added installing build-essential to build instructions and modified the main.cpp notes a bit

    fixed warnings reported by cppcheck

    Fixed error reported by cppcheck:

    [./server.cpp:1327]: (error) Possible null pointer dereference: obj - otherwise it is redundant to check if obj is null at line 1332

    [./server.cpp:1327]: (error) Possible null pointer dereference: obj - otherwise it is redundant to check if obj is null at line 1332

    fixed problem with vc++ build crashing at startup

    hopefully fixed a bit more

    improved old map support

    added ignoring of map_meta.txt to better support old maps

    updated changelog and version

    fixed the object update interval thingy

    changed server to do object management at longer intervals (0.5s)

    Made environment to not consider disconnected players when dealing with ActiveObjects

    better support for old maps

    missing include for server build

    added missing file

    Map generation is now properly threaded and doesn't block block placement and other stuff.

    a commit before starting to reorganize the map loading/generation logic

    new-style rats are now generated in the map

    fixed a bit

    implemented rats in new system to verify that it works

    items now fall by gravity... also some other random updating

    new object system

    added libgl1-mesa-dev to dependencies

    set GUIInventoryMenu to be scaled according to the height of the window (not width)

    Some progress on transitioning from MapBlockObject to ActiveObject.

    stone shovel now needs cobble, not stone.

    still modified version!

    Fixed wrong version number

    cleaning notes and stuff

    Changed version number according to a new versioning scheme.

    updated changelog

    Server: Only send node removal/addition to client if client's player is near it. Otherwise set the modified blocks unsent.

    Made mesh update on node removal asynchronous on client, to reduce frametime spikes

    Made mesh update on node addition asynchronous on client, to reduce frametime spikes

    fixed the bug of disabled removal of empty chests

    changelog update

    changelog update

    Incremented version to 0.0.2.

    Furnace is now usable. Added more tools.

    

    --HG--

    rename : data/tool_stpick.png => data/tool_stonepick.png

    rename : data/tool_wpick.png => data/tool_woodpick.png

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : data/tool_stpick.png => data/tool_stonepick.png

    rename : data/tool_wpick.png => data/tool_woodpick.png

    rename : data/tool_wpick.png => data/tool_woodpick.png

    forgot the furnace menu files!

    A more robust format for node metadata

    initial workings of the furnace

    updated changelog a bit

    changed node metadata format to better accomodate future needs and problems

    Fixed chest contents not immediately updating to all players

    Modified windows build parameters a bit to make it build

    removed reference to script directory in cmake install

    Chests work now!

    initial chest metadata

    now the server builds

    still a missing file

    forgot some files

    fully implemented the sign with the new framework

    Node metadata framework

    Made a proper queued thread to client for handling some block mesh updates. Also made client mutex-free to allow easier adding of new stuff.

    Modified block mesh generation to have clearer input and output. Instead of being a messy object oriented cludge, it now is a messy cludge with separate parameters.

    commit before some more radical changes

    copied draft of updateNodeMeshes from backup

    Removed lua stuff

    Revert mapgen to best working version (2)

    reverted mud to old texture

    tuned water texture and removed two debug prints from server

    Mapgen is better now. Not a lot, but a bit!

    commit before some radical changes

    mapgen work-in-progress

    mapgen tweaking

    tweaked mapgen

    fixed server sending wrong position of node removal

    tweaked mapgen

    added trees (very glitchy) and changed grass texture

    A third try on terrain generation. No trees yet.

    changed grass texture to jogge's

    modified grass texture

    fixed 3d noise and made 2d noise faster

    3d noise stuff

    fixed a possible infinite loop in ClientEnvironment (dtime counter getting so small that it doesn't increment the value)

    modified the build system of lua to a more minimal one

    fixed a path in build system's packaging part

    updated scripting api a bit

    

    --HG--

    rename : data/luaobjects/test/client.lua => data/scripts/objects/test/client.lua

    rename : data/luaobjects/test/server.lua => data/scripts/objects/test/server.lua

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : data/luaobjects/test/client.lua => data/scripts/objects/test/client.lua

    rename : data/luaobjects/test/server.lua => data/scripts/objects/test/server.lua

    rename : data/luaobjects/test/server.lua => data/scripts/objects/test/server.lua

    mainly work on object scripting api

    removed an old comment

    Fixed insufficient error handling in narrow_to_wide, which caused a crash if the path of the userdata directory contained special characters that were not included in the used charset (which is used because of the font)

    some tidying

    preliminary lua scripting framework for objects

    Temporary commit; lots of test code and stuff

    video backend selection

    random code cleaning, shouldn't affect anything

    Set ambient light in inventory cube generation

    updated changelog

    removed duplicate "bmp"

    Better texture handling. Textures are not added to atlas if they are big, and atlas is not further made after it is full.

    Debug stacks will now be printed on Ctrl-C. Also client properly quits on Ctrl-C.

    fixed invalid block loading (the action is to generate a new one)

    small fixes: crack texture, server build on windows, configuration file example, adding config file example to install

    forgot some test code in...

    Hopefully fixed some of the errors in cmake's finding of irrlicht

    fixed slight error in server build

    updated changelog

    CMake working nicely on Windows, at least with MSVC. "Compiling on windows" section in README.txt updated.

    might work good on cmake+msvc now

    still a little fix!

    Fix for windows

    Ctrl+C handling on POSIX, some commands for server and other tweaking

    mud gets now grass onto it when placed into sunlight. also removed three old files

    smgr->drop() is now used in tile.cpp

    server now won't crash when it is tries to generate blocks that are not inside MAP_GENERATION_LIMIT

    fixed CMakeLists.txt syntax (removed additional ,)

    Added tag 110214175330 for changeset 20c49c98c92a

    changelog update

    new hotbar, more minecraft-like

    Some fiddling around with fog... not much changed

    removed useless SMaterial parameter from mapblock

    sneaking bug fixing

    cube inventory texture rendering thing (not good yet)

    New way of determining the outcome of digging

    disabled jumping in sneak mode if far away from the edge because it can drop the player

    fixed bug in sneaking

    players to not be saved when map saving is disabled (due to some error)

    added sneaking/crouching and changelog

    tuned fog distance a bit

    mapgen parameter tweaking

    changed sky color and made new style leaves a bit more bright

    Added tag 110212200513 for changeset 23880c78e40c

    hopefully a fix for the majority of the windows 7 problems - thanks to zerochen

    Use random-generated fallback textures when real textures are not found

    some fixes to make compiling on some bsd easier

    Added tag 110211211322 for changeset e3c3c8e27bbc

    tiny fix

    pauseMenu text change

    disabled work wrap to show every line of chat in any case

    more stuff...

    now it works nicely

    fully working i guess

    new texture stuff quite working

    fixes toward mingw compatibility

    some texture stuff

    work-in-progress texture atlas optimization

    uh... accidentally left directX as the default in main.cpp

    local game connects to 127.0.0.1 instead of localhost (windows returns an ipv6 address sometimes which is not supported)

    made it to work with my windows compiler

    bug-fixin'

    mapgen tweaking

    added noise.*

    mapgen stuff

    added sand to map generator

    nicer looking water

    all kinds of tweaking and fixing

    water drawing glitch fix

    a little backwards compatibility with coal

    added temporary backwards compatibility to player inventory

    some generation-time mud flow tweaking

    some tweaking

    more tweaking

    Map generator tweaking. Still doesn't resume from save properly.

    end-of-day.

    tweaking mapgenv2 settings for maximum awesomeness.

    one line of cleaning server code

    changed default minimum viewing range to a bit lower

    This map generator is starting to look pretty good now... also, disabled loading player position from disk because map is regenerated always.

    Hopefully fixed the problem of IRRLICHT_SOURCE_DIR being not considered when a local version of irrlicht is found.

    partly working chunk-based map generator (doesn't save properly, spawn is pretty random)

    map generation framework under development... not quite operational at this point.

    Commented out some debug output of class Settings

    Fixed MBOItem inventory images

    Commented out some debug output about saving players on server.

    server builds now!

    server might build now

    Now texture handling is fast. Also now players are saved on disk.

    backing up some stuff

    comments

    should work now

    Little fixes

    Reworked texture, material, mineral and whatever handling

    Map deletion button

    removed alternative name "pressure" from param2

    Tweaking around

    Fixed a bug of server not reloading unloaded blocks when player builds or digs on them.

    Faster lighting at map generation time

    forgot old water unit tests

    commented out old water stuff

    updated grass_side.png to binary package creation script

    Mainly some texture tweaking

    small fixes here and there

    todo-list update

    OMG! Main Menu!

    tidyed README typos a bit

    Documentation updates.

    oops... blew. now?

    Tried to fix install directory problem on linux... Let's hope this doesn't blow it all.

    made old build system to work too. the cmake one doesn't make working binaries for some computers.

    

    --HG--

    rename : src/config.h.in => src/cmake_config.h.in

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : src/config.h.in => src/cmake_config.h.in

    now it works!

    tinkering

    fixed erroneus handling of many players with no peer existing at same time

    fixed erroneus handling of many players with no peer existing at same time

    configuration updates; making to build on msvc

    minecraft-style water done (but no texture animation or sound)

    old water removed, some fixes here and there

    commit before messing with water

    fine-tuning of map generator and server and stuff.

    Initial commit of mapgen v.2. Lacks configuration and saving to disk.

    backing up working heightmap.{h,cpp}

    generate-time lighting optimization

    just backuppin' a working mapblock.cpp

    Players are left on server while server is running. No passwords yet.

    tweaking around, including mapgen, player speed in water, settings

    fixed data path in porting.cpp for normal linux builds to get data from /binary/dir/../share/APPNAME

    random build system tweaking

    Mainly small build system fixes

    Lots of small stuff

    continued.

    Fixed (maybe) segfault if font is not found

    more linker parameters

    Fixed some missing linking to libraries

    doc updates; CMake works reasonably well now.

    forgot config.h.in

    CMake stuff works now on linux and windows... and should be possible to make to work on OS X.

    Made dungeons a bit rarer

    CMake working on Linux (not on windows)

    

    --HG--

    rename : Makefile => Makefile.bak

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : Makefile => Makefile.bak

    Added tag 110107195706-exp for changeset 69547bd6be42

    Fixed dedicated server build

    Added a more flexible path system (and fixed some minor stuff)

    removing unused code and comments

    updated main.cpp TODO comments

    removed Client::isFetchingBlocks

    removed boost support from filesys.cpp; default to posix

    possibly fixed broken crack textures on some machines

    tuned expired mesh updating while drawing a bit

    A bit longer day and a bit shorter night. Client-side.

    oops, forgot some test code in

    better debug output in segfaults and stack overflows in windows

    better grass generation (integration to sunlight propagation algorithms)

    working good

    drawing range updater update and myrand() (but not usage of it)

    new viewing range updater algorithm

    main.cpp before viewing range stuff redoing

    some... stuff. dunno. 8-)

    better caves

    tinkering around

    vc++ project update

    missing files

    more tinkering around

    some tinkering around

    slight map generation bugs

    builds on both platforms

    minecraft-like crafting

    slight readme update

    disconnect method to connection to be used instead of just timing out

    ProgressBarTextureMod

    files

    small segfault bug fix

    base stuff for item->object conversion

    changes to handing of digging (non backwards-compatible i guess)

    little tinkering

    work-in-progress gui system updating + some settings system updating

    redoing gui stuff

    fixed crack animation timing in client

    a mutex added to TempMods which hopefully fixes rare segfaults on client

    changed default time speed

    added fog to players

    updated example config

    fixed crafting bug

    server starting on port 0 on invalid settings

    crafting system!

    just savin'

    missing files

    some work-in-progress

    organizing stuff.

    Cracking blocks while digging

    added some missing files

    framework for modifying textures

    some tinkering with gui. removed updating of configuration file at end

    working time-of-day sending from server to client

    added dedicated server build without irrlicht

    day/night working client side

    before daynight mesh cache

    before adding day/night lighting

    

    --HG--

    rename : data/light.png => data/cloud.png

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : data/light.png => data/cloud.png

    settings manager: better default setting handling and updating config file and command line parsing

    tinkering around

    pausemenu stuff

    pause menu added

    little fixes

    Added tag working for changeset c37bcfd89dd6

    removed bin/zlibwapi.dll

    added some missing files

    better graphics, zlib to work on vc++

    grass edges workin'

    in before messing with face drawing orientation

    commit before content-tile separation

    fixes for vc++

    random stuff and different node lighting

    added images

    working nicely

    starting to separate "material" to "content" and "tile"

    removed accidental double flowWater

    commit before some radicallish changes to water behavior

    some work-in-progress water stuff

    better water

    doc update

    remove bin/Irrlicht.dll

    test

    license stuff

    

    --HG--

    rename : src/licensecomment.txt => licensecomment.txt

    --HG--

    extra : rebase_source : e2d41621018f886d340c7847b29240042d4412ac

    rename : src/licensecomment.txt => licensecomment.txt

    license stuff (more to come)

    default setting change, random tinkering

    Windows bug fixes

    plant amount fix and ravine amount setting

    fixed face updating slowness bug

    reversed meshbuffer cache

    meshbuffer cache test. No much speed improvement.

    - added map generating script

    - dropped support for versions older than 2 because of lighting support

    - dropped support for versions older than 2 because of lighting support

    constant size for array for vc

    vokselijuttu lisätty

    sitä sun tätä tekeillä, toimii kivasti

    block send priority queue

    Working version before block send priorization update

    Initial files
